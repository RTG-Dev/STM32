
LEDS_BTN_Poling.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d28  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08004ef8  08004ef8  00014ef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004fb4  08004fb4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004fb4  08004fb4  00014fb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004fbc  08004fbc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004fbc  08004fbc  00014fbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004fc0  08004fc0  00014fc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004fc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004fc  20000070  08005034  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000056c  08005034  0002056c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f34d  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000021cd  00000000  00000000  0002f3ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c20  00000000  00000000  000315c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b08  00000000  00000000  000321e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00026bc0  00000000  00000000  00032ce8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000aa3e  00000000  00000000  000598a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ee004  00000000  00000000  000642e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001522ea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000387c  00000000  00000000  00152368  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004ee0 	.word	0x08004ee0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08004ee0 	.word	0x08004ee0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005b4:	2003      	movs	r0, #3
 80005b6:	f000 f92d 	bl	8000814 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005ba:	2000      	movs	r0, #0
 80005bc:	f000 f806 	bl	80005cc <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80005c0:	f003 fad4 	bl	8003b6c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80005c4:	2300      	movs	r3, #0
}
 80005c6:	4618      	mov	r0, r3
 80005c8:	bd80      	pop	{r7, pc}
	...

080005cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005d4:	4b12      	ldr	r3, [pc, #72]	; (8000620 <HAL_InitTick+0x54>)
 80005d6:	681a      	ldr	r2, [r3, #0]
 80005d8:	4b12      	ldr	r3, [pc, #72]	; (8000624 <HAL_InitTick+0x58>)
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	4619      	mov	r1, r3
 80005de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80005e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80005ea:	4618      	mov	r0, r3
 80005ec:	f000 f939 	bl	8000862 <HAL_SYSTICK_Config>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005f6:	2301      	movs	r3, #1
 80005f8:	e00e      	b.n	8000618 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	2b0f      	cmp	r3, #15
 80005fe:	d80a      	bhi.n	8000616 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000600:	2200      	movs	r2, #0
 8000602:	6879      	ldr	r1, [r7, #4]
 8000604:	f04f 30ff 	mov.w	r0, #4294967295
 8000608:	f000 f90f 	bl	800082a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800060c:	4a06      	ldr	r2, [pc, #24]	; (8000628 <HAL_InitTick+0x5c>)
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000612:	2300      	movs	r3, #0
 8000614:	e000      	b.n	8000618 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000616:	2301      	movs	r3, #1
}
 8000618:	4618      	mov	r0, r3
 800061a:	3708      	adds	r7, #8
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	20000008 	.word	0x20000008
 8000624:	20000004 	.word	0x20000004
 8000628:	20000000 	.word	0x20000000

0800062c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000630:	4b06      	ldr	r3, [pc, #24]	; (800064c <HAL_IncTick+0x20>)
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	461a      	mov	r2, r3
 8000636:	4b06      	ldr	r3, [pc, #24]	; (8000650 <HAL_IncTick+0x24>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	4413      	add	r3, r2
 800063c:	4a04      	ldr	r2, [pc, #16]	; (8000650 <HAL_IncTick+0x24>)
 800063e:	6013      	str	r3, [r2, #0]
}
 8000640:	bf00      	nop
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	20000004 	.word	0x20000004
 8000650:	20000098 	.word	0x20000098

08000654 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
  return uwTick;
 8000658:	4b03      	ldr	r3, [pc, #12]	; (8000668 <HAL_GetTick+0x14>)
 800065a:	681b      	ldr	r3, [r3, #0]
}
 800065c:	4618      	mov	r0, r3
 800065e:	46bd      	mov	sp, r7
 8000660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop
 8000668:	20000098 	.word	0x20000098

0800066c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b084      	sub	sp, #16
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000674:	f7ff ffee 	bl	8000654 <HAL_GetTick>
 8000678:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000684:	d005      	beq.n	8000692 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000686:	4b09      	ldr	r3, [pc, #36]	; (80006ac <HAL_Delay+0x40>)
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	461a      	mov	r2, r3
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	4413      	add	r3, r2
 8000690:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000692:	bf00      	nop
 8000694:	f7ff ffde 	bl	8000654 <HAL_GetTick>
 8000698:	4602      	mov	r2, r0
 800069a:	68bb      	ldr	r3, [r7, #8]
 800069c:	1ad3      	subs	r3, r2, r3
 800069e:	68fa      	ldr	r2, [r7, #12]
 80006a0:	429a      	cmp	r2, r3
 80006a2:	d8f7      	bhi.n	8000694 <HAL_Delay+0x28>
  {
  }
}
 80006a4:	bf00      	nop
 80006a6:	3710      	adds	r7, #16
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	20000004 	.word	0x20000004

080006b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006b0:	b480      	push	{r7}
 80006b2:	b085      	sub	sp, #20
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	f003 0307 	and.w	r3, r3, #7
 80006be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006c0:	4b0b      	ldr	r3, [pc, #44]	; (80006f0 <__NVIC_SetPriorityGrouping+0x40>)
 80006c2:	68db      	ldr	r3, [r3, #12]
 80006c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006c6:	68ba      	ldr	r2, [r7, #8]
 80006c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006cc:	4013      	ands	r3, r2
 80006ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006d4:	68bb      	ldr	r3, [r7, #8]
 80006d6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80006d8:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <__NVIC_SetPriorityGrouping+0x44>)
 80006da:	4313      	orrs	r3, r2
 80006dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006de:	4a04      	ldr	r2, [pc, #16]	; (80006f0 <__NVIC_SetPriorityGrouping+0x40>)
 80006e0:	68bb      	ldr	r3, [r7, #8]
 80006e2:	60d3      	str	r3, [r2, #12]
}
 80006e4:	bf00      	nop
 80006e6:	3714      	adds	r7, #20
 80006e8:	46bd      	mov	sp, r7
 80006ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ee:	4770      	bx	lr
 80006f0:	e000ed00 	.word	0xe000ed00
 80006f4:	05fa0000 	.word	0x05fa0000

080006f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006fc:	4b04      	ldr	r3, [pc, #16]	; (8000710 <__NVIC_GetPriorityGrouping+0x18>)
 80006fe:	68db      	ldr	r3, [r3, #12]
 8000700:	0a1b      	lsrs	r3, r3, #8
 8000702:	f003 0307 	and.w	r3, r3, #7
}
 8000706:	4618      	mov	r0, r3
 8000708:	46bd      	mov	sp, r7
 800070a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070e:	4770      	bx	lr
 8000710:	e000ed00 	.word	0xe000ed00

08000714 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000714:	b480      	push	{r7}
 8000716:	b083      	sub	sp, #12
 8000718:	af00      	add	r7, sp, #0
 800071a:	4603      	mov	r3, r0
 800071c:	6039      	str	r1, [r7, #0]
 800071e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000720:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000724:	2b00      	cmp	r3, #0
 8000726:	db0a      	blt.n	800073e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000728:	683b      	ldr	r3, [r7, #0]
 800072a:	b2da      	uxtb	r2, r3
 800072c:	490c      	ldr	r1, [pc, #48]	; (8000760 <__NVIC_SetPriority+0x4c>)
 800072e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000732:	0112      	lsls	r2, r2, #4
 8000734:	b2d2      	uxtb	r2, r2
 8000736:	440b      	add	r3, r1
 8000738:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800073c:	e00a      	b.n	8000754 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800073e:	683b      	ldr	r3, [r7, #0]
 8000740:	b2da      	uxtb	r2, r3
 8000742:	4908      	ldr	r1, [pc, #32]	; (8000764 <__NVIC_SetPriority+0x50>)
 8000744:	79fb      	ldrb	r3, [r7, #7]
 8000746:	f003 030f 	and.w	r3, r3, #15
 800074a:	3b04      	subs	r3, #4
 800074c:	0112      	lsls	r2, r2, #4
 800074e:	b2d2      	uxtb	r2, r2
 8000750:	440b      	add	r3, r1
 8000752:	761a      	strb	r2, [r3, #24]
}
 8000754:	bf00      	nop
 8000756:	370c      	adds	r7, #12
 8000758:	46bd      	mov	sp, r7
 800075a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075e:	4770      	bx	lr
 8000760:	e000e100 	.word	0xe000e100
 8000764:	e000ed00 	.word	0xe000ed00

08000768 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000768:	b480      	push	{r7}
 800076a:	b089      	sub	sp, #36	; 0x24
 800076c:	af00      	add	r7, sp, #0
 800076e:	60f8      	str	r0, [r7, #12]
 8000770:	60b9      	str	r1, [r7, #8]
 8000772:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	f003 0307 	and.w	r3, r3, #7
 800077a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800077c:	69fb      	ldr	r3, [r7, #28]
 800077e:	f1c3 0307 	rsb	r3, r3, #7
 8000782:	2b04      	cmp	r3, #4
 8000784:	bf28      	it	cs
 8000786:	2304      	movcs	r3, #4
 8000788:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800078a:	69fb      	ldr	r3, [r7, #28]
 800078c:	3304      	adds	r3, #4
 800078e:	2b06      	cmp	r3, #6
 8000790:	d902      	bls.n	8000798 <NVIC_EncodePriority+0x30>
 8000792:	69fb      	ldr	r3, [r7, #28]
 8000794:	3b03      	subs	r3, #3
 8000796:	e000      	b.n	800079a <NVIC_EncodePriority+0x32>
 8000798:	2300      	movs	r3, #0
 800079a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800079c:	f04f 32ff 	mov.w	r2, #4294967295
 80007a0:	69bb      	ldr	r3, [r7, #24]
 80007a2:	fa02 f303 	lsl.w	r3, r2, r3
 80007a6:	43da      	mvns	r2, r3
 80007a8:	68bb      	ldr	r3, [r7, #8]
 80007aa:	401a      	ands	r2, r3
 80007ac:	697b      	ldr	r3, [r7, #20]
 80007ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007b0:	f04f 31ff 	mov.w	r1, #4294967295
 80007b4:	697b      	ldr	r3, [r7, #20]
 80007b6:	fa01 f303 	lsl.w	r3, r1, r3
 80007ba:	43d9      	mvns	r1, r3
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007c0:	4313      	orrs	r3, r2
         );
}
 80007c2:	4618      	mov	r0, r3
 80007c4:	3724      	adds	r7, #36	; 0x24
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr
	...

080007d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	3b01      	subs	r3, #1
 80007dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007e0:	d301      	bcc.n	80007e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007e2:	2301      	movs	r3, #1
 80007e4:	e00f      	b.n	8000806 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007e6:	4a0a      	ldr	r2, [pc, #40]	; (8000810 <SysTick_Config+0x40>)
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	3b01      	subs	r3, #1
 80007ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007ee:	210f      	movs	r1, #15
 80007f0:	f04f 30ff 	mov.w	r0, #4294967295
 80007f4:	f7ff ff8e 	bl	8000714 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007f8:	4b05      	ldr	r3, [pc, #20]	; (8000810 <SysTick_Config+0x40>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007fe:	4b04      	ldr	r3, [pc, #16]	; (8000810 <SysTick_Config+0x40>)
 8000800:	2207      	movs	r2, #7
 8000802:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000804:	2300      	movs	r3, #0
}
 8000806:	4618      	mov	r0, r3
 8000808:	3708      	adds	r7, #8
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	e000e010 	.word	0xe000e010

08000814 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800081c:	6878      	ldr	r0, [r7, #4]
 800081e:	f7ff ff47 	bl	80006b0 <__NVIC_SetPriorityGrouping>
}
 8000822:	bf00      	nop
 8000824:	3708      	adds	r7, #8
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}

0800082a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800082a:	b580      	push	{r7, lr}
 800082c:	b086      	sub	sp, #24
 800082e:	af00      	add	r7, sp, #0
 8000830:	4603      	mov	r3, r0
 8000832:	60b9      	str	r1, [r7, #8]
 8000834:	607a      	str	r2, [r7, #4]
 8000836:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000838:	2300      	movs	r3, #0
 800083a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800083c:	f7ff ff5c 	bl	80006f8 <__NVIC_GetPriorityGrouping>
 8000840:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000842:	687a      	ldr	r2, [r7, #4]
 8000844:	68b9      	ldr	r1, [r7, #8]
 8000846:	6978      	ldr	r0, [r7, #20]
 8000848:	f7ff ff8e 	bl	8000768 <NVIC_EncodePriority>
 800084c:	4602      	mov	r2, r0
 800084e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000852:	4611      	mov	r1, r2
 8000854:	4618      	mov	r0, r3
 8000856:	f7ff ff5d 	bl	8000714 <__NVIC_SetPriority>
}
 800085a:	bf00      	nop
 800085c:	3718      	adds	r7, #24
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}

08000862 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000862:	b580      	push	{r7, lr}
 8000864:	b082      	sub	sp, #8
 8000866:	af00      	add	r7, sp, #0
 8000868:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800086a:	6878      	ldr	r0, [r7, #4]
 800086c:	f7ff ffb0 	bl	80007d0 <SysTick_Config>
 8000870:	4603      	mov	r3, r0
}
 8000872:	4618      	mov	r0, r3
 8000874:	3708      	adds	r7, #8
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
	...

0800087c <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b088      	sub	sp, #32
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8000884:	2300      	movs	r3, #0
 8000886:	61fb      	str	r3, [r7, #28]
 8000888:	2300      	movs	r3, #0
 800088a:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 800088c:	4ba9      	ldr	r3, [pc, #676]	; (8000b34 <HAL_ETH_Init+0x2b8>)
 800088e:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8000890:	2300      	movs	r3, #0
 8000892:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8000894:	2300      	movs	r3, #0
 8000896:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	2b00      	cmp	r3, #0
 800089c:	d101      	bne.n	80008a2 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 800089e:	2301      	movs	r3, #1
 80008a0:	e183      	b.n	8000baa <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80008a8:	b2db      	uxtb	r3, r3
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d106      	bne.n	80008bc <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	2200      	movs	r2, #0
 80008b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80008b6:	6878      	ldr	r0, [r7, #4]
 80008b8:	f003 f97c 	bl	8003bb4 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008bc:	4b9e      	ldr	r3, [pc, #632]	; (8000b38 <HAL_ETH_Init+0x2bc>)
 80008be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008c0:	4a9d      	ldr	r2, [pc, #628]	; (8000b38 <HAL_ETH_Init+0x2bc>)
 80008c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008c6:	6453      	str	r3, [r2, #68]	; 0x44
 80008c8:	4b9b      	ldr	r3, [pc, #620]	; (8000b38 <HAL_ETH_Init+0x2bc>)
 80008ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008d0:	60bb      	str	r3, [r7, #8]
 80008d2:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80008d4:	4b99      	ldr	r3, [pc, #612]	; (8000b3c <HAL_ETH_Init+0x2c0>)
 80008d6:	685b      	ldr	r3, [r3, #4]
 80008d8:	4a98      	ldr	r2, [pc, #608]	; (8000b3c <HAL_ETH_Init+0x2c0>)
 80008da:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80008de:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80008e0:	4b96      	ldr	r3, [pc, #600]	; (8000b3c <HAL_ETH_Init+0x2c0>)
 80008e2:	685a      	ldr	r2, [r3, #4]
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	6a1b      	ldr	r3, [r3, #32]
 80008e8:	4994      	ldr	r1, [pc, #592]	; (8000b3c <HAL_ETH_Init+0x2c0>)
 80008ea:	4313      	orrs	r3, r2
 80008ec:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008f6:	681a      	ldr	r2, [r3, #0]
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	f042 0201 	orr.w	r2, r2, #1
 8000900:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000904:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8000906:	f7ff fea5 	bl	8000654 <HAL_GetTick>
 800090a:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800090c:	e011      	b.n	8000932 <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 800090e:	f7ff fea1 	bl	8000654 <HAL_GetTick>
 8000912:	4602      	mov	r2, r0
 8000914:	697b      	ldr	r3, [r7, #20]
 8000916:	1ad3      	subs	r3, r2, r3
 8000918:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800091c:	d909      	bls.n	8000932 <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	2203      	movs	r2, #3
 8000922:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	2200      	movs	r2, #0
 800092a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 800092e:	2303      	movs	r3, #3
 8000930:	e13b      	b.n	8000baa <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	f003 0301 	and.w	r3, r3, #1
 8000940:	2b00      	cmp	r3, #0
 8000942:	d1e4      	bne.n	800090e <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	691b      	ldr	r3, [r3, #16]
 800094a:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 800094c:	69fb      	ldr	r3, [r7, #28]
 800094e:	f023 031c 	bic.w	r3, r3, #28
 8000952:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8000954:	f001 fb70 	bl	8002038 <HAL_RCC_GetHCLKFreq>
 8000958:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 800095a:	69bb      	ldr	r3, [r7, #24]
 800095c:	4a78      	ldr	r2, [pc, #480]	; (8000b40 <HAL_ETH_Init+0x2c4>)
 800095e:	4293      	cmp	r3, r2
 8000960:	d908      	bls.n	8000974 <HAL_ETH_Init+0xf8>
 8000962:	69bb      	ldr	r3, [r7, #24]
 8000964:	4a77      	ldr	r2, [pc, #476]	; (8000b44 <HAL_ETH_Init+0x2c8>)
 8000966:	4293      	cmp	r3, r2
 8000968:	d804      	bhi.n	8000974 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800096a:	69fb      	ldr	r3, [r7, #28]
 800096c:	f043 0308 	orr.w	r3, r3, #8
 8000970:	61fb      	str	r3, [r7, #28]
 8000972:	e027      	b.n	80009c4 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8000974:	69bb      	ldr	r3, [r7, #24]
 8000976:	4a73      	ldr	r2, [pc, #460]	; (8000b44 <HAL_ETH_Init+0x2c8>)
 8000978:	4293      	cmp	r3, r2
 800097a:	d908      	bls.n	800098e <HAL_ETH_Init+0x112>
 800097c:	69bb      	ldr	r3, [r7, #24]
 800097e:	4a72      	ldr	r2, [pc, #456]	; (8000b48 <HAL_ETH_Init+0x2cc>)
 8000980:	4293      	cmp	r3, r2
 8000982:	d804      	bhi.n	800098e <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8000984:	69fb      	ldr	r3, [r7, #28]
 8000986:	f043 030c 	orr.w	r3, r3, #12
 800098a:	61fb      	str	r3, [r7, #28]
 800098c:	e01a      	b.n	80009c4 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 800098e:	69bb      	ldr	r3, [r7, #24]
 8000990:	4a6d      	ldr	r2, [pc, #436]	; (8000b48 <HAL_ETH_Init+0x2cc>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d903      	bls.n	800099e <HAL_ETH_Init+0x122>
 8000996:	69bb      	ldr	r3, [r7, #24]
 8000998:	4a6c      	ldr	r2, [pc, #432]	; (8000b4c <HAL_ETH_Init+0x2d0>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d911      	bls.n	80009c2 <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 800099e:	69bb      	ldr	r3, [r7, #24]
 80009a0:	4a6a      	ldr	r2, [pc, #424]	; (8000b4c <HAL_ETH_Init+0x2d0>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d908      	bls.n	80009b8 <HAL_ETH_Init+0x13c>
 80009a6:	69bb      	ldr	r3, [r7, #24]
 80009a8:	4a69      	ldr	r2, [pc, #420]	; (8000b50 <HAL_ETH_Init+0x2d4>)
 80009aa:	4293      	cmp	r3, r2
 80009ac:	d804      	bhi.n	80009b8 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80009ae:	69fb      	ldr	r3, [r7, #28]
 80009b0:	f043 0304 	orr.w	r3, r3, #4
 80009b4:	61fb      	str	r3, [r7, #28]
 80009b6:	e005      	b.n	80009c4 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80009b8:	69fb      	ldr	r3, [r7, #28]
 80009ba:	f043 0310 	orr.w	r3, r3, #16
 80009be:	61fb      	str	r3, [r7, #28]
 80009c0:	e000      	b.n	80009c4 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80009c2:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	69fa      	ldr	r2, [r7, #28]
 80009ca:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80009cc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80009d0:	2100      	movs	r1, #0
 80009d2:	6878      	ldr	r0, [r7, #4]
 80009d4:	f000 f956 	bl	8000c84 <HAL_ETH_WritePHYRegister>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d00b      	beq.n	80009f6 <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 80009de:	2301      	movs	r3, #1
 80009e0:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 80009e2:	6939      	ldr	r1, [r7, #16]
 80009e4:	6878      	ldr	r0, [r7, #4]
 80009e6:	f000 f9b3 	bl	8000d50 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	2201      	movs	r2, #1
 80009ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 80009f2:	2301      	movs	r3, #1
 80009f4:	e0d9      	b.n	8000baa <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 80009f6:	20ff      	movs	r0, #255	; 0xff
 80009f8:	f7ff fe38 	bl	800066c <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	685b      	ldr	r3, [r3, #4]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	f000 80a7 	beq.w	8000b54 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8000a06:	f7ff fe25 	bl	8000654 <HAL_GetTick>
 8000a0a:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000a0c:	f107 030c 	add.w	r3, r7, #12
 8000a10:	461a      	mov	r2, r3
 8000a12:	2101      	movs	r1, #1
 8000a14:	6878      	ldr	r0, [r7, #4]
 8000a16:	f000 f8cd 	bl	8000bb4 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8000a1a:	f7ff fe1b 	bl	8000654 <HAL_GetTick>
 8000a1e:	4602      	mov	r2, r0
 8000a20:	697b      	ldr	r3, [r7, #20]
 8000a22:	1ad3      	subs	r3, r2, r3
 8000a24:	f241 3288 	movw	r2, #5000	; 0x1388
 8000a28:	4293      	cmp	r3, r2
 8000a2a:	d90f      	bls.n	8000a4c <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8000a30:	6939      	ldr	r1, [r7, #16]
 8000a32:	6878      	ldr	r0, [r7, #4]
 8000a34:	f000 f98c 	bl	8000d50 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	2200      	movs	r2, #0
 8000a44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8000a48:	2303      	movs	r3, #3
 8000a4a:	e0ae      	b.n	8000baa <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	f003 0304 	and.w	r3, r3, #4
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d0da      	beq.n	8000a0c <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8000a56:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	6878      	ldr	r0, [r7, #4]
 8000a5e:	f000 f911 	bl	8000c84 <HAL_ETH_WritePHYRegister>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d00b      	beq.n	8000a80 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8000a6c:	6939      	ldr	r1, [r7, #16]
 8000a6e:	6878      	ldr	r0, [r7, #4]
 8000a70:	f000 f96e 	bl	8000d50 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	2201      	movs	r2, #1
 8000a78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	e094      	b.n	8000baa <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8000a80:	f7ff fde8 	bl	8000654 <HAL_GetTick>
 8000a84:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000a86:	f107 030c 	add.w	r3, r7, #12
 8000a8a:	461a      	mov	r2, r3
 8000a8c:	2101      	movs	r1, #1
 8000a8e:	6878      	ldr	r0, [r7, #4]
 8000a90:	f000 f890 	bl	8000bb4 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8000a94:	f7ff fdde 	bl	8000654 <HAL_GetTick>
 8000a98:	4602      	mov	r2, r0
 8000a9a:	697b      	ldr	r3, [r7, #20]
 8000a9c:	1ad3      	subs	r3, r2, r3
 8000a9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000aa2:	4293      	cmp	r3, r2
 8000aa4:	d90f      	bls.n	8000ac6 <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8000aaa:	6939      	ldr	r1, [r7, #16]
 8000aac:	6878      	ldr	r0, [r7, #4]
 8000aae:	f000 f94f 	bl	8000d50 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	2200      	movs	r2, #0
 8000abe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8000ac2:	2303      	movs	r3, #3
 8000ac4:	e071      	b.n	8000baa <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	f003 0320 	and.w	r3, r3, #32
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d0da      	beq.n	8000a86 <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8000ad0:	f107 030c 	add.w	r3, r7, #12
 8000ad4:	461a      	mov	r2, r3
 8000ad6:	211f      	movs	r1, #31
 8000ad8:	6878      	ldr	r0, [r7, #4]
 8000ada:	f000 f86b 	bl	8000bb4 <HAL_ETH_ReadPHYRegister>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d00b      	beq.n	8000afc <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8000ae8:	6939      	ldr	r1, [r7, #16]
 8000aea:	6878      	ldr	r0, [r7, #4]
 8000aec:	f000 f930 	bl	8000d50 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	2201      	movs	r2, #1
 8000af4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8000af8:	2301      	movs	r3, #1
 8000afa:	e056      	b.n	8000baa <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	f003 0310 	and.w	r3, r3, #16
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d004      	beq.n	8000b10 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b0c:	60da      	str	r2, [r3, #12]
 8000b0e:	e002      	b.n	8000b16 <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	2200      	movs	r2, #0
 8000b14:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	f003 0304 	and.w	r3, r3, #4
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d003      	beq.n	8000b28 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	2200      	movs	r2, #0
 8000b24:	609a      	str	r2, [r3, #8]
 8000b26:	e037      	b.n	8000b98 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b2e:	609a      	str	r2, [r3, #8]
 8000b30:	e032      	b.n	8000b98 <HAL_ETH_Init+0x31c>
 8000b32:	bf00      	nop
 8000b34:	03938700 	.word	0x03938700
 8000b38:	40023800 	.word	0x40023800
 8000b3c:	40013800 	.word	0x40013800
 8000b40:	01312cff 	.word	0x01312cff
 8000b44:	02160ebf 	.word	0x02160ebf
 8000b48:	039386ff 	.word	0x039386ff
 8000b4c:	05f5e0ff 	.word	0x05f5e0ff
 8000b50:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	68db      	ldr	r3, [r3, #12]
 8000b58:	08db      	lsrs	r3, r3, #3
 8000b5a:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	689b      	ldr	r3, [r3, #8]
 8000b60:	085b      	lsrs	r3, r3, #1
 8000b62:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8000b64:	4313      	orrs	r3, r2
 8000b66:	b29b      	uxth	r3, r3
 8000b68:	461a      	mov	r2, r3
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	6878      	ldr	r0, [r7, #4]
 8000b6e:	f000 f889 	bl	8000c84 <HAL_ETH_WritePHYRegister>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d00b      	beq.n	8000b90 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8000b7c:	6939      	ldr	r1, [r7, #16]
 8000b7e:	6878      	ldr	r0, [r7, #4]
 8000b80:	f000 f8e6 	bl	8000d50 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	2201      	movs	r2, #1
 8000b88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	e00c      	b.n	8000baa <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8000b90:	f640 70ff 	movw	r0, #4095	; 0xfff
 8000b94:	f7ff fd6a 	bl	800066c <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8000b98:	6939      	ldr	r1, [r7, #16]
 8000b9a:	6878      	ldr	r0, [r7, #4]
 8000b9c:	f000 f8d8 	bl	8000d50 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8000ba8:	2300      	movs	r3, #0
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	3720      	adds	r7, #32
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop

08000bb4 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b086      	sub	sp, #24
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	60f8      	str	r0, [r7, #12]
 8000bbc:	460b      	mov	r3, r1
 8000bbe:	607a      	str	r2, [r7, #4]
 8000bc0:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000bd0:	b2db      	uxtb	r3, r3
 8000bd2:	2b82      	cmp	r3, #130	; 0x82
 8000bd4:	d101      	bne.n	8000bda <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8000bd6:	2302      	movs	r3, #2
 8000bd8:	e050      	b.n	8000c7c <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	2282      	movs	r2, #130	; 0x82
 8000bde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	691b      	ldr	r3, [r3, #16]
 8000be8:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8000bea:	697b      	ldr	r3, [r7, #20]
 8000bec:	f003 031c 	and.w	r3, r3, #28
 8000bf0:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	8a1b      	ldrh	r3, [r3, #16]
 8000bf6:	02db      	lsls	r3, r3, #11
 8000bf8:	b29b      	uxth	r3, r3
 8000bfa:	697a      	ldr	r2, [r7, #20]
 8000bfc:	4313      	orrs	r3, r2
 8000bfe:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8000c00:	897b      	ldrh	r3, [r7, #10]
 8000c02:	019b      	lsls	r3, r3, #6
 8000c04:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8000c08:	697a      	ldr	r2, [r7, #20]
 8000c0a:	4313      	orrs	r3, r2
 8000c0c:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8000c0e:	697b      	ldr	r3, [r7, #20]
 8000c10:	f023 0302 	bic.w	r3, r3, #2
 8000c14:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8000c16:	697b      	ldr	r3, [r7, #20]
 8000c18:	f043 0301 	orr.w	r3, r3, #1
 8000c1c:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	697a      	ldr	r2, [r7, #20]
 8000c24:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8000c26:	f7ff fd15 	bl	8000654 <HAL_GetTick>
 8000c2a:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8000c2c:	e015      	b.n	8000c5a <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8000c2e:	f7ff fd11 	bl	8000654 <HAL_GetTick>
 8000c32:	4602      	mov	r2, r0
 8000c34:	693b      	ldr	r3, [r7, #16]
 8000c36:	1ad3      	subs	r3, r2, r3
 8000c38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c3c:	d309      	bcc.n	8000c52 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	2201      	movs	r2, #1
 8000c42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	2200      	movs	r2, #0
 8000c4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8000c4e:	2303      	movs	r3, #3
 8000c50:	e014      	b.n	8000c7c <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	691b      	ldr	r3, [r3, #16]
 8000c58:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8000c5a:	697b      	ldr	r3, [r7, #20]
 8000c5c:	f003 0301 	and.w	r3, r3, #1
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d1e4      	bne.n	8000c2e <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	695b      	ldr	r3, [r3, #20]
 8000c6a:	b29b      	uxth	r3, r3
 8000c6c:	461a      	mov	r2, r3
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	2201      	movs	r2, #1
 8000c76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8000c7a:	2300      	movs	r3, #0
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	3718      	adds	r7, #24
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}

08000c84 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b086      	sub	sp, #24
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	60f8      	str	r0, [r7, #12]
 8000c8c:	460b      	mov	r3, r1
 8000c8e:	607a      	str	r2, [r7, #4]
 8000c90:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8000c92:	2300      	movs	r3, #0
 8000c94:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8000c96:	2300      	movs	r3, #0
 8000c98:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000ca0:	b2db      	uxtb	r3, r3
 8000ca2:	2b42      	cmp	r3, #66	; 0x42
 8000ca4:	d101      	bne.n	8000caa <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	e04e      	b.n	8000d48 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	2242      	movs	r2, #66	; 0x42
 8000cae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	691b      	ldr	r3, [r3, #16]
 8000cb8:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8000cba:	697b      	ldr	r3, [r7, #20]
 8000cbc:	f003 031c 	and.w	r3, r3, #28
 8000cc0:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	8a1b      	ldrh	r3, [r3, #16]
 8000cc6:	02db      	lsls	r3, r3, #11
 8000cc8:	b29b      	uxth	r3, r3
 8000cca:	697a      	ldr	r2, [r7, #20]
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8000cd0:	897b      	ldrh	r3, [r7, #10]
 8000cd2:	019b      	lsls	r3, r3, #6
 8000cd4:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8000cd8:	697a      	ldr	r2, [r7, #20]
 8000cda:	4313      	orrs	r3, r2
 8000cdc:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	f043 0302 	orr.w	r3, r3, #2
 8000ce4:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8000ce6:	697b      	ldr	r3, [r7, #20]
 8000ce8:	f043 0301 	orr.w	r3, r3, #1
 8000cec:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	b29a      	uxth	r2, r3
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	697a      	ldr	r2, [r7, #20]
 8000cfe:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8000d00:	f7ff fca8 	bl	8000654 <HAL_GetTick>
 8000d04:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8000d06:	e015      	b.n	8000d34 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8000d08:	f7ff fca4 	bl	8000654 <HAL_GetTick>
 8000d0c:	4602      	mov	r2, r0
 8000d0e:	693b      	ldr	r3, [r7, #16]
 8000d10:	1ad3      	subs	r3, r2, r3
 8000d12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d16:	d309      	bcc.n	8000d2c <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	2200      	movs	r2, #0
 8000d24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8000d28:	2303      	movs	r3, #3
 8000d2a:	e00d      	b.n	8000d48 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	691b      	ldr	r3, [r3, #16]
 8000d32:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	f003 0301 	and.w	r3, r3, #1
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d1e4      	bne.n	8000d08 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	2201      	movs	r2, #1
 8000d42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8000d46:	2300      	movs	r3, #0
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	3718      	adds	r7, #24
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}

08000d50 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b0b0      	sub	sp, #192	; 0xc0
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
 8000d58:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d007      	beq.n	8000d76 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d6c:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d74:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8000d76:	2300      	movs	r3, #0
 8000d78:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8000d82:	2300      	movs	r3, #0
 8000d84:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8000d86:	2300      	movs	r3, #0
 8000d88:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	69db      	ldr	r3, [r3, #28]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d103      	bne.n	8000d9e <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8000d96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d9a:	663b      	str	r3, [r7, #96]	; 0x60
 8000d9c:	e001      	b.n	8000da2 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8000da2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000da6:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8000da8:	2300      	movs	r3, #0
 8000daa:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8000dac:	2300      	movs	r3, #0
 8000dae:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8000db0:	2300      	movs	r3, #0
 8000db2:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8000db4:	2300      	movs	r3, #0
 8000db6:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8000db8:	2300      	movs	r3, #0
 8000dba:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8000dbc:	2340      	movs	r3, #64	; 0x40
 8000dbe:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 8000dde:	2300      	movs	r3, #0
 8000de0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8000de4:	2300      	movs	r3, #0
 8000de6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8000dea:	2300      	movs	r3, #0
 8000dec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8000df0:	2380      	movs	r3, #128	; 0x80
 8000df2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8000df6:	2300      	movs	r3, #0
 8000df8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8000e02:	2300      	movs	r3, #0
 8000e04:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8000e14:	2300      	movs	r3, #0
 8000e16:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8000e24:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000e28:	4bab      	ldr	r3, [pc, #684]	; (80010d8 <ETH_MACDMAConfig+0x388>)
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8000e30:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8000e32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8000e34:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8000e36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8000e38:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8000e3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8000e3c:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8000e42:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8000e44:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8000e46:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8000e48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8000e4a:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8000e50:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8000e52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8000e54:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8000e56:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8000e58:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8000e5a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8000e5c:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8000e5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8000e60:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8000e62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8000e64:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8000e66:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000e78:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8000e84:	2001      	movs	r0, #1
 8000e86:	f7ff fbf1 	bl	800066c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000e92:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8000e94:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8000e96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8000e98:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8000e9a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8000e9c:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8000e9e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8000ea2:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8000ea4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8000ea8:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8000eaa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8000eae:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8000eb0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8000eb4:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8000eb8:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8000ec0:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8000ec2:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8000ece:	2001      	movs	r0, #1
 8000ed0:	f7ff fbcc 	bl	800066c <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000edc:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8000ee6:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8000ef0:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	699b      	ldr	r3, [r3, #24]
 8000ef8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8000efc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000f00:	f64f 7341 	movw	r3, #65345	; 0xff41
 8000f04:	4013      	ands	r3, r2
 8000f06:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8000f0a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000f0e:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8000f10:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8000f14:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8000f16:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8000f1a:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8000f1c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8000f20:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8000f22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8000f26:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8000f28:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8000f2c:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8000f2e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000f32:	4313      	orrs	r3, r2
 8000f34:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000f40:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	699b      	ldr	r3, [r3, #24]
 8000f48:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8000f4c:	2001      	movs	r0, #1
 8000f4e:	f7ff fb8d 	bl	800066c <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000f5a:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8000f5c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8000f60:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	430a      	orrs	r2, r1
 8000f6a:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	69db      	ldr	r3, [r3, #28]
 8000f72:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8000f76:	2001      	movs	r0, #1
 8000f78:	f7ff fb78 	bl	800066c <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000f84:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8000f86:	2300      	movs	r3, #0
 8000f88:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8000f8a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000f8e:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8000f90:	2300      	movs	r3, #0
 8000f92:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8000f94:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000f98:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8000faa:	2304      	movs	r3, #4
 8000fac:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8000fae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8000fb4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fb8:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8000fba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000fbe:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8000fc0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fc4:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8000fc6:	2380      	movs	r3, #128	; 0x80
 8000fc8:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681a      	ldr	r2, [r3, #0]
 8000fd6:	f241 0318 	movw	r3, #4120	; 0x1018
 8000fda:	4413      	add	r3, r2
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8000fe2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000fe6:	4b3d      	ldr	r3, [pc, #244]	; (80010dc <ETH_MACDMAConfig+0x38c>)
 8000fe8:	4013      	ands	r3, r2
 8000fea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8000fee:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8000ff0:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8000ff2:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8000ff4:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8000ff6:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8000ff8:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8000ffa:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8000ffc:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8000ffe:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8001000:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8001002:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8001004:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8001006:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8001008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 800100a:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 800100c:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 800100e:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001010:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001014:	4313      	orrs	r3, r2
 8001016:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	f241 0318 	movw	r3, #4120	; 0x1018
 8001022:	4413      	add	r3, r2
 8001024:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001028:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	f241 0318 	movw	r3, #4120	; 0x1018
 8001032:	4413      	add	r3, r2
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800103a:	2001      	movs	r0, #1
 800103c:	f7ff fb16 	bl	800066c <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	f241 0318 	movw	r3, #4120	; 0x1018
 8001048:	4413      	add	r3, r2
 800104a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800104e:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001050:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8001052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001054:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001056:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8001058:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 800105a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800105c:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 800105e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8001060:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 8001062:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001064:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8001066:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8001068:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 800106a:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001074:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001078:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001088:	2001      	movs	r0, #1
 800108a:	f7ff faef 	bl	800066c <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001096:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800109a:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	699b      	ldr	r3, [r3, #24]
 80010a0:	2b01      	cmp	r3, #1
 80010a2:	d10d      	bne.n	80010c0 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	f241 031c 	movw	r3, #4124	; 0x101c
 80010ac:	4413      	add	r3, r2
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	687a      	ldr	r2, [r7, #4]
 80010b2:	6811      	ldr	r1, [r2, #0]
 80010b4:	4a0a      	ldr	r2, [pc, #40]	; (80010e0 <ETH_MACDMAConfig+0x390>)
 80010b6:	431a      	orrs	r2, r3
 80010b8:	f241 031c 	movw	r3, #4124	; 0x101c
 80010bc:	440b      	add	r3, r1
 80010be:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	695b      	ldr	r3, [r3, #20]
 80010c4:	461a      	mov	r2, r3
 80010c6:	2100      	movs	r1, #0
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	f000 f80b 	bl	80010e4 <ETH_MACAddressConfig>
}
 80010ce:	bf00      	nop
 80010d0:	37c0      	adds	r7, #192	; 0xc0
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	ff20810f 	.word	0xff20810f
 80010dc:	f8de3f23 	.word	0xf8de3f23
 80010e0:	00010040 	.word	0x00010040

080010e4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b087      	sub	sp, #28
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	60f8      	str	r0, [r7, #12]
 80010ec:	60b9      	str	r1, [r7, #8]
 80010ee:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	3305      	adds	r3, #5
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	021b      	lsls	r3, r3, #8
 80010f8:	687a      	ldr	r2, [r7, #4]
 80010fa:	3204      	adds	r2, #4
 80010fc:	7812      	ldrb	r2, [r2, #0]
 80010fe:	4313      	orrs	r3, r2
 8001100:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8001102:	68ba      	ldr	r2, [r7, #8]
 8001104:	4b11      	ldr	r3, [pc, #68]	; (800114c <ETH_MACAddressConfig+0x68>)
 8001106:	4413      	add	r3, r2
 8001108:	461a      	mov	r2, r3
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	3303      	adds	r3, #3
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	061a      	lsls	r2, r3, #24
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	3302      	adds	r3, #2
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	041b      	lsls	r3, r3, #16
 800111e:	431a      	orrs	r2, r3
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	3301      	adds	r3, #1
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	021b      	lsls	r3, r3, #8
 8001128:	4313      	orrs	r3, r2
 800112a:	687a      	ldr	r2, [r7, #4]
 800112c:	7812      	ldrb	r2, [r2, #0]
 800112e:	4313      	orrs	r3, r2
 8001130:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8001132:	68ba      	ldr	r2, [r7, #8]
 8001134:	4b06      	ldr	r3, [pc, #24]	; (8001150 <ETH_MACAddressConfig+0x6c>)
 8001136:	4413      	add	r3, r2
 8001138:	461a      	mov	r2, r3
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	6013      	str	r3, [r2, #0]
}
 800113e:	bf00      	nop
 8001140:	371c      	adds	r7, #28
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	40028040 	.word	0x40028040
 8001150:	40028044 	.word	0x40028044

08001154 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001154:	b480      	push	{r7}
 8001156:	b089      	sub	sp, #36	; 0x24
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800115e:	2300      	movs	r3, #0
 8001160:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001162:	2300      	movs	r3, #0
 8001164:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001166:	2300      	movs	r3, #0
 8001168:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800116a:	2300      	movs	r3, #0
 800116c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800116e:	2300      	movs	r3, #0
 8001170:	61fb      	str	r3, [r7, #28]
 8001172:	e175      	b.n	8001460 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001174:	2201      	movs	r2, #1
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	fa02 f303 	lsl.w	r3, r2, r3
 800117c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	697a      	ldr	r2, [r7, #20]
 8001184:	4013      	ands	r3, r2
 8001186:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001188:	693a      	ldr	r2, [r7, #16]
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	429a      	cmp	r2, r3
 800118e:	f040 8164 	bne.w	800145a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	2b02      	cmp	r3, #2
 8001198:	d003      	beq.n	80011a2 <HAL_GPIO_Init+0x4e>
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	2b12      	cmp	r3, #18
 80011a0:	d123      	bne.n	80011ea <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	08da      	lsrs	r2, r3, #3
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	3208      	adds	r2, #8
 80011aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80011b0:	69fb      	ldr	r3, [r7, #28]
 80011b2:	f003 0307 	and.w	r3, r3, #7
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	220f      	movs	r2, #15
 80011ba:	fa02 f303 	lsl.w	r3, r2, r3
 80011be:	43db      	mvns	r3, r3
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	4013      	ands	r3, r2
 80011c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	691a      	ldr	r2, [r3, #16]
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	f003 0307 	and.w	r3, r3, #7
 80011d0:	009b      	lsls	r3, r3, #2
 80011d2:	fa02 f303 	lsl.w	r3, r2, r3
 80011d6:	69ba      	ldr	r2, [r7, #24]
 80011d8:	4313      	orrs	r3, r2
 80011da:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80011dc:	69fb      	ldr	r3, [r7, #28]
 80011de:	08da      	lsrs	r2, r3, #3
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	3208      	adds	r2, #8
 80011e4:	69b9      	ldr	r1, [r7, #24]
 80011e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	005b      	lsls	r3, r3, #1
 80011f4:	2203      	movs	r2, #3
 80011f6:	fa02 f303 	lsl.w	r3, r2, r3
 80011fa:	43db      	mvns	r3, r3
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	4013      	ands	r3, r2
 8001200:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	f003 0203 	and.w	r2, r3, #3
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	005b      	lsls	r3, r3, #1
 800120e:	fa02 f303 	lsl.w	r3, r2, r3
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	4313      	orrs	r3, r2
 8001216:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	69ba      	ldr	r2, [r7, #24]
 800121c:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	2b01      	cmp	r3, #1
 8001224:	d00b      	beq.n	800123e <HAL_GPIO_Init+0xea>
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	2b02      	cmp	r3, #2
 800122c:	d007      	beq.n	800123e <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001232:	2b11      	cmp	r3, #17
 8001234:	d003      	beq.n	800123e <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	2b12      	cmp	r3, #18
 800123c:	d130      	bne.n	80012a0 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	689b      	ldr	r3, [r3, #8]
 8001242:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	005b      	lsls	r3, r3, #1
 8001248:	2203      	movs	r2, #3
 800124a:	fa02 f303 	lsl.w	r3, r2, r3
 800124e:	43db      	mvns	r3, r3
 8001250:	69ba      	ldr	r2, [r7, #24]
 8001252:	4013      	ands	r3, r2
 8001254:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	68da      	ldr	r2, [r3, #12]
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	005b      	lsls	r3, r3, #1
 800125e:	fa02 f303 	lsl.w	r3, r2, r3
 8001262:	69ba      	ldr	r2, [r7, #24]
 8001264:	4313      	orrs	r3, r2
 8001266:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	69ba      	ldr	r2, [r7, #24]
 800126c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001274:	2201      	movs	r2, #1
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	fa02 f303 	lsl.w	r3, r2, r3
 800127c:	43db      	mvns	r3, r3
 800127e:	69ba      	ldr	r2, [r7, #24]
 8001280:	4013      	ands	r3, r2
 8001282:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	091b      	lsrs	r3, r3, #4
 800128a:	f003 0201 	and.w	r2, r3, #1
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	fa02 f303 	lsl.w	r3, r2, r3
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	4313      	orrs	r3, r2
 8001298:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	68db      	ldr	r3, [r3, #12]
 80012a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	005b      	lsls	r3, r3, #1
 80012aa:	2203      	movs	r2, #3
 80012ac:	fa02 f303 	lsl.w	r3, r2, r3
 80012b0:	43db      	mvns	r3, r3
 80012b2:	69ba      	ldr	r2, [r7, #24]
 80012b4:	4013      	ands	r3, r2
 80012b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	689a      	ldr	r2, [r3, #8]
 80012bc:	69fb      	ldr	r3, [r7, #28]
 80012be:	005b      	lsls	r3, r3, #1
 80012c0:	fa02 f303 	lsl.w	r3, r2, r3
 80012c4:	69ba      	ldr	r2, [r7, #24]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	69ba      	ldr	r2, [r7, #24]
 80012ce:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012d8:	2b00      	cmp	r3, #0
 80012da:	f000 80be 	beq.w	800145a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012de:	4b65      	ldr	r3, [pc, #404]	; (8001474 <HAL_GPIO_Init+0x320>)
 80012e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e2:	4a64      	ldr	r2, [pc, #400]	; (8001474 <HAL_GPIO_Init+0x320>)
 80012e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012e8:	6453      	str	r3, [r2, #68]	; 0x44
 80012ea:	4b62      	ldr	r3, [pc, #392]	; (8001474 <HAL_GPIO_Init+0x320>)
 80012ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012f2:	60fb      	str	r3, [r7, #12]
 80012f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80012f6:	4a60      	ldr	r2, [pc, #384]	; (8001478 <HAL_GPIO_Init+0x324>)
 80012f8:	69fb      	ldr	r3, [r7, #28]
 80012fa:	089b      	lsrs	r3, r3, #2
 80012fc:	3302      	adds	r3, #2
 80012fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001302:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001304:	69fb      	ldr	r3, [r7, #28]
 8001306:	f003 0303 	and.w	r3, r3, #3
 800130a:	009b      	lsls	r3, r3, #2
 800130c:	220f      	movs	r2, #15
 800130e:	fa02 f303 	lsl.w	r3, r2, r3
 8001312:	43db      	mvns	r3, r3
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	4013      	ands	r3, r2
 8001318:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4a57      	ldr	r2, [pc, #348]	; (800147c <HAL_GPIO_Init+0x328>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d037      	beq.n	8001392 <HAL_GPIO_Init+0x23e>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4a56      	ldr	r2, [pc, #344]	; (8001480 <HAL_GPIO_Init+0x32c>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d031      	beq.n	800138e <HAL_GPIO_Init+0x23a>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4a55      	ldr	r2, [pc, #340]	; (8001484 <HAL_GPIO_Init+0x330>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d02b      	beq.n	800138a <HAL_GPIO_Init+0x236>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4a54      	ldr	r2, [pc, #336]	; (8001488 <HAL_GPIO_Init+0x334>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d025      	beq.n	8001386 <HAL_GPIO_Init+0x232>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4a53      	ldr	r2, [pc, #332]	; (800148c <HAL_GPIO_Init+0x338>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d01f      	beq.n	8001382 <HAL_GPIO_Init+0x22e>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4a52      	ldr	r2, [pc, #328]	; (8001490 <HAL_GPIO_Init+0x33c>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d019      	beq.n	800137e <HAL_GPIO_Init+0x22a>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4a51      	ldr	r2, [pc, #324]	; (8001494 <HAL_GPIO_Init+0x340>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d013      	beq.n	800137a <HAL_GPIO_Init+0x226>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4a50      	ldr	r2, [pc, #320]	; (8001498 <HAL_GPIO_Init+0x344>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d00d      	beq.n	8001376 <HAL_GPIO_Init+0x222>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4a4f      	ldr	r2, [pc, #316]	; (800149c <HAL_GPIO_Init+0x348>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d007      	beq.n	8001372 <HAL_GPIO_Init+0x21e>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4a4e      	ldr	r2, [pc, #312]	; (80014a0 <HAL_GPIO_Init+0x34c>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d101      	bne.n	800136e <HAL_GPIO_Init+0x21a>
 800136a:	2309      	movs	r3, #9
 800136c:	e012      	b.n	8001394 <HAL_GPIO_Init+0x240>
 800136e:	230a      	movs	r3, #10
 8001370:	e010      	b.n	8001394 <HAL_GPIO_Init+0x240>
 8001372:	2308      	movs	r3, #8
 8001374:	e00e      	b.n	8001394 <HAL_GPIO_Init+0x240>
 8001376:	2307      	movs	r3, #7
 8001378:	e00c      	b.n	8001394 <HAL_GPIO_Init+0x240>
 800137a:	2306      	movs	r3, #6
 800137c:	e00a      	b.n	8001394 <HAL_GPIO_Init+0x240>
 800137e:	2305      	movs	r3, #5
 8001380:	e008      	b.n	8001394 <HAL_GPIO_Init+0x240>
 8001382:	2304      	movs	r3, #4
 8001384:	e006      	b.n	8001394 <HAL_GPIO_Init+0x240>
 8001386:	2303      	movs	r3, #3
 8001388:	e004      	b.n	8001394 <HAL_GPIO_Init+0x240>
 800138a:	2302      	movs	r3, #2
 800138c:	e002      	b.n	8001394 <HAL_GPIO_Init+0x240>
 800138e:	2301      	movs	r3, #1
 8001390:	e000      	b.n	8001394 <HAL_GPIO_Init+0x240>
 8001392:	2300      	movs	r3, #0
 8001394:	69fa      	ldr	r2, [r7, #28]
 8001396:	f002 0203 	and.w	r2, r2, #3
 800139a:	0092      	lsls	r2, r2, #2
 800139c:	4093      	lsls	r3, r2
 800139e:	69ba      	ldr	r2, [r7, #24]
 80013a0:	4313      	orrs	r3, r2
 80013a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80013a4:	4934      	ldr	r1, [pc, #208]	; (8001478 <HAL_GPIO_Init+0x324>)
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	089b      	lsrs	r3, r3, #2
 80013aa:	3302      	adds	r3, #2
 80013ac:	69ba      	ldr	r2, [r7, #24]
 80013ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013b2:	4b3c      	ldr	r3, [pc, #240]	; (80014a4 <HAL_GPIO_Init+0x350>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	43db      	mvns	r3, r3
 80013bc:	69ba      	ldr	r2, [r7, #24]
 80013be:	4013      	ands	r3, r2
 80013c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d003      	beq.n	80013d6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80013ce:	69ba      	ldr	r2, [r7, #24]
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	4313      	orrs	r3, r2
 80013d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013d6:	4a33      	ldr	r2, [pc, #204]	; (80014a4 <HAL_GPIO_Init+0x350>)
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80013dc:	4b31      	ldr	r3, [pc, #196]	; (80014a4 <HAL_GPIO_Init+0x350>)
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	43db      	mvns	r3, r3
 80013e6:	69ba      	ldr	r2, [r7, #24]
 80013e8:	4013      	ands	r3, r2
 80013ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d003      	beq.n	8001400 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001400:	4a28      	ldr	r2, [pc, #160]	; (80014a4 <HAL_GPIO_Init+0x350>)
 8001402:	69bb      	ldr	r3, [r7, #24]
 8001404:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001406:	4b27      	ldr	r3, [pc, #156]	; (80014a4 <HAL_GPIO_Init+0x350>)
 8001408:	689b      	ldr	r3, [r3, #8]
 800140a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	43db      	mvns	r3, r3
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	4013      	ands	r3, r2
 8001414:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800141e:	2b00      	cmp	r3, #0
 8001420:	d003      	beq.n	800142a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001422:	69ba      	ldr	r2, [r7, #24]
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	4313      	orrs	r3, r2
 8001428:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800142a:	4a1e      	ldr	r2, [pc, #120]	; (80014a4 <HAL_GPIO_Init+0x350>)
 800142c:	69bb      	ldr	r3, [r7, #24]
 800142e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001430:	4b1c      	ldr	r3, [pc, #112]	; (80014a4 <HAL_GPIO_Init+0x350>)
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	43db      	mvns	r3, r3
 800143a:	69ba      	ldr	r2, [r7, #24]
 800143c:	4013      	ands	r3, r2
 800143e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001448:	2b00      	cmp	r3, #0
 800144a:	d003      	beq.n	8001454 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800144c:	69ba      	ldr	r2, [r7, #24]
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	4313      	orrs	r3, r2
 8001452:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001454:	4a13      	ldr	r2, [pc, #76]	; (80014a4 <HAL_GPIO_Init+0x350>)
 8001456:	69bb      	ldr	r3, [r7, #24]
 8001458:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	3301      	adds	r3, #1
 800145e:	61fb      	str	r3, [r7, #28]
 8001460:	69fb      	ldr	r3, [r7, #28]
 8001462:	2b0f      	cmp	r3, #15
 8001464:	f67f ae86 	bls.w	8001174 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001468:	bf00      	nop
 800146a:	3724      	adds	r7, #36	; 0x24
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr
 8001474:	40023800 	.word	0x40023800
 8001478:	40013800 	.word	0x40013800
 800147c:	40020000 	.word	0x40020000
 8001480:	40020400 	.word	0x40020400
 8001484:	40020800 	.word	0x40020800
 8001488:	40020c00 	.word	0x40020c00
 800148c:	40021000 	.word	0x40021000
 8001490:	40021400 	.word	0x40021400
 8001494:	40021800 	.word	0x40021800
 8001498:	40021c00 	.word	0x40021c00
 800149c:	40022000 	.word	0x40022000
 80014a0:	40022400 	.word	0x40022400
 80014a4:	40013c00 	.word	0x40013c00

080014a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b085      	sub	sp, #20
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	460b      	mov	r3, r1
 80014b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	691a      	ldr	r2, [r3, #16]
 80014b8:	887b      	ldrh	r3, [r7, #2]
 80014ba:	4013      	ands	r3, r2
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d002      	beq.n	80014c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80014c0:	2301      	movs	r3, #1
 80014c2:	73fb      	strb	r3, [r7, #15]
 80014c4:	e001      	b.n	80014ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80014c6:	2300      	movs	r3, #0
 80014c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80014ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3714      	adds	r7, #20
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr

080014d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
 80014e0:	460b      	mov	r3, r1
 80014e2:	807b      	strh	r3, [r7, #2]
 80014e4:	4613      	mov	r3, r2
 80014e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014e8:	787b      	ldrb	r3, [r7, #1]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d003      	beq.n	80014f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014ee:	887a      	ldrh	r2, [r7, #2]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80014f4:	e003      	b.n	80014fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80014f6:	887b      	ldrh	r3, [r7, #2]
 80014f8:	041a      	lsls	r2, r3, #16
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	619a      	str	r2, [r3, #24]
}
 80014fe:	bf00      	nop
 8001500:	370c      	adds	r7, #12
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr

0800150a <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800150a:	b480      	push	{r7}
 800150c:	b083      	sub	sp, #12
 800150e:	af00      	add	r7, sp, #0
 8001510:	6078      	str	r0, [r7, #4]
 8001512:	460b      	mov	r3, r1
 8001514:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	695a      	ldr	r2, [r3, #20]
 800151a:	887b      	ldrh	r3, [r7, #2]
 800151c:	401a      	ands	r2, r3
 800151e:	887b      	ldrh	r3, [r7, #2]
 8001520:	429a      	cmp	r2, r3
 8001522:	d104      	bne.n	800152e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001524:	887b      	ldrh	r3, [r7, #2]
 8001526:	041a      	lsls	r2, r3, #16
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 800152c:	e002      	b.n	8001534 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800152e:	887a      	ldrh	r2, [r7, #2]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	619a      	str	r2, [r3, #24]
}
 8001534:	bf00      	nop
 8001536:	370c      	adds	r7, #12
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr

08001540 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001540:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001542:	b08f      	sub	sp, #60	; 0x3c
 8001544:	af0a      	add	r7, sp, #40	; 0x28
 8001546:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d101      	bne.n	8001552 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e10a      	b.n	8001768 <HAL_PCD_Init+0x228>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001558:	b2db      	uxtb	r3, r3
 800155a:	2b00      	cmp	r3, #0
 800155c:	d106      	bne.n	800156c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2200      	movs	r2, #0
 8001562:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	f002 fc20 	bl	8003dac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2203      	movs	r2, #3
 8001570:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4618      	mov	r0, r3
 800157a:	f001 fe75 	bl	8003268 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	603b      	str	r3, [r7, #0]
 8001584:	687e      	ldr	r6, [r7, #4]
 8001586:	466d      	mov	r5, sp
 8001588:	f106 0410 	add.w	r4, r6, #16
 800158c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800158e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001590:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001592:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001594:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001598:	e885 0003 	stmia.w	r5, {r0, r1}
 800159c:	1d33      	adds	r3, r6, #4
 800159e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015a0:	6838      	ldr	r0, [r7, #0]
 80015a2:	f001 fe09 	bl	80031b8 <USB_CoreInit>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d005      	beq.n	80015b8 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2202      	movs	r2, #2
 80015b0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80015b4:	2301      	movs	r3, #1
 80015b6:	e0d7      	b.n	8001768 <HAL_PCD_Init+0x228>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	2100      	movs	r1, #0
 80015be:	4618      	mov	r0, r3
 80015c0:	f001 fe63 	bl	800328a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015c4:	2300      	movs	r3, #0
 80015c6:	73fb      	strb	r3, [r7, #15]
 80015c8:	e04a      	b.n	8001660 <HAL_PCD_Init+0x120>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80015ca:	7bfa      	ldrb	r2, [r7, #15]
 80015cc:	6879      	ldr	r1, [r7, #4]
 80015ce:	4613      	mov	r3, r2
 80015d0:	00db      	lsls	r3, r3, #3
 80015d2:	1a9b      	subs	r3, r3, r2
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	440b      	add	r3, r1
 80015d8:	333d      	adds	r3, #61	; 0x3d
 80015da:	2201      	movs	r2, #1
 80015dc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80015de:	7bfa      	ldrb	r2, [r7, #15]
 80015e0:	6879      	ldr	r1, [r7, #4]
 80015e2:	4613      	mov	r3, r2
 80015e4:	00db      	lsls	r3, r3, #3
 80015e6:	1a9b      	subs	r3, r3, r2
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	440b      	add	r3, r1
 80015ec:	333c      	adds	r3, #60	; 0x3c
 80015ee:	7bfa      	ldrb	r2, [r7, #15]
 80015f0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80015f2:	7bfa      	ldrb	r2, [r7, #15]
 80015f4:	7bfb      	ldrb	r3, [r7, #15]
 80015f6:	b298      	uxth	r0, r3
 80015f8:	6879      	ldr	r1, [r7, #4]
 80015fa:	4613      	mov	r3, r2
 80015fc:	00db      	lsls	r3, r3, #3
 80015fe:	1a9b      	subs	r3, r3, r2
 8001600:	009b      	lsls	r3, r3, #2
 8001602:	440b      	add	r3, r1
 8001604:	3342      	adds	r3, #66	; 0x42
 8001606:	4602      	mov	r2, r0
 8001608:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800160a:	7bfa      	ldrb	r2, [r7, #15]
 800160c:	6879      	ldr	r1, [r7, #4]
 800160e:	4613      	mov	r3, r2
 8001610:	00db      	lsls	r3, r3, #3
 8001612:	1a9b      	subs	r3, r3, r2
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	440b      	add	r3, r1
 8001618:	333f      	adds	r3, #63	; 0x3f
 800161a:	2200      	movs	r2, #0
 800161c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800161e:	7bfa      	ldrb	r2, [r7, #15]
 8001620:	6879      	ldr	r1, [r7, #4]
 8001622:	4613      	mov	r3, r2
 8001624:	00db      	lsls	r3, r3, #3
 8001626:	1a9b      	subs	r3, r3, r2
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	440b      	add	r3, r1
 800162c:	3344      	adds	r3, #68	; 0x44
 800162e:	2200      	movs	r2, #0
 8001630:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001632:	7bfa      	ldrb	r2, [r7, #15]
 8001634:	6879      	ldr	r1, [r7, #4]
 8001636:	4613      	mov	r3, r2
 8001638:	00db      	lsls	r3, r3, #3
 800163a:	1a9b      	subs	r3, r3, r2
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	440b      	add	r3, r1
 8001640:	3348      	adds	r3, #72	; 0x48
 8001642:	2200      	movs	r2, #0
 8001644:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001646:	7bfa      	ldrb	r2, [r7, #15]
 8001648:	6879      	ldr	r1, [r7, #4]
 800164a:	4613      	mov	r3, r2
 800164c:	00db      	lsls	r3, r3, #3
 800164e:	1a9b      	subs	r3, r3, r2
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	440b      	add	r3, r1
 8001654:	3350      	adds	r3, #80	; 0x50
 8001656:	2200      	movs	r2, #0
 8001658:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800165a:	7bfb      	ldrb	r3, [r7, #15]
 800165c:	3301      	adds	r3, #1
 800165e:	73fb      	strb	r3, [r7, #15]
 8001660:	7bfa      	ldrb	r2, [r7, #15]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	429a      	cmp	r2, r3
 8001668:	d3af      	bcc.n	80015ca <HAL_PCD_Init+0x8a>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800166a:	2300      	movs	r3, #0
 800166c:	73fb      	strb	r3, [r7, #15]
 800166e:	e044      	b.n	80016fa <HAL_PCD_Init+0x1ba>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001670:	7bfa      	ldrb	r2, [r7, #15]
 8001672:	6879      	ldr	r1, [r7, #4]
 8001674:	4613      	mov	r3, r2
 8001676:	00db      	lsls	r3, r3, #3
 8001678:	1a9b      	subs	r3, r3, r2
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	440b      	add	r3, r1
 800167e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001682:	2200      	movs	r2, #0
 8001684:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001686:	7bfa      	ldrb	r2, [r7, #15]
 8001688:	6879      	ldr	r1, [r7, #4]
 800168a:	4613      	mov	r3, r2
 800168c:	00db      	lsls	r3, r3, #3
 800168e:	1a9b      	subs	r3, r3, r2
 8001690:	009b      	lsls	r3, r3, #2
 8001692:	440b      	add	r3, r1
 8001694:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001698:	7bfa      	ldrb	r2, [r7, #15]
 800169a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800169c:	7bfa      	ldrb	r2, [r7, #15]
 800169e:	6879      	ldr	r1, [r7, #4]
 80016a0:	4613      	mov	r3, r2
 80016a2:	00db      	lsls	r3, r3, #3
 80016a4:	1a9b      	subs	r3, r3, r2
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	440b      	add	r3, r1
 80016aa:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80016ae:	2200      	movs	r2, #0
 80016b0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80016b2:	7bfa      	ldrb	r2, [r7, #15]
 80016b4:	6879      	ldr	r1, [r7, #4]
 80016b6:	4613      	mov	r3, r2
 80016b8:	00db      	lsls	r3, r3, #3
 80016ba:	1a9b      	subs	r3, r3, r2
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	440b      	add	r3, r1
 80016c0:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80016c4:	2200      	movs	r2, #0
 80016c6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80016c8:	7bfa      	ldrb	r2, [r7, #15]
 80016ca:	6879      	ldr	r1, [r7, #4]
 80016cc:	4613      	mov	r3, r2
 80016ce:	00db      	lsls	r3, r3, #3
 80016d0:	1a9b      	subs	r3, r3, r2
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	440b      	add	r3, r1
 80016d6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80016da:	2200      	movs	r2, #0
 80016dc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80016de:	7bfa      	ldrb	r2, [r7, #15]
 80016e0:	6879      	ldr	r1, [r7, #4]
 80016e2:	4613      	mov	r3, r2
 80016e4:	00db      	lsls	r3, r3, #3
 80016e6:	1a9b      	subs	r3, r3, r2
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	440b      	add	r3, r1
 80016ec:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80016f0:	2200      	movs	r2, #0
 80016f2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016f4:	7bfb      	ldrb	r3, [r7, #15]
 80016f6:	3301      	adds	r3, #1
 80016f8:	73fb      	strb	r3, [r7, #15]
 80016fa:	7bfa      	ldrb	r2, [r7, #15]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	429a      	cmp	r2, r3
 8001702:	d3b5      	bcc.n	8001670 <HAL_PCD_Init+0x130>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	603b      	str	r3, [r7, #0]
 800170a:	687e      	ldr	r6, [r7, #4]
 800170c:	466d      	mov	r5, sp
 800170e:	f106 0410 	add.w	r4, r6, #16
 8001712:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001714:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001716:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001718:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800171a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800171e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001722:	1d33      	adds	r3, r6, #4
 8001724:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001726:	6838      	ldr	r0, [r7, #0]
 8001728:	f001 fdda 	bl	80032e0 <USB_DevInit>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d005      	beq.n	800173e <HAL_PCD_Init+0x1fe>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2202      	movs	r2, #2
 8001736:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e014      	b.n	8001768 <HAL_PCD_Init+0x228>
  }

  hpcd->USB_Address = 0U;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2200      	movs	r2, #0
 8001742:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2201      	movs	r2, #1
 800174a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001752:	2b01      	cmp	r3, #1
 8001754:	d102      	bne.n	800175c <HAL_PCD_Init+0x21c>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f000 f80a 	bl	8001770 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4618      	mov	r0, r3
 8001762:	f001 ff9a 	bl	800369a <USB_DevDisconnect>

  return HAL_OK;
 8001766:	2300      	movs	r3, #0
}
 8001768:	4618      	mov	r0, r3
 800176a:	3714      	adds	r7, #20
 800176c:	46bd      	mov	sp, r7
 800176e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001770 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001770:	b480      	push	{r7}
 8001772:	b085      	sub	sp, #20
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2201      	movs	r2, #1
 8001782:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2200      	movs	r2, #0
 800178a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	699b      	ldr	r3, [r3, #24]
 8001792:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800179e:	4b05      	ldr	r3, [pc, #20]	; (80017b4 <HAL_PCDEx_ActivateLPM+0x44>)
 80017a0:	4313      	orrs	r3, r2
 80017a2:	68fa      	ldr	r2, [r7, #12]
 80017a4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80017a6:	2300      	movs	r3, #0
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3714      	adds	r7, #20
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr
 80017b4:	10000003 	.word	0x10000003

080017b8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80017bc:	4b05      	ldr	r3, [pc, #20]	; (80017d4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a04      	ldr	r2, [pc, #16]	; (80017d4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80017c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017c6:	6013      	str	r3, [r2, #0]
}
 80017c8:	bf00      	nop
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	40007000 	.word	0x40007000

080017d8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b086      	sub	sp, #24
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 80017e0:	2300      	movs	r3, #0
 80017e2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d101      	bne.n	80017ee <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e25c      	b.n	8001ca8 <HAL_RCC_OscConfig+0x4d0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 0301 	and.w	r3, r3, #1
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	f000 8087 	beq.w	800190a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80017fc:	4b96      	ldr	r3, [pc, #600]	; (8001a58 <HAL_RCC_OscConfig+0x280>)
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	f003 030c 	and.w	r3, r3, #12
 8001804:	2b04      	cmp	r3, #4
 8001806:	d00c      	beq.n	8001822 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001808:	4b93      	ldr	r3, [pc, #588]	; (8001a58 <HAL_RCC_OscConfig+0x280>)
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	f003 030c 	and.w	r3, r3, #12
 8001810:	2b08      	cmp	r3, #8
 8001812:	d112      	bne.n	800183a <HAL_RCC_OscConfig+0x62>
 8001814:	4b90      	ldr	r3, [pc, #576]	; (8001a58 <HAL_RCC_OscConfig+0x280>)
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800181c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001820:	d10b      	bne.n	800183a <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001822:	4b8d      	ldr	r3, [pc, #564]	; (8001a58 <HAL_RCC_OscConfig+0x280>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d06c      	beq.n	8001908 <HAL_RCC_OscConfig+0x130>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d168      	bne.n	8001908 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e236      	b.n	8001ca8 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001842:	d106      	bne.n	8001852 <HAL_RCC_OscConfig+0x7a>
 8001844:	4b84      	ldr	r3, [pc, #528]	; (8001a58 <HAL_RCC_OscConfig+0x280>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a83      	ldr	r2, [pc, #524]	; (8001a58 <HAL_RCC_OscConfig+0x280>)
 800184a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800184e:	6013      	str	r3, [r2, #0]
 8001850:	e02e      	b.n	80018b0 <HAL_RCC_OscConfig+0xd8>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d10c      	bne.n	8001874 <HAL_RCC_OscConfig+0x9c>
 800185a:	4b7f      	ldr	r3, [pc, #508]	; (8001a58 <HAL_RCC_OscConfig+0x280>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a7e      	ldr	r2, [pc, #504]	; (8001a58 <HAL_RCC_OscConfig+0x280>)
 8001860:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001864:	6013      	str	r3, [r2, #0]
 8001866:	4b7c      	ldr	r3, [pc, #496]	; (8001a58 <HAL_RCC_OscConfig+0x280>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a7b      	ldr	r2, [pc, #492]	; (8001a58 <HAL_RCC_OscConfig+0x280>)
 800186c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001870:	6013      	str	r3, [r2, #0]
 8001872:	e01d      	b.n	80018b0 <HAL_RCC_OscConfig+0xd8>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800187c:	d10c      	bne.n	8001898 <HAL_RCC_OscConfig+0xc0>
 800187e:	4b76      	ldr	r3, [pc, #472]	; (8001a58 <HAL_RCC_OscConfig+0x280>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a75      	ldr	r2, [pc, #468]	; (8001a58 <HAL_RCC_OscConfig+0x280>)
 8001884:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001888:	6013      	str	r3, [r2, #0]
 800188a:	4b73      	ldr	r3, [pc, #460]	; (8001a58 <HAL_RCC_OscConfig+0x280>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a72      	ldr	r2, [pc, #456]	; (8001a58 <HAL_RCC_OscConfig+0x280>)
 8001890:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001894:	6013      	str	r3, [r2, #0]
 8001896:	e00b      	b.n	80018b0 <HAL_RCC_OscConfig+0xd8>
 8001898:	4b6f      	ldr	r3, [pc, #444]	; (8001a58 <HAL_RCC_OscConfig+0x280>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a6e      	ldr	r2, [pc, #440]	; (8001a58 <HAL_RCC_OscConfig+0x280>)
 800189e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018a2:	6013      	str	r3, [r2, #0]
 80018a4:	4b6c      	ldr	r3, [pc, #432]	; (8001a58 <HAL_RCC_OscConfig+0x280>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a6b      	ldr	r2, [pc, #428]	; (8001a58 <HAL_RCC_OscConfig+0x280>)
 80018aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d013      	beq.n	80018e0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018b8:	f7fe fecc 	bl	8000654 <HAL_GetTick>
 80018bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018be:	e008      	b.n	80018d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018c0:	f7fe fec8 	bl	8000654 <HAL_GetTick>
 80018c4:	4602      	mov	r2, r0
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	2b64      	cmp	r3, #100	; 0x64
 80018cc:	d901      	bls.n	80018d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80018ce:	2303      	movs	r3, #3
 80018d0:	e1ea      	b.n	8001ca8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018d2:	4b61      	ldr	r3, [pc, #388]	; (8001a58 <HAL_RCC_OscConfig+0x280>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d0f0      	beq.n	80018c0 <HAL_RCC_OscConfig+0xe8>
 80018de:	e014      	b.n	800190a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018e0:	f7fe feb8 	bl	8000654 <HAL_GetTick>
 80018e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018e6:	e008      	b.n	80018fa <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018e8:	f7fe feb4 	bl	8000654 <HAL_GetTick>
 80018ec:	4602      	mov	r2, r0
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	2b64      	cmp	r3, #100	; 0x64
 80018f4:	d901      	bls.n	80018fa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80018f6:	2303      	movs	r3, #3
 80018f8:	e1d6      	b.n	8001ca8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018fa:	4b57      	ldr	r3, [pc, #348]	; (8001a58 <HAL_RCC_OscConfig+0x280>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d1f0      	bne.n	80018e8 <HAL_RCC_OscConfig+0x110>
 8001906:	e000      	b.n	800190a <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001908:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 0302 	and.w	r3, r3, #2
 8001912:	2b00      	cmp	r3, #0
 8001914:	d069      	beq.n	80019ea <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001916:	4b50      	ldr	r3, [pc, #320]	; (8001a58 <HAL_RCC_OscConfig+0x280>)
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	f003 030c 	and.w	r3, r3, #12
 800191e:	2b00      	cmp	r3, #0
 8001920:	d00b      	beq.n	800193a <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001922:	4b4d      	ldr	r3, [pc, #308]	; (8001a58 <HAL_RCC_OscConfig+0x280>)
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	f003 030c 	and.w	r3, r3, #12
 800192a:	2b08      	cmp	r3, #8
 800192c:	d11c      	bne.n	8001968 <HAL_RCC_OscConfig+0x190>
 800192e:	4b4a      	ldr	r3, [pc, #296]	; (8001a58 <HAL_RCC_OscConfig+0x280>)
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001936:	2b00      	cmp	r3, #0
 8001938:	d116      	bne.n	8001968 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800193a:	4b47      	ldr	r3, [pc, #284]	; (8001a58 <HAL_RCC_OscConfig+0x280>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 0302 	and.w	r3, r3, #2
 8001942:	2b00      	cmp	r3, #0
 8001944:	d005      	beq.n	8001952 <HAL_RCC_OscConfig+0x17a>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	68db      	ldr	r3, [r3, #12]
 800194a:	2b01      	cmp	r3, #1
 800194c:	d001      	beq.n	8001952 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e1aa      	b.n	8001ca8 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001952:	4b41      	ldr	r3, [pc, #260]	; (8001a58 <HAL_RCC_OscConfig+0x280>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	691b      	ldr	r3, [r3, #16]
 800195e:	00db      	lsls	r3, r3, #3
 8001960:	493d      	ldr	r1, [pc, #244]	; (8001a58 <HAL_RCC_OscConfig+0x280>)
 8001962:	4313      	orrs	r3, r2
 8001964:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001966:	e040      	b.n	80019ea <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d023      	beq.n	80019b8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001970:	4b39      	ldr	r3, [pc, #228]	; (8001a58 <HAL_RCC_OscConfig+0x280>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a38      	ldr	r2, [pc, #224]	; (8001a58 <HAL_RCC_OscConfig+0x280>)
 8001976:	f043 0301 	orr.w	r3, r3, #1
 800197a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800197c:	f7fe fe6a 	bl	8000654 <HAL_GetTick>
 8001980:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001982:	e008      	b.n	8001996 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001984:	f7fe fe66 	bl	8000654 <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	2b02      	cmp	r3, #2
 8001990:	d901      	bls.n	8001996 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001992:	2303      	movs	r3, #3
 8001994:	e188      	b.n	8001ca8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001996:	4b30      	ldr	r3, [pc, #192]	; (8001a58 <HAL_RCC_OscConfig+0x280>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 0302 	and.w	r3, r3, #2
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d0f0      	beq.n	8001984 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019a2:	4b2d      	ldr	r3, [pc, #180]	; (8001a58 <HAL_RCC_OscConfig+0x280>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	691b      	ldr	r3, [r3, #16]
 80019ae:	00db      	lsls	r3, r3, #3
 80019b0:	4929      	ldr	r1, [pc, #164]	; (8001a58 <HAL_RCC_OscConfig+0x280>)
 80019b2:	4313      	orrs	r3, r2
 80019b4:	600b      	str	r3, [r1, #0]
 80019b6:	e018      	b.n	80019ea <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019b8:	4b27      	ldr	r3, [pc, #156]	; (8001a58 <HAL_RCC_OscConfig+0x280>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a26      	ldr	r2, [pc, #152]	; (8001a58 <HAL_RCC_OscConfig+0x280>)
 80019be:	f023 0301 	bic.w	r3, r3, #1
 80019c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c4:	f7fe fe46 	bl	8000654 <HAL_GetTick>
 80019c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019ca:	e008      	b.n	80019de <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019cc:	f7fe fe42 	bl	8000654 <HAL_GetTick>
 80019d0:	4602      	mov	r2, r0
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d901      	bls.n	80019de <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80019da:	2303      	movs	r3, #3
 80019dc:	e164      	b.n	8001ca8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019de:	4b1e      	ldr	r3, [pc, #120]	; (8001a58 <HAL_RCC_OscConfig+0x280>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 0302 	and.w	r3, r3, #2
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d1f0      	bne.n	80019cc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 0308 	and.w	r3, r3, #8
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d038      	beq.n	8001a68 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	695b      	ldr	r3, [r3, #20]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d019      	beq.n	8001a32 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019fe:	4b16      	ldr	r3, [pc, #88]	; (8001a58 <HAL_RCC_OscConfig+0x280>)
 8001a00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a02:	4a15      	ldr	r2, [pc, #84]	; (8001a58 <HAL_RCC_OscConfig+0x280>)
 8001a04:	f043 0301 	orr.w	r3, r3, #1
 8001a08:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a0a:	f7fe fe23 	bl	8000654 <HAL_GetTick>
 8001a0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a10:	e008      	b.n	8001a24 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a12:	f7fe fe1f 	bl	8000654 <HAL_GetTick>
 8001a16:	4602      	mov	r2, r0
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	d901      	bls.n	8001a24 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001a20:	2303      	movs	r3, #3
 8001a22:	e141      	b.n	8001ca8 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a24:	4b0c      	ldr	r3, [pc, #48]	; (8001a58 <HAL_RCC_OscConfig+0x280>)
 8001a26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a28:	f003 0302 	and.w	r3, r3, #2
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d0f0      	beq.n	8001a12 <HAL_RCC_OscConfig+0x23a>
 8001a30:	e01a      	b.n	8001a68 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a32:	4b09      	ldr	r3, [pc, #36]	; (8001a58 <HAL_RCC_OscConfig+0x280>)
 8001a34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a36:	4a08      	ldr	r2, [pc, #32]	; (8001a58 <HAL_RCC_OscConfig+0x280>)
 8001a38:	f023 0301 	bic.w	r3, r3, #1
 8001a3c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a3e:	f7fe fe09 	bl	8000654 <HAL_GetTick>
 8001a42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a44:	e00a      	b.n	8001a5c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a46:	f7fe fe05 	bl	8000654 <HAL_GetTick>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	1ad3      	subs	r3, r2, r3
 8001a50:	2b02      	cmp	r3, #2
 8001a52:	d903      	bls.n	8001a5c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001a54:	2303      	movs	r3, #3
 8001a56:	e127      	b.n	8001ca8 <HAL_RCC_OscConfig+0x4d0>
 8001a58:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a5c:	4b94      	ldr	r3, [pc, #592]	; (8001cb0 <HAL_RCC_OscConfig+0x4d8>)
 8001a5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a60:	f003 0302 	and.w	r3, r3, #2
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d1ee      	bne.n	8001a46 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 0304 	and.w	r3, r3, #4
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	f000 80a4 	beq.w	8001bbe <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a76:	4b8e      	ldr	r3, [pc, #568]	; (8001cb0 <HAL_RCC_OscConfig+0x4d8>)
 8001a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d10d      	bne.n	8001a9e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a82:	4b8b      	ldr	r3, [pc, #556]	; (8001cb0 <HAL_RCC_OscConfig+0x4d8>)
 8001a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a86:	4a8a      	ldr	r2, [pc, #552]	; (8001cb0 <HAL_RCC_OscConfig+0x4d8>)
 8001a88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a8c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a8e:	4b88      	ldr	r3, [pc, #544]	; (8001cb0 <HAL_RCC_OscConfig+0x4d8>)
 8001a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a96:	60fb      	str	r3, [r7, #12]
 8001a98:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a9e:	4b85      	ldr	r3, [pc, #532]	; (8001cb4 <HAL_RCC_OscConfig+0x4dc>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d118      	bne.n	8001adc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001aaa:	4b82      	ldr	r3, [pc, #520]	; (8001cb4 <HAL_RCC_OscConfig+0x4dc>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a81      	ldr	r2, [pc, #516]	; (8001cb4 <HAL_RCC_OscConfig+0x4dc>)
 8001ab0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ab4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ab6:	f7fe fdcd 	bl	8000654 <HAL_GetTick>
 8001aba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001abc:	e008      	b.n	8001ad0 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001abe:	f7fe fdc9 	bl	8000654 <HAL_GetTick>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	1ad3      	subs	r3, r2, r3
 8001ac8:	2b64      	cmp	r3, #100	; 0x64
 8001aca:	d901      	bls.n	8001ad0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001acc:	2303      	movs	r3, #3
 8001ace:	e0eb      	b.n	8001ca8 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ad0:	4b78      	ldr	r3, [pc, #480]	; (8001cb4 <HAL_RCC_OscConfig+0x4dc>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d0f0      	beq.n	8001abe <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d106      	bne.n	8001af2 <HAL_RCC_OscConfig+0x31a>
 8001ae4:	4b72      	ldr	r3, [pc, #456]	; (8001cb0 <HAL_RCC_OscConfig+0x4d8>)
 8001ae6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ae8:	4a71      	ldr	r2, [pc, #452]	; (8001cb0 <HAL_RCC_OscConfig+0x4d8>)
 8001aea:	f043 0301 	orr.w	r3, r3, #1
 8001aee:	6713      	str	r3, [r2, #112]	; 0x70
 8001af0:	e02d      	b.n	8001b4e <HAL_RCC_OscConfig+0x376>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d10c      	bne.n	8001b14 <HAL_RCC_OscConfig+0x33c>
 8001afa:	4b6d      	ldr	r3, [pc, #436]	; (8001cb0 <HAL_RCC_OscConfig+0x4d8>)
 8001afc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001afe:	4a6c      	ldr	r2, [pc, #432]	; (8001cb0 <HAL_RCC_OscConfig+0x4d8>)
 8001b00:	f023 0301 	bic.w	r3, r3, #1
 8001b04:	6713      	str	r3, [r2, #112]	; 0x70
 8001b06:	4b6a      	ldr	r3, [pc, #424]	; (8001cb0 <HAL_RCC_OscConfig+0x4d8>)
 8001b08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b0a:	4a69      	ldr	r2, [pc, #420]	; (8001cb0 <HAL_RCC_OscConfig+0x4d8>)
 8001b0c:	f023 0304 	bic.w	r3, r3, #4
 8001b10:	6713      	str	r3, [r2, #112]	; 0x70
 8001b12:	e01c      	b.n	8001b4e <HAL_RCC_OscConfig+0x376>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	2b05      	cmp	r3, #5
 8001b1a:	d10c      	bne.n	8001b36 <HAL_RCC_OscConfig+0x35e>
 8001b1c:	4b64      	ldr	r3, [pc, #400]	; (8001cb0 <HAL_RCC_OscConfig+0x4d8>)
 8001b1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b20:	4a63      	ldr	r2, [pc, #396]	; (8001cb0 <HAL_RCC_OscConfig+0x4d8>)
 8001b22:	f043 0304 	orr.w	r3, r3, #4
 8001b26:	6713      	str	r3, [r2, #112]	; 0x70
 8001b28:	4b61      	ldr	r3, [pc, #388]	; (8001cb0 <HAL_RCC_OscConfig+0x4d8>)
 8001b2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b2c:	4a60      	ldr	r2, [pc, #384]	; (8001cb0 <HAL_RCC_OscConfig+0x4d8>)
 8001b2e:	f043 0301 	orr.w	r3, r3, #1
 8001b32:	6713      	str	r3, [r2, #112]	; 0x70
 8001b34:	e00b      	b.n	8001b4e <HAL_RCC_OscConfig+0x376>
 8001b36:	4b5e      	ldr	r3, [pc, #376]	; (8001cb0 <HAL_RCC_OscConfig+0x4d8>)
 8001b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b3a:	4a5d      	ldr	r2, [pc, #372]	; (8001cb0 <HAL_RCC_OscConfig+0x4d8>)
 8001b3c:	f023 0301 	bic.w	r3, r3, #1
 8001b40:	6713      	str	r3, [r2, #112]	; 0x70
 8001b42:	4b5b      	ldr	r3, [pc, #364]	; (8001cb0 <HAL_RCC_OscConfig+0x4d8>)
 8001b44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b46:	4a5a      	ldr	r2, [pc, #360]	; (8001cb0 <HAL_RCC_OscConfig+0x4d8>)
 8001b48:	f023 0304 	bic.w	r3, r3, #4
 8001b4c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d015      	beq.n	8001b82 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b56:	f7fe fd7d 	bl	8000654 <HAL_GetTick>
 8001b5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b5c:	e00a      	b.n	8001b74 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b5e:	f7fe fd79 	bl	8000654 <HAL_GetTick>
 8001b62:	4602      	mov	r2, r0
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	1ad3      	subs	r3, r2, r3
 8001b68:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d901      	bls.n	8001b74 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001b70:	2303      	movs	r3, #3
 8001b72:	e099      	b.n	8001ca8 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b74:	4b4e      	ldr	r3, [pc, #312]	; (8001cb0 <HAL_RCC_OscConfig+0x4d8>)
 8001b76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b78:	f003 0302 	and.w	r3, r3, #2
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d0ee      	beq.n	8001b5e <HAL_RCC_OscConfig+0x386>
 8001b80:	e014      	b.n	8001bac <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b82:	f7fe fd67 	bl	8000654 <HAL_GetTick>
 8001b86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b88:	e00a      	b.n	8001ba0 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b8a:	f7fe fd63 	bl	8000654 <HAL_GetTick>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	1ad3      	subs	r3, r2, r3
 8001b94:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d901      	bls.n	8001ba0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	e083      	b.n	8001ca8 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ba0:	4b43      	ldr	r3, [pc, #268]	; (8001cb0 <HAL_RCC_OscConfig+0x4d8>)
 8001ba2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ba4:	f003 0302 	and.w	r3, r3, #2
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d1ee      	bne.n	8001b8a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001bac:	7dfb      	ldrb	r3, [r7, #23]
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d105      	bne.n	8001bbe <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bb2:	4b3f      	ldr	r3, [pc, #252]	; (8001cb0 <HAL_RCC_OscConfig+0x4d8>)
 8001bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb6:	4a3e      	ldr	r2, [pc, #248]	; (8001cb0 <HAL_RCC_OscConfig+0x4d8>)
 8001bb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bbc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	699b      	ldr	r3, [r3, #24]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d06f      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bc6:	4b3a      	ldr	r3, [pc, #232]	; (8001cb0 <HAL_RCC_OscConfig+0x4d8>)
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	f003 030c 	and.w	r3, r3, #12
 8001bce:	2b08      	cmp	r3, #8
 8001bd0:	d067      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x4ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	699b      	ldr	r3, [r3, #24]
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d149      	bne.n	8001c6e <HAL_RCC_OscConfig+0x496>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bda:	4b35      	ldr	r3, [pc, #212]	; (8001cb0 <HAL_RCC_OscConfig+0x4d8>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a34      	ldr	r2, [pc, #208]	; (8001cb0 <HAL_RCC_OscConfig+0x4d8>)
 8001be0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001be4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001be6:	f7fe fd35 	bl	8000654 <HAL_GetTick>
 8001bea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bec:	e008      	b.n	8001c00 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bee:	f7fe fd31 	bl	8000654 <HAL_GetTick>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	1ad3      	subs	r3, r2, r3
 8001bf8:	2b02      	cmp	r3, #2
 8001bfa:	d901      	bls.n	8001c00 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001bfc:	2303      	movs	r3, #3
 8001bfe:	e053      	b.n	8001ca8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c00:	4b2b      	ldr	r3, [pc, #172]	; (8001cb0 <HAL_RCC_OscConfig+0x4d8>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d1f0      	bne.n	8001bee <HAL_RCC_OscConfig+0x416>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	69da      	ldr	r2, [r3, #28]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6a1b      	ldr	r3, [r3, #32]
 8001c14:	431a      	orrs	r2, r3
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c1a:	019b      	lsls	r3, r3, #6
 8001c1c:	431a      	orrs	r2, r3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c22:	085b      	lsrs	r3, r3, #1
 8001c24:	3b01      	subs	r3, #1
 8001c26:	041b      	lsls	r3, r3, #16
 8001c28:	431a      	orrs	r2, r3
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c2e:	061b      	lsls	r3, r3, #24
 8001c30:	4313      	orrs	r3, r2
 8001c32:	4a1f      	ldr	r2, [pc, #124]	; (8001cb0 <HAL_RCC_OscConfig+0x4d8>)
 8001c34:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001c38:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c3a:	4b1d      	ldr	r3, [pc, #116]	; (8001cb0 <HAL_RCC_OscConfig+0x4d8>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a1c      	ldr	r2, [pc, #112]	; (8001cb0 <HAL_RCC_OscConfig+0x4d8>)
 8001c40:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c46:	f7fe fd05 	bl	8000654 <HAL_GetTick>
 8001c4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c4c:	e008      	b.n	8001c60 <HAL_RCC_OscConfig+0x488>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c4e:	f7fe fd01 	bl	8000654 <HAL_GetTick>
 8001c52:	4602      	mov	r2, r0
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	1ad3      	subs	r3, r2, r3
 8001c58:	2b02      	cmp	r3, #2
 8001c5a:	d901      	bls.n	8001c60 <HAL_RCC_OscConfig+0x488>
          {
            return HAL_TIMEOUT;
 8001c5c:	2303      	movs	r3, #3
 8001c5e:	e023      	b.n	8001ca8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c60:	4b13      	ldr	r3, [pc, #76]	; (8001cb0 <HAL_RCC_OscConfig+0x4d8>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d0f0      	beq.n	8001c4e <HAL_RCC_OscConfig+0x476>
 8001c6c:	e01b      	b.n	8001ca6 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c6e:	4b10      	ldr	r3, [pc, #64]	; (8001cb0 <HAL_RCC_OscConfig+0x4d8>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a0f      	ldr	r2, [pc, #60]	; (8001cb0 <HAL_RCC_OscConfig+0x4d8>)
 8001c74:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c7a:	f7fe fceb 	bl	8000654 <HAL_GetTick>
 8001c7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c80:	e008      	b.n	8001c94 <HAL_RCC_OscConfig+0x4bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c82:	f7fe fce7 	bl	8000654 <HAL_GetTick>
 8001c86:	4602      	mov	r2, r0
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	1ad3      	subs	r3, r2, r3
 8001c8c:	2b02      	cmp	r3, #2
 8001c8e:	d901      	bls.n	8001c94 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8001c90:	2303      	movs	r3, #3
 8001c92:	e009      	b.n	8001ca8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c94:	4b06      	ldr	r3, [pc, #24]	; (8001cb0 <HAL_RCC_OscConfig+0x4d8>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d1f0      	bne.n	8001c82 <HAL_RCC_OscConfig+0x4aa>
 8001ca0:	e001      	b.n	8001ca6 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e000      	b.n	8001ca8 <HAL_RCC_OscConfig+0x4d0>
    }
  }
  return HAL_OK;
 8001ca6:	2300      	movs	r3, #0
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3718      	adds	r7, #24
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	40023800 	.word	0x40023800
 8001cb4:	40007000 	.word	0x40007000

08001cb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d101      	bne.n	8001cd0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e0ce      	b.n	8001e6e <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001cd0:	4b69      	ldr	r3, [pc, #420]	; (8001e78 <HAL_RCC_ClockConfig+0x1c0>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 030f 	and.w	r3, r3, #15
 8001cd8:	683a      	ldr	r2, [r7, #0]
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	d910      	bls.n	8001d00 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cde:	4b66      	ldr	r3, [pc, #408]	; (8001e78 <HAL_RCC_ClockConfig+0x1c0>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f023 020f 	bic.w	r2, r3, #15
 8001ce6:	4964      	ldr	r1, [pc, #400]	; (8001e78 <HAL_RCC_ClockConfig+0x1c0>)
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	4313      	orrs	r3, r2
 8001cec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cee:	4b62      	ldr	r3, [pc, #392]	; (8001e78 <HAL_RCC_ClockConfig+0x1c0>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 030f 	and.w	r3, r3, #15
 8001cf6:	683a      	ldr	r2, [r7, #0]
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d001      	beq.n	8001d00 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	e0b6      	b.n	8001e6e <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 0302 	and.w	r3, r3, #2
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d020      	beq.n	8001d4e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 0304 	and.w	r3, r3, #4
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d005      	beq.n	8001d24 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d18:	4b58      	ldr	r3, [pc, #352]	; (8001e7c <HAL_RCC_ClockConfig+0x1c4>)
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	4a57      	ldr	r2, [pc, #348]	; (8001e7c <HAL_RCC_ClockConfig+0x1c4>)
 8001d1e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001d22:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 0308 	and.w	r3, r3, #8
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d005      	beq.n	8001d3c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d30:	4b52      	ldr	r3, [pc, #328]	; (8001e7c <HAL_RCC_ClockConfig+0x1c4>)
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	4a51      	ldr	r2, [pc, #324]	; (8001e7c <HAL_RCC_ClockConfig+0x1c4>)
 8001d36:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001d3a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d3c:	4b4f      	ldr	r3, [pc, #316]	; (8001e7c <HAL_RCC_ClockConfig+0x1c4>)
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	494c      	ldr	r1, [pc, #304]	; (8001e7c <HAL_RCC_ClockConfig+0x1c4>)
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 0301 	and.w	r3, r3, #1
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d040      	beq.n	8001ddc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d107      	bne.n	8001d72 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d62:	4b46      	ldr	r3, [pc, #280]	; (8001e7c <HAL_RCC_ClockConfig+0x1c4>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d115      	bne.n	8001d9a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e07d      	b.n	8001e6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	d107      	bne.n	8001d8a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d7a:	4b40      	ldr	r3, [pc, #256]	; (8001e7c <HAL_RCC_ClockConfig+0x1c4>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d109      	bne.n	8001d9a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e071      	b.n	8001e6e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d8a:	4b3c      	ldr	r3, [pc, #240]	; (8001e7c <HAL_RCC_ClockConfig+0x1c4>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0302 	and.w	r3, r3, #2
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d101      	bne.n	8001d9a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e069      	b.n	8001e6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d9a:	4b38      	ldr	r3, [pc, #224]	; (8001e7c <HAL_RCC_ClockConfig+0x1c4>)
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	f023 0203 	bic.w	r2, r3, #3
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	4935      	ldr	r1, [pc, #212]	; (8001e7c <HAL_RCC_ClockConfig+0x1c4>)
 8001da8:	4313      	orrs	r3, r2
 8001daa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001dac:	f7fe fc52 	bl	8000654 <HAL_GetTick>
 8001db0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001db2:	e00a      	b.n	8001dca <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001db4:	f7fe fc4e 	bl	8000654 <HAL_GetTick>
 8001db8:	4602      	mov	r2, r0
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d901      	bls.n	8001dca <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e051      	b.n	8001e6e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dca:	4b2c      	ldr	r3, [pc, #176]	; (8001e7c <HAL_RCC_ClockConfig+0x1c4>)
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	f003 020c 	and.w	r2, r3, #12
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d1eb      	bne.n	8001db4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ddc:	4b26      	ldr	r3, [pc, #152]	; (8001e78 <HAL_RCC_ClockConfig+0x1c0>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 030f 	and.w	r3, r3, #15
 8001de4:	683a      	ldr	r2, [r7, #0]
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d210      	bcs.n	8001e0c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dea:	4b23      	ldr	r3, [pc, #140]	; (8001e78 <HAL_RCC_ClockConfig+0x1c0>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f023 020f 	bic.w	r2, r3, #15
 8001df2:	4921      	ldr	r1, [pc, #132]	; (8001e78 <HAL_RCC_ClockConfig+0x1c0>)
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	4313      	orrs	r3, r2
 8001df8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dfa:	4b1f      	ldr	r3, [pc, #124]	; (8001e78 <HAL_RCC_ClockConfig+0x1c0>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 030f 	and.w	r3, r3, #15
 8001e02:	683a      	ldr	r2, [r7, #0]
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d001      	beq.n	8001e0c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e030      	b.n	8001e6e <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 0304 	and.w	r3, r3, #4
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d008      	beq.n	8001e2a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e18:	4b18      	ldr	r3, [pc, #96]	; (8001e7c <HAL_RCC_ClockConfig+0x1c4>)
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	4915      	ldr	r1, [pc, #84]	; (8001e7c <HAL_RCC_ClockConfig+0x1c4>)
 8001e26:	4313      	orrs	r3, r2
 8001e28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 0308 	and.w	r3, r3, #8
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d009      	beq.n	8001e4a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e36:	4b11      	ldr	r3, [pc, #68]	; (8001e7c <HAL_RCC_ClockConfig+0x1c4>)
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	691b      	ldr	r3, [r3, #16]
 8001e42:	00db      	lsls	r3, r3, #3
 8001e44:	490d      	ldr	r1, [pc, #52]	; (8001e7c <HAL_RCC_ClockConfig+0x1c4>)
 8001e46:	4313      	orrs	r3, r2
 8001e48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e4a:	f000 f81d 	bl	8001e88 <HAL_RCC_GetSysClockFreq>
 8001e4e:	4601      	mov	r1, r0
 8001e50:	4b0a      	ldr	r3, [pc, #40]	; (8001e7c <HAL_RCC_ClockConfig+0x1c4>)
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	091b      	lsrs	r3, r3, #4
 8001e56:	f003 030f 	and.w	r3, r3, #15
 8001e5a:	4a09      	ldr	r2, [pc, #36]	; (8001e80 <HAL_RCC_ClockConfig+0x1c8>)
 8001e5c:	5cd3      	ldrb	r3, [r2, r3]
 8001e5e:	fa21 f303 	lsr.w	r3, r1, r3
 8001e62:	4a08      	ldr	r2, [pc, #32]	; (8001e84 <HAL_RCC_ClockConfig+0x1cc>)
 8001e64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001e66:	2000      	movs	r0, #0
 8001e68:	f7fe fbb0 	bl	80005cc <HAL_InitTick>

  return HAL_OK;
 8001e6c:	2300      	movs	r3, #0
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3710      	adds	r7, #16
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	40023c00 	.word	0x40023c00
 8001e7c:	40023800 	.word	0x40023800
 8001e80:	08004f04 	.word	0x08004f04
 8001e84:	20000008 	.word	0x20000008

08001e88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e8a:	b085      	sub	sp, #20
 8001e8c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	607b      	str	r3, [r7, #4]
 8001e92:	2300      	movs	r3, #0
 8001e94:	60fb      	str	r3, [r7, #12]
 8001e96:	2300      	movs	r3, #0
 8001e98:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e9e:	4b63      	ldr	r3, [pc, #396]	; (800202c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	f003 030c 	and.w	r3, r3, #12
 8001ea6:	2b04      	cmp	r3, #4
 8001ea8:	d007      	beq.n	8001eba <HAL_RCC_GetSysClockFreq+0x32>
 8001eaa:	2b08      	cmp	r3, #8
 8001eac:	d008      	beq.n	8001ec0 <HAL_RCC_GetSysClockFreq+0x38>
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	f040 80b4 	bne.w	800201c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001eb4:	4b5e      	ldr	r3, [pc, #376]	; (8002030 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001eb6:	60bb      	str	r3, [r7, #8]
       break;
 8001eb8:	e0b3      	b.n	8002022 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001eba:	4b5e      	ldr	r3, [pc, #376]	; (8002034 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001ebc:	60bb      	str	r3, [r7, #8]
      break;
 8001ebe:	e0b0      	b.n	8002022 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ec0:	4b5a      	ldr	r3, [pc, #360]	; (800202c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ec8:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001eca:	4b58      	ldr	r3, [pc, #352]	; (800202c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d04a      	beq.n	8001f6c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ed6:	4b55      	ldr	r3, [pc, #340]	; (800202c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	099b      	lsrs	r3, r3, #6
 8001edc:	f04f 0400 	mov.w	r4, #0
 8001ee0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001ee4:	f04f 0200 	mov.w	r2, #0
 8001ee8:	ea03 0501 	and.w	r5, r3, r1
 8001eec:	ea04 0602 	and.w	r6, r4, r2
 8001ef0:	4629      	mov	r1, r5
 8001ef2:	4632      	mov	r2, r6
 8001ef4:	f04f 0300 	mov.w	r3, #0
 8001ef8:	f04f 0400 	mov.w	r4, #0
 8001efc:	0154      	lsls	r4, r2, #5
 8001efe:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001f02:	014b      	lsls	r3, r1, #5
 8001f04:	4619      	mov	r1, r3
 8001f06:	4622      	mov	r2, r4
 8001f08:	1b49      	subs	r1, r1, r5
 8001f0a:	eb62 0206 	sbc.w	r2, r2, r6
 8001f0e:	f04f 0300 	mov.w	r3, #0
 8001f12:	f04f 0400 	mov.w	r4, #0
 8001f16:	0194      	lsls	r4, r2, #6
 8001f18:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001f1c:	018b      	lsls	r3, r1, #6
 8001f1e:	1a5b      	subs	r3, r3, r1
 8001f20:	eb64 0402 	sbc.w	r4, r4, r2
 8001f24:	f04f 0100 	mov.w	r1, #0
 8001f28:	f04f 0200 	mov.w	r2, #0
 8001f2c:	00e2      	lsls	r2, r4, #3
 8001f2e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001f32:	00d9      	lsls	r1, r3, #3
 8001f34:	460b      	mov	r3, r1
 8001f36:	4614      	mov	r4, r2
 8001f38:	195b      	adds	r3, r3, r5
 8001f3a:	eb44 0406 	adc.w	r4, r4, r6
 8001f3e:	f04f 0100 	mov.w	r1, #0
 8001f42:	f04f 0200 	mov.w	r2, #0
 8001f46:	0262      	lsls	r2, r4, #9
 8001f48:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001f4c:	0259      	lsls	r1, r3, #9
 8001f4e:	460b      	mov	r3, r1
 8001f50:	4614      	mov	r4, r2
 8001f52:	4618      	mov	r0, r3
 8001f54:	4621      	mov	r1, r4
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	f04f 0400 	mov.w	r4, #0
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	4623      	mov	r3, r4
 8001f60:	f7fe f9a6 	bl	80002b0 <__aeabi_uldivmod>
 8001f64:	4603      	mov	r3, r0
 8001f66:	460c      	mov	r4, r1
 8001f68:	60fb      	str	r3, [r7, #12]
 8001f6a:	e049      	b.n	8002000 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f6c:	4b2f      	ldr	r3, [pc, #188]	; (800202c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	099b      	lsrs	r3, r3, #6
 8001f72:	f04f 0400 	mov.w	r4, #0
 8001f76:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001f7a:	f04f 0200 	mov.w	r2, #0
 8001f7e:	ea03 0501 	and.w	r5, r3, r1
 8001f82:	ea04 0602 	and.w	r6, r4, r2
 8001f86:	4629      	mov	r1, r5
 8001f88:	4632      	mov	r2, r6
 8001f8a:	f04f 0300 	mov.w	r3, #0
 8001f8e:	f04f 0400 	mov.w	r4, #0
 8001f92:	0154      	lsls	r4, r2, #5
 8001f94:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001f98:	014b      	lsls	r3, r1, #5
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	4622      	mov	r2, r4
 8001f9e:	1b49      	subs	r1, r1, r5
 8001fa0:	eb62 0206 	sbc.w	r2, r2, r6
 8001fa4:	f04f 0300 	mov.w	r3, #0
 8001fa8:	f04f 0400 	mov.w	r4, #0
 8001fac:	0194      	lsls	r4, r2, #6
 8001fae:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001fb2:	018b      	lsls	r3, r1, #6
 8001fb4:	1a5b      	subs	r3, r3, r1
 8001fb6:	eb64 0402 	sbc.w	r4, r4, r2
 8001fba:	f04f 0100 	mov.w	r1, #0
 8001fbe:	f04f 0200 	mov.w	r2, #0
 8001fc2:	00e2      	lsls	r2, r4, #3
 8001fc4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001fc8:	00d9      	lsls	r1, r3, #3
 8001fca:	460b      	mov	r3, r1
 8001fcc:	4614      	mov	r4, r2
 8001fce:	195b      	adds	r3, r3, r5
 8001fd0:	eb44 0406 	adc.w	r4, r4, r6
 8001fd4:	f04f 0100 	mov.w	r1, #0
 8001fd8:	f04f 0200 	mov.w	r2, #0
 8001fdc:	02a2      	lsls	r2, r4, #10
 8001fde:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001fe2:	0299      	lsls	r1, r3, #10
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	4614      	mov	r4, r2
 8001fe8:	4618      	mov	r0, r3
 8001fea:	4621      	mov	r1, r4
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f04f 0400 	mov.w	r4, #0
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	4623      	mov	r3, r4
 8001ff6:	f7fe f95b 	bl	80002b0 <__aeabi_uldivmod>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	460c      	mov	r4, r1
 8001ffe:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8002000:	4b0a      	ldr	r3, [pc, #40]	; (800202c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	0c1b      	lsrs	r3, r3, #16
 8002006:	f003 0303 	and.w	r3, r3, #3
 800200a:	3301      	adds	r3, #1
 800200c:	005b      	lsls	r3, r3, #1
 800200e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002010:	68fa      	ldr	r2, [r7, #12]
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	fbb2 f3f3 	udiv	r3, r2, r3
 8002018:	60bb      	str	r3, [r7, #8]
      break;
 800201a:	e002      	b.n	8002022 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800201c:	4b04      	ldr	r3, [pc, #16]	; (8002030 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800201e:	60bb      	str	r3, [r7, #8]
      break;
 8002020:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002022:	68bb      	ldr	r3, [r7, #8]
}
 8002024:	4618      	mov	r0, r3
 8002026:	3714      	adds	r7, #20
 8002028:	46bd      	mov	sp, r7
 800202a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800202c:	40023800 	.word	0x40023800
 8002030:	00f42400 	.word	0x00f42400
 8002034:	007a1200 	.word	0x007a1200

08002038 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800203c:	4b03      	ldr	r3, [pc, #12]	; (800204c <HAL_RCC_GetHCLKFreq+0x14>)
 800203e:	681b      	ldr	r3, [r3, #0]
}
 8002040:	4618      	mov	r0, r3
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	20000008 	.word	0x20000008

08002050 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002054:	f7ff fff0 	bl	8002038 <HAL_RCC_GetHCLKFreq>
 8002058:	4601      	mov	r1, r0
 800205a:	4b05      	ldr	r3, [pc, #20]	; (8002070 <HAL_RCC_GetPCLK1Freq+0x20>)
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	0a9b      	lsrs	r3, r3, #10
 8002060:	f003 0307 	and.w	r3, r3, #7
 8002064:	4a03      	ldr	r2, [pc, #12]	; (8002074 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002066:	5cd3      	ldrb	r3, [r2, r3]
 8002068:	fa21 f303 	lsr.w	r3, r1, r3
}
 800206c:	4618      	mov	r0, r3
 800206e:	bd80      	pop	{r7, pc}
 8002070:	40023800 	.word	0x40023800
 8002074:	08004f14 	.word	0x08004f14

08002078 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800207c:	f7ff ffdc 	bl	8002038 <HAL_RCC_GetHCLKFreq>
 8002080:	4601      	mov	r1, r0
 8002082:	4b05      	ldr	r3, [pc, #20]	; (8002098 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	0b5b      	lsrs	r3, r3, #13
 8002088:	f003 0307 	and.w	r3, r3, #7
 800208c:	4a03      	ldr	r2, [pc, #12]	; (800209c <HAL_RCC_GetPCLK2Freq+0x24>)
 800208e:	5cd3      	ldrb	r3, [r2, r3]
 8002090:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002094:	4618      	mov	r0, r3
 8002096:	bd80      	pop	{r7, pc}
 8002098:	40023800 	.word	0x40023800
 800209c:	08004f14 	.word	0x08004f14

080020a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b088      	sub	sp, #32
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80020a8:	2300      	movs	r3, #0
 80020aa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80020ac:	2300      	movs	r3, #0
 80020ae:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80020b0:	2300      	movs	r3, #0
 80020b2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80020b4:	2300      	movs	r3, #0
 80020b6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80020b8:	2300      	movs	r3, #0
 80020ba:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 0301 	and.w	r3, r3, #1
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d012      	beq.n	80020ee <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80020c8:	4b69      	ldr	r3, [pc, #420]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	4a68      	ldr	r2, [pc, #416]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020ce:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80020d2:	6093      	str	r3, [r2, #8]
 80020d4:	4b66      	ldr	r3, [pc, #408]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020d6:	689a      	ldr	r2, [r3, #8]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020dc:	4964      	ldr	r1, [pc, #400]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020de:	4313      	orrs	r3, r2
 80020e0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d101      	bne.n	80020ee <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80020ea:	2301      	movs	r3, #1
 80020ec:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d017      	beq.n	800212a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80020fa:	4b5d      	ldr	r3, [pc, #372]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002100:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002108:	4959      	ldr	r1, [pc, #356]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800210a:	4313      	orrs	r3, r2
 800210c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002114:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002118:	d101      	bne.n	800211e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800211a:	2301      	movs	r3, #1
 800211c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002122:	2b00      	cmp	r3, #0
 8002124:	d101      	bne.n	800212a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002126:	2301      	movs	r3, #1
 8002128:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d017      	beq.n	8002166 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002136:	4b4e      	ldr	r3, [pc, #312]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002138:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800213c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002144:	494a      	ldr	r1, [pc, #296]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002146:	4313      	orrs	r3, r2
 8002148:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002150:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002154:	d101      	bne.n	800215a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002156:	2301      	movs	r3, #1
 8002158:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215e:	2b00      	cmp	r3, #0
 8002160:	d101      	bne.n	8002166 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002162:	2301      	movs	r3, #1
 8002164:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d001      	beq.n	8002176 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002172:	2301      	movs	r3, #1
 8002174:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0320 	and.w	r3, r3, #32
 800217e:	2b00      	cmp	r3, #0
 8002180:	f000 808b 	beq.w	800229a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002184:	4b3a      	ldr	r3, [pc, #232]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002188:	4a39      	ldr	r2, [pc, #228]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800218a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800218e:	6413      	str	r3, [r2, #64]	; 0x40
 8002190:	4b37      	ldr	r3, [pc, #220]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002194:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002198:	60bb      	str	r3, [r7, #8]
 800219a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800219c:	4b35      	ldr	r3, [pc, #212]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a34      	ldr	r2, [pc, #208]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80021a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021a8:	f7fe fa54 	bl	8000654 <HAL_GetTick>
 80021ac:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80021ae:	e008      	b.n	80021c2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021b0:	f7fe fa50 	bl	8000654 <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	2b64      	cmp	r3, #100	; 0x64
 80021bc:	d901      	bls.n	80021c2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e355      	b.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80021c2:	4b2c      	ldr	r3, [pc, #176]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d0f0      	beq.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80021ce:	4b28      	ldr	r3, [pc, #160]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021d6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d035      	beq.n	800224a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021e6:	693a      	ldr	r2, [r7, #16]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d02e      	beq.n	800224a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80021ec:	4b20      	ldr	r3, [pc, #128]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021f4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80021f6:	4b1e      	ldr	r3, [pc, #120]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021fa:	4a1d      	ldr	r2, [pc, #116]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002200:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002202:	4b1b      	ldr	r3, [pc, #108]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002206:	4a1a      	ldr	r2, [pc, #104]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002208:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800220c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800220e:	4a18      	ldr	r2, [pc, #96]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002214:	4b16      	ldr	r3, [pc, #88]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002216:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002218:	f003 0301 	and.w	r3, r3, #1
 800221c:	2b01      	cmp	r3, #1
 800221e:	d114      	bne.n	800224a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002220:	f7fe fa18 	bl	8000654 <HAL_GetTick>
 8002224:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002226:	e00a      	b.n	800223e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002228:	f7fe fa14 	bl	8000654 <HAL_GetTick>
 800222c:	4602      	mov	r2, r0
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	f241 3288 	movw	r2, #5000	; 0x1388
 8002236:	4293      	cmp	r3, r2
 8002238:	d901      	bls.n	800223e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800223a:	2303      	movs	r3, #3
 800223c:	e317      	b.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800223e:	4b0c      	ldr	r3, [pc, #48]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002242:	f003 0302 	and.w	r3, r3, #2
 8002246:	2b00      	cmp	r3, #0
 8002248:	d0ee      	beq.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002252:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002256:	d111      	bne.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002258:	4b05      	ldr	r3, [pc, #20]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002264:	4b04      	ldr	r3, [pc, #16]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002266:	400b      	ands	r3, r1
 8002268:	4901      	ldr	r1, [pc, #4]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800226a:	4313      	orrs	r3, r2
 800226c:	608b      	str	r3, [r1, #8]
 800226e:	e00b      	b.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002270:	40023800 	.word	0x40023800
 8002274:	40007000 	.word	0x40007000
 8002278:	0ffffcff 	.word	0x0ffffcff
 800227c:	4bb0      	ldr	r3, [pc, #704]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	4aaf      	ldr	r2, [pc, #700]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002282:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002286:	6093      	str	r3, [r2, #8]
 8002288:	4bad      	ldr	r3, [pc, #692]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800228a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002290:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002294:	49aa      	ldr	r1, [pc, #680]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002296:	4313      	orrs	r3, r2
 8002298:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0310 	and.w	r3, r3, #16
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d010      	beq.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80022a6:	4ba6      	ldr	r3, [pc, #664]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80022a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022ac:	4aa4      	ldr	r2, [pc, #656]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80022ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022b2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80022b6:	4ba2      	ldr	r3, [pc, #648]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80022b8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022c0:	499f      	ldr	r1, [pc, #636]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80022c2:	4313      	orrs	r3, r2
 80022c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d00a      	beq.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80022d4:	4b9a      	ldr	r3, [pc, #616]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80022d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022da:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80022e2:	4997      	ldr	r1, [pc, #604]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80022e4:	4313      	orrs	r3, r2
 80022e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d00a      	beq.n	800230c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80022f6:	4b92      	ldr	r3, [pc, #584]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80022f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022fc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002304:	498e      	ldr	r1, [pc, #568]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002306:	4313      	orrs	r3, r2
 8002308:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002314:	2b00      	cmp	r3, #0
 8002316:	d00a      	beq.n	800232e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002318:	4b89      	ldr	r3, [pc, #548]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800231a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800231e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002326:	4986      	ldr	r1, [pc, #536]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002328:	4313      	orrs	r3, r2
 800232a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d00a      	beq.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800233a:	4b81      	ldr	r3, [pc, #516]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800233c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002340:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002348:	497d      	ldr	r1, [pc, #500]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800234a:	4313      	orrs	r3, r2
 800234c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002358:	2b00      	cmp	r3, #0
 800235a:	d00a      	beq.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800235c:	4b78      	ldr	r3, [pc, #480]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800235e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002362:	f023 0203 	bic.w	r2, r3, #3
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800236a:	4975      	ldr	r1, [pc, #468]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800236c:	4313      	orrs	r3, r2
 800236e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800237a:	2b00      	cmp	r3, #0
 800237c:	d00a      	beq.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800237e:	4b70      	ldr	r3, [pc, #448]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002380:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002384:	f023 020c 	bic.w	r2, r3, #12
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800238c:	496c      	ldr	r1, [pc, #432]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800238e:	4313      	orrs	r3, r2
 8002390:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800239c:	2b00      	cmp	r3, #0
 800239e:	d00a      	beq.n	80023b6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80023a0:	4b67      	ldr	r3, [pc, #412]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80023a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023a6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023ae:	4964      	ldr	r1, [pc, #400]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80023b0:	4313      	orrs	r3, r2
 80023b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d00a      	beq.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80023c2:	4b5f      	ldr	r3, [pc, #380]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80023c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023c8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023d0:	495b      	ldr	r1, [pc, #364]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80023d2:	4313      	orrs	r3, r2
 80023d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d00a      	beq.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80023e4:	4b56      	ldr	r3, [pc, #344]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80023e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023f2:	4953      	ldr	r1, [pc, #332]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80023f4:	4313      	orrs	r3, r2
 80023f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002402:	2b00      	cmp	r3, #0
 8002404:	d00a      	beq.n	800241c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002406:	4b4e      	ldr	r3, [pc, #312]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002408:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800240c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002414:	494a      	ldr	r1, [pc, #296]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002416:	4313      	orrs	r3, r2
 8002418:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002424:	2b00      	cmp	r3, #0
 8002426:	d00a      	beq.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002428:	4b45      	ldr	r3, [pc, #276]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800242a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800242e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002436:	4942      	ldr	r1, [pc, #264]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002438:	4313      	orrs	r3, r2
 800243a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d00a      	beq.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800244a:	4b3d      	ldr	r3, [pc, #244]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800244c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002450:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002458:	4939      	ldr	r1, [pc, #228]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800245a:	4313      	orrs	r3, r2
 800245c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002468:	2b00      	cmp	r3, #0
 800246a:	d00a      	beq.n	8002482 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800246c:	4b34      	ldr	r3, [pc, #208]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800246e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002472:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800247a:	4931      	ldr	r1, [pc, #196]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800247c:	4313      	orrs	r3, r2
 800247e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d011      	beq.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800248e:	4b2c      	ldr	r3, [pc, #176]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002490:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002494:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800249c:	4928      	ldr	r1, [pc, #160]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800249e:	4313      	orrs	r3, r2
 80024a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80024a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80024ac:	d101      	bne.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80024ae:	2301      	movs	r3, #1
 80024b0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0308 	and.w	r3, r3, #8
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d001      	beq.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80024be:	2301      	movs	r3, #1
 80024c0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d00a      	beq.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80024ce:	4b1c      	ldr	r3, [pc, #112]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80024d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024d4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024dc:	4918      	ldr	r1, [pc, #96]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80024de:	4313      	orrs	r3, r2
 80024e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d00b      	beq.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80024f0:	4b13      	ldr	r3, [pc, #76]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80024f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024f6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002500:	490f      	ldr	r1, [pc, #60]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002502:	4313      	orrs	r3, r2
 8002504:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	2b01      	cmp	r3, #1
 800250c:	d005      	beq.n	800251a <HAL_RCCEx_PeriphCLKConfig+0x47a>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002516:	f040 80d8 	bne.w	80026ca <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800251a:	4b09      	ldr	r3, [pc, #36]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a08      	ldr	r2, [pc, #32]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002520:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002524:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002526:	f7fe f895 	bl	8000654 <HAL_GetTick>
 800252a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800252c:	e00a      	b.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800252e:	f7fe f891 	bl	8000654 <HAL_GetTick>
 8002532:	4602      	mov	r2, r0
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	2b64      	cmp	r3, #100	; 0x64
 800253a:	d903      	bls.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800253c:	2303      	movs	r3, #3
 800253e:	e196      	b.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8002540:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002544:	4b6c      	ldr	r3, [pc, #432]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d1ee      	bne.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0301 	and.w	r3, r3, #1
 8002558:	2b00      	cmp	r3, #0
 800255a:	d021      	beq.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x500>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002560:	2b00      	cmp	r3, #0
 8002562:	d11d      	bne.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002564:	4b64      	ldr	r3, [pc, #400]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002566:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800256a:	0c1b      	lsrs	r3, r3, #16
 800256c:	f003 0303 	and.w	r3, r3, #3
 8002570:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002572:	4b61      	ldr	r3, [pc, #388]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002574:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002578:	0e1b      	lsrs	r3, r3, #24
 800257a:	f003 030f 	and.w	r3, r3, #15
 800257e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	019a      	lsls	r2, r3, #6
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	041b      	lsls	r3, r3, #16
 800258a:	431a      	orrs	r2, r3
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	061b      	lsls	r3, r3, #24
 8002590:	431a      	orrs	r2, r3
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	071b      	lsls	r3, r3, #28
 8002598:	4957      	ldr	r1, [pc, #348]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800259a:	4313      	orrs	r3, r2
 800259c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d004      	beq.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0x516>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80025b4:	d00a      	beq.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d02e      	beq.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025ca:	d129      	bne.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80025cc:	4b4a      	ldr	r3, [pc, #296]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80025ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025d2:	0c1b      	lsrs	r3, r3, #16
 80025d4:	f003 0303 	and.w	r3, r3, #3
 80025d8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80025da:	4b47      	ldr	r3, [pc, #284]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80025dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025e0:	0f1b      	lsrs	r3, r3, #28
 80025e2:	f003 0307 	and.w	r3, r3, #7
 80025e6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	019a      	lsls	r2, r3, #6
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	041b      	lsls	r3, r3, #16
 80025f2:	431a      	orrs	r2, r3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	061b      	lsls	r3, r3, #24
 80025fa:	431a      	orrs	r2, r3
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	071b      	lsls	r3, r3, #28
 8002600:	493d      	ldr	r1, [pc, #244]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002602:	4313      	orrs	r3, r2
 8002604:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002608:	4b3b      	ldr	r3, [pc, #236]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800260a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800260e:	f023 021f 	bic.w	r2, r3, #31
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002616:	3b01      	subs	r3, #1
 8002618:	4937      	ldr	r1, [pc, #220]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800261a:	4313      	orrs	r3, r2
 800261c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002628:	2b00      	cmp	r3, #0
 800262a:	d01d      	beq.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800262c:	4b32      	ldr	r3, [pc, #200]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800262e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002632:	0e1b      	lsrs	r3, r3, #24
 8002634:	f003 030f 	and.w	r3, r3, #15
 8002638:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800263a:	4b2f      	ldr	r3, [pc, #188]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800263c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002640:	0f1b      	lsrs	r3, r3, #28
 8002642:	f003 0307 	and.w	r3, r3, #7
 8002646:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	019a      	lsls	r2, r3, #6
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	691b      	ldr	r3, [r3, #16]
 8002652:	041b      	lsls	r3, r3, #16
 8002654:	431a      	orrs	r2, r3
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	061b      	lsls	r3, r3, #24
 800265a:	431a      	orrs	r2, r3
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	071b      	lsls	r3, r3, #28
 8002660:	4925      	ldr	r1, [pc, #148]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002662:	4313      	orrs	r3, r2
 8002664:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002670:	2b00      	cmp	r3, #0
 8002672:	d011      	beq.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	019a      	lsls	r2, r3, #6
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	691b      	ldr	r3, [r3, #16]
 800267e:	041b      	lsls	r3, r3, #16
 8002680:	431a      	orrs	r2, r3
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	68db      	ldr	r3, [r3, #12]
 8002686:	061b      	lsls	r3, r3, #24
 8002688:	431a      	orrs	r2, r3
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	071b      	lsls	r3, r3, #28
 8002690:	4919      	ldr	r1, [pc, #100]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002692:	4313      	orrs	r3, r2
 8002694:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002698:	4b17      	ldr	r3, [pc, #92]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a16      	ldr	r2, [pc, #88]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800269e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80026a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026a4:	f7fd ffd6 	bl	8000654 <HAL_GetTick>
 80026a8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80026aa:	e008      	b.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80026ac:	f7fd ffd2 	bl	8000654 <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	2b64      	cmp	r3, #100	; 0x64
 80026b8:	d901      	bls.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e0d7      	b.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80026be:	4b0e      	ldr	r3, [pc, #56]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d0f0      	beq.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80026ca:	69bb      	ldr	r3, [r7, #24]
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	f040 80cd 	bne.w	800286c <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80026d2:	4b09      	ldr	r3, [pc, #36]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a08      	ldr	r2, [pc, #32]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80026d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026de:	f7fd ffb9 	bl	8000654 <HAL_GetTick>
 80026e2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80026e4:	e00a      	b.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80026e6:	f7fd ffb5 	bl	8000654 <HAL_GetTick>
 80026ea:	4602      	mov	r2, r0
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	1ad3      	subs	r3, r2, r3
 80026f0:	2b64      	cmp	r3, #100	; 0x64
 80026f2:	d903      	bls.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80026f4:	2303      	movs	r3, #3
 80026f6:	e0ba      	b.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 80026f8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80026fc:	4b5e      	ldr	r3, [pc, #376]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002704:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002708:	d0ed      	beq.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d003      	beq.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x67e>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800271a:	2b00      	cmp	r3, #0
 800271c:	d009      	beq.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002726:	2b00      	cmp	r3, #0
 8002728:	d02e      	beq.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272e:	2b00      	cmp	r3, #0
 8002730:	d12a      	bne.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002732:	4b51      	ldr	r3, [pc, #324]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002734:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002738:	0c1b      	lsrs	r3, r3, #16
 800273a:	f003 0303 	and.w	r3, r3, #3
 800273e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002740:	4b4d      	ldr	r3, [pc, #308]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002742:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002746:	0f1b      	lsrs	r3, r3, #28
 8002748:	f003 0307 	and.w	r3, r3, #7
 800274c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	695b      	ldr	r3, [r3, #20]
 8002752:	019a      	lsls	r2, r3, #6
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	041b      	lsls	r3, r3, #16
 8002758:	431a      	orrs	r2, r3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	699b      	ldr	r3, [r3, #24]
 800275e:	061b      	lsls	r3, r3, #24
 8002760:	431a      	orrs	r2, r3
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	071b      	lsls	r3, r3, #28
 8002766:	4944      	ldr	r1, [pc, #272]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002768:	4313      	orrs	r3, r2
 800276a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800276e:	4b42      	ldr	r3, [pc, #264]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002770:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002774:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800277c:	3b01      	subs	r3, #1
 800277e:	021b      	lsls	r3, r3, #8
 8002780:	493d      	ldr	r1, [pc, #244]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002782:	4313      	orrs	r3, r2
 8002784:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002790:	2b00      	cmp	r3, #0
 8002792:	d022      	beq.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002798:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800279c:	d11d      	bne.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800279e:	4b36      	ldr	r3, [pc, #216]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80027a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027a4:	0e1b      	lsrs	r3, r3, #24
 80027a6:	f003 030f 	and.w	r3, r3, #15
 80027aa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80027ac:	4b32      	ldr	r3, [pc, #200]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80027ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027b2:	0f1b      	lsrs	r3, r3, #28
 80027b4:	f003 0307 	and.w	r3, r3, #7
 80027b8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	695b      	ldr	r3, [r3, #20]
 80027be:	019a      	lsls	r2, r3, #6
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6a1b      	ldr	r3, [r3, #32]
 80027c4:	041b      	lsls	r3, r3, #16
 80027c6:	431a      	orrs	r2, r3
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	061b      	lsls	r3, r3, #24
 80027cc:	431a      	orrs	r2, r3
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	071b      	lsls	r3, r3, #28
 80027d2:	4929      	ldr	r1, [pc, #164]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80027d4:	4313      	orrs	r3, r2
 80027d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0308 	and.w	r3, r3, #8
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d028      	beq.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80027e6:	4b24      	ldr	r3, [pc, #144]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80027e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ec:	0e1b      	lsrs	r3, r3, #24
 80027ee:	f003 030f 	and.w	r3, r3, #15
 80027f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80027f4:	4b20      	ldr	r3, [pc, #128]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80027f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027fa:	0c1b      	lsrs	r3, r3, #16
 80027fc:	f003 0303 	and.w	r3, r3, #3
 8002800:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	695b      	ldr	r3, [r3, #20]
 8002806:	019a      	lsls	r2, r3, #6
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	041b      	lsls	r3, r3, #16
 800280c:	431a      	orrs	r2, r3
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	061b      	lsls	r3, r3, #24
 8002812:	431a      	orrs	r2, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	69db      	ldr	r3, [r3, #28]
 8002818:	071b      	lsls	r3, r3, #28
 800281a:	4917      	ldr	r1, [pc, #92]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800281c:	4313      	orrs	r3, r2
 800281e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002822:	4b15      	ldr	r3, [pc, #84]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002824:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002828:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002830:	4911      	ldr	r1, [pc, #68]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002832:	4313      	orrs	r3, r2
 8002834:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002838:	4b0f      	ldr	r3, [pc, #60]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a0e      	ldr	r2, [pc, #56]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800283e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002842:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002844:	f7fd ff06 	bl	8000654 <HAL_GetTick>
 8002848:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800284a:	e008      	b.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800284c:	f7fd ff02 	bl	8000654 <HAL_GetTick>
 8002850:	4602      	mov	r2, r0
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	2b64      	cmp	r3, #100	; 0x64
 8002858:	d901      	bls.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800285a:	2303      	movs	r3, #3
 800285c:	e007      	b.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800285e:	4b06      	ldr	r3, [pc, #24]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002866:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800286a:	d1ef      	bne.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 800286c:	2300      	movs	r3, #0
}
 800286e:	4618      	mov	r0, r3
 8002870:	3720      	adds	r7, #32
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	40023800 	.word	0x40023800

0800287c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b082      	sub	sp, #8
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d101      	bne.n	800288e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e040      	b.n	8002910 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002892:	2b00      	cmp	r3, #0
 8002894:	d106      	bne.n	80028a4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2200      	movs	r2, #0
 800289a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f001 fa40 	bl	8003d24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2224      	movs	r2, #36	; 0x24
 80028a8:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f022 0201 	bic.w	r2, r2, #1
 80028b8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f000 f8be 	bl	8002a3c <UART_SetConfig>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d101      	bne.n	80028ca <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e022      	b.n	8002910 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d002      	beq.n	80028d8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f000 fb56 	bl	8002f84 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	685a      	ldr	r2, [r3, #4]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80028e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	689a      	ldr	r2, [r3, #8]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80028f6:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f042 0201 	orr.w	r2, r2, #1
 8002906:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f000 fbdd 	bl	80030c8 <UART_CheckIdleState>
 800290e:	4603      	mov	r3, r0
}
 8002910:	4618      	mov	r0, r3
 8002912:	3708      	adds	r7, #8
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}

08002918 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b08a      	sub	sp, #40	; 0x28
 800291c:	af02      	add	r7, sp, #8
 800291e:	60f8      	str	r0, [r7, #12]
 8002920:	60b9      	str	r1, [r7, #8]
 8002922:	603b      	str	r3, [r7, #0]
 8002924:	4613      	mov	r3, r2
 8002926:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800292c:	2b20      	cmp	r3, #32
 800292e:	d17f      	bne.n	8002a30 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d002      	beq.n	800293c <HAL_UART_Transmit+0x24>
 8002936:	88fb      	ldrh	r3, [r7, #6]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d101      	bne.n	8002940 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	e078      	b.n	8002a32 <HAL_UART_Transmit+0x11a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002946:	2b01      	cmp	r3, #1
 8002948:	d101      	bne.n	800294e <HAL_UART_Transmit+0x36>
 800294a:	2302      	movs	r3, #2
 800294c:	e071      	b.n	8002a32 <HAL_UART_Transmit+0x11a>
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2201      	movs	r2, #1
 8002952:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2200      	movs	r2, #0
 800295a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2221      	movs	r2, #33	; 0x21
 8002960:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002962:	f7fd fe77 	bl	8000654 <HAL_GetTick>
 8002966:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	88fa      	ldrh	r2, [r7, #6]
 800296c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	88fa      	ldrh	r2, [r7, #6]
 8002974:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

        /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002980:	d108      	bne.n	8002994 <HAL_UART_Transmit+0x7c>
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	691b      	ldr	r3, [r3, #16]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d104      	bne.n	8002994 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 800298a:	2300      	movs	r3, #0
 800298c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	61bb      	str	r3, [r7, #24]
 8002992:	e003      	b.n	800299c <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002998:	2300      	movs	r3, #0
 800299a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800299c:	e02c      	b.n	80029f8 <HAL_UART_Transmit+0xe0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	9300      	str	r3, [sp, #0]
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	2200      	movs	r2, #0
 80029a6:	2180      	movs	r1, #128	; 0x80
 80029a8:	68f8      	ldr	r0, [r7, #12]
 80029aa:	f000 fbbc 	bl	8003126 <UART_WaitOnFlagUntilTimeout>
 80029ae:	4603      	mov	r3, r0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d001      	beq.n	80029b8 <HAL_UART_Transmit+0xa0>
      {
        return HAL_TIMEOUT;
 80029b4:	2303      	movs	r3, #3
 80029b6:	e03c      	b.n	8002a32 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 80029b8:	69fb      	ldr	r3, [r7, #28]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d10b      	bne.n	80029d6 <HAL_UART_Transmit+0xbe>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80029be:	69bb      	ldr	r3, [r7, #24]
 80029c0:	881b      	ldrh	r3, [r3, #0]
 80029c2:	461a      	mov	r2, r3
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80029cc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80029ce:	69bb      	ldr	r3, [r7, #24]
 80029d0:	3302      	adds	r3, #2
 80029d2:	61bb      	str	r3, [r7, #24]
 80029d4:	e007      	b.n	80029e6 <HAL_UART_Transmit+0xce>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	781a      	ldrb	r2, [r3, #0]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	3301      	adds	r3, #1
 80029e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	3b01      	subs	r3, #1
 80029f0:	b29a      	uxth	r2, r3
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80029fe:	b29b      	uxth	r3, r3
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d1cc      	bne.n	800299e <HAL_UART_Transmit+0x86>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	9300      	str	r3, [sp, #0]
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	2140      	movs	r1, #64	; 0x40
 8002a0e:	68f8      	ldr	r0, [r7, #12]
 8002a10:	f000 fb89 	bl	8003126 <UART_WaitOnFlagUntilTimeout>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d001      	beq.n	8002a1e <HAL_UART_Transmit+0x106>
    {
      return HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e009      	b.n	8002a32 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2220      	movs	r2, #32
 8002a22:	675a      	str	r2, [r3, #116]	; 0x74

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2200      	movs	r2, #0
 8002a28:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	e000      	b.n	8002a32 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8002a30:	2302      	movs	r3, #2
  }
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3720      	adds	r7, #32
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
	...

08002a3c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b088      	sub	sp, #32
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8002a44:	2300      	movs	r3, #0
 8002a46:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	689a      	ldr	r2, [r3, #8]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	691b      	ldr	r3, [r3, #16]
 8002a54:	431a      	orrs	r2, r3
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	695b      	ldr	r3, [r3, #20]
 8002a5a:	431a      	orrs	r2, r3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	69db      	ldr	r3, [r3, #28]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	4bb1      	ldr	r3, [pc, #708]	; (8002d30 <UART_SetConfig+0x2f4>)
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	6812      	ldr	r2, [r2, #0]
 8002a72:	6939      	ldr	r1, [r7, #16]
 8002a74:	430b      	orrs	r3, r1
 8002a76:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	68da      	ldr	r2, [r3, #12]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	430a      	orrs	r2, r1
 8002a8c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	699b      	ldr	r3, [r3, #24]
 8002a92:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6a1b      	ldr	r3, [r3, #32]
 8002a98:	693a      	ldr	r2, [r7, #16]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	693a      	ldr	r2, [r7, #16]
 8002aae:	430a      	orrs	r2, r1
 8002ab0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a9f      	ldr	r2, [pc, #636]	; (8002d34 <UART_SetConfig+0x2f8>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d121      	bne.n	8002b00 <UART_SetConfig+0xc4>
 8002abc:	4b9e      	ldr	r3, [pc, #632]	; (8002d38 <UART_SetConfig+0x2fc>)
 8002abe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ac2:	f003 0303 	and.w	r3, r3, #3
 8002ac6:	2b03      	cmp	r3, #3
 8002ac8:	d816      	bhi.n	8002af8 <UART_SetConfig+0xbc>
 8002aca:	a201      	add	r2, pc, #4	; (adr r2, 8002ad0 <UART_SetConfig+0x94>)
 8002acc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ad0:	08002ae1 	.word	0x08002ae1
 8002ad4:	08002aed 	.word	0x08002aed
 8002ad8:	08002ae7 	.word	0x08002ae7
 8002adc:	08002af3 	.word	0x08002af3
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	77fb      	strb	r3, [r7, #31]
 8002ae4:	e151      	b.n	8002d8a <UART_SetConfig+0x34e>
 8002ae6:	2302      	movs	r3, #2
 8002ae8:	77fb      	strb	r3, [r7, #31]
 8002aea:	e14e      	b.n	8002d8a <UART_SetConfig+0x34e>
 8002aec:	2304      	movs	r3, #4
 8002aee:	77fb      	strb	r3, [r7, #31]
 8002af0:	e14b      	b.n	8002d8a <UART_SetConfig+0x34e>
 8002af2:	2308      	movs	r3, #8
 8002af4:	77fb      	strb	r3, [r7, #31]
 8002af6:	e148      	b.n	8002d8a <UART_SetConfig+0x34e>
 8002af8:	2310      	movs	r3, #16
 8002afa:	77fb      	strb	r3, [r7, #31]
 8002afc:	bf00      	nop
 8002afe:	e144      	b.n	8002d8a <UART_SetConfig+0x34e>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a8d      	ldr	r2, [pc, #564]	; (8002d3c <UART_SetConfig+0x300>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d134      	bne.n	8002b74 <UART_SetConfig+0x138>
 8002b0a:	4b8b      	ldr	r3, [pc, #556]	; (8002d38 <UART_SetConfig+0x2fc>)
 8002b0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b10:	f003 030c 	and.w	r3, r3, #12
 8002b14:	2b0c      	cmp	r3, #12
 8002b16:	d829      	bhi.n	8002b6c <UART_SetConfig+0x130>
 8002b18:	a201      	add	r2, pc, #4	; (adr r2, 8002b20 <UART_SetConfig+0xe4>)
 8002b1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b1e:	bf00      	nop
 8002b20:	08002b55 	.word	0x08002b55
 8002b24:	08002b6d 	.word	0x08002b6d
 8002b28:	08002b6d 	.word	0x08002b6d
 8002b2c:	08002b6d 	.word	0x08002b6d
 8002b30:	08002b61 	.word	0x08002b61
 8002b34:	08002b6d 	.word	0x08002b6d
 8002b38:	08002b6d 	.word	0x08002b6d
 8002b3c:	08002b6d 	.word	0x08002b6d
 8002b40:	08002b5b 	.word	0x08002b5b
 8002b44:	08002b6d 	.word	0x08002b6d
 8002b48:	08002b6d 	.word	0x08002b6d
 8002b4c:	08002b6d 	.word	0x08002b6d
 8002b50:	08002b67 	.word	0x08002b67
 8002b54:	2300      	movs	r3, #0
 8002b56:	77fb      	strb	r3, [r7, #31]
 8002b58:	e117      	b.n	8002d8a <UART_SetConfig+0x34e>
 8002b5a:	2302      	movs	r3, #2
 8002b5c:	77fb      	strb	r3, [r7, #31]
 8002b5e:	e114      	b.n	8002d8a <UART_SetConfig+0x34e>
 8002b60:	2304      	movs	r3, #4
 8002b62:	77fb      	strb	r3, [r7, #31]
 8002b64:	e111      	b.n	8002d8a <UART_SetConfig+0x34e>
 8002b66:	2308      	movs	r3, #8
 8002b68:	77fb      	strb	r3, [r7, #31]
 8002b6a:	e10e      	b.n	8002d8a <UART_SetConfig+0x34e>
 8002b6c:	2310      	movs	r3, #16
 8002b6e:	77fb      	strb	r3, [r7, #31]
 8002b70:	bf00      	nop
 8002b72:	e10a      	b.n	8002d8a <UART_SetConfig+0x34e>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a71      	ldr	r2, [pc, #452]	; (8002d40 <UART_SetConfig+0x304>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d120      	bne.n	8002bc0 <UART_SetConfig+0x184>
 8002b7e:	4b6e      	ldr	r3, [pc, #440]	; (8002d38 <UART_SetConfig+0x2fc>)
 8002b80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b84:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002b88:	2b10      	cmp	r3, #16
 8002b8a:	d00f      	beq.n	8002bac <UART_SetConfig+0x170>
 8002b8c:	2b10      	cmp	r3, #16
 8002b8e:	d802      	bhi.n	8002b96 <UART_SetConfig+0x15a>
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d005      	beq.n	8002ba0 <UART_SetConfig+0x164>
 8002b94:	e010      	b.n	8002bb8 <UART_SetConfig+0x17c>
 8002b96:	2b20      	cmp	r3, #32
 8002b98:	d005      	beq.n	8002ba6 <UART_SetConfig+0x16a>
 8002b9a:	2b30      	cmp	r3, #48	; 0x30
 8002b9c:	d009      	beq.n	8002bb2 <UART_SetConfig+0x176>
 8002b9e:	e00b      	b.n	8002bb8 <UART_SetConfig+0x17c>
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	77fb      	strb	r3, [r7, #31]
 8002ba4:	e0f1      	b.n	8002d8a <UART_SetConfig+0x34e>
 8002ba6:	2302      	movs	r3, #2
 8002ba8:	77fb      	strb	r3, [r7, #31]
 8002baa:	e0ee      	b.n	8002d8a <UART_SetConfig+0x34e>
 8002bac:	2304      	movs	r3, #4
 8002bae:	77fb      	strb	r3, [r7, #31]
 8002bb0:	e0eb      	b.n	8002d8a <UART_SetConfig+0x34e>
 8002bb2:	2308      	movs	r3, #8
 8002bb4:	77fb      	strb	r3, [r7, #31]
 8002bb6:	e0e8      	b.n	8002d8a <UART_SetConfig+0x34e>
 8002bb8:	2310      	movs	r3, #16
 8002bba:	77fb      	strb	r3, [r7, #31]
 8002bbc:	bf00      	nop
 8002bbe:	e0e4      	b.n	8002d8a <UART_SetConfig+0x34e>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a5f      	ldr	r2, [pc, #380]	; (8002d44 <UART_SetConfig+0x308>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d120      	bne.n	8002c0c <UART_SetConfig+0x1d0>
 8002bca:	4b5b      	ldr	r3, [pc, #364]	; (8002d38 <UART_SetConfig+0x2fc>)
 8002bcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bd0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002bd4:	2b40      	cmp	r3, #64	; 0x40
 8002bd6:	d00f      	beq.n	8002bf8 <UART_SetConfig+0x1bc>
 8002bd8:	2b40      	cmp	r3, #64	; 0x40
 8002bda:	d802      	bhi.n	8002be2 <UART_SetConfig+0x1a6>
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d005      	beq.n	8002bec <UART_SetConfig+0x1b0>
 8002be0:	e010      	b.n	8002c04 <UART_SetConfig+0x1c8>
 8002be2:	2b80      	cmp	r3, #128	; 0x80
 8002be4:	d005      	beq.n	8002bf2 <UART_SetConfig+0x1b6>
 8002be6:	2bc0      	cmp	r3, #192	; 0xc0
 8002be8:	d009      	beq.n	8002bfe <UART_SetConfig+0x1c2>
 8002bea:	e00b      	b.n	8002c04 <UART_SetConfig+0x1c8>
 8002bec:	2300      	movs	r3, #0
 8002bee:	77fb      	strb	r3, [r7, #31]
 8002bf0:	e0cb      	b.n	8002d8a <UART_SetConfig+0x34e>
 8002bf2:	2302      	movs	r3, #2
 8002bf4:	77fb      	strb	r3, [r7, #31]
 8002bf6:	e0c8      	b.n	8002d8a <UART_SetConfig+0x34e>
 8002bf8:	2304      	movs	r3, #4
 8002bfa:	77fb      	strb	r3, [r7, #31]
 8002bfc:	e0c5      	b.n	8002d8a <UART_SetConfig+0x34e>
 8002bfe:	2308      	movs	r3, #8
 8002c00:	77fb      	strb	r3, [r7, #31]
 8002c02:	e0c2      	b.n	8002d8a <UART_SetConfig+0x34e>
 8002c04:	2310      	movs	r3, #16
 8002c06:	77fb      	strb	r3, [r7, #31]
 8002c08:	bf00      	nop
 8002c0a:	e0be      	b.n	8002d8a <UART_SetConfig+0x34e>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a4d      	ldr	r2, [pc, #308]	; (8002d48 <UART_SetConfig+0x30c>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d124      	bne.n	8002c60 <UART_SetConfig+0x224>
 8002c16:	4b48      	ldr	r3, [pc, #288]	; (8002d38 <UART_SetConfig+0x2fc>)
 8002c18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c24:	d012      	beq.n	8002c4c <UART_SetConfig+0x210>
 8002c26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c2a:	d802      	bhi.n	8002c32 <UART_SetConfig+0x1f6>
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d007      	beq.n	8002c40 <UART_SetConfig+0x204>
 8002c30:	e012      	b.n	8002c58 <UART_SetConfig+0x21c>
 8002c32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c36:	d006      	beq.n	8002c46 <UART_SetConfig+0x20a>
 8002c38:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c3c:	d009      	beq.n	8002c52 <UART_SetConfig+0x216>
 8002c3e:	e00b      	b.n	8002c58 <UART_SetConfig+0x21c>
 8002c40:	2300      	movs	r3, #0
 8002c42:	77fb      	strb	r3, [r7, #31]
 8002c44:	e0a1      	b.n	8002d8a <UART_SetConfig+0x34e>
 8002c46:	2302      	movs	r3, #2
 8002c48:	77fb      	strb	r3, [r7, #31]
 8002c4a:	e09e      	b.n	8002d8a <UART_SetConfig+0x34e>
 8002c4c:	2304      	movs	r3, #4
 8002c4e:	77fb      	strb	r3, [r7, #31]
 8002c50:	e09b      	b.n	8002d8a <UART_SetConfig+0x34e>
 8002c52:	2308      	movs	r3, #8
 8002c54:	77fb      	strb	r3, [r7, #31]
 8002c56:	e098      	b.n	8002d8a <UART_SetConfig+0x34e>
 8002c58:	2310      	movs	r3, #16
 8002c5a:	77fb      	strb	r3, [r7, #31]
 8002c5c:	bf00      	nop
 8002c5e:	e094      	b.n	8002d8a <UART_SetConfig+0x34e>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a39      	ldr	r2, [pc, #228]	; (8002d4c <UART_SetConfig+0x310>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d124      	bne.n	8002cb4 <UART_SetConfig+0x278>
 8002c6a:	4b33      	ldr	r3, [pc, #204]	; (8002d38 <UART_SetConfig+0x2fc>)
 8002c6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c70:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002c74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c78:	d012      	beq.n	8002ca0 <UART_SetConfig+0x264>
 8002c7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c7e:	d802      	bhi.n	8002c86 <UART_SetConfig+0x24a>
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d007      	beq.n	8002c94 <UART_SetConfig+0x258>
 8002c84:	e012      	b.n	8002cac <UART_SetConfig+0x270>
 8002c86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c8a:	d006      	beq.n	8002c9a <UART_SetConfig+0x25e>
 8002c8c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002c90:	d009      	beq.n	8002ca6 <UART_SetConfig+0x26a>
 8002c92:	e00b      	b.n	8002cac <UART_SetConfig+0x270>
 8002c94:	2301      	movs	r3, #1
 8002c96:	77fb      	strb	r3, [r7, #31]
 8002c98:	e077      	b.n	8002d8a <UART_SetConfig+0x34e>
 8002c9a:	2302      	movs	r3, #2
 8002c9c:	77fb      	strb	r3, [r7, #31]
 8002c9e:	e074      	b.n	8002d8a <UART_SetConfig+0x34e>
 8002ca0:	2304      	movs	r3, #4
 8002ca2:	77fb      	strb	r3, [r7, #31]
 8002ca4:	e071      	b.n	8002d8a <UART_SetConfig+0x34e>
 8002ca6:	2308      	movs	r3, #8
 8002ca8:	77fb      	strb	r3, [r7, #31]
 8002caa:	e06e      	b.n	8002d8a <UART_SetConfig+0x34e>
 8002cac:	2310      	movs	r3, #16
 8002cae:	77fb      	strb	r3, [r7, #31]
 8002cb0:	bf00      	nop
 8002cb2:	e06a      	b.n	8002d8a <UART_SetConfig+0x34e>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a25      	ldr	r2, [pc, #148]	; (8002d50 <UART_SetConfig+0x314>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d124      	bne.n	8002d08 <UART_SetConfig+0x2cc>
 8002cbe:	4b1e      	ldr	r3, [pc, #120]	; (8002d38 <UART_SetConfig+0x2fc>)
 8002cc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cc4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002cc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ccc:	d012      	beq.n	8002cf4 <UART_SetConfig+0x2b8>
 8002cce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cd2:	d802      	bhi.n	8002cda <UART_SetConfig+0x29e>
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d007      	beq.n	8002ce8 <UART_SetConfig+0x2ac>
 8002cd8:	e012      	b.n	8002d00 <UART_SetConfig+0x2c4>
 8002cda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cde:	d006      	beq.n	8002cee <UART_SetConfig+0x2b2>
 8002ce0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002ce4:	d009      	beq.n	8002cfa <UART_SetConfig+0x2be>
 8002ce6:	e00b      	b.n	8002d00 <UART_SetConfig+0x2c4>
 8002ce8:	2300      	movs	r3, #0
 8002cea:	77fb      	strb	r3, [r7, #31]
 8002cec:	e04d      	b.n	8002d8a <UART_SetConfig+0x34e>
 8002cee:	2302      	movs	r3, #2
 8002cf0:	77fb      	strb	r3, [r7, #31]
 8002cf2:	e04a      	b.n	8002d8a <UART_SetConfig+0x34e>
 8002cf4:	2304      	movs	r3, #4
 8002cf6:	77fb      	strb	r3, [r7, #31]
 8002cf8:	e047      	b.n	8002d8a <UART_SetConfig+0x34e>
 8002cfa:	2308      	movs	r3, #8
 8002cfc:	77fb      	strb	r3, [r7, #31]
 8002cfe:	e044      	b.n	8002d8a <UART_SetConfig+0x34e>
 8002d00:	2310      	movs	r3, #16
 8002d02:	77fb      	strb	r3, [r7, #31]
 8002d04:	bf00      	nop
 8002d06:	e040      	b.n	8002d8a <UART_SetConfig+0x34e>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a11      	ldr	r2, [pc, #68]	; (8002d54 <UART_SetConfig+0x318>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d139      	bne.n	8002d86 <UART_SetConfig+0x34a>
 8002d12:	4b09      	ldr	r3, [pc, #36]	; (8002d38 <UART_SetConfig+0x2fc>)
 8002d14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d18:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002d1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d20:	d027      	beq.n	8002d72 <UART_SetConfig+0x336>
 8002d22:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d26:	d817      	bhi.n	8002d58 <UART_SetConfig+0x31c>
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d01c      	beq.n	8002d66 <UART_SetConfig+0x32a>
 8002d2c:	e027      	b.n	8002d7e <UART_SetConfig+0x342>
 8002d2e:	bf00      	nop
 8002d30:	efff69f3 	.word	0xefff69f3
 8002d34:	40011000 	.word	0x40011000
 8002d38:	40023800 	.word	0x40023800
 8002d3c:	40004400 	.word	0x40004400
 8002d40:	40004800 	.word	0x40004800
 8002d44:	40004c00 	.word	0x40004c00
 8002d48:	40005000 	.word	0x40005000
 8002d4c:	40011400 	.word	0x40011400
 8002d50:	40007800 	.word	0x40007800
 8002d54:	40007c00 	.word	0x40007c00
 8002d58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d5c:	d006      	beq.n	8002d6c <UART_SetConfig+0x330>
 8002d5e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002d62:	d009      	beq.n	8002d78 <UART_SetConfig+0x33c>
 8002d64:	e00b      	b.n	8002d7e <UART_SetConfig+0x342>
 8002d66:	2300      	movs	r3, #0
 8002d68:	77fb      	strb	r3, [r7, #31]
 8002d6a:	e00e      	b.n	8002d8a <UART_SetConfig+0x34e>
 8002d6c:	2302      	movs	r3, #2
 8002d6e:	77fb      	strb	r3, [r7, #31]
 8002d70:	e00b      	b.n	8002d8a <UART_SetConfig+0x34e>
 8002d72:	2304      	movs	r3, #4
 8002d74:	77fb      	strb	r3, [r7, #31]
 8002d76:	e008      	b.n	8002d8a <UART_SetConfig+0x34e>
 8002d78:	2308      	movs	r3, #8
 8002d7a:	77fb      	strb	r3, [r7, #31]
 8002d7c:	e005      	b.n	8002d8a <UART_SetConfig+0x34e>
 8002d7e:	2310      	movs	r3, #16
 8002d80:	77fb      	strb	r3, [r7, #31]
 8002d82:	bf00      	nop
 8002d84:	e001      	b.n	8002d8a <UART_SetConfig+0x34e>
 8002d86:	2310      	movs	r3, #16
 8002d88:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	69db      	ldr	r3, [r3, #28]
 8002d8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d92:	d17c      	bne.n	8002e8e <UART_SetConfig+0x452>
  {
    switch (clocksource)
 8002d94:	7ffb      	ldrb	r3, [r7, #31]
 8002d96:	2b08      	cmp	r3, #8
 8002d98:	d859      	bhi.n	8002e4e <UART_SetConfig+0x412>
 8002d9a:	a201      	add	r2, pc, #4	; (adr r2, 8002da0 <UART_SetConfig+0x364>)
 8002d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002da0:	08002dc5 	.word	0x08002dc5
 8002da4:	08002de3 	.word	0x08002de3
 8002da8:	08002e01 	.word	0x08002e01
 8002dac:	08002e4f 	.word	0x08002e4f
 8002db0:	08002e19 	.word	0x08002e19
 8002db4:	08002e4f 	.word	0x08002e4f
 8002db8:	08002e4f 	.word	0x08002e4f
 8002dbc:	08002e4f 	.word	0x08002e4f
 8002dc0:	08002e37 	.word	0x08002e37
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002dc4:	f7ff f944 	bl	8002050 <HAL_RCC_GetPCLK1Freq>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	005a      	lsls	r2, r3, #1
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	085b      	lsrs	r3, r3, #1
 8002dd2:	441a      	add	r2, r3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ddc:	b29b      	uxth	r3, r3
 8002dde:	61bb      	str	r3, [r7, #24]
        break;
 8002de0:	e038      	b.n	8002e54 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002de2:	f7ff f949 	bl	8002078 <HAL_RCC_GetPCLK2Freq>
 8002de6:	4603      	mov	r3, r0
 8002de8:	005a      	lsls	r2, r3, #1
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	085b      	lsrs	r3, r3, #1
 8002df0:	441a      	add	r2, r3
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dfa:	b29b      	uxth	r3, r3
 8002dfc:	61bb      	str	r3, [r7, #24]
        break;
 8002dfe:	e029      	b.n	8002e54 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	085a      	lsrs	r2, r3, #1
 8002e06:	4b5d      	ldr	r3, [pc, #372]	; (8002f7c <UART_SetConfig+0x540>)
 8002e08:	4413      	add	r3, r2
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	6852      	ldr	r2, [r2, #4]
 8002e0e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002e12:	b29b      	uxth	r3, r3
 8002e14:	61bb      	str	r3, [r7, #24]
        break;
 8002e16:	e01d      	b.n	8002e54 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002e18:	f7ff f836 	bl	8001e88 <HAL_RCC_GetSysClockFreq>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	005a      	lsls	r2, r3, #1
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	085b      	lsrs	r3, r3, #1
 8002e26:	441a      	add	r2, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e30:	b29b      	uxth	r3, r3
 8002e32:	61bb      	str	r3, [r7, #24]
        break;
 8002e34:	e00e      	b.n	8002e54 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	085b      	lsrs	r3, r3, #1
 8002e3c:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e48:	b29b      	uxth	r3, r3
 8002e4a:	61bb      	str	r3, [r7, #24]
        break;
 8002e4c:	e002      	b.n	8002e54 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	75fb      	strb	r3, [r7, #23]
        break;
 8002e52:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e54:	69bb      	ldr	r3, [r7, #24]
 8002e56:	2b0f      	cmp	r3, #15
 8002e58:	d916      	bls.n	8002e88 <UART_SetConfig+0x44c>
 8002e5a:	69bb      	ldr	r3, [r7, #24]
 8002e5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e60:	d212      	bcs.n	8002e88 <UART_SetConfig+0x44c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002e62:	69bb      	ldr	r3, [r7, #24]
 8002e64:	b29b      	uxth	r3, r3
 8002e66:	f023 030f 	bic.w	r3, r3, #15
 8002e6a:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002e6c:	69bb      	ldr	r3, [r7, #24]
 8002e6e:	085b      	lsrs	r3, r3, #1
 8002e70:	b29b      	uxth	r3, r3
 8002e72:	f003 0307 	and.w	r3, r3, #7
 8002e76:	b29a      	uxth	r2, r3
 8002e78:	89fb      	ldrh	r3, [r7, #14]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	89fa      	ldrh	r2, [r7, #14]
 8002e84:	60da      	str	r2, [r3, #12]
 8002e86:	e06e      	b.n	8002f66 <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	75fb      	strb	r3, [r7, #23]
 8002e8c:	e06b      	b.n	8002f66 <UART_SetConfig+0x52a>
    }
  }
  else
  {
    switch (clocksource)
 8002e8e:	7ffb      	ldrb	r3, [r7, #31]
 8002e90:	2b08      	cmp	r3, #8
 8002e92:	d857      	bhi.n	8002f44 <UART_SetConfig+0x508>
 8002e94:	a201      	add	r2, pc, #4	; (adr r2, 8002e9c <UART_SetConfig+0x460>)
 8002e96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e9a:	bf00      	nop
 8002e9c:	08002ec1 	.word	0x08002ec1
 8002ea0:	08002edd 	.word	0x08002edd
 8002ea4:	08002ef9 	.word	0x08002ef9
 8002ea8:	08002f45 	.word	0x08002f45
 8002eac:	08002f11 	.word	0x08002f11
 8002eb0:	08002f45 	.word	0x08002f45
 8002eb4:	08002f45 	.word	0x08002f45
 8002eb8:	08002f45 	.word	0x08002f45
 8002ebc:	08002f2d 	.word	0x08002f2d
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002ec0:	f7ff f8c6 	bl	8002050 <HAL_RCC_GetPCLK1Freq>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	085b      	lsrs	r3, r3, #1
 8002ecc:	441a      	add	r2, r3
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ed6:	b29b      	uxth	r3, r3
 8002ed8:	61bb      	str	r3, [r7, #24]
        break;
 8002eda:	e036      	b.n	8002f4a <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002edc:	f7ff f8cc 	bl	8002078 <HAL_RCC_GetPCLK2Freq>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	085b      	lsrs	r3, r3, #1
 8002ee8:	441a      	add	r2, r3
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	61bb      	str	r3, [r7, #24]
        break;
 8002ef6:	e028      	b.n	8002f4a <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	085a      	lsrs	r2, r3, #1
 8002efe:	4b20      	ldr	r3, [pc, #128]	; (8002f80 <UART_SetConfig+0x544>)
 8002f00:	4413      	add	r3, r2
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	6852      	ldr	r2, [r2, #4]
 8002f06:	fbb3 f3f2 	udiv	r3, r3, r2
 8002f0a:	b29b      	uxth	r3, r3
 8002f0c:	61bb      	str	r3, [r7, #24]
        break;
 8002f0e:	e01c      	b.n	8002f4a <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002f10:	f7fe ffba 	bl	8001e88 <HAL_RCC_GetSysClockFreq>
 8002f14:	4602      	mov	r2, r0
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	085b      	lsrs	r3, r3, #1
 8002f1c:	441a      	add	r2, r3
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	61bb      	str	r3, [r7, #24]
        break;
 8002f2a:	e00e      	b.n	8002f4a <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	085b      	lsrs	r3, r3, #1
 8002f32:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	61bb      	str	r3, [r7, #24]
        break;
 8002f42:	e002      	b.n	8002f4a <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	75fb      	strb	r3, [r7, #23]
        break;
 8002f48:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f4a:	69bb      	ldr	r3, [r7, #24]
 8002f4c:	2b0f      	cmp	r3, #15
 8002f4e:	d908      	bls.n	8002f62 <UART_SetConfig+0x526>
 8002f50:	69bb      	ldr	r3, [r7, #24]
 8002f52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f56:	d204      	bcs.n	8002f62 <UART_SetConfig+0x526>
    {
      huart->Instance->BRR = usartdiv;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	69ba      	ldr	r2, [r7, #24]
 8002f5e:	60da      	str	r2, [r3, #12]
 8002f60:	e001      	b.n	8002f66 <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8002f72:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3720      	adds	r7, #32
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	01e84800 	.word	0x01e84800
 8002f80:	00f42400 	.word	0x00f42400

08002f84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f90:	f003 0301 	and.w	r3, r3, #1
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d00a      	beq.n	8002fae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	430a      	orrs	r2, r1
 8002fac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb2:	f003 0302 	and.w	r3, r3, #2
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d00a      	beq.n	8002fd0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	430a      	orrs	r2, r1
 8002fce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd4:	f003 0304 	and.w	r3, r3, #4
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d00a      	beq.n	8002ff2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	430a      	orrs	r2, r1
 8002ff0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff6:	f003 0308 	and.w	r3, r3, #8
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d00a      	beq.n	8003014 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	430a      	orrs	r2, r1
 8003012:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003018:	f003 0310 	and.w	r3, r3, #16
 800301c:	2b00      	cmp	r3, #0
 800301e:	d00a      	beq.n	8003036 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	430a      	orrs	r2, r1
 8003034:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303a:	f003 0320 	and.w	r3, r3, #32
 800303e:	2b00      	cmp	r3, #0
 8003040:	d00a      	beq.n	8003058 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	430a      	orrs	r2, r1
 8003056:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800305c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003060:	2b00      	cmp	r3, #0
 8003062:	d01a      	beq.n	800309a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	430a      	orrs	r2, r1
 8003078:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003082:	d10a      	bne.n	800309a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	430a      	orrs	r2, r1
 8003098:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d00a      	beq.n	80030bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	430a      	orrs	r2, r1
 80030ba:	605a      	str	r2, [r3, #4]
  }
}
 80030bc:	bf00      	nop
 80030be:	370c      	adds	r7, #12
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr

080030c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b086      	sub	sp, #24
 80030cc:	af02      	add	r7, sp, #8
 80030ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80030d6:	f7fd fabd 	bl	8000654 <HAL_GetTick>
 80030da:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0308 	and.w	r3, r3, #8
 80030e6:	2b08      	cmp	r3, #8
 80030e8:	d10e      	bne.n	8003108 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80030ea:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80030ee:	9300      	str	r3, [sp, #0]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2200      	movs	r2, #0
 80030f4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	f000 f814 	bl	8003126 <UART_WaitOnFlagUntilTimeout>
 80030fe:	4603      	mov	r3, r0
 8003100:	2b00      	cmp	r3, #0
 8003102:	d001      	beq.n	8003108 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003104:	2303      	movs	r3, #3
 8003106:	e00a      	b.n	800311e <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2220      	movs	r2, #32
 800310c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2220      	movs	r2, #32
 8003112:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2200      	movs	r2, #0
 8003118:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800311c:	2300      	movs	r3, #0
}
 800311e:	4618      	mov	r0, r3
 8003120:	3710      	adds	r7, #16
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}

08003126 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003126:	b580      	push	{r7, lr}
 8003128:	b084      	sub	sp, #16
 800312a:	af00      	add	r7, sp, #0
 800312c:	60f8      	str	r0, [r7, #12]
 800312e:	60b9      	str	r1, [r7, #8]
 8003130:	603b      	str	r3, [r7, #0]
 8003132:	4613      	mov	r3, r2
 8003134:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003136:	e02a      	b.n	800318e <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003138:	69bb      	ldr	r3, [r7, #24]
 800313a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800313e:	d026      	beq.n	800318e <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003140:	f7fd fa88 	bl	8000654 <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	69ba      	ldr	r2, [r7, #24]
 800314c:	429a      	cmp	r2, r3
 800314e:	d302      	bcc.n	8003156 <UART_WaitOnFlagUntilTimeout+0x30>
 8003150:	69bb      	ldr	r3, [r7, #24]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d11b      	bne.n	800318e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003164:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	689a      	ldr	r2, [r3, #8]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f022 0201 	bic.w	r2, r2, #1
 8003174:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2220      	movs	r2, #32
 800317a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2220      	movs	r2, #32
 8003180:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2200      	movs	r2, #0
 8003186:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e00f      	b.n	80031ae <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	69da      	ldr	r2, [r3, #28]
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	4013      	ands	r3, r2
 8003198:	68ba      	ldr	r2, [r7, #8]
 800319a:	429a      	cmp	r2, r3
 800319c:	bf0c      	ite	eq
 800319e:	2301      	moveq	r3, #1
 80031a0:	2300      	movne	r3, #0
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	461a      	mov	r2, r3
 80031a6:	79fb      	ldrb	r3, [r7, #7]
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d0c5      	beq.n	8003138 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80031ac:	2300      	movs	r3, #0
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3710      	adds	r7, #16
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
	...

080031b8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80031b8:	b084      	sub	sp, #16
 80031ba:	b580      	push	{r7, lr}
 80031bc:	b084      	sub	sp, #16
 80031be:	af00      	add	r7, sp, #0
 80031c0:	6078      	str	r0, [r7, #4]
 80031c2:	f107 001c 	add.w	r0, r7, #28
 80031c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80031ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d120      	bne.n	8003212 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031d4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	68da      	ldr	r2, [r3, #12]
 80031e0:	4b20      	ldr	r3, [pc, #128]	; (8003264 <USB_CoreInit+0xac>)
 80031e2:	4013      	ands	r3, r2
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80031f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d105      	bne.n	8003206 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	68db      	ldr	r3, [r3, #12]
 80031fe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f000 fa60 	bl	80036cc <USB_CoreReset>
 800320c:	4603      	mov	r3, r0
 800320e:	73fb      	strb	r3, [r7, #15]
 8003210:	e010      	b.n	8003234 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	68db      	ldr	r3, [r3, #12]
 8003216:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f000 fa54 	bl	80036cc <USB_CoreReset>
 8003224:	4603      	mov	r3, r0
 8003226:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800322c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8003234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003236:	2b01      	cmp	r3, #1
 8003238:	d10b      	bne.n	8003252 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	f043 0206 	orr.w	r2, r3, #6
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	f043 0220 	orr.w	r2, r3, #32
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003252:	7bfb      	ldrb	r3, [r7, #15]
}
 8003254:	4618      	mov	r0, r3
 8003256:	3710      	adds	r7, #16
 8003258:	46bd      	mov	sp, r7
 800325a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800325e:	b004      	add	sp, #16
 8003260:	4770      	bx	lr
 8003262:	bf00      	nop
 8003264:	ffbdffbf 	.word	0xffbdffbf

08003268 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	f023 0201 	bic.w	r2, r3, #1
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800327c:	2300      	movs	r3, #0
}
 800327e:	4618      	mov	r0, r3
 8003280:	370c      	adds	r7, #12
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr

0800328a <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800328a:	b580      	push	{r7, lr}
 800328c:	b082      	sub	sp, #8
 800328e:	af00      	add	r7, sp, #0
 8003290:	6078      	str	r0, [r7, #4]
 8003292:	460b      	mov	r3, r1
 8003294:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80032a2:	78fb      	ldrb	r3, [r7, #3]
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d106      	bne.n	80032b6 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	60da      	str	r2, [r3, #12]
 80032b4:	e00b      	b.n	80032ce <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80032b6:	78fb      	ldrb	r3, [r7, #3]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d106      	bne.n	80032ca <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	60da      	str	r2, [r3, #12]
 80032c8:	e001      	b.n	80032ce <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e003      	b.n	80032d6 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80032ce:	2032      	movs	r0, #50	; 0x32
 80032d0:	f7fd f9cc 	bl	800066c <HAL_Delay>

  return HAL_OK;
 80032d4:	2300      	movs	r3, #0
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3708      	adds	r7, #8
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
	...

080032e0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80032e0:	b084      	sub	sp, #16
 80032e2:	b580      	push	{r7, lr}
 80032e4:	b086      	sub	sp, #24
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	6078      	str	r0, [r7, #4]
 80032ea:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80032ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80032f2:	2300      	movs	r3, #0
 80032f4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80032fa:	2300      	movs	r3, #0
 80032fc:	613b      	str	r3, [r7, #16]
 80032fe:	e009      	b.n	8003314 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003300:	687a      	ldr	r2, [r7, #4]
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	3340      	adds	r3, #64	; 0x40
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	4413      	add	r3, r2
 800330a:	2200      	movs	r2, #0
 800330c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	3301      	adds	r3, #1
 8003312:	613b      	str	r3, [r7, #16]
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	2b0e      	cmp	r3, #14
 8003318:	d9f2      	bls.n	8003300 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800331a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800331c:	2b00      	cmp	r3, #0
 800331e:	d112      	bne.n	8003346 <USB_DevInit+0x66>
  {
    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003324:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	601a      	str	r2, [r3, #0]
 8003344:	e005      	b.n	8003352 <USB_DevInit+0x72>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800334a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003358:	461a      	mov	r2, r3
 800335a:	2300      	movs	r3, #0
 800335c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003364:	4619      	mov	r1, r3
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800336c:	461a      	mov	r2, r3
 800336e:	680b      	ldr	r3, [r1, #0]
 8003370:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003374:	2b01      	cmp	r3, #1
 8003376:	d10c      	bne.n	8003392 <USB_DevInit+0xb2>
  {
    if (cfg.speed == USB_OTG_SPEED_HIGH)
 8003378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800337a:	2b00      	cmp	r3, #0
 800337c:	d104      	bne.n	8003388 <USB_DevInit+0xa8>
    {
      /* Set High speed phy */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800337e:	2100      	movs	r1, #0
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	f000 f971 	bl	8003668 <USB_SetDevSpeed>
 8003386:	e018      	b.n	80033ba <USB_DevInit+0xda>
    }
    else
    {
      /* set High speed phy in Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003388:	2101      	movs	r1, #1
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f000 f96c 	bl	8003668 <USB_SetDevSpeed>
 8003390:	e013      	b.n	80033ba <USB_DevInit+0xda>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8003392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003394:	2b03      	cmp	r3, #3
 8003396:	d10c      	bne.n	80033b2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USB_OTG_SPEED_HIGH)
 8003398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800339a:	2b00      	cmp	r3, #0
 800339c:	d104      	bne.n	80033a8 <USB_DevInit+0xc8>
    {
      /* Set High speed phy */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800339e:	2100      	movs	r1, #0
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	f000 f961 	bl	8003668 <USB_SetDevSpeed>
 80033a6:	e008      	b.n	80033ba <USB_DevInit+0xda>
    }
    else
    {
      /* set High speed phy in Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80033a8:	2101      	movs	r1, #1
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f000 f95c 	bl	8003668 <USB_SetDevSpeed>
 80033b0:	e003      	b.n	80033ba <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Full speed phy */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80033b2:	2103      	movs	r1, #3
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f000 f957 	bl	8003668 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80033ba:	2110      	movs	r1, #16
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	f000 f90b 	bl	80035d8 <USB_FlushTxFifo>
 80033c2:	4603      	mov	r3, r0
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d001      	beq.n	80033cc <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	f000 f929 	bl	8003624 <USB_FlushRxFifo>
 80033d2:	4603      	mov	r3, r0
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d001      	beq.n	80033dc <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033e2:	461a      	mov	r2, r3
 80033e4:	2300      	movs	r3, #0
 80033e6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033ee:	461a      	mov	r2, r3
 80033f0:	2300      	movs	r3, #0
 80033f2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033fa:	461a      	mov	r2, r3
 80033fc:	2300      	movs	r3, #0
 80033fe:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003400:	2300      	movs	r3, #0
 8003402:	613b      	str	r3, [r7, #16]
 8003404:	e043      	b.n	800348e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	015a      	lsls	r2, r3, #5
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	4413      	add	r3, r2
 800340e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003418:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800341c:	d118      	bne.n	8003450 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d10a      	bne.n	800343a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	015a      	lsls	r2, r3, #5
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	4413      	add	r3, r2
 800342c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003430:	461a      	mov	r2, r3
 8003432:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003436:	6013      	str	r3, [r2, #0]
 8003438:	e013      	b.n	8003462 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	015a      	lsls	r2, r3, #5
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	4413      	add	r3, r2
 8003442:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003446:	461a      	mov	r2, r3
 8003448:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800344c:	6013      	str	r3, [r2, #0]
 800344e:	e008      	b.n	8003462 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	015a      	lsls	r2, r3, #5
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	4413      	add	r3, r2
 8003458:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800345c:	461a      	mov	r2, r3
 800345e:	2300      	movs	r3, #0
 8003460:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	015a      	lsls	r2, r3, #5
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	4413      	add	r3, r2
 800346a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800346e:	461a      	mov	r2, r3
 8003470:	2300      	movs	r3, #0
 8003472:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	015a      	lsls	r2, r3, #5
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	4413      	add	r3, r2
 800347c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003480:	461a      	mov	r2, r3
 8003482:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003486:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	3301      	adds	r3, #1
 800348c:	613b      	str	r3, [r7, #16]
 800348e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003490:	693a      	ldr	r2, [r7, #16]
 8003492:	429a      	cmp	r2, r3
 8003494:	d3b7      	bcc.n	8003406 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003496:	2300      	movs	r3, #0
 8003498:	613b      	str	r3, [r7, #16]
 800349a:	e043      	b.n	8003524 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	015a      	lsls	r2, r3, #5
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	4413      	add	r3, r2
 80034a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80034ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80034b2:	d118      	bne.n	80034e6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d10a      	bne.n	80034d0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	015a      	lsls	r2, r3, #5
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	4413      	add	r3, r2
 80034c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034c6:	461a      	mov	r2, r3
 80034c8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80034cc:	6013      	str	r3, [r2, #0]
 80034ce:	e013      	b.n	80034f8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	015a      	lsls	r2, r3, #5
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	4413      	add	r3, r2
 80034d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034dc:	461a      	mov	r2, r3
 80034de:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80034e2:	6013      	str	r3, [r2, #0]
 80034e4:	e008      	b.n	80034f8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	015a      	lsls	r2, r3, #5
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	4413      	add	r3, r2
 80034ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034f2:	461a      	mov	r2, r3
 80034f4:	2300      	movs	r3, #0
 80034f6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	015a      	lsls	r2, r3, #5
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	4413      	add	r3, r2
 8003500:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003504:	461a      	mov	r2, r3
 8003506:	2300      	movs	r3, #0
 8003508:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	015a      	lsls	r2, r3, #5
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	4413      	add	r3, r2
 8003512:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003516:	461a      	mov	r2, r3
 8003518:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800351c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	3301      	adds	r3, #1
 8003522:	613b      	str	r3, [r7, #16]
 8003524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003526:	693a      	ldr	r2, [r7, #16]
 8003528:	429a      	cmp	r2, r3
 800352a:	d3b7      	bcc.n	800349c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003532:	691b      	ldr	r3, [r3, #16]
 8003534:	68fa      	ldr	r2, [r7, #12]
 8003536:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800353a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800353e:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 8003540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003542:	2b01      	cmp	r3, #1
 8003544:	d110      	bne.n	8003568 <USB_DevInit+0x288>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800354c:	461a      	mov	r2, r3
 800354e:	4b1e      	ldr	r3, [pc, #120]	; (80035c8 <USB_DevInit+0x2e8>)
 8003550:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003558:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003560:	4619      	mov	r1, r3
 8003562:	4b1a      	ldr	r3, [pc, #104]	; (80035cc <USB_DevInit+0x2ec>)
 8003564:	4313      	orrs	r3, r2
 8003566:	630b      	str	r3, [r1, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2200      	movs	r2, #0
 800356c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003574:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003578:	2b00      	cmp	r3, #0
 800357a:	d105      	bne.n	8003588 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	699b      	ldr	r3, [r3, #24]
 8003580:	f043 0210 	orr.w	r2, r3, #16
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	699a      	ldr	r2, [r3, #24]
 800358c:	4b10      	ldr	r3, [pc, #64]	; (80035d0 <USB_DevInit+0x2f0>)
 800358e:	4313      	orrs	r3, r2
 8003590:	687a      	ldr	r2, [r7, #4]
 8003592:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003594:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003596:	2b00      	cmp	r3, #0
 8003598:	d005      	beq.n	80035a6 <USB_DevInit+0x2c6>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	699b      	ldr	r3, [r3, #24]
 800359e:	f043 0208 	orr.w	r2, r3, #8
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80035a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d105      	bne.n	80035b8 <USB_DevInit+0x2d8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	699a      	ldr	r2, [r3, #24]
 80035b0:	4b08      	ldr	r3, [pc, #32]	; (80035d4 <USB_DevInit+0x2f4>)
 80035b2:	4313      	orrs	r3, r2
 80035b4:	687a      	ldr	r2, [r7, #4]
 80035b6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80035b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3718      	adds	r7, #24
 80035be:	46bd      	mov	sp, r7
 80035c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80035c4:	b004      	add	sp, #16
 80035c6:	4770      	bx	lr
 80035c8:	00800100 	.word	0x00800100
 80035cc:	00010003 	.word	0x00010003
 80035d0:	803c3800 	.word	0x803c3800
 80035d4:	40000004 	.word	0x40000004

080035d8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80035d8:	b480      	push	{r7}
 80035da:	b085      	sub	sp, #20
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
 80035e0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80035e2:	2300      	movs	r3, #0
 80035e4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	019b      	lsls	r3, r3, #6
 80035ea:	f043 0220 	orr.w	r2, r3, #32
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	3301      	adds	r3, #1
 80035f6:	60fb      	str	r3, [r7, #12]
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	4a09      	ldr	r2, [pc, #36]	; (8003620 <USB_FlushTxFifo+0x48>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d901      	bls.n	8003604 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8003600:	2303      	movs	r3, #3
 8003602:	e006      	b.n	8003612 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	691b      	ldr	r3, [r3, #16]
 8003608:	f003 0320 	and.w	r3, r3, #32
 800360c:	2b20      	cmp	r3, #32
 800360e:	d0f0      	beq.n	80035f2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8003610:	2300      	movs	r3, #0
}
 8003612:	4618      	mov	r0, r3
 8003614:	3714      	adds	r7, #20
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr
 800361e:	bf00      	nop
 8003620:	00030d40 	.word	0x00030d40

08003624 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003624:	b480      	push	{r7}
 8003626:	b085      	sub	sp, #20
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800362c:	2300      	movs	r3, #0
 800362e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2210      	movs	r2, #16
 8003634:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	3301      	adds	r3, #1
 800363a:	60fb      	str	r3, [r7, #12]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	4a09      	ldr	r2, [pc, #36]	; (8003664 <USB_FlushRxFifo+0x40>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d901      	bls.n	8003648 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8003644:	2303      	movs	r3, #3
 8003646:	e006      	b.n	8003656 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	691b      	ldr	r3, [r3, #16]
 800364c:	f003 0310 	and.w	r3, r3, #16
 8003650:	2b10      	cmp	r3, #16
 8003652:	d0f0      	beq.n	8003636 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8003654:	2300      	movs	r3, #0
}
 8003656:	4618      	mov	r0, r3
 8003658:	3714      	adds	r7, #20
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr
 8003662:	bf00      	nop
 8003664:	00030d40 	.word	0x00030d40

08003668 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003668:	b480      	push	{r7}
 800366a:	b085      	sub	sp, #20
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	460b      	mov	r3, r1
 8003672:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	78fb      	ldrb	r3, [r7, #3]
 8003682:	68f9      	ldr	r1, [r7, #12]
 8003684:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003688:	4313      	orrs	r3, r2
 800368a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800368c:	2300      	movs	r3, #0
}
 800368e:	4618      	mov	r0, r3
 8003690:	3714      	adds	r7, #20
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr

0800369a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800369a:	b580      	push	{r7, lr}
 800369c:	b084      	sub	sp, #16
 800369e:	af00      	add	r7, sp, #0
 80036a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	68fa      	ldr	r2, [r7, #12]
 80036b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036b4:	f043 0302 	orr.w	r3, r3, #2
 80036b8:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80036ba:	2003      	movs	r0, #3
 80036bc:	f7fc ffd6 	bl	800066c <HAL_Delay>

  return HAL_OK;
 80036c0:	2300      	movs	r3, #0
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3710      	adds	r7, #16
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
	...

080036cc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b085      	sub	sp, #20
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80036d4:	2300      	movs	r3, #0
 80036d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	3301      	adds	r3, #1
 80036dc:	60fb      	str	r3, [r7, #12]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	4a13      	ldr	r2, [pc, #76]	; (8003730 <USB_CoreReset+0x64>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d901      	bls.n	80036ea <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	e01b      	b.n	8003722 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	691b      	ldr	r3, [r3, #16]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	daf2      	bge.n	80036d8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80036f2:	2300      	movs	r3, #0
 80036f4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	691b      	ldr	r3, [r3, #16]
 80036fa:	f043 0201 	orr.w	r2, r3, #1
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	3301      	adds	r3, #1
 8003706:	60fb      	str	r3, [r7, #12]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	4a09      	ldr	r2, [pc, #36]	; (8003730 <USB_CoreReset+0x64>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d901      	bls.n	8003714 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003710:	2303      	movs	r3, #3
 8003712:	e006      	b.n	8003722 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	691b      	ldr	r3, [r3, #16]
 8003718:	f003 0301 	and.w	r3, r3, #1
 800371c:	2b01      	cmp	r3, #1
 800371e:	d0f0      	beq.n	8003702 <USB_CoreReset+0x36>

  return HAL_OK;
 8003720:	2300      	movs	r3, #0
}
 8003722:	4618      	mov	r0, r3
 8003724:	3714      	adds	r7, #20
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr
 800372e:	bf00      	nop
 8003730:	00030d40 	.word	0x00030d40

08003734 <__io_putchar>:
 * @brief Retargets the C library printf function to the USART.
 * @param None
 * @retval None
 */
PUTCHAR_PROTOTYPE
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b082      	sub	sp, #8
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
 /* Place your implementation of fputc here */
 /* e.g. write a character to the USART2 and Loop until the end of transmission */
 HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 800373c:	1d39      	adds	r1, r7, #4
 800373e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003742:	2201      	movs	r2, #1
 8003744:	4803      	ldr	r0, [pc, #12]	; (8003754 <__io_putchar+0x20>)
 8003746:	f7ff f8e7 	bl	8002918 <HAL_UART_Transmit>
// if(ch==10)
// {
//	 ch=13;
//	 HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
// }
return ch;
 800374a:	687b      	ldr	r3, [r7, #4]
}
 800374c:	4618      	mov	r0, r3
 800374e:	3708      	adds	r7, #8
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}
 8003754:	2000009c 	.word	0x2000009c

08003758 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b082      	sub	sp, #8
 800375c:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800375e:	f7fc ff27 	bl	80005b0 <HAL_Init>

  /* USER CODE BEGIN Init */
  int n=0;
 8003762:	2300      	movs	r3, #0
 8003764:	607b      	str	r3, [r7, #4]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003766:	f000 f833 	bl	80037d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800376a:	f000 f955 	bl	8003a18 <MX_GPIO_Init>
  MX_ETH_Init();
 800376e:	f000 f8bf 	bl	80038f0 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8003772:	f000 f8f3 	bl	800395c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8003776:	f000 f921 	bl	80039bc <MX_USB_OTG_FS_PCD_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //read LED1 state
	  n = HAL_GPIO_ReadPin(LD1_GPIO_Port,LD1_Pin);
 800377a:	2101      	movs	r1, #1
 800377c:	4811      	ldr	r0, [pc, #68]	; (80037c4 <main+0x6c>)
 800377e:	f7fd fe93 	bl	80014a8 <HAL_GPIO_ReadPin>
 8003782:	4603      	mov	r3, r0
 8003784:	607b      	str	r3, [r7, #4]
	  //write LED1 inverse state
	  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin,!n);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2b00      	cmp	r3, #0
 800378a:	bf0c      	ite	eq
 800378c:	2301      	moveq	r3, #1
 800378e:	2300      	movne	r3, #0
 8003790:	b2db      	uxtb	r3, r3
 8003792:	461a      	mov	r2, r3
 8003794:	2101      	movs	r1, #1
 8003796:	480b      	ldr	r0, [pc, #44]	; (80037c4 <main+0x6c>)
 8003798:	f7fd fe9e 	bl	80014d8 <HAL_GPIO_WritePin>

	  //read button state
	  if( HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) )
 800379c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80037a0:	4809      	ldr	r0, [pc, #36]	; (80037c8 <main+0x70>)
 80037a2:	f7fd fe81 	bl	80014a8 <HAL_GPIO_ReadPin>
 80037a6:	4603      	mov	r3, r0
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d006      	beq.n	80037ba <main+0x62>
	  {
		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80037ac:	2180      	movs	r1, #128	; 0x80
 80037ae:	4805      	ldr	r0, [pc, #20]	; (80037c4 <main+0x6c>)
 80037b0:	f7fd feab 	bl	800150a <HAL_GPIO_TogglePin>
		  printf("button\n\r");
 80037b4:	4805      	ldr	r0, [pc, #20]	; (80037cc <main+0x74>)
 80037b6:	f000 fcaf 	bl	8004118 <iprintf>
	  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_Delay(100);
 80037ba:	2064      	movs	r0, #100	; 0x64
 80037bc:	f7fc ff56 	bl	800066c <HAL_Delay>
	  n = HAL_GPIO_ReadPin(LD1_GPIO_Port,LD1_Pin);
 80037c0:	e7db      	b.n	800377a <main+0x22>
 80037c2:	bf00      	nop
 80037c4:	40020400 	.word	0x40020400
 80037c8:	40020800 	.word	0x40020800
 80037cc:	08004ef8 	.word	0x08004ef8

080037d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b0b4      	sub	sp, #208	; 0xd0
 80037d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80037d6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80037da:	2230      	movs	r2, #48	; 0x30
 80037dc:	2100      	movs	r1, #0
 80037de:	4618      	mov	r0, r3
 80037e0:	f000 fc92 	bl	8004108 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80037e4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80037e8:	2200      	movs	r2, #0
 80037ea:	601a      	str	r2, [r3, #0]
 80037ec:	605a      	str	r2, [r3, #4]
 80037ee:	609a      	str	r2, [r3, #8]
 80037f0:	60da      	str	r2, [r3, #12]
 80037f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80037f4:	f107 0308 	add.w	r3, r7, #8
 80037f8:	2284      	movs	r2, #132	; 0x84
 80037fa:	2100      	movs	r1, #0
 80037fc:	4618      	mov	r0, r3
 80037fe:	f000 fc83 	bl	8004108 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8003802:	f7fd ffd9 	bl	80017b8 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003806:	4b37      	ldr	r3, [pc, #220]	; (80038e4 <SystemClock_Config+0x114>)
 8003808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380a:	4a36      	ldr	r2, [pc, #216]	; (80038e4 <SystemClock_Config+0x114>)
 800380c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003810:	6413      	str	r3, [r2, #64]	; 0x40
 8003812:	4b34      	ldr	r3, [pc, #208]	; (80038e4 <SystemClock_Config+0x114>)
 8003814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003816:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800381a:	607b      	str	r3, [r7, #4]
 800381c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800381e:	4b32      	ldr	r3, [pc, #200]	; (80038e8 <SystemClock_Config+0x118>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003826:	4a30      	ldr	r2, [pc, #192]	; (80038e8 <SystemClock_Config+0x118>)
 8003828:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800382c:	6013      	str	r3, [r2, #0]
 800382e:	4b2e      	ldr	r3, [pc, #184]	; (80038e8 <SystemClock_Config+0x118>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003836:	603b      	str	r3, [r7, #0]
 8003838:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800383a:	2301      	movs	r3, #1
 800383c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8003840:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8003844:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003848:	2302      	movs	r3, #2
 800384a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800384e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003852:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003856:	2304      	movs	r3, #4
 8003858:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 72;
 800385c:	2348      	movs	r3, #72	; 0x48
 800385e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003862:	2302      	movs	r3, #2
 8003864:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8003868:	2303      	movs	r3, #3
 800386a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800386e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003872:	4618      	mov	r0, r3
 8003874:	f7fd ffb0 	bl	80017d8 <HAL_RCC_OscConfig>
 8003878:	4603      	mov	r3, r0
 800387a:	2b00      	cmp	r3, #0
 800387c:	d001      	beq.n	8003882 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800387e:	f000 f96d 	bl	8003b5c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003882:	230f      	movs	r3, #15
 8003884:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003888:	2302      	movs	r3, #2
 800388a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800388e:	2300      	movs	r3, #0
 8003890:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003894:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003898:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800389c:	2300      	movs	r3, #0
 800389e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80038a2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80038a6:	2102      	movs	r1, #2
 80038a8:	4618      	mov	r0, r3
 80038aa:	f7fe fa05 	bl	8001cb8 <HAL_RCC_ClockConfig>
 80038ae:	4603      	mov	r3, r0
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d001      	beq.n	80038b8 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 80038b4:	f000 f952 	bl	8003b5c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 80038b8:	4b0c      	ldr	r3, [pc, #48]	; (80038ec <SystemClock_Config+0x11c>)
 80038ba:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80038bc:	2300      	movs	r3, #0
 80038be:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80038c0:	2300      	movs	r3, #0
 80038c2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80038c6:	f107 0308 	add.w	r3, r7, #8
 80038ca:	4618      	mov	r0, r3
 80038cc:	f7fe fbe8 	bl	80020a0 <HAL_RCCEx_PeriphCLKConfig>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d001      	beq.n	80038da <SystemClock_Config+0x10a>
  {
    Error_Handler();
 80038d6:	f000 f941 	bl	8003b5c <Error_Handler>
  }
}
 80038da:	bf00      	nop
 80038dc:	37d0      	adds	r7, #208	; 0xd0
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	bf00      	nop
 80038e4:	40023800 	.word	0x40023800
 80038e8:	40007000 	.word	0x40007000
 80038ec:	00200100 	.word	0x00200100

080038f0 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b082      	sub	sp, #8
 80038f4:	af00      	add	r7, sp, #0
   uint8_t MACAddr[6] ;

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80038f6:	4b17      	ldr	r3, [pc, #92]	; (8003954 <MX_ETH_Init+0x64>)
 80038f8:	4a17      	ldr	r2, [pc, #92]	; (8003958 <MX_ETH_Init+0x68>)
 80038fa:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80038fc:	4b15      	ldr	r3, [pc, #84]	; (8003954 <MX_ETH_Init+0x64>)
 80038fe:	2201      	movs	r2, #1
 8003900:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8003902:	4b14      	ldr	r3, [pc, #80]	; (8003954 <MX_ETH_Init+0x64>)
 8003904:	2200      	movs	r2, #0
 8003906:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8003908:	2300      	movs	r3, #0
 800390a:	703b      	strb	r3, [r7, #0]
  MACAddr[1] = 0x80;
 800390c:	2380      	movs	r3, #128	; 0x80
 800390e:	707b      	strb	r3, [r7, #1]
  MACAddr[2] = 0xE1;
 8003910:	23e1      	movs	r3, #225	; 0xe1
 8003912:	70bb      	strb	r3, [r7, #2]
  MACAddr[3] = 0x00;
 8003914:	2300      	movs	r3, #0
 8003916:	70fb      	strb	r3, [r7, #3]
  MACAddr[4] = 0x00;
 8003918:	2300      	movs	r3, #0
 800391a:	713b      	strb	r3, [r7, #4]
  MACAddr[5] = 0x00;
 800391c:	2300      	movs	r3, #0
 800391e:	717b      	strb	r3, [r7, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8003920:	4a0c      	ldr	r2, [pc, #48]	; (8003954 <MX_ETH_Init+0x64>)
 8003922:	463b      	mov	r3, r7
 8003924:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8003926:	4b0b      	ldr	r3, [pc, #44]	; (8003954 <MX_ETH_Init+0x64>)
 8003928:	2200      	movs	r2, #0
 800392a:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800392c:	4b09      	ldr	r3, [pc, #36]	; (8003954 <MX_ETH_Init+0x64>)
 800392e:	2200      	movs	r2, #0
 8003930:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8003932:	4b08      	ldr	r3, [pc, #32]	; (8003954 <MX_ETH_Init+0x64>)
 8003934:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003938:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800393a:	4806      	ldr	r0, [pc, #24]	; (8003954 <MX_ETH_Init+0x64>)
 800393c:	f7fc ff9e 	bl	800087c <HAL_ETH_Init>
 8003940:	4603      	mov	r3, r0
 8003942:	2b00      	cmp	r3, #0
 8003944:	d001      	beq.n	800394a <MX_ETH_Init+0x5a>
  {
    Error_Handler();
 8003946:	f000 f909 	bl	8003b5c <Error_Handler>
  }
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800394a:	bf00      	nop
 800394c:	3708      	adds	r7, #8
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop
 8003954:	20000520 	.word	0x20000520
 8003958:	40028000 	.word	0x40028000

0800395c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003960:	4b14      	ldr	r3, [pc, #80]	; (80039b4 <MX_USART3_UART_Init+0x58>)
 8003962:	4a15      	ldr	r2, [pc, #84]	; (80039b8 <MX_USART3_UART_Init+0x5c>)
 8003964:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003966:	4b13      	ldr	r3, [pc, #76]	; (80039b4 <MX_USART3_UART_Init+0x58>)
 8003968:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800396c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800396e:	4b11      	ldr	r3, [pc, #68]	; (80039b4 <MX_USART3_UART_Init+0x58>)
 8003970:	2200      	movs	r2, #0
 8003972:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003974:	4b0f      	ldr	r3, [pc, #60]	; (80039b4 <MX_USART3_UART_Init+0x58>)
 8003976:	2200      	movs	r2, #0
 8003978:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800397a:	4b0e      	ldr	r3, [pc, #56]	; (80039b4 <MX_USART3_UART_Init+0x58>)
 800397c:	2200      	movs	r2, #0
 800397e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003980:	4b0c      	ldr	r3, [pc, #48]	; (80039b4 <MX_USART3_UART_Init+0x58>)
 8003982:	220c      	movs	r2, #12
 8003984:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003986:	4b0b      	ldr	r3, [pc, #44]	; (80039b4 <MX_USART3_UART_Init+0x58>)
 8003988:	2200      	movs	r2, #0
 800398a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800398c:	4b09      	ldr	r3, [pc, #36]	; (80039b4 <MX_USART3_UART_Init+0x58>)
 800398e:	2200      	movs	r2, #0
 8003990:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003992:	4b08      	ldr	r3, [pc, #32]	; (80039b4 <MX_USART3_UART_Init+0x58>)
 8003994:	2200      	movs	r2, #0
 8003996:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003998:	4b06      	ldr	r3, [pc, #24]	; (80039b4 <MX_USART3_UART_Init+0x58>)
 800399a:	2200      	movs	r2, #0
 800399c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800399e:	4805      	ldr	r0, [pc, #20]	; (80039b4 <MX_USART3_UART_Init+0x58>)
 80039a0:	f7fe ff6c 	bl	800287c <HAL_UART_Init>
 80039a4:	4603      	mov	r3, r0
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d001      	beq.n	80039ae <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80039aa:	f000 f8d7 	bl	8003b5c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80039ae:	bf00      	nop
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	2000009c 	.word	0x2000009c
 80039b8:	40004800 	.word	0x40004800

080039bc <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80039c0:	4b14      	ldr	r3, [pc, #80]	; (8003a14 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80039c2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80039c6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80039c8:	4b12      	ldr	r3, [pc, #72]	; (8003a14 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80039ca:	2206      	movs	r2, #6
 80039cc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80039ce:	4b11      	ldr	r3, [pc, #68]	; (8003a14 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80039d0:	2202      	movs	r2, #2
 80039d2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80039d4:	4b0f      	ldr	r3, [pc, #60]	; (8003a14 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80039d6:	2200      	movs	r2, #0
 80039d8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80039da:	4b0e      	ldr	r3, [pc, #56]	; (8003a14 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80039dc:	2202      	movs	r2, #2
 80039de:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80039e0:	4b0c      	ldr	r3, [pc, #48]	; (8003a14 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80039e2:	2201      	movs	r2, #1
 80039e4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80039e6:	4b0b      	ldr	r3, [pc, #44]	; (8003a14 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80039e8:	2200      	movs	r2, #0
 80039ea:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80039ec:	4b09      	ldr	r3, [pc, #36]	; (8003a14 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80039ee:	2200      	movs	r2, #0
 80039f0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80039f2:	4b08      	ldr	r3, [pc, #32]	; (8003a14 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80039f4:	2201      	movs	r2, #1
 80039f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80039f8:	4b06      	ldr	r3, [pc, #24]	; (8003a14 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80039fa:	2200      	movs	r2, #0
 80039fc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80039fe:	4805      	ldr	r0, [pc, #20]	; (8003a14 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003a00:	f7fd fd9e 	bl	8001540 <HAL_PCD_Init>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d001      	beq.n	8003a0e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8003a0a:	f000 f8a7 	bl	8003b5c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8003a0e:	bf00      	nop
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	2000011c 	.word	0x2000011c

08003a18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b08c      	sub	sp, #48	; 0x30
 8003a1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a1e:	f107 031c 	add.w	r3, r7, #28
 8003a22:	2200      	movs	r2, #0
 8003a24:	601a      	str	r2, [r3, #0]
 8003a26:	605a      	str	r2, [r3, #4]
 8003a28:	609a      	str	r2, [r3, #8]
 8003a2a:	60da      	str	r2, [r3, #12]
 8003a2c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a2e:	4b46      	ldr	r3, [pc, #280]	; (8003b48 <MX_GPIO_Init+0x130>)
 8003a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a32:	4a45      	ldr	r2, [pc, #276]	; (8003b48 <MX_GPIO_Init+0x130>)
 8003a34:	f043 0304 	orr.w	r3, r3, #4
 8003a38:	6313      	str	r3, [r2, #48]	; 0x30
 8003a3a:	4b43      	ldr	r3, [pc, #268]	; (8003b48 <MX_GPIO_Init+0x130>)
 8003a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a3e:	f003 0304 	and.w	r3, r3, #4
 8003a42:	61bb      	str	r3, [r7, #24]
 8003a44:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003a46:	4b40      	ldr	r3, [pc, #256]	; (8003b48 <MX_GPIO_Init+0x130>)
 8003a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a4a:	4a3f      	ldr	r2, [pc, #252]	; (8003b48 <MX_GPIO_Init+0x130>)
 8003a4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a50:	6313      	str	r3, [r2, #48]	; 0x30
 8003a52:	4b3d      	ldr	r3, [pc, #244]	; (8003b48 <MX_GPIO_Init+0x130>)
 8003a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a5a:	617b      	str	r3, [r7, #20]
 8003a5c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a5e:	4b3a      	ldr	r3, [pc, #232]	; (8003b48 <MX_GPIO_Init+0x130>)
 8003a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a62:	4a39      	ldr	r2, [pc, #228]	; (8003b48 <MX_GPIO_Init+0x130>)
 8003a64:	f043 0301 	orr.w	r3, r3, #1
 8003a68:	6313      	str	r3, [r2, #48]	; 0x30
 8003a6a:	4b37      	ldr	r3, [pc, #220]	; (8003b48 <MX_GPIO_Init+0x130>)
 8003a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a6e:	f003 0301 	and.w	r3, r3, #1
 8003a72:	613b      	str	r3, [r7, #16]
 8003a74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a76:	4b34      	ldr	r3, [pc, #208]	; (8003b48 <MX_GPIO_Init+0x130>)
 8003a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a7a:	4a33      	ldr	r2, [pc, #204]	; (8003b48 <MX_GPIO_Init+0x130>)
 8003a7c:	f043 0302 	orr.w	r3, r3, #2
 8003a80:	6313      	str	r3, [r2, #48]	; 0x30
 8003a82:	4b31      	ldr	r3, [pc, #196]	; (8003b48 <MX_GPIO_Init+0x130>)
 8003a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a86:	f003 0302 	and.w	r3, r3, #2
 8003a8a:	60fb      	str	r3, [r7, #12]
 8003a8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003a8e:	4b2e      	ldr	r3, [pc, #184]	; (8003b48 <MX_GPIO_Init+0x130>)
 8003a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a92:	4a2d      	ldr	r2, [pc, #180]	; (8003b48 <MX_GPIO_Init+0x130>)
 8003a94:	f043 0308 	orr.w	r3, r3, #8
 8003a98:	6313      	str	r3, [r2, #48]	; 0x30
 8003a9a:	4b2b      	ldr	r3, [pc, #172]	; (8003b48 <MX_GPIO_Init+0x130>)
 8003a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a9e:	f003 0308 	and.w	r3, r3, #8
 8003aa2:	60bb      	str	r3, [r7, #8]
 8003aa4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003aa6:	4b28      	ldr	r3, [pc, #160]	; (8003b48 <MX_GPIO_Init+0x130>)
 8003aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aaa:	4a27      	ldr	r2, [pc, #156]	; (8003b48 <MX_GPIO_Init+0x130>)
 8003aac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8003ab2:	4b25      	ldr	r3, [pc, #148]	; (8003b48 <MX_GPIO_Init+0x130>)
 8003ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aba:	607b      	str	r3, [r7, #4]
 8003abc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f244 0181 	movw	r1, #16513	; 0x4081
 8003ac4:	4821      	ldr	r0, [pc, #132]	; (8003b4c <MX_GPIO_Init+0x134>)
 8003ac6:	f7fd fd07 	bl	80014d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8003aca:	2200      	movs	r2, #0
 8003acc:	2140      	movs	r1, #64	; 0x40
 8003ace:	4820      	ldr	r0, [pc, #128]	; (8003b50 <MX_GPIO_Init+0x138>)
 8003ad0:	f7fd fd02 	bl	80014d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8003ad4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003ad8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003ada:	4b1e      	ldr	r3, [pc, #120]	; (8003b54 <MX_GPIO_Init+0x13c>)
 8003adc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8003ae2:	f107 031c 	add.w	r3, r7, #28
 8003ae6:	4619      	mov	r1, r3
 8003ae8:	481b      	ldr	r0, [pc, #108]	; (8003b58 <MX_GPIO_Init+0x140>)
 8003aea:	f7fd fb33 	bl	8001154 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8003aee:	f244 0381 	movw	r3, #16513	; 0x4081
 8003af2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003af4:	2301      	movs	r3, #1
 8003af6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003af8:	2300      	movs	r3, #0
 8003afa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003afc:	2300      	movs	r3, #0
 8003afe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b00:	f107 031c 	add.w	r3, r7, #28
 8003b04:	4619      	mov	r1, r3
 8003b06:	4811      	ldr	r0, [pc, #68]	; (8003b4c <MX_GPIO_Init+0x134>)
 8003b08:	f7fd fb24 	bl	8001154 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8003b0c:	2340      	movs	r3, #64	; 0x40
 8003b0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b10:	2301      	movs	r3, #1
 8003b12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b14:	2300      	movs	r3, #0
 8003b16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8003b1c:	f107 031c 	add.w	r3, r7, #28
 8003b20:	4619      	mov	r1, r3
 8003b22:	480b      	ldr	r0, [pc, #44]	; (8003b50 <MX_GPIO_Init+0x138>)
 8003b24:	f7fd fb16 	bl	8001154 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8003b28:	2380      	movs	r3, #128	; 0x80
 8003b2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b30:	2300      	movs	r3, #0
 8003b32:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8003b34:	f107 031c 	add.w	r3, r7, #28
 8003b38:	4619      	mov	r1, r3
 8003b3a:	4805      	ldr	r0, [pc, #20]	; (8003b50 <MX_GPIO_Init+0x138>)
 8003b3c:	f7fd fb0a 	bl	8001154 <HAL_GPIO_Init>

}
 8003b40:	bf00      	nop
 8003b42:	3730      	adds	r7, #48	; 0x30
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}
 8003b48:	40023800 	.word	0x40023800
 8003b4c:	40020400 	.word	0x40020400
 8003b50:	40021800 	.word	0x40021800
 8003b54:	10110000 	.word	0x10110000
 8003b58:	40020800 	.word	0x40020800

08003b5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003b60:	bf00      	nop
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr
	...

08003b6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b083      	sub	sp, #12
 8003b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003b72:	4b0f      	ldr	r3, [pc, #60]	; (8003bb0 <HAL_MspInit+0x44>)
 8003b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b76:	4a0e      	ldr	r2, [pc, #56]	; (8003bb0 <HAL_MspInit+0x44>)
 8003b78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b7c:	6413      	str	r3, [r2, #64]	; 0x40
 8003b7e:	4b0c      	ldr	r3, [pc, #48]	; (8003bb0 <HAL_MspInit+0x44>)
 8003b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b86:	607b      	str	r3, [r7, #4]
 8003b88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b8a:	4b09      	ldr	r3, [pc, #36]	; (8003bb0 <HAL_MspInit+0x44>)
 8003b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b8e:	4a08      	ldr	r2, [pc, #32]	; (8003bb0 <HAL_MspInit+0x44>)
 8003b90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b94:	6453      	str	r3, [r2, #68]	; 0x44
 8003b96:	4b06      	ldr	r3, [pc, #24]	; (8003bb0 <HAL_MspInit+0x44>)
 8003b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b9e:	603b      	str	r3, [r7, #0]
 8003ba0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003ba2:	bf00      	nop
 8003ba4:	370c      	adds	r7, #12
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr
 8003bae:	bf00      	nop
 8003bb0:	40023800 	.word	0x40023800

08003bb4 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b08e      	sub	sp, #56	; 0x38
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	601a      	str	r2, [r3, #0]
 8003bc4:	605a      	str	r2, [r3, #4]
 8003bc6:	609a      	str	r2, [r3, #8]
 8003bc8:	60da      	str	r2, [r3, #12]
 8003bca:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a4e      	ldr	r2, [pc, #312]	; (8003d0c <HAL_ETH_MspInit+0x158>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	f040 8096 	bne.w	8003d04 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8003bd8:	4b4d      	ldr	r3, [pc, #308]	; (8003d10 <HAL_ETH_MspInit+0x15c>)
 8003bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bdc:	4a4c      	ldr	r2, [pc, #304]	; (8003d10 <HAL_ETH_MspInit+0x15c>)
 8003bde:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003be2:	6313      	str	r3, [r2, #48]	; 0x30
 8003be4:	4b4a      	ldr	r3, [pc, #296]	; (8003d10 <HAL_ETH_MspInit+0x15c>)
 8003be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bec:	623b      	str	r3, [r7, #32]
 8003bee:	6a3b      	ldr	r3, [r7, #32]
 8003bf0:	4b47      	ldr	r3, [pc, #284]	; (8003d10 <HAL_ETH_MspInit+0x15c>)
 8003bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf4:	4a46      	ldr	r2, [pc, #280]	; (8003d10 <HAL_ETH_MspInit+0x15c>)
 8003bf6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003bfa:	6313      	str	r3, [r2, #48]	; 0x30
 8003bfc:	4b44      	ldr	r3, [pc, #272]	; (8003d10 <HAL_ETH_MspInit+0x15c>)
 8003bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c00:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003c04:	61fb      	str	r3, [r7, #28]
 8003c06:	69fb      	ldr	r3, [r7, #28]
 8003c08:	4b41      	ldr	r3, [pc, #260]	; (8003d10 <HAL_ETH_MspInit+0x15c>)
 8003c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c0c:	4a40      	ldr	r2, [pc, #256]	; (8003d10 <HAL_ETH_MspInit+0x15c>)
 8003c0e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003c12:	6313      	str	r3, [r2, #48]	; 0x30
 8003c14:	4b3e      	ldr	r3, [pc, #248]	; (8003d10 <HAL_ETH_MspInit+0x15c>)
 8003c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c1c:	61bb      	str	r3, [r7, #24]
 8003c1e:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c20:	4b3b      	ldr	r3, [pc, #236]	; (8003d10 <HAL_ETH_MspInit+0x15c>)
 8003c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c24:	4a3a      	ldr	r2, [pc, #232]	; (8003d10 <HAL_ETH_MspInit+0x15c>)
 8003c26:	f043 0304 	orr.w	r3, r3, #4
 8003c2a:	6313      	str	r3, [r2, #48]	; 0x30
 8003c2c:	4b38      	ldr	r3, [pc, #224]	; (8003d10 <HAL_ETH_MspInit+0x15c>)
 8003c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c30:	f003 0304 	and.w	r3, r3, #4
 8003c34:	617b      	str	r3, [r7, #20]
 8003c36:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c38:	4b35      	ldr	r3, [pc, #212]	; (8003d10 <HAL_ETH_MspInit+0x15c>)
 8003c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c3c:	4a34      	ldr	r2, [pc, #208]	; (8003d10 <HAL_ETH_MspInit+0x15c>)
 8003c3e:	f043 0301 	orr.w	r3, r3, #1
 8003c42:	6313      	str	r3, [r2, #48]	; 0x30
 8003c44:	4b32      	ldr	r3, [pc, #200]	; (8003d10 <HAL_ETH_MspInit+0x15c>)
 8003c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c48:	f003 0301 	and.w	r3, r3, #1
 8003c4c:	613b      	str	r3, [r7, #16]
 8003c4e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c50:	4b2f      	ldr	r3, [pc, #188]	; (8003d10 <HAL_ETH_MspInit+0x15c>)
 8003c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c54:	4a2e      	ldr	r2, [pc, #184]	; (8003d10 <HAL_ETH_MspInit+0x15c>)
 8003c56:	f043 0302 	orr.w	r3, r3, #2
 8003c5a:	6313      	str	r3, [r2, #48]	; 0x30
 8003c5c:	4b2c      	ldr	r3, [pc, #176]	; (8003d10 <HAL_ETH_MspInit+0x15c>)
 8003c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c60:	f003 0302 	and.w	r3, r3, #2
 8003c64:	60fb      	str	r3, [r7, #12]
 8003c66:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003c68:	4b29      	ldr	r3, [pc, #164]	; (8003d10 <HAL_ETH_MspInit+0x15c>)
 8003c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c6c:	4a28      	ldr	r2, [pc, #160]	; (8003d10 <HAL_ETH_MspInit+0x15c>)
 8003c6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c72:	6313      	str	r3, [r2, #48]	; 0x30
 8003c74:	4b26      	ldr	r3, [pc, #152]	; (8003d10 <HAL_ETH_MspInit+0x15c>)
 8003c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c7c:	60bb      	str	r3, [r7, #8]
 8003c7e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8003c80:	2332      	movs	r3, #50	; 0x32
 8003c82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c84:	2302      	movs	r3, #2
 8003c86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c8c:	2303      	movs	r3, #3
 8003c8e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003c90:	230b      	movs	r3, #11
 8003c92:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c98:	4619      	mov	r1, r3
 8003c9a:	481e      	ldr	r0, [pc, #120]	; (8003d14 <HAL_ETH_MspInit+0x160>)
 8003c9c:	f7fd fa5a 	bl	8001154 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8003ca0:	2386      	movs	r3, #134	; 0x86
 8003ca2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ca4:	2302      	movs	r3, #2
 8003ca6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cac:	2303      	movs	r3, #3
 8003cae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003cb0:	230b      	movs	r3, #11
 8003cb2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003cb8:	4619      	mov	r1, r3
 8003cba:	4817      	ldr	r0, [pc, #92]	; (8003d18 <HAL_ETH_MspInit+0x164>)
 8003cbc:	f7fd fa4a 	bl	8001154 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8003cc0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003cc4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cc6:	2302      	movs	r3, #2
 8003cc8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cce:	2303      	movs	r3, #3
 8003cd0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003cd2:	230b      	movs	r3, #11
 8003cd4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8003cd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003cda:	4619      	mov	r1, r3
 8003cdc:	480f      	ldr	r0, [pc, #60]	; (8003d1c <HAL_ETH_MspInit+0x168>)
 8003cde:	f7fd fa39 	bl	8001154 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8003ce2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8003ce6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ce8:	2302      	movs	r3, #2
 8003cea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cec:	2300      	movs	r3, #0
 8003cee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cf0:	2303      	movs	r3, #3
 8003cf2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003cf4:	230b      	movs	r3, #11
 8003cf6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003cf8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003cfc:	4619      	mov	r1, r3
 8003cfe:	4808      	ldr	r0, [pc, #32]	; (8003d20 <HAL_ETH_MspInit+0x16c>)
 8003d00:	f7fd fa28 	bl	8001154 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8003d04:	bf00      	nop
 8003d06:	3738      	adds	r7, #56	; 0x38
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}
 8003d0c:	40028000 	.word	0x40028000
 8003d10:	40023800 	.word	0x40023800
 8003d14:	40020800 	.word	0x40020800
 8003d18:	40020000 	.word	0x40020000
 8003d1c:	40020400 	.word	0x40020400
 8003d20:	40021800 	.word	0x40021800

08003d24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b08a      	sub	sp, #40	; 0x28
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d2c:	f107 0314 	add.w	r3, r7, #20
 8003d30:	2200      	movs	r2, #0
 8003d32:	601a      	str	r2, [r3, #0]
 8003d34:	605a      	str	r2, [r3, #4]
 8003d36:	609a      	str	r2, [r3, #8]
 8003d38:	60da      	str	r2, [r3, #12]
 8003d3a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a17      	ldr	r2, [pc, #92]	; (8003da0 <HAL_UART_MspInit+0x7c>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d128      	bne.n	8003d98 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003d46:	4b17      	ldr	r3, [pc, #92]	; (8003da4 <HAL_UART_MspInit+0x80>)
 8003d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4a:	4a16      	ldr	r2, [pc, #88]	; (8003da4 <HAL_UART_MspInit+0x80>)
 8003d4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d50:	6413      	str	r3, [r2, #64]	; 0x40
 8003d52:	4b14      	ldr	r3, [pc, #80]	; (8003da4 <HAL_UART_MspInit+0x80>)
 8003d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d5a:	613b      	str	r3, [r7, #16]
 8003d5c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003d5e:	4b11      	ldr	r3, [pc, #68]	; (8003da4 <HAL_UART_MspInit+0x80>)
 8003d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d62:	4a10      	ldr	r2, [pc, #64]	; (8003da4 <HAL_UART_MspInit+0x80>)
 8003d64:	f043 0308 	orr.w	r3, r3, #8
 8003d68:	6313      	str	r3, [r2, #48]	; 0x30
 8003d6a:	4b0e      	ldr	r3, [pc, #56]	; (8003da4 <HAL_UART_MspInit+0x80>)
 8003d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d6e:	f003 0308 	and.w	r3, r3, #8
 8003d72:	60fb      	str	r3, [r7, #12]
 8003d74:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8003d76:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003d7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d7c:	2302      	movs	r3, #2
 8003d7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d80:	2300      	movs	r3, #0
 8003d82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d84:	2303      	movs	r3, #3
 8003d86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003d88:	2307      	movs	r3, #7
 8003d8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003d8c:	f107 0314 	add.w	r3, r7, #20
 8003d90:	4619      	mov	r1, r3
 8003d92:	4805      	ldr	r0, [pc, #20]	; (8003da8 <HAL_UART_MspInit+0x84>)
 8003d94:	f7fd f9de 	bl	8001154 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003d98:	bf00      	nop
 8003d9a:	3728      	adds	r7, #40	; 0x28
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}
 8003da0:	40004800 	.word	0x40004800
 8003da4:	40023800 	.word	0x40023800
 8003da8:	40020c00 	.word	0x40020c00

08003dac <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b08a      	sub	sp, #40	; 0x28
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003db4:	f107 0314 	add.w	r3, r7, #20
 8003db8:	2200      	movs	r2, #0
 8003dba:	601a      	str	r2, [r3, #0]
 8003dbc:	605a      	str	r2, [r3, #4]
 8003dbe:	609a      	str	r2, [r3, #8]
 8003dc0:	60da      	str	r2, [r3, #12]
 8003dc2:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003dcc:	d141      	bne.n	8003e52 <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003dce:	4b23      	ldr	r3, [pc, #140]	; (8003e5c <HAL_PCD_MspInit+0xb0>)
 8003dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd2:	4a22      	ldr	r2, [pc, #136]	; (8003e5c <HAL_PCD_MspInit+0xb0>)
 8003dd4:	f043 0301 	orr.w	r3, r3, #1
 8003dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8003dda:	4b20      	ldr	r3, [pc, #128]	; (8003e5c <HAL_PCD_MspInit+0xb0>)
 8003ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dde:	f003 0301 	and.w	r3, r3, #1
 8003de2:	613b      	str	r3, [r7, #16]
 8003de4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8003de6:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8003dea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dec:	2302      	movs	r3, #2
 8003dee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003df0:	2300      	movs	r3, #0
 8003df2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003df4:	2303      	movs	r3, #3
 8003df6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003df8:	230a      	movs	r3, #10
 8003dfa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003dfc:	f107 0314 	add.w	r3, r7, #20
 8003e00:	4619      	mov	r1, r3
 8003e02:	4817      	ldr	r0, [pc, #92]	; (8003e60 <HAL_PCD_MspInit+0xb4>)
 8003e04:	f7fd f9a6 	bl	8001154 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8003e08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003e0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e12:	2300      	movs	r3, #0
 8003e14:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8003e16:	f107 0314 	add.w	r3, r7, #20
 8003e1a:	4619      	mov	r1, r3
 8003e1c:	4810      	ldr	r0, [pc, #64]	; (8003e60 <HAL_PCD_MspInit+0xb4>)
 8003e1e:	f7fd f999 	bl	8001154 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8003e22:	4b0e      	ldr	r3, [pc, #56]	; (8003e5c <HAL_PCD_MspInit+0xb0>)
 8003e24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e26:	4a0d      	ldr	r2, [pc, #52]	; (8003e5c <HAL_PCD_MspInit+0xb0>)
 8003e28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e2c:	6353      	str	r3, [r2, #52]	; 0x34
 8003e2e:	4b0b      	ldr	r3, [pc, #44]	; (8003e5c <HAL_PCD_MspInit+0xb0>)
 8003e30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e36:	60fb      	str	r3, [r7, #12]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	4b08      	ldr	r3, [pc, #32]	; (8003e5c <HAL_PCD_MspInit+0xb0>)
 8003e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e3e:	4a07      	ldr	r2, [pc, #28]	; (8003e5c <HAL_PCD_MspInit+0xb0>)
 8003e40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e44:	6453      	str	r3, [r2, #68]	; 0x44
 8003e46:	4b05      	ldr	r3, [pc, #20]	; (8003e5c <HAL_PCD_MspInit+0xb0>)
 8003e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e4e:	60bb      	str	r3, [r7, #8]
 8003e50:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8003e52:	bf00      	nop
 8003e54:	3728      	adds	r7, #40	; 0x28
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	40023800 	.word	0x40023800
 8003e60:	40020000 	.word	0x40020000

08003e64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003e64:	b480      	push	{r7}
 8003e66:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003e68:	bf00      	nop
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr

08003e72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003e72:	b480      	push	{r7}
 8003e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003e76:	e7fe      	b.n	8003e76 <HardFault_Handler+0x4>

08003e78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003e7c:	e7fe      	b.n	8003e7c <MemManage_Handler+0x4>

08003e7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003e7e:	b480      	push	{r7}
 8003e80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003e82:	e7fe      	b.n	8003e82 <BusFault_Handler+0x4>

08003e84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003e84:	b480      	push	{r7}
 8003e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003e88:	e7fe      	b.n	8003e88 <UsageFault_Handler+0x4>

08003e8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003e8a:	b480      	push	{r7}
 8003e8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003e8e:	bf00      	nop
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr

08003e98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003e9c:	bf00      	nop
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea4:	4770      	bx	lr

08003ea6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003ea6:	b480      	push	{r7}
 8003ea8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003eaa:	bf00      	nop
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr

08003eb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003eb8:	f7fc fbb8 	bl	800062c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003ebc:	bf00      	nop
 8003ebe:	bd80      	pop	{r7, pc}

08003ec0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b086      	sub	sp, #24
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	60f8      	str	r0, [r7, #12]
 8003ec8:	60b9      	str	r1, [r7, #8]
 8003eca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ecc:	2300      	movs	r3, #0
 8003ece:	617b      	str	r3, [r7, #20]
 8003ed0:	e00a      	b.n	8003ee8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003ed2:	f3af 8000 	nop.w
 8003ed6:	4601      	mov	r1, r0
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	1c5a      	adds	r2, r3, #1
 8003edc:	60ba      	str	r2, [r7, #8]
 8003ede:	b2ca      	uxtb	r2, r1
 8003ee0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	3301      	adds	r3, #1
 8003ee6:	617b      	str	r3, [r7, #20]
 8003ee8:	697a      	ldr	r2, [r7, #20]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	429a      	cmp	r2, r3
 8003eee:	dbf0      	blt.n	8003ed2 <_read+0x12>
	}

return len;
 8003ef0:	687b      	ldr	r3, [r7, #4]
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3718      	adds	r7, #24
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}

08003efa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003efa:	b580      	push	{r7, lr}
 8003efc:	b086      	sub	sp, #24
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	60f8      	str	r0, [r7, #12]
 8003f02:	60b9      	str	r1, [r7, #8]
 8003f04:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f06:	2300      	movs	r3, #0
 8003f08:	617b      	str	r3, [r7, #20]
 8003f0a:	e009      	b.n	8003f20 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	1c5a      	adds	r2, r3, #1
 8003f10:	60ba      	str	r2, [r7, #8]
 8003f12:	781b      	ldrb	r3, [r3, #0]
 8003f14:	4618      	mov	r0, r3
 8003f16:	f7ff fc0d 	bl	8003734 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	3301      	adds	r3, #1
 8003f1e:	617b      	str	r3, [r7, #20]
 8003f20:	697a      	ldr	r2, [r7, #20]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	429a      	cmp	r2, r3
 8003f26:	dbf1      	blt.n	8003f0c <_write+0x12>
	}
	return len;
 8003f28:	687b      	ldr	r3, [r7, #4]
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3718      	adds	r7, #24
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}

08003f32 <_close>:

int _close(int file)
{
 8003f32:	b480      	push	{r7}
 8003f34:	b083      	sub	sp, #12
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	6078      	str	r0, [r7, #4]
	return -1;
 8003f3a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	370c      	adds	r7, #12
 8003f42:	46bd      	mov	sp, r7
 8003f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f48:	4770      	bx	lr

08003f4a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003f4a:	b480      	push	{r7}
 8003f4c:	b083      	sub	sp, #12
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	6078      	str	r0, [r7, #4]
 8003f52:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003f5a:	605a      	str	r2, [r3, #4]
	return 0;
 8003f5c:	2300      	movs	r3, #0
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	370c      	adds	r7, #12
 8003f62:	46bd      	mov	sp, r7
 8003f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f68:	4770      	bx	lr

08003f6a <_isatty>:

int _isatty(int file)
{
 8003f6a:	b480      	push	{r7}
 8003f6c:	b083      	sub	sp, #12
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	6078      	str	r0, [r7, #4]
	return 1;
 8003f72:	2301      	movs	r3, #1
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	370c      	adds	r7, #12
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr

08003f80 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b085      	sub	sp, #20
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	60f8      	str	r0, [r7, #12]
 8003f88:	60b9      	str	r1, [r7, #8]
 8003f8a:	607a      	str	r2, [r7, #4]
	return 0;
 8003f8c:	2300      	movs	r3, #0
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3714      	adds	r7, #20
 8003f92:	46bd      	mov	sp, r7
 8003f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f98:	4770      	bx	lr
	...

08003f9c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b084      	sub	sp, #16
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003fa4:	4b11      	ldr	r3, [pc, #68]	; (8003fec <_sbrk+0x50>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d102      	bne.n	8003fb2 <_sbrk+0x16>
		heap_end = &end;
 8003fac:	4b0f      	ldr	r3, [pc, #60]	; (8003fec <_sbrk+0x50>)
 8003fae:	4a10      	ldr	r2, [pc, #64]	; (8003ff0 <_sbrk+0x54>)
 8003fb0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003fb2:	4b0e      	ldr	r3, [pc, #56]	; (8003fec <_sbrk+0x50>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003fb8:	4b0c      	ldr	r3, [pc, #48]	; (8003fec <_sbrk+0x50>)
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	4413      	add	r3, r2
 8003fc0:	466a      	mov	r2, sp
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d907      	bls.n	8003fd6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003fc6:	f000 f875 	bl	80040b4 <__errno>
 8003fca:	4602      	mov	r2, r0
 8003fcc:	230c      	movs	r3, #12
 8003fce:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8003fd0:	f04f 33ff 	mov.w	r3, #4294967295
 8003fd4:	e006      	b.n	8003fe4 <_sbrk+0x48>
	}

	heap_end += incr;
 8003fd6:	4b05      	ldr	r3, [pc, #20]	; (8003fec <_sbrk+0x50>)
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	4413      	add	r3, r2
 8003fde:	4a03      	ldr	r2, [pc, #12]	; (8003fec <_sbrk+0x50>)
 8003fe0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3710      	adds	r7, #16
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}
 8003fec:	2000008c 	.word	0x2000008c
 8003ff0:	20000570 	.word	0x20000570

08003ff4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003ff8:	4b15      	ldr	r3, [pc, #84]	; (8004050 <SystemInit+0x5c>)
 8003ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ffe:	4a14      	ldr	r2, [pc, #80]	; (8004050 <SystemInit+0x5c>)
 8004000:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004004:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8004008:	4b12      	ldr	r3, [pc, #72]	; (8004054 <SystemInit+0x60>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a11      	ldr	r2, [pc, #68]	; (8004054 <SystemInit+0x60>)
 800400e:	f043 0301 	orr.w	r3, r3, #1
 8004012:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004014:	4b0f      	ldr	r3, [pc, #60]	; (8004054 <SystemInit+0x60>)
 8004016:	2200      	movs	r2, #0
 8004018:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800401a:	4b0e      	ldr	r3, [pc, #56]	; (8004054 <SystemInit+0x60>)
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	490d      	ldr	r1, [pc, #52]	; (8004054 <SystemInit+0x60>)
 8004020:	4b0d      	ldr	r3, [pc, #52]	; (8004058 <SystemInit+0x64>)
 8004022:	4013      	ands	r3, r2
 8004024:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8004026:	4b0b      	ldr	r3, [pc, #44]	; (8004054 <SystemInit+0x60>)
 8004028:	4a0c      	ldr	r2, [pc, #48]	; (800405c <SystemInit+0x68>)
 800402a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800402c:	4b09      	ldr	r3, [pc, #36]	; (8004054 <SystemInit+0x60>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a08      	ldr	r2, [pc, #32]	; (8004054 <SystemInit+0x60>)
 8004032:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004036:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8004038:	4b06      	ldr	r3, [pc, #24]	; (8004054 <SystemInit+0x60>)
 800403a:	2200      	movs	r2, #0
 800403c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800403e:	4b04      	ldr	r3, [pc, #16]	; (8004050 <SystemInit+0x5c>)
 8004040:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004044:	609a      	str	r2, [r3, #8]
#endif
}
 8004046:	bf00      	nop
 8004048:	46bd      	mov	sp, r7
 800404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404e:	4770      	bx	lr
 8004050:	e000ed00 	.word	0xe000ed00
 8004054:	40023800 	.word	0x40023800
 8004058:	fef6ffff 	.word	0xfef6ffff
 800405c:	24003010 	.word	0x24003010

08004060 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004060:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004098 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004064:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004066:	e003      	b.n	8004070 <LoopCopyDataInit>

08004068 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004068:	4b0c      	ldr	r3, [pc, #48]	; (800409c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800406a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800406c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800406e:	3104      	adds	r1, #4

08004070 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004070:	480b      	ldr	r0, [pc, #44]	; (80040a0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004072:	4b0c      	ldr	r3, [pc, #48]	; (80040a4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004074:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004076:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004078:	d3f6      	bcc.n	8004068 <CopyDataInit>
  ldr  r2, =_sbss
 800407a:	4a0b      	ldr	r2, [pc, #44]	; (80040a8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800407c:	e002      	b.n	8004084 <LoopFillZerobss>

0800407e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800407e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004080:	f842 3b04 	str.w	r3, [r2], #4

08004084 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004084:	4b09      	ldr	r3, [pc, #36]	; (80040ac <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004086:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004088:	d3f9      	bcc.n	800407e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800408a:	f7ff ffb3 	bl	8003ff4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800408e:	f000 f817 	bl	80040c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004092:	f7ff fb61 	bl	8003758 <main>
  bx  lr    
 8004096:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004098:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 800409c:	08004fc4 	.word	0x08004fc4
  ldr  r0, =_sdata
 80040a0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80040a4:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 80040a8:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 80040ac:	2000056c 	.word	0x2000056c

080040b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80040b0:	e7fe      	b.n	80040b0 <ADC_IRQHandler>
	...

080040b4 <__errno>:
 80040b4:	4b01      	ldr	r3, [pc, #4]	; (80040bc <__errno+0x8>)
 80040b6:	6818      	ldr	r0, [r3, #0]
 80040b8:	4770      	bx	lr
 80040ba:	bf00      	nop
 80040bc:	2000000c 	.word	0x2000000c

080040c0 <__libc_init_array>:
 80040c0:	b570      	push	{r4, r5, r6, lr}
 80040c2:	4e0d      	ldr	r6, [pc, #52]	; (80040f8 <__libc_init_array+0x38>)
 80040c4:	4c0d      	ldr	r4, [pc, #52]	; (80040fc <__libc_init_array+0x3c>)
 80040c6:	1ba4      	subs	r4, r4, r6
 80040c8:	10a4      	asrs	r4, r4, #2
 80040ca:	2500      	movs	r5, #0
 80040cc:	42a5      	cmp	r5, r4
 80040ce:	d109      	bne.n	80040e4 <__libc_init_array+0x24>
 80040d0:	4e0b      	ldr	r6, [pc, #44]	; (8004100 <__libc_init_array+0x40>)
 80040d2:	4c0c      	ldr	r4, [pc, #48]	; (8004104 <__libc_init_array+0x44>)
 80040d4:	f000 ff04 	bl	8004ee0 <_init>
 80040d8:	1ba4      	subs	r4, r4, r6
 80040da:	10a4      	asrs	r4, r4, #2
 80040dc:	2500      	movs	r5, #0
 80040de:	42a5      	cmp	r5, r4
 80040e0:	d105      	bne.n	80040ee <__libc_init_array+0x2e>
 80040e2:	bd70      	pop	{r4, r5, r6, pc}
 80040e4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80040e8:	4798      	blx	r3
 80040ea:	3501      	adds	r5, #1
 80040ec:	e7ee      	b.n	80040cc <__libc_init_array+0xc>
 80040ee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80040f2:	4798      	blx	r3
 80040f4:	3501      	adds	r5, #1
 80040f6:	e7f2      	b.n	80040de <__libc_init_array+0x1e>
 80040f8:	08004fbc 	.word	0x08004fbc
 80040fc:	08004fbc 	.word	0x08004fbc
 8004100:	08004fbc 	.word	0x08004fbc
 8004104:	08004fc0 	.word	0x08004fc0

08004108 <memset>:
 8004108:	4402      	add	r2, r0
 800410a:	4603      	mov	r3, r0
 800410c:	4293      	cmp	r3, r2
 800410e:	d100      	bne.n	8004112 <memset+0xa>
 8004110:	4770      	bx	lr
 8004112:	f803 1b01 	strb.w	r1, [r3], #1
 8004116:	e7f9      	b.n	800410c <memset+0x4>

08004118 <iprintf>:
 8004118:	b40f      	push	{r0, r1, r2, r3}
 800411a:	4b0a      	ldr	r3, [pc, #40]	; (8004144 <iprintf+0x2c>)
 800411c:	b513      	push	{r0, r1, r4, lr}
 800411e:	681c      	ldr	r4, [r3, #0]
 8004120:	b124      	cbz	r4, 800412c <iprintf+0x14>
 8004122:	69a3      	ldr	r3, [r4, #24]
 8004124:	b913      	cbnz	r3, 800412c <iprintf+0x14>
 8004126:	4620      	mov	r0, r4
 8004128:	f000 f84e 	bl	80041c8 <__sinit>
 800412c:	ab05      	add	r3, sp, #20
 800412e:	9a04      	ldr	r2, [sp, #16]
 8004130:	68a1      	ldr	r1, [r4, #8]
 8004132:	9301      	str	r3, [sp, #4]
 8004134:	4620      	mov	r0, r4
 8004136:	f000 f955 	bl	80043e4 <_vfiprintf_r>
 800413a:	b002      	add	sp, #8
 800413c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004140:	b004      	add	sp, #16
 8004142:	4770      	bx	lr
 8004144:	2000000c 	.word	0x2000000c

08004148 <std>:
 8004148:	2300      	movs	r3, #0
 800414a:	b510      	push	{r4, lr}
 800414c:	4604      	mov	r4, r0
 800414e:	e9c0 3300 	strd	r3, r3, [r0]
 8004152:	6083      	str	r3, [r0, #8]
 8004154:	8181      	strh	r1, [r0, #12]
 8004156:	6643      	str	r3, [r0, #100]	; 0x64
 8004158:	81c2      	strh	r2, [r0, #14]
 800415a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800415e:	6183      	str	r3, [r0, #24]
 8004160:	4619      	mov	r1, r3
 8004162:	2208      	movs	r2, #8
 8004164:	305c      	adds	r0, #92	; 0x5c
 8004166:	f7ff ffcf 	bl	8004108 <memset>
 800416a:	4b05      	ldr	r3, [pc, #20]	; (8004180 <std+0x38>)
 800416c:	6263      	str	r3, [r4, #36]	; 0x24
 800416e:	4b05      	ldr	r3, [pc, #20]	; (8004184 <std+0x3c>)
 8004170:	62a3      	str	r3, [r4, #40]	; 0x28
 8004172:	4b05      	ldr	r3, [pc, #20]	; (8004188 <std+0x40>)
 8004174:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004176:	4b05      	ldr	r3, [pc, #20]	; (800418c <std+0x44>)
 8004178:	6224      	str	r4, [r4, #32]
 800417a:	6323      	str	r3, [r4, #48]	; 0x30
 800417c:	bd10      	pop	{r4, pc}
 800417e:	bf00      	nop
 8004180:	08004941 	.word	0x08004941
 8004184:	08004963 	.word	0x08004963
 8004188:	0800499b 	.word	0x0800499b
 800418c:	080049bf 	.word	0x080049bf

08004190 <_cleanup_r>:
 8004190:	4901      	ldr	r1, [pc, #4]	; (8004198 <_cleanup_r+0x8>)
 8004192:	f000 b885 	b.w	80042a0 <_fwalk_reent>
 8004196:	bf00      	nop
 8004198:	08004c99 	.word	0x08004c99

0800419c <__sfmoreglue>:
 800419c:	b570      	push	{r4, r5, r6, lr}
 800419e:	1e4a      	subs	r2, r1, #1
 80041a0:	2568      	movs	r5, #104	; 0x68
 80041a2:	4355      	muls	r5, r2
 80041a4:	460e      	mov	r6, r1
 80041a6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80041aa:	f000 f897 	bl	80042dc <_malloc_r>
 80041ae:	4604      	mov	r4, r0
 80041b0:	b140      	cbz	r0, 80041c4 <__sfmoreglue+0x28>
 80041b2:	2100      	movs	r1, #0
 80041b4:	e9c0 1600 	strd	r1, r6, [r0]
 80041b8:	300c      	adds	r0, #12
 80041ba:	60a0      	str	r0, [r4, #8]
 80041bc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80041c0:	f7ff ffa2 	bl	8004108 <memset>
 80041c4:	4620      	mov	r0, r4
 80041c6:	bd70      	pop	{r4, r5, r6, pc}

080041c8 <__sinit>:
 80041c8:	6983      	ldr	r3, [r0, #24]
 80041ca:	b510      	push	{r4, lr}
 80041cc:	4604      	mov	r4, r0
 80041ce:	bb33      	cbnz	r3, 800421e <__sinit+0x56>
 80041d0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80041d4:	6503      	str	r3, [r0, #80]	; 0x50
 80041d6:	4b12      	ldr	r3, [pc, #72]	; (8004220 <__sinit+0x58>)
 80041d8:	4a12      	ldr	r2, [pc, #72]	; (8004224 <__sinit+0x5c>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	6282      	str	r2, [r0, #40]	; 0x28
 80041de:	4298      	cmp	r0, r3
 80041e0:	bf04      	itt	eq
 80041e2:	2301      	moveq	r3, #1
 80041e4:	6183      	streq	r3, [r0, #24]
 80041e6:	f000 f81f 	bl	8004228 <__sfp>
 80041ea:	6060      	str	r0, [r4, #4]
 80041ec:	4620      	mov	r0, r4
 80041ee:	f000 f81b 	bl	8004228 <__sfp>
 80041f2:	60a0      	str	r0, [r4, #8]
 80041f4:	4620      	mov	r0, r4
 80041f6:	f000 f817 	bl	8004228 <__sfp>
 80041fa:	2200      	movs	r2, #0
 80041fc:	60e0      	str	r0, [r4, #12]
 80041fe:	2104      	movs	r1, #4
 8004200:	6860      	ldr	r0, [r4, #4]
 8004202:	f7ff ffa1 	bl	8004148 <std>
 8004206:	2201      	movs	r2, #1
 8004208:	2109      	movs	r1, #9
 800420a:	68a0      	ldr	r0, [r4, #8]
 800420c:	f7ff ff9c 	bl	8004148 <std>
 8004210:	2202      	movs	r2, #2
 8004212:	2112      	movs	r1, #18
 8004214:	68e0      	ldr	r0, [r4, #12]
 8004216:	f7ff ff97 	bl	8004148 <std>
 800421a:	2301      	movs	r3, #1
 800421c:	61a3      	str	r3, [r4, #24]
 800421e:	bd10      	pop	{r4, pc}
 8004220:	08004f1c 	.word	0x08004f1c
 8004224:	08004191 	.word	0x08004191

08004228 <__sfp>:
 8004228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800422a:	4b1b      	ldr	r3, [pc, #108]	; (8004298 <__sfp+0x70>)
 800422c:	681e      	ldr	r6, [r3, #0]
 800422e:	69b3      	ldr	r3, [r6, #24]
 8004230:	4607      	mov	r7, r0
 8004232:	b913      	cbnz	r3, 800423a <__sfp+0x12>
 8004234:	4630      	mov	r0, r6
 8004236:	f7ff ffc7 	bl	80041c8 <__sinit>
 800423a:	3648      	adds	r6, #72	; 0x48
 800423c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004240:	3b01      	subs	r3, #1
 8004242:	d503      	bpl.n	800424c <__sfp+0x24>
 8004244:	6833      	ldr	r3, [r6, #0]
 8004246:	b133      	cbz	r3, 8004256 <__sfp+0x2e>
 8004248:	6836      	ldr	r6, [r6, #0]
 800424a:	e7f7      	b.n	800423c <__sfp+0x14>
 800424c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004250:	b16d      	cbz	r5, 800426e <__sfp+0x46>
 8004252:	3468      	adds	r4, #104	; 0x68
 8004254:	e7f4      	b.n	8004240 <__sfp+0x18>
 8004256:	2104      	movs	r1, #4
 8004258:	4638      	mov	r0, r7
 800425a:	f7ff ff9f 	bl	800419c <__sfmoreglue>
 800425e:	6030      	str	r0, [r6, #0]
 8004260:	2800      	cmp	r0, #0
 8004262:	d1f1      	bne.n	8004248 <__sfp+0x20>
 8004264:	230c      	movs	r3, #12
 8004266:	603b      	str	r3, [r7, #0]
 8004268:	4604      	mov	r4, r0
 800426a:	4620      	mov	r0, r4
 800426c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800426e:	4b0b      	ldr	r3, [pc, #44]	; (800429c <__sfp+0x74>)
 8004270:	6665      	str	r5, [r4, #100]	; 0x64
 8004272:	e9c4 5500 	strd	r5, r5, [r4]
 8004276:	60a5      	str	r5, [r4, #8]
 8004278:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800427c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8004280:	2208      	movs	r2, #8
 8004282:	4629      	mov	r1, r5
 8004284:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004288:	f7ff ff3e 	bl	8004108 <memset>
 800428c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004290:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004294:	e7e9      	b.n	800426a <__sfp+0x42>
 8004296:	bf00      	nop
 8004298:	08004f1c 	.word	0x08004f1c
 800429c:	ffff0001 	.word	0xffff0001

080042a0 <_fwalk_reent>:
 80042a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80042a4:	4680      	mov	r8, r0
 80042a6:	4689      	mov	r9, r1
 80042a8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80042ac:	2600      	movs	r6, #0
 80042ae:	b914      	cbnz	r4, 80042b6 <_fwalk_reent+0x16>
 80042b0:	4630      	mov	r0, r6
 80042b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80042b6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80042ba:	3f01      	subs	r7, #1
 80042bc:	d501      	bpl.n	80042c2 <_fwalk_reent+0x22>
 80042be:	6824      	ldr	r4, [r4, #0]
 80042c0:	e7f5      	b.n	80042ae <_fwalk_reent+0xe>
 80042c2:	89ab      	ldrh	r3, [r5, #12]
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d907      	bls.n	80042d8 <_fwalk_reent+0x38>
 80042c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80042cc:	3301      	adds	r3, #1
 80042ce:	d003      	beq.n	80042d8 <_fwalk_reent+0x38>
 80042d0:	4629      	mov	r1, r5
 80042d2:	4640      	mov	r0, r8
 80042d4:	47c8      	blx	r9
 80042d6:	4306      	orrs	r6, r0
 80042d8:	3568      	adds	r5, #104	; 0x68
 80042da:	e7ee      	b.n	80042ba <_fwalk_reent+0x1a>

080042dc <_malloc_r>:
 80042dc:	b570      	push	{r4, r5, r6, lr}
 80042de:	1ccd      	adds	r5, r1, #3
 80042e0:	f025 0503 	bic.w	r5, r5, #3
 80042e4:	3508      	adds	r5, #8
 80042e6:	2d0c      	cmp	r5, #12
 80042e8:	bf38      	it	cc
 80042ea:	250c      	movcc	r5, #12
 80042ec:	2d00      	cmp	r5, #0
 80042ee:	4606      	mov	r6, r0
 80042f0:	db01      	blt.n	80042f6 <_malloc_r+0x1a>
 80042f2:	42a9      	cmp	r1, r5
 80042f4:	d903      	bls.n	80042fe <_malloc_r+0x22>
 80042f6:	230c      	movs	r3, #12
 80042f8:	6033      	str	r3, [r6, #0]
 80042fa:	2000      	movs	r0, #0
 80042fc:	bd70      	pop	{r4, r5, r6, pc}
 80042fe:	f000 fd6b 	bl	8004dd8 <__malloc_lock>
 8004302:	4a21      	ldr	r2, [pc, #132]	; (8004388 <_malloc_r+0xac>)
 8004304:	6814      	ldr	r4, [r2, #0]
 8004306:	4621      	mov	r1, r4
 8004308:	b991      	cbnz	r1, 8004330 <_malloc_r+0x54>
 800430a:	4c20      	ldr	r4, [pc, #128]	; (800438c <_malloc_r+0xb0>)
 800430c:	6823      	ldr	r3, [r4, #0]
 800430e:	b91b      	cbnz	r3, 8004318 <_malloc_r+0x3c>
 8004310:	4630      	mov	r0, r6
 8004312:	f000 fb05 	bl	8004920 <_sbrk_r>
 8004316:	6020      	str	r0, [r4, #0]
 8004318:	4629      	mov	r1, r5
 800431a:	4630      	mov	r0, r6
 800431c:	f000 fb00 	bl	8004920 <_sbrk_r>
 8004320:	1c43      	adds	r3, r0, #1
 8004322:	d124      	bne.n	800436e <_malloc_r+0x92>
 8004324:	230c      	movs	r3, #12
 8004326:	6033      	str	r3, [r6, #0]
 8004328:	4630      	mov	r0, r6
 800432a:	f000 fd56 	bl	8004dda <__malloc_unlock>
 800432e:	e7e4      	b.n	80042fa <_malloc_r+0x1e>
 8004330:	680b      	ldr	r3, [r1, #0]
 8004332:	1b5b      	subs	r3, r3, r5
 8004334:	d418      	bmi.n	8004368 <_malloc_r+0x8c>
 8004336:	2b0b      	cmp	r3, #11
 8004338:	d90f      	bls.n	800435a <_malloc_r+0x7e>
 800433a:	600b      	str	r3, [r1, #0]
 800433c:	50cd      	str	r5, [r1, r3]
 800433e:	18cc      	adds	r4, r1, r3
 8004340:	4630      	mov	r0, r6
 8004342:	f000 fd4a 	bl	8004dda <__malloc_unlock>
 8004346:	f104 000b 	add.w	r0, r4, #11
 800434a:	1d23      	adds	r3, r4, #4
 800434c:	f020 0007 	bic.w	r0, r0, #7
 8004350:	1ac3      	subs	r3, r0, r3
 8004352:	d0d3      	beq.n	80042fc <_malloc_r+0x20>
 8004354:	425a      	negs	r2, r3
 8004356:	50e2      	str	r2, [r4, r3]
 8004358:	e7d0      	b.n	80042fc <_malloc_r+0x20>
 800435a:	428c      	cmp	r4, r1
 800435c:	684b      	ldr	r3, [r1, #4]
 800435e:	bf16      	itet	ne
 8004360:	6063      	strne	r3, [r4, #4]
 8004362:	6013      	streq	r3, [r2, #0]
 8004364:	460c      	movne	r4, r1
 8004366:	e7eb      	b.n	8004340 <_malloc_r+0x64>
 8004368:	460c      	mov	r4, r1
 800436a:	6849      	ldr	r1, [r1, #4]
 800436c:	e7cc      	b.n	8004308 <_malloc_r+0x2c>
 800436e:	1cc4      	adds	r4, r0, #3
 8004370:	f024 0403 	bic.w	r4, r4, #3
 8004374:	42a0      	cmp	r0, r4
 8004376:	d005      	beq.n	8004384 <_malloc_r+0xa8>
 8004378:	1a21      	subs	r1, r4, r0
 800437a:	4630      	mov	r0, r6
 800437c:	f000 fad0 	bl	8004920 <_sbrk_r>
 8004380:	3001      	adds	r0, #1
 8004382:	d0cf      	beq.n	8004324 <_malloc_r+0x48>
 8004384:	6025      	str	r5, [r4, #0]
 8004386:	e7db      	b.n	8004340 <_malloc_r+0x64>
 8004388:	20000090 	.word	0x20000090
 800438c:	20000094 	.word	0x20000094

08004390 <__sfputc_r>:
 8004390:	6893      	ldr	r3, [r2, #8]
 8004392:	3b01      	subs	r3, #1
 8004394:	2b00      	cmp	r3, #0
 8004396:	b410      	push	{r4}
 8004398:	6093      	str	r3, [r2, #8]
 800439a:	da08      	bge.n	80043ae <__sfputc_r+0x1e>
 800439c:	6994      	ldr	r4, [r2, #24]
 800439e:	42a3      	cmp	r3, r4
 80043a0:	db01      	blt.n	80043a6 <__sfputc_r+0x16>
 80043a2:	290a      	cmp	r1, #10
 80043a4:	d103      	bne.n	80043ae <__sfputc_r+0x1e>
 80043a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80043aa:	f000 bb0d 	b.w	80049c8 <__swbuf_r>
 80043ae:	6813      	ldr	r3, [r2, #0]
 80043b0:	1c58      	adds	r0, r3, #1
 80043b2:	6010      	str	r0, [r2, #0]
 80043b4:	7019      	strb	r1, [r3, #0]
 80043b6:	4608      	mov	r0, r1
 80043b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80043bc:	4770      	bx	lr

080043be <__sfputs_r>:
 80043be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043c0:	4606      	mov	r6, r0
 80043c2:	460f      	mov	r7, r1
 80043c4:	4614      	mov	r4, r2
 80043c6:	18d5      	adds	r5, r2, r3
 80043c8:	42ac      	cmp	r4, r5
 80043ca:	d101      	bne.n	80043d0 <__sfputs_r+0x12>
 80043cc:	2000      	movs	r0, #0
 80043ce:	e007      	b.n	80043e0 <__sfputs_r+0x22>
 80043d0:	463a      	mov	r2, r7
 80043d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043d6:	4630      	mov	r0, r6
 80043d8:	f7ff ffda 	bl	8004390 <__sfputc_r>
 80043dc:	1c43      	adds	r3, r0, #1
 80043de:	d1f3      	bne.n	80043c8 <__sfputs_r+0xa>
 80043e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080043e4 <_vfiprintf_r>:
 80043e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043e8:	460c      	mov	r4, r1
 80043ea:	b09d      	sub	sp, #116	; 0x74
 80043ec:	4617      	mov	r7, r2
 80043ee:	461d      	mov	r5, r3
 80043f0:	4606      	mov	r6, r0
 80043f2:	b118      	cbz	r0, 80043fc <_vfiprintf_r+0x18>
 80043f4:	6983      	ldr	r3, [r0, #24]
 80043f6:	b90b      	cbnz	r3, 80043fc <_vfiprintf_r+0x18>
 80043f8:	f7ff fee6 	bl	80041c8 <__sinit>
 80043fc:	4b7c      	ldr	r3, [pc, #496]	; (80045f0 <_vfiprintf_r+0x20c>)
 80043fe:	429c      	cmp	r4, r3
 8004400:	d158      	bne.n	80044b4 <_vfiprintf_r+0xd0>
 8004402:	6874      	ldr	r4, [r6, #4]
 8004404:	89a3      	ldrh	r3, [r4, #12]
 8004406:	0718      	lsls	r0, r3, #28
 8004408:	d55e      	bpl.n	80044c8 <_vfiprintf_r+0xe4>
 800440a:	6923      	ldr	r3, [r4, #16]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d05b      	beq.n	80044c8 <_vfiprintf_r+0xe4>
 8004410:	2300      	movs	r3, #0
 8004412:	9309      	str	r3, [sp, #36]	; 0x24
 8004414:	2320      	movs	r3, #32
 8004416:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800441a:	2330      	movs	r3, #48	; 0x30
 800441c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004420:	9503      	str	r5, [sp, #12]
 8004422:	f04f 0b01 	mov.w	fp, #1
 8004426:	46b8      	mov	r8, r7
 8004428:	4645      	mov	r5, r8
 800442a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800442e:	b10b      	cbz	r3, 8004434 <_vfiprintf_r+0x50>
 8004430:	2b25      	cmp	r3, #37	; 0x25
 8004432:	d154      	bne.n	80044de <_vfiprintf_r+0xfa>
 8004434:	ebb8 0a07 	subs.w	sl, r8, r7
 8004438:	d00b      	beq.n	8004452 <_vfiprintf_r+0x6e>
 800443a:	4653      	mov	r3, sl
 800443c:	463a      	mov	r2, r7
 800443e:	4621      	mov	r1, r4
 8004440:	4630      	mov	r0, r6
 8004442:	f7ff ffbc 	bl	80043be <__sfputs_r>
 8004446:	3001      	adds	r0, #1
 8004448:	f000 80c2 	beq.w	80045d0 <_vfiprintf_r+0x1ec>
 800444c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800444e:	4453      	add	r3, sl
 8004450:	9309      	str	r3, [sp, #36]	; 0x24
 8004452:	f898 3000 	ldrb.w	r3, [r8]
 8004456:	2b00      	cmp	r3, #0
 8004458:	f000 80ba 	beq.w	80045d0 <_vfiprintf_r+0x1ec>
 800445c:	2300      	movs	r3, #0
 800445e:	f04f 32ff 	mov.w	r2, #4294967295
 8004462:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004466:	9304      	str	r3, [sp, #16]
 8004468:	9307      	str	r3, [sp, #28]
 800446a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800446e:	931a      	str	r3, [sp, #104]	; 0x68
 8004470:	46a8      	mov	r8, r5
 8004472:	2205      	movs	r2, #5
 8004474:	f818 1b01 	ldrb.w	r1, [r8], #1
 8004478:	485e      	ldr	r0, [pc, #376]	; (80045f4 <_vfiprintf_r+0x210>)
 800447a:	f7fb fec9 	bl	8000210 <memchr>
 800447e:	9b04      	ldr	r3, [sp, #16]
 8004480:	bb78      	cbnz	r0, 80044e2 <_vfiprintf_r+0xfe>
 8004482:	06d9      	lsls	r1, r3, #27
 8004484:	bf44      	itt	mi
 8004486:	2220      	movmi	r2, #32
 8004488:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800448c:	071a      	lsls	r2, r3, #28
 800448e:	bf44      	itt	mi
 8004490:	222b      	movmi	r2, #43	; 0x2b
 8004492:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004496:	782a      	ldrb	r2, [r5, #0]
 8004498:	2a2a      	cmp	r2, #42	; 0x2a
 800449a:	d02a      	beq.n	80044f2 <_vfiprintf_r+0x10e>
 800449c:	9a07      	ldr	r2, [sp, #28]
 800449e:	46a8      	mov	r8, r5
 80044a0:	2000      	movs	r0, #0
 80044a2:	250a      	movs	r5, #10
 80044a4:	4641      	mov	r1, r8
 80044a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80044aa:	3b30      	subs	r3, #48	; 0x30
 80044ac:	2b09      	cmp	r3, #9
 80044ae:	d969      	bls.n	8004584 <_vfiprintf_r+0x1a0>
 80044b0:	b360      	cbz	r0, 800450c <_vfiprintf_r+0x128>
 80044b2:	e024      	b.n	80044fe <_vfiprintf_r+0x11a>
 80044b4:	4b50      	ldr	r3, [pc, #320]	; (80045f8 <_vfiprintf_r+0x214>)
 80044b6:	429c      	cmp	r4, r3
 80044b8:	d101      	bne.n	80044be <_vfiprintf_r+0xda>
 80044ba:	68b4      	ldr	r4, [r6, #8]
 80044bc:	e7a2      	b.n	8004404 <_vfiprintf_r+0x20>
 80044be:	4b4f      	ldr	r3, [pc, #316]	; (80045fc <_vfiprintf_r+0x218>)
 80044c0:	429c      	cmp	r4, r3
 80044c2:	bf08      	it	eq
 80044c4:	68f4      	ldreq	r4, [r6, #12]
 80044c6:	e79d      	b.n	8004404 <_vfiprintf_r+0x20>
 80044c8:	4621      	mov	r1, r4
 80044ca:	4630      	mov	r0, r6
 80044cc:	f000 fae0 	bl	8004a90 <__swsetup_r>
 80044d0:	2800      	cmp	r0, #0
 80044d2:	d09d      	beq.n	8004410 <_vfiprintf_r+0x2c>
 80044d4:	f04f 30ff 	mov.w	r0, #4294967295
 80044d8:	b01d      	add	sp, #116	; 0x74
 80044da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044de:	46a8      	mov	r8, r5
 80044e0:	e7a2      	b.n	8004428 <_vfiprintf_r+0x44>
 80044e2:	4a44      	ldr	r2, [pc, #272]	; (80045f4 <_vfiprintf_r+0x210>)
 80044e4:	1a80      	subs	r0, r0, r2
 80044e6:	fa0b f000 	lsl.w	r0, fp, r0
 80044ea:	4318      	orrs	r0, r3
 80044ec:	9004      	str	r0, [sp, #16]
 80044ee:	4645      	mov	r5, r8
 80044f0:	e7be      	b.n	8004470 <_vfiprintf_r+0x8c>
 80044f2:	9a03      	ldr	r2, [sp, #12]
 80044f4:	1d11      	adds	r1, r2, #4
 80044f6:	6812      	ldr	r2, [r2, #0]
 80044f8:	9103      	str	r1, [sp, #12]
 80044fa:	2a00      	cmp	r2, #0
 80044fc:	db01      	blt.n	8004502 <_vfiprintf_r+0x11e>
 80044fe:	9207      	str	r2, [sp, #28]
 8004500:	e004      	b.n	800450c <_vfiprintf_r+0x128>
 8004502:	4252      	negs	r2, r2
 8004504:	f043 0302 	orr.w	r3, r3, #2
 8004508:	9207      	str	r2, [sp, #28]
 800450a:	9304      	str	r3, [sp, #16]
 800450c:	f898 3000 	ldrb.w	r3, [r8]
 8004510:	2b2e      	cmp	r3, #46	; 0x2e
 8004512:	d10e      	bne.n	8004532 <_vfiprintf_r+0x14e>
 8004514:	f898 3001 	ldrb.w	r3, [r8, #1]
 8004518:	2b2a      	cmp	r3, #42	; 0x2a
 800451a:	d138      	bne.n	800458e <_vfiprintf_r+0x1aa>
 800451c:	9b03      	ldr	r3, [sp, #12]
 800451e:	1d1a      	adds	r2, r3, #4
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	9203      	str	r2, [sp, #12]
 8004524:	2b00      	cmp	r3, #0
 8004526:	bfb8      	it	lt
 8004528:	f04f 33ff 	movlt.w	r3, #4294967295
 800452c:	f108 0802 	add.w	r8, r8, #2
 8004530:	9305      	str	r3, [sp, #20]
 8004532:	4d33      	ldr	r5, [pc, #204]	; (8004600 <_vfiprintf_r+0x21c>)
 8004534:	f898 1000 	ldrb.w	r1, [r8]
 8004538:	2203      	movs	r2, #3
 800453a:	4628      	mov	r0, r5
 800453c:	f7fb fe68 	bl	8000210 <memchr>
 8004540:	b140      	cbz	r0, 8004554 <_vfiprintf_r+0x170>
 8004542:	2340      	movs	r3, #64	; 0x40
 8004544:	1b40      	subs	r0, r0, r5
 8004546:	fa03 f000 	lsl.w	r0, r3, r0
 800454a:	9b04      	ldr	r3, [sp, #16]
 800454c:	4303      	orrs	r3, r0
 800454e:	f108 0801 	add.w	r8, r8, #1
 8004552:	9304      	str	r3, [sp, #16]
 8004554:	f898 1000 	ldrb.w	r1, [r8]
 8004558:	482a      	ldr	r0, [pc, #168]	; (8004604 <_vfiprintf_r+0x220>)
 800455a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800455e:	2206      	movs	r2, #6
 8004560:	f108 0701 	add.w	r7, r8, #1
 8004564:	f7fb fe54 	bl	8000210 <memchr>
 8004568:	2800      	cmp	r0, #0
 800456a:	d037      	beq.n	80045dc <_vfiprintf_r+0x1f8>
 800456c:	4b26      	ldr	r3, [pc, #152]	; (8004608 <_vfiprintf_r+0x224>)
 800456e:	bb1b      	cbnz	r3, 80045b8 <_vfiprintf_r+0x1d4>
 8004570:	9b03      	ldr	r3, [sp, #12]
 8004572:	3307      	adds	r3, #7
 8004574:	f023 0307 	bic.w	r3, r3, #7
 8004578:	3308      	adds	r3, #8
 800457a:	9303      	str	r3, [sp, #12]
 800457c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800457e:	444b      	add	r3, r9
 8004580:	9309      	str	r3, [sp, #36]	; 0x24
 8004582:	e750      	b.n	8004426 <_vfiprintf_r+0x42>
 8004584:	fb05 3202 	mla	r2, r5, r2, r3
 8004588:	2001      	movs	r0, #1
 800458a:	4688      	mov	r8, r1
 800458c:	e78a      	b.n	80044a4 <_vfiprintf_r+0xc0>
 800458e:	2300      	movs	r3, #0
 8004590:	f108 0801 	add.w	r8, r8, #1
 8004594:	9305      	str	r3, [sp, #20]
 8004596:	4619      	mov	r1, r3
 8004598:	250a      	movs	r5, #10
 800459a:	4640      	mov	r0, r8
 800459c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80045a0:	3a30      	subs	r2, #48	; 0x30
 80045a2:	2a09      	cmp	r2, #9
 80045a4:	d903      	bls.n	80045ae <_vfiprintf_r+0x1ca>
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d0c3      	beq.n	8004532 <_vfiprintf_r+0x14e>
 80045aa:	9105      	str	r1, [sp, #20]
 80045ac:	e7c1      	b.n	8004532 <_vfiprintf_r+0x14e>
 80045ae:	fb05 2101 	mla	r1, r5, r1, r2
 80045b2:	2301      	movs	r3, #1
 80045b4:	4680      	mov	r8, r0
 80045b6:	e7f0      	b.n	800459a <_vfiprintf_r+0x1b6>
 80045b8:	ab03      	add	r3, sp, #12
 80045ba:	9300      	str	r3, [sp, #0]
 80045bc:	4622      	mov	r2, r4
 80045be:	4b13      	ldr	r3, [pc, #76]	; (800460c <_vfiprintf_r+0x228>)
 80045c0:	a904      	add	r1, sp, #16
 80045c2:	4630      	mov	r0, r6
 80045c4:	f3af 8000 	nop.w
 80045c8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80045cc:	4681      	mov	r9, r0
 80045ce:	d1d5      	bne.n	800457c <_vfiprintf_r+0x198>
 80045d0:	89a3      	ldrh	r3, [r4, #12]
 80045d2:	065b      	lsls	r3, r3, #25
 80045d4:	f53f af7e 	bmi.w	80044d4 <_vfiprintf_r+0xf0>
 80045d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80045da:	e77d      	b.n	80044d8 <_vfiprintf_r+0xf4>
 80045dc:	ab03      	add	r3, sp, #12
 80045de:	9300      	str	r3, [sp, #0]
 80045e0:	4622      	mov	r2, r4
 80045e2:	4b0a      	ldr	r3, [pc, #40]	; (800460c <_vfiprintf_r+0x228>)
 80045e4:	a904      	add	r1, sp, #16
 80045e6:	4630      	mov	r0, r6
 80045e8:	f000 f888 	bl	80046fc <_printf_i>
 80045ec:	e7ec      	b.n	80045c8 <_vfiprintf_r+0x1e4>
 80045ee:	bf00      	nop
 80045f0:	08004f40 	.word	0x08004f40
 80045f4:	08004f80 	.word	0x08004f80
 80045f8:	08004f60 	.word	0x08004f60
 80045fc:	08004f20 	.word	0x08004f20
 8004600:	08004f86 	.word	0x08004f86
 8004604:	08004f8a 	.word	0x08004f8a
 8004608:	00000000 	.word	0x00000000
 800460c:	080043bf 	.word	0x080043bf

08004610 <_printf_common>:
 8004610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004614:	4691      	mov	r9, r2
 8004616:	461f      	mov	r7, r3
 8004618:	688a      	ldr	r2, [r1, #8]
 800461a:	690b      	ldr	r3, [r1, #16]
 800461c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004620:	4293      	cmp	r3, r2
 8004622:	bfb8      	it	lt
 8004624:	4613      	movlt	r3, r2
 8004626:	f8c9 3000 	str.w	r3, [r9]
 800462a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800462e:	4606      	mov	r6, r0
 8004630:	460c      	mov	r4, r1
 8004632:	b112      	cbz	r2, 800463a <_printf_common+0x2a>
 8004634:	3301      	adds	r3, #1
 8004636:	f8c9 3000 	str.w	r3, [r9]
 800463a:	6823      	ldr	r3, [r4, #0]
 800463c:	0699      	lsls	r1, r3, #26
 800463e:	bf42      	ittt	mi
 8004640:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004644:	3302      	addmi	r3, #2
 8004646:	f8c9 3000 	strmi.w	r3, [r9]
 800464a:	6825      	ldr	r5, [r4, #0]
 800464c:	f015 0506 	ands.w	r5, r5, #6
 8004650:	d107      	bne.n	8004662 <_printf_common+0x52>
 8004652:	f104 0a19 	add.w	sl, r4, #25
 8004656:	68e3      	ldr	r3, [r4, #12]
 8004658:	f8d9 2000 	ldr.w	r2, [r9]
 800465c:	1a9b      	subs	r3, r3, r2
 800465e:	42ab      	cmp	r3, r5
 8004660:	dc28      	bgt.n	80046b4 <_printf_common+0xa4>
 8004662:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004666:	6822      	ldr	r2, [r4, #0]
 8004668:	3300      	adds	r3, #0
 800466a:	bf18      	it	ne
 800466c:	2301      	movne	r3, #1
 800466e:	0692      	lsls	r2, r2, #26
 8004670:	d42d      	bmi.n	80046ce <_printf_common+0xbe>
 8004672:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004676:	4639      	mov	r1, r7
 8004678:	4630      	mov	r0, r6
 800467a:	47c0      	blx	r8
 800467c:	3001      	adds	r0, #1
 800467e:	d020      	beq.n	80046c2 <_printf_common+0xb2>
 8004680:	6823      	ldr	r3, [r4, #0]
 8004682:	68e5      	ldr	r5, [r4, #12]
 8004684:	f8d9 2000 	ldr.w	r2, [r9]
 8004688:	f003 0306 	and.w	r3, r3, #6
 800468c:	2b04      	cmp	r3, #4
 800468e:	bf08      	it	eq
 8004690:	1aad      	subeq	r5, r5, r2
 8004692:	68a3      	ldr	r3, [r4, #8]
 8004694:	6922      	ldr	r2, [r4, #16]
 8004696:	bf0c      	ite	eq
 8004698:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800469c:	2500      	movne	r5, #0
 800469e:	4293      	cmp	r3, r2
 80046a0:	bfc4      	itt	gt
 80046a2:	1a9b      	subgt	r3, r3, r2
 80046a4:	18ed      	addgt	r5, r5, r3
 80046a6:	f04f 0900 	mov.w	r9, #0
 80046aa:	341a      	adds	r4, #26
 80046ac:	454d      	cmp	r5, r9
 80046ae:	d11a      	bne.n	80046e6 <_printf_common+0xd6>
 80046b0:	2000      	movs	r0, #0
 80046b2:	e008      	b.n	80046c6 <_printf_common+0xb6>
 80046b4:	2301      	movs	r3, #1
 80046b6:	4652      	mov	r2, sl
 80046b8:	4639      	mov	r1, r7
 80046ba:	4630      	mov	r0, r6
 80046bc:	47c0      	blx	r8
 80046be:	3001      	adds	r0, #1
 80046c0:	d103      	bne.n	80046ca <_printf_common+0xba>
 80046c2:	f04f 30ff 	mov.w	r0, #4294967295
 80046c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046ca:	3501      	adds	r5, #1
 80046cc:	e7c3      	b.n	8004656 <_printf_common+0x46>
 80046ce:	18e1      	adds	r1, r4, r3
 80046d0:	1c5a      	adds	r2, r3, #1
 80046d2:	2030      	movs	r0, #48	; 0x30
 80046d4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80046d8:	4422      	add	r2, r4
 80046da:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80046de:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80046e2:	3302      	adds	r3, #2
 80046e4:	e7c5      	b.n	8004672 <_printf_common+0x62>
 80046e6:	2301      	movs	r3, #1
 80046e8:	4622      	mov	r2, r4
 80046ea:	4639      	mov	r1, r7
 80046ec:	4630      	mov	r0, r6
 80046ee:	47c0      	blx	r8
 80046f0:	3001      	adds	r0, #1
 80046f2:	d0e6      	beq.n	80046c2 <_printf_common+0xb2>
 80046f4:	f109 0901 	add.w	r9, r9, #1
 80046f8:	e7d8      	b.n	80046ac <_printf_common+0x9c>
	...

080046fc <_printf_i>:
 80046fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004700:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004704:	460c      	mov	r4, r1
 8004706:	7e09      	ldrb	r1, [r1, #24]
 8004708:	b085      	sub	sp, #20
 800470a:	296e      	cmp	r1, #110	; 0x6e
 800470c:	4617      	mov	r7, r2
 800470e:	4606      	mov	r6, r0
 8004710:	4698      	mov	r8, r3
 8004712:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004714:	f000 80b3 	beq.w	800487e <_printf_i+0x182>
 8004718:	d822      	bhi.n	8004760 <_printf_i+0x64>
 800471a:	2963      	cmp	r1, #99	; 0x63
 800471c:	d036      	beq.n	800478c <_printf_i+0x90>
 800471e:	d80a      	bhi.n	8004736 <_printf_i+0x3a>
 8004720:	2900      	cmp	r1, #0
 8004722:	f000 80b9 	beq.w	8004898 <_printf_i+0x19c>
 8004726:	2958      	cmp	r1, #88	; 0x58
 8004728:	f000 8083 	beq.w	8004832 <_printf_i+0x136>
 800472c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004730:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004734:	e032      	b.n	800479c <_printf_i+0xa0>
 8004736:	2964      	cmp	r1, #100	; 0x64
 8004738:	d001      	beq.n	800473e <_printf_i+0x42>
 800473a:	2969      	cmp	r1, #105	; 0x69
 800473c:	d1f6      	bne.n	800472c <_printf_i+0x30>
 800473e:	6820      	ldr	r0, [r4, #0]
 8004740:	6813      	ldr	r3, [r2, #0]
 8004742:	0605      	lsls	r5, r0, #24
 8004744:	f103 0104 	add.w	r1, r3, #4
 8004748:	d52a      	bpl.n	80047a0 <_printf_i+0xa4>
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	6011      	str	r1, [r2, #0]
 800474e:	2b00      	cmp	r3, #0
 8004750:	da03      	bge.n	800475a <_printf_i+0x5e>
 8004752:	222d      	movs	r2, #45	; 0x2d
 8004754:	425b      	negs	r3, r3
 8004756:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800475a:	486f      	ldr	r0, [pc, #444]	; (8004918 <_printf_i+0x21c>)
 800475c:	220a      	movs	r2, #10
 800475e:	e039      	b.n	80047d4 <_printf_i+0xd8>
 8004760:	2973      	cmp	r1, #115	; 0x73
 8004762:	f000 809d 	beq.w	80048a0 <_printf_i+0x1a4>
 8004766:	d808      	bhi.n	800477a <_printf_i+0x7e>
 8004768:	296f      	cmp	r1, #111	; 0x6f
 800476a:	d020      	beq.n	80047ae <_printf_i+0xb2>
 800476c:	2970      	cmp	r1, #112	; 0x70
 800476e:	d1dd      	bne.n	800472c <_printf_i+0x30>
 8004770:	6823      	ldr	r3, [r4, #0]
 8004772:	f043 0320 	orr.w	r3, r3, #32
 8004776:	6023      	str	r3, [r4, #0]
 8004778:	e003      	b.n	8004782 <_printf_i+0x86>
 800477a:	2975      	cmp	r1, #117	; 0x75
 800477c:	d017      	beq.n	80047ae <_printf_i+0xb2>
 800477e:	2978      	cmp	r1, #120	; 0x78
 8004780:	d1d4      	bne.n	800472c <_printf_i+0x30>
 8004782:	2378      	movs	r3, #120	; 0x78
 8004784:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004788:	4864      	ldr	r0, [pc, #400]	; (800491c <_printf_i+0x220>)
 800478a:	e055      	b.n	8004838 <_printf_i+0x13c>
 800478c:	6813      	ldr	r3, [r2, #0]
 800478e:	1d19      	adds	r1, r3, #4
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	6011      	str	r1, [r2, #0]
 8004794:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004798:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800479c:	2301      	movs	r3, #1
 800479e:	e08c      	b.n	80048ba <_printf_i+0x1be>
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	6011      	str	r1, [r2, #0]
 80047a4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80047a8:	bf18      	it	ne
 80047aa:	b21b      	sxthne	r3, r3
 80047ac:	e7cf      	b.n	800474e <_printf_i+0x52>
 80047ae:	6813      	ldr	r3, [r2, #0]
 80047b0:	6825      	ldr	r5, [r4, #0]
 80047b2:	1d18      	adds	r0, r3, #4
 80047b4:	6010      	str	r0, [r2, #0]
 80047b6:	0628      	lsls	r0, r5, #24
 80047b8:	d501      	bpl.n	80047be <_printf_i+0xc2>
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	e002      	b.n	80047c4 <_printf_i+0xc8>
 80047be:	0668      	lsls	r0, r5, #25
 80047c0:	d5fb      	bpl.n	80047ba <_printf_i+0xbe>
 80047c2:	881b      	ldrh	r3, [r3, #0]
 80047c4:	4854      	ldr	r0, [pc, #336]	; (8004918 <_printf_i+0x21c>)
 80047c6:	296f      	cmp	r1, #111	; 0x6f
 80047c8:	bf14      	ite	ne
 80047ca:	220a      	movne	r2, #10
 80047cc:	2208      	moveq	r2, #8
 80047ce:	2100      	movs	r1, #0
 80047d0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80047d4:	6865      	ldr	r5, [r4, #4]
 80047d6:	60a5      	str	r5, [r4, #8]
 80047d8:	2d00      	cmp	r5, #0
 80047da:	f2c0 8095 	blt.w	8004908 <_printf_i+0x20c>
 80047de:	6821      	ldr	r1, [r4, #0]
 80047e0:	f021 0104 	bic.w	r1, r1, #4
 80047e4:	6021      	str	r1, [r4, #0]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d13d      	bne.n	8004866 <_printf_i+0x16a>
 80047ea:	2d00      	cmp	r5, #0
 80047ec:	f040 808e 	bne.w	800490c <_printf_i+0x210>
 80047f0:	4665      	mov	r5, ip
 80047f2:	2a08      	cmp	r2, #8
 80047f4:	d10b      	bne.n	800480e <_printf_i+0x112>
 80047f6:	6823      	ldr	r3, [r4, #0]
 80047f8:	07db      	lsls	r3, r3, #31
 80047fa:	d508      	bpl.n	800480e <_printf_i+0x112>
 80047fc:	6923      	ldr	r3, [r4, #16]
 80047fe:	6862      	ldr	r2, [r4, #4]
 8004800:	429a      	cmp	r2, r3
 8004802:	bfde      	ittt	le
 8004804:	2330      	movle	r3, #48	; 0x30
 8004806:	f805 3c01 	strble.w	r3, [r5, #-1]
 800480a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800480e:	ebac 0305 	sub.w	r3, ip, r5
 8004812:	6123      	str	r3, [r4, #16]
 8004814:	f8cd 8000 	str.w	r8, [sp]
 8004818:	463b      	mov	r3, r7
 800481a:	aa03      	add	r2, sp, #12
 800481c:	4621      	mov	r1, r4
 800481e:	4630      	mov	r0, r6
 8004820:	f7ff fef6 	bl	8004610 <_printf_common>
 8004824:	3001      	adds	r0, #1
 8004826:	d14d      	bne.n	80048c4 <_printf_i+0x1c8>
 8004828:	f04f 30ff 	mov.w	r0, #4294967295
 800482c:	b005      	add	sp, #20
 800482e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004832:	4839      	ldr	r0, [pc, #228]	; (8004918 <_printf_i+0x21c>)
 8004834:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004838:	6813      	ldr	r3, [r2, #0]
 800483a:	6821      	ldr	r1, [r4, #0]
 800483c:	1d1d      	adds	r5, r3, #4
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	6015      	str	r5, [r2, #0]
 8004842:	060a      	lsls	r2, r1, #24
 8004844:	d50b      	bpl.n	800485e <_printf_i+0x162>
 8004846:	07ca      	lsls	r2, r1, #31
 8004848:	bf44      	itt	mi
 800484a:	f041 0120 	orrmi.w	r1, r1, #32
 800484e:	6021      	strmi	r1, [r4, #0]
 8004850:	b91b      	cbnz	r3, 800485a <_printf_i+0x15e>
 8004852:	6822      	ldr	r2, [r4, #0]
 8004854:	f022 0220 	bic.w	r2, r2, #32
 8004858:	6022      	str	r2, [r4, #0]
 800485a:	2210      	movs	r2, #16
 800485c:	e7b7      	b.n	80047ce <_printf_i+0xd2>
 800485e:	064d      	lsls	r5, r1, #25
 8004860:	bf48      	it	mi
 8004862:	b29b      	uxthmi	r3, r3
 8004864:	e7ef      	b.n	8004846 <_printf_i+0x14a>
 8004866:	4665      	mov	r5, ip
 8004868:	fbb3 f1f2 	udiv	r1, r3, r2
 800486c:	fb02 3311 	mls	r3, r2, r1, r3
 8004870:	5cc3      	ldrb	r3, [r0, r3]
 8004872:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004876:	460b      	mov	r3, r1
 8004878:	2900      	cmp	r1, #0
 800487a:	d1f5      	bne.n	8004868 <_printf_i+0x16c>
 800487c:	e7b9      	b.n	80047f2 <_printf_i+0xf6>
 800487e:	6813      	ldr	r3, [r2, #0]
 8004880:	6825      	ldr	r5, [r4, #0]
 8004882:	6961      	ldr	r1, [r4, #20]
 8004884:	1d18      	adds	r0, r3, #4
 8004886:	6010      	str	r0, [r2, #0]
 8004888:	0628      	lsls	r0, r5, #24
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	d501      	bpl.n	8004892 <_printf_i+0x196>
 800488e:	6019      	str	r1, [r3, #0]
 8004890:	e002      	b.n	8004898 <_printf_i+0x19c>
 8004892:	066a      	lsls	r2, r5, #25
 8004894:	d5fb      	bpl.n	800488e <_printf_i+0x192>
 8004896:	8019      	strh	r1, [r3, #0]
 8004898:	2300      	movs	r3, #0
 800489a:	6123      	str	r3, [r4, #16]
 800489c:	4665      	mov	r5, ip
 800489e:	e7b9      	b.n	8004814 <_printf_i+0x118>
 80048a0:	6813      	ldr	r3, [r2, #0]
 80048a2:	1d19      	adds	r1, r3, #4
 80048a4:	6011      	str	r1, [r2, #0]
 80048a6:	681d      	ldr	r5, [r3, #0]
 80048a8:	6862      	ldr	r2, [r4, #4]
 80048aa:	2100      	movs	r1, #0
 80048ac:	4628      	mov	r0, r5
 80048ae:	f7fb fcaf 	bl	8000210 <memchr>
 80048b2:	b108      	cbz	r0, 80048b8 <_printf_i+0x1bc>
 80048b4:	1b40      	subs	r0, r0, r5
 80048b6:	6060      	str	r0, [r4, #4]
 80048b8:	6863      	ldr	r3, [r4, #4]
 80048ba:	6123      	str	r3, [r4, #16]
 80048bc:	2300      	movs	r3, #0
 80048be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80048c2:	e7a7      	b.n	8004814 <_printf_i+0x118>
 80048c4:	6923      	ldr	r3, [r4, #16]
 80048c6:	462a      	mov	r2, r5
 80048c8:	4639      	mov	r1, r7
 80048ca:	4630      	mov	r0, r6
 80048cc:	47c0      	blx	r8
 80048ce:	3001      	adds	r0, #1
 80048d0:	d0aa      	beq.n	8004828 <_printf_i+0x12c>
 80048d2:	6823      	ldr	r3, [r4, #0]
 80048d4:	079b      	lsls	r3, r3, #30
 80048d6:	d413      	bmi.n	8004900 <_printf_i+0x204>
 80048d8:	68e0      	ldr	r0, [r4, #12]
 80048da:	9b03      	ldr	r3, [sp, #12]
 80048dc:	4298      	cmp	r0, r3
 80048de:	bfb8      	it	lt
 80048e0:	4618      	movlt	r0, r3
 80048e2:	e7a3      	b.n	800482c <_printf_i+0x130>
 80048e4:	2301      	movs	r3, #1
 80048e6:	464a      	mov	r2, r9
 80048e8:	4639      	mov	r1, r7
 80048ea:	4630      	mov	r0, r6
 80048ec:	47c0      	blx	r8
 80048ee:	3001      	adds	r0, #1
 80048f0:	d09a      	beq.n	8004828 <_printf_i+0x12c>
 80048f2:	3501      	adds	r5, #1
 80048f4:	68e3      	ldr	r3, [r4, #12]
 80048f6:	9a03      	ldr	r2, [sp, #12]
 80048f8:	1a9b      	subs	r3, r3, r2
 80048fa:	42ab      	cmp	r3, r5
 80048fc:	dcf2      	bgt.n	80048e4 <_printf_i+0x1e8>
 80048fe:	e7eb      	b.n	80048d8 <_printf_i+0x1dc>
 8004900:	2500      	movs	r5, #0
 8004902:	f104 0919 	add.w	r9, r4, #25
 8004906:	e7f5      	b.n	80048f4 <_printf_i+0x1f8>
 8004908:	2b00      	cmp	r3, #0
 800490a:	d1ac      	bne.n	8004866 <_printf_i+0x16a>
 800490c:	7803      	ldrb	r3, [r0, #0]
 800490e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004912:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004916:	e76c      	b.n	80047f2 <_printf_i+0xf6>
 8004918:	08004f91 	.word	0x08004f91
 800491c:	08004fa2 	.word	0x08004fa2

08004920 <_sbrk_r>:
 8004920:	b538      	push	{r3, r4, r5, lr}
 8004922:	4c06      	ldr	r4, [pc, #24]	; (800493c <_sbrk_r+0x1c>)
 8004924:	2300      	movs	r3, #0
 8004926:	4605      	mov	r5, r0
 8004928:	4608      	mov	r0, r1
 800492a:	6023      	str	r3, [r4, #0]
 800492c:	f7ff fb36 	bl	8003f9c <_sbrk>
 8004930:	1c43      	adds	r3, r0, #1
 8004932:	d102      	bne.n	800493a <_sbrk_r+0x1a>
 8004934:	6823      	ldr	r3, [r4, #0]
 8004936:	b103      	cbz	r3, 800493a <_sbrk_r+0x1a>
 8004938:	602b      	str	r3, [r5, #0]
 800493a:	bd38      	pop	{r3, r4, r5, pc}
 800493c:	20000568 	.word	0x20000568

08004940 <__sread>:
 8004940:	b510      	push	{r4, lr}
 8004942:	460c      	mov	r4, r1
 8004944:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004948:	f000 fa96 	bl	8004e78 <_read_r>
 800494c:	2800      	cmp	r0, #0
 800494e:	bfab      	itete	ge
 8004950:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004952:	89a3      	ldrhlt	r3, [r4, #12]
 8004954:	181b      	addge	r3, r3, r0
 8004956:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800495a:	bfac      	ite	ge
 800495c:	6563      	strge	r3, [r4, #84]	; 0x54
 800495e:	81a3      	strhlt	r3, [r4, #12]
 8004960:	bd10      	pop	{r4, pc}

08004962 <__swrite>:
 8004962:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004966:	461f      	mov	r7, r3
 8004968:	898b      	ldrh	r3, [r1, #12]
 800496a:	05db      	lsls	r3, r3, #23
 800496c:	4605      	mov	r5, r0
 800496e:	460c      	mov	r4, r1
 8004970:	4616      	mov	r6, r2
 8004972:	d505      	bpl.n	8004980 <__swrite+0x1e>
 8004974:	2302      	movs	r3, #2
 8004976:	2200      	movs	r2, #0
 8004978:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800497c:	f000 f9b6 	bl	8004cec <_lseek_r>
 8004980:	89a3      	ldrh	r3, [r4, #12]
 8004982:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004986:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800498a:	81a3      	strh	r3, [r4, #12]
 800498c:	4632      	mov	r2, r6
 800498e:	463b      	mov	r3, r7
 8004990:	4628      	mov	r0, r5
 8004992:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004996:	f000 b869 	b.w	8004a6c <_write_r>

0800499a <__sseek>:
 800499a:	b510      	push	{r4, lr}
 800499c:	460c      	mov	r4, r1
 800499e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049a2:	f000 f9a3 	bl	8004cec <_lseek_r>
 80049a6:	1c43      	adds	r3, r0, #1
 80049a8:	89a3      	ldrh	r3, [r4, #12]
 80049aa:	bf15      	itete	ne
 80049ac:	6560      	strne	r0, [r4, #84]	; 0x54
 80049ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80049b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80049b6:	81a3      	strheq	r3, [r4, #12]
 80049b8:	bf18      	it	ne
 80049ba:	81a3      	strhne	r3, [r4, #12]
 80049bc:	bd10      	pop	{r4, pc}

080049be <__sclose>:
 80049be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049c2:	f000 b8d3 	b.w	8004b6c <_close_r>
	...

080049c8 <__swbuf_r>:
 80049c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049ca:	460e      	mov	r6, r1
 80049cc:	4614      	mov	r4, r2
 80049ce:	4605      	mov	r5, r0
 80049d0:	b118      	cbz	r0, 80049da <__swbuf_r+0x12>
 80049d2:	6983      	ldr	r3, [r0, #24]
 80049d4:	b90b      	cbnz	r3, 80049da <__swbuf_r+0x12>
 80049d6:	f7ff fbf7 	bl	80041c8 <__sinit>
 80049da:	4b21      	ldr	r3, [pc, #132]	; (8004a60 <__swbuf_r+0x98>)
 80049dc:	429c      	cmp	r4, r3
 80049de:	d12a      	bne.n	8004a36 <__swbuf_r+0x6e>
 80049e0:	686c      	ldr	r4, [r5, #4]
 80049e2:	69a3      	ldr	r3, [r4, #24]
 80049e4:	60a3      	str	r3, [r4, #8]
 80049e6:	89a3      	ldrh	r3, [r4, #12]
 80049e8:	071a      	lsls	r2, r3, #28
 80049ea:	d52e      	bpl.n	8004a4a <__swbuf_r+0x82>
 80049ec:	6923      	ldr	r3, [r4, #16]
 80049ee:	b363      	cbz	r3, 8004a4a <__swbuf_r+0x82>
 80049f0:	6923      	ldr	r3, [r4, #16]
 80049f2:	6820      	ldr	r0, [r4, #0]
 80049f4:	1ac0      	subs	r0, r0, r3
 80049f6:	6963      	ldr	r3, [r4, #20]
 80049f8:	b2f6      	uxtb	r6, r6
 80049fa:	4283      	cmp	r3, r0
 80049fc:	4637      	mov	r7, r6
 80049fe:	dc04      	bgt.n	8004a0a <__swbuf_r+0x42>
 8004a00:	4621      	mov	r1, r4
 8004a02:	4628      	mov	r0, r5
 8004a04:	f000 f948 	bl	8004c98 <_fflush_r>
 8004a08:	bb28      	cbnz	r0, 8004a56 <__swbuf_r+0x8e>
 8004a0a:	68a3      	ldr	r3, [r4, #8]
 8004a0c:	3b01      	subs	r3, #1
 8004a0e:	60a3      	str	r3, [r4, #8]
 8004a10:	6823      	ldr	r3, [r4, #0]
 8004a12:	1c5a      	adds	r2, r3, #1
 8004a14:	6022      	str	r2, [r4, #0]
 8004a16:	701e      	strb	r6, [r3, #0]
 8004a18:	6963      	ldr	r3, [r4, #20]
 8004a1a:	3001      	adds	r0, #1
 8004a1c:	4283      	cmp	r3, r0
 8004a1e:	d004      	beq.n	8004a2a <__swbuf_r+0x62>
 8004a20:	89a3      	ldrh	r3, [r4, #12]
 8004a22:	07db      	lsls	r3, r3, #31
 8004a24:	d519      	bpl.n	8004a5a <__swbuf_r+0x92>
 8004a26:	2e0a      	cmp	r6, #10
 8004a28:	d117      	bne.n	8004a5a <__swbuf_r+0x92>
 8004a2a:	4621      	mov	r1, r4
 8004a2c:	4628      	mov	r0, r5
 8004a2e:	f000 f933 	bl	8004c98 <_fflush_r>
 8004a32:	b190      	cbz	r0, 8004a5a <__swbuf_r+0x92>
 8004a34:	e00f      	b.n	8004a56 <__swbuf_r+0x8e>
 8004a36:	4b0b      	ldr	r3, [pc, #44]	; (8004a64 <__swbuf_r+0x9c>)
 8004a38:	429c      	cmp	r4, r3
 8004a3a:	d101      	bne.n	8004a40 <__swbuf_r+0x78>
 8004a3c:	68ac      	ldr	r4, [r5, #8]
 8004a3e:	e7d0      	b.n	80049e2 <__swbuf_r+0x1a>
 8004a40:	4b09      	ldr	r3, [pc, #36]	; (8004a68 <__swbuf_r+0xa0>)
 8004a42:	429c      	cmp	r4, r3
 8004a44:	bf08      	it	eq
 8004a46:	68ec      	ldreq	r4, [r5, #12]
 8004a48:	e7cb      	b.n	80049e2 <__swbuf_r+0x1a>
 8004a4a:	4621      	mov	r1, r4
 8004a4c:	4628      	mov	r0, r5
 8004a4e:	f000 f81f 	bl	8004a90 <__swsetup_r>
 8004a52:	2800      	cmp	r0, #0
 8004a54:	d0cc      	beq.n	80049f0 <__swbuf_r+0x28>
 8004a56:	f04f 37ff 	mov.w	r7, #4294967295
 8004a5a:	4638      	mov	r0, r7
 8004a5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a5e:	bf00      	nop
 8004a60:	08004f40 	.word	0x08004f40
 8004a64:	08004f60 	.word	0x08004f60
 8004a68:	08004f20 	.word	0x08004f20

08004a6c <_write_r>:
 8004a6c:	b538      	push	{r3, r4, r5, lr}
 8004a6e:	4c07      	ldr	r4, [pc, #28]	; (8004a8c <_write_r+0x20>)
 8004a70:	4605      	mov	r5, r0
 8004a72:	4608      	mov	r0, r1
 8004a74:	4611      	mov	r1, r2
 8004a76:	2200      	movs	r2, #0
 8004a78:	6022      	str	r2, [r4, #0]
 8004a7a:	461a      	mov	r2, r3
 8004a7c:	f7ff fa3d 	bl	8003efa <_write>
 8004a80:	1c43      	adds	r3, r0, #1
 8004a82:	d102      	bne.n	8004a8a <_write_r+0x1e>
 8004a84:	6823      	ldr	r3, [r4, #0]
 8004a86:	b103      	cbz	r3, 8004a8a <_write_r+0x1e>
 8004a88:	602b      	str	r3, [r5, #0]
 8004a8a:	bd38      	pop	{r3, r4, r5, pc}
 8004a8c:	20000568 	.word	0x20000568

08004a90 <__swsetup_r>:
 8004a90:	4b32      	ldr	r3, [pc, #200]	; (8004b5c <__swsetup_r+0xcc>)
 8004a92:	b570      	push	{r4, r5, r6, lr}
 8004a94:	681d      	ldr	r5, [r3, #0]
 8004a96:	4606      	mov	r6, r0
 8004a98:	460c      	mov	r4, r1
 8004a9a:	b125      	cbz	r5, 8004aa6 <__swsetup_r+0x16>
 8004a9c:	69ab      	ldr	r3, [r5, #24]
 8004a9e:	b913      	cbnz	r3, 8004aa6 <__swsetup_r+0x16>
 8004aa0:	4628      	mov	r0, r5
 8004aa2:	f7ff fb91 	bl	80041c8 <__sinit>
 8004aa6:	4b2e      	ldr	r3, [pc, #184]	; (8004b60 <__swsetup_r+0xd0>)
 8004aa8:	429c      	cmp	r4, r3
 8004aaa:	d10f      	bne.n	8004acc <__swsetup_r+0x3c>
 8004aac:	686c      	ldr	r4, [r5, #4]
 8004aae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ab2:	b29a      	uxth	r2, r3
 8004ab4:	0715      	lsls	r5, r2, #28
 8004ab6:	d42c      	bmi.n	8004b12 <__swsetup_r+0x82>
 8004ab8:	06d0      	lsls	r0, r2, #27
 8004aba:	d411      	bmi.n	8004ae0 <__swsetup_r+0x50>
 8004abc:	2209      	movs	r2, #9
 8004abe:	6032      	str	r2, [r6, #0]
 8004ac0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ac4:	81a3      	strh	r3, [r4, #12]
 8004ac6:	f04f 30ff 	mov.w	r0, #4294967295
 8004aca:	e03e      	b.n	8004b4a <__swsetup_r+0xba>
 8004acc:	4b25      	ldr	r3, [pc, #148]	; (8004b64 <__swsetup_r+0xd4>)
 8004ace:	429c      	cmp	r4, r3
 8004ad0:	d101      	bne.n	8004ad6 <__swsetup_r+0x46>
 8004ad2:	68ac      	ldr	r4, [r5, #8]
 8004ad4:	e7eb      	b.n	8004aae <__swsetup_r+0x1e>
 8004ad6:	4b24      	ldr	r3, [pc, #144]	; (8004b68 <__swsetup_r+0xd8>)
 8004ad8:	429c      	cmp	r4, r3
 8004ada:	bf08      	it	eq
 8004adc:	68ec      	ldreq	r4, [r5, #12]
 8004ade:	e7e6      	b.n	8004aae <__swsetup_r+0x1e>
 8004ae0:	0751      	lsls	r1, r2, #29
 8004ae2:	d512      	bpl.n	8004b0a <__swsetup_r+0x7a>
 8004ae4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004ae6:	b141      	cbz	r1, 8004afa <__swsetup_r+0x6a>
 8004ae8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004aec:	4299      	cmp	r1, r3
 8004aee:	d002      	beq.n	8004af6 <__swsetup_r+0x66>
 8004af0:	4630      	mov	r0, r6
 8004af2:	f000 f973 	bl	8004ddc <_free_r>
 8004af6:	2300      	movs	r3, #0
 8004af8:	6363      	str	r3, [r4, #52]	; 0x34
 8004afa:	89a3      	ldrh	r3, [r4, #12]
 8004afc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004b00:	81a3      	strh	r3, [r4, #12]
 8004b02:	2300      	movs	r3, #0
 8004b04:	6063      	str	r3, [r4, #4]
 8004b06:	6923      	ldr	r3, [r4, #16]
 8004b08:	6023      	str	r3, [r4, #0]
 8004b0a:	89a3      	ldrh	r3, [r4, #12]
 8004b0c:	f043 0308 	orr.w	r3, r3, #8
 8004b10:	81a3      	strh	r3, [r4, #12]
 8004b12:	6923      	ldr	r3, [r4, #16]
 8004b14:	b94b      	cbnz	r3, 8004b2a <__swsetup_r+0x9a>
 8004b16:	89a3      	ldrh	r3, [r4, #12]
 8004b18:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004b1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b20:	d003      	beq.n	8004b2a <__swsetup_r+0x9a>
 8004b22:	4621      	mov	r1, r4
 8004b24:	4630      	mov	r0, r6
 8004b26:	f000 f917 	bl	8004d58 <__smakebuf_r>
 8004b2a:	89a2      	ldrh	r2, [r4, #12]
 8004b2c:	f012 0301 	ands.w	r3, r2, #1
 8004b30:	d00c      	beq.n	8004b4c <__swsetup_r+0xbc>
 8004b32:	2300      	movs	r3, #0
 8004b34:	60a3      	str	r3, [r4, #8]
 8004b36:	6963      	ldr	r3, [r4, #20]
 8004b38:	425b      	negs	r3, r3
 8004b3a:	61a3      	str	r3, [r4, #24]
 8004b3c:	6923      	ldr	r3, [r4, #16]
 8004b3e:	b953      	cbnz	r3, 8004b56 <__swsetup_r+0xc6>
 8004b40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b44:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004b48:	d1ba      	bne.n	8004ac0 <__swsetup_r+0x30>
 8004b4a:	bd70      	pop	{r4, r5, r6, pc}
 8004b4c:	0792      	lsls	r2, r2, #30
 8004b4e:	bf58      	it	pl
 8004b50:	6963      	ldrpl	r3, [r4, #20]
 8004b52:	60a3      	str	r3, [r4, #8]
 8004b54:	e7f2      	b.n	8004b3c <__swsetup_r+0xac>
 8004b56:	2000      	movs	r0, #0
 8004b58:	e7f7      	b.n	8004b4a <__swsetup_r+0xba>
 8004b5a:	bf00      	nop
 8004b5c:	2000000c 	.word	0x2000000c
 8004b60:	08004f40 	.word	0x08004f40
 8004b64:	08004f60 	.word	0x08004f60
 8004b68:	08004f20 	.word	0x08004f20

08004b6c <_close_r>:
 8004b6c:	b538      	push	{r3, r4, r5, lr}
 8004b6e:	4c06      	ldr	r4, [pc, #24]	; (8004b88 <_close_r+0x1c>)
 8004b70:	2300      	movs	r3, #0
 8004b72:	4605      	mov	r5, r0
 8004b74:	4608      	mov	r0, r1
 8004b76:	6023      	str	r3, [r4, #0]
 8004b78:	f7ff f9db 	bl	8003f32 <_close>
 8004b7c:	1c43      	adds	r3, r0, #1
 8004b7e:	d102      	bne.n	8004b86 <_close_r+0x1a>
 8004b80:	6823      	ldr	r3, [r4, #0]
 8004b82:	b103      	cbz	r3, 8004b86 <_close_r+0x1a>
 8004b84:	602b      	str	r3, [r5, #0]
 8004b86:	bd38      	pop	{r3, r4, r5, pc}
 8004b88:	20000568 	.word	0x20000568

08004b8c <__sflush_r>:
 8004b8c:	898a      	ldrh	r2, [r1, #12]
 8004b8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b92:	4605      	mov	r5, r0
 8004b94:	0710      	lsls	r0, r2, #28
 8004b96:	460c      	mov	r4, r1
 8004b98:	d458      	bmi.n	8004c4c <__sflush_r+0xc0>
 8004b9a:	684b      	ldr	r3, [r1, #4]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	dc05      	bgt.n	8004bac <__sflush_r+0x20>
 8004ba0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	dc02      	bgt.n	8004bac <__sflush_r+0x20>
 8004ba6:	2000      	movs	r0, #0
 8004ba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004bac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004bae:	2e00      	cmp	r6, #0
 8004bb0:	d0f9      	beq.n	8004ba6 <__sflush_r+0x1a>
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004bb8:	682f      	ldr	r7, [r5, #0]
 8004bba:	6a21      	ldr	r1, [r4, #32]
 8004bbc:	602b      	str	r3, [r5, #0]
 8004bbe:	d032      	beq.n	8004c26 <__sflush_r+0x9a>
 8004bc0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004bc2:	89a3      	ldrh	r3, [r4, #12]
 8004bc4:	075a      	lsls	r2, r3, #29
 8004bc6:	d505      	bpl.n	8004bd4 <__sflush_r+0x48>
 8004bc8:	6863      	ldr	r3, [r4, #4]
 8004bca:	1ac0      	subs	r0, r0, r3
 8004bcc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004bce:	b10b      	cbz	r3, 8004bd4 <__sflush_r+0x48>
 8004bd0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004bd2:	1ac0      	subs	r0, r0, r3
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	4602      	mov	r2, r0
 8004bd8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004bda:	6a21      	ldr	r1, [r4, #32]
 8004bdc:	4628      	mov	r0, r5
 8004bde:	47b0      	blx	r6
 8004be0:	1c43      	adds	r3, r0, #1
 8004be2:	89a3      	ldrh	r3, [r4, #12]
 8004be4:	d106      	bne.n	8004bf4 <__sflush_r+0x68>
 8004be6:	6829      	ldr	r1, [r5, #0]
 8004be8:	291d      	cmp	r1, #29
 8004bea:	d848      	bhi.n	8004c7e <__sflush_r+0xf2>
 8004bec:	4a29      	ldr	r2, [pc, #164]	; (8004c94 <__sflush_r+0x108>)
 8004bee:	40ca      	lsrs	r2, r1
 8004bf0:	07d6      	lsls	r6, r2, #31
 8004bf2:	d544      	bpl.n	8004c7e <__sflush_r+0xf2>
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	6062      	str	r2, [r4, #4]
 8004bf8:	04d9      	lsls	r1, r3, #19
 8004bfa:	6922      	ldr	r2, [r4, #16]
 8004bfc:	6022      	str	r2, [r4, #0]
 8004bfe:	d504      	bpl.n	8004c0a <__sflush_r+0x7e>
 8004c00:	1c42      	adds	r2, r0, #1
 8004c02:	d101      	bne.n	8004c08 <__sflush_r+0x7c>
 8004c04:	682b      	ldr	r3, [r5, #0]
 8004c06:	b903      	cbnz	r3, 8004c0a <__sflush_r+0x7e>
 8004c08:	6560      	str	r0, [r4, #84]	; 0x54
 8004c0a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004c0c:	602f      	str	r7, [r5, #0]
 8004c0e:	2900      	cmp	r1, #0
 8004c10:	d0c9      	beq.n	8004ba6 <__sflush_r+0x1a>
 8004c12:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004c16:	4299      	cmp	r1, r3
 8004c18:	d002      	beq.n	8004c20 <__sflush_r+0x94>
 8004c1a:	4628      	mov	r0, r5
 8004c1c:	f000 f8de 	bl	8004ddc <_free_r>
 8004c20:	2000      	movs	r0, #0
 8004c22:	6360      	str	r0, [r4, #52]	; 0x34
 8004c24:	e7c0      	b.n	8004ba8 <__sflush_r+0x1c>
 8004c26:	2301      	movs	r3, #1
 8004c28:	4628      	mov	r0, r5
 8004c2a:	47b0      	blx	r6
 8004c2c:	1c41      	adds	r1, r0, #1
 8004c2e:	d1c8      	bne.n	8004bc2 <__sflush_r+0x36>
 8004c30:	682b      	ldr	r3, [r5, #0]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d0c5      	beq.n	8004bc2 <__sflush_r+0x36>
 8004c36:	2b1d      	cmp	r3, #29
 8004c38:	d001      	beq.n	8004c3e <__sflush_r+0xb2>
 8004c3a:	2b16      	cmp	r3, #22
 8004c3c:	d101      	bne.n	8004c42 <__sflush_r+0xb6>
 8004c3e:	602f      	str	r7, [r5, #0]
 8004c40:	e7b1      	b.n	8004ba6 <__sflush_r+0x1a>
 8004c42:	89a3      	ldrh	r3, [r4, #12]
 8004c44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c48:	81a3      	strh	r3, [r4, #12]
 8004c4a:	e7ad      	b.n	8004ba8 <__sflush_r+0x1c>
 8004c4c:	690f      	ldr	r7, [r1, #16]
 8004c4e:	2f00      	cmp	r7, #0
 8004c50:	d0a9      	beq.n	8004ba6 <__sflush_r+0x1a>
 8004c52:	0793      	lsls	r3, r2, #30
 8004c54:	680e      	ldr	r6, [r1, #0]
 8004c56:	bf08      	it	eq
 8004c58:	694b      	ldreq	r3, [r1, #20]
 8004c5a:	600f      	str	r7, [r1, #0]
 8004c5c:	bf18      	it	ne
 8004c5e:	2300      	movne	r3, #0
 8004c60:	eba6 0807 	sub.w	r8, r6, r7
 8004c64:	608b      	str	r3, [r1, #8]
 8004c66:	f1b8 0f00 	cmp.w	r8, #0
 8004c6a:	dd9c      	ble.n	8004ba6 <__sflush_r+0x1a>
 8004c6c:	4643      	mov	r3, r8
 8004c6e:	463a      	mov	r2, r7
 8004c70:	6a21      	ldr	r1, [r4, #32]
 8004c72:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004c74:	4628      	mov	r0, r5
 8004c76:	47b0      	blx	r6
 8004c78:	2800      	cmp	r0, #0
 8004c7a:	dc06      	bgt.n	8004c8a <__sflush_r+0xfe>
 8004c7c:	89a3      	ldrh	r3, [r4, #12]
 8004c7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c82:	81a3      	strh	r3, [r4, #12]
 8004c84:	f04f 30ff 	mov.w	r0, #4294967295
 8004c88:	e78e      	b.n	8004ba8 <__sflush_r+0x1c>
 8004c8a:	4407      	add	r7, r0
 8004c8c:	eba8 0800 	sub.w	r8, r8, r0
 8004c90:	e7e9      	b.n	8004c66 <__sflush_r+0xda>
 8004c92:	bf00      	nop
 8004c94:	20400001 	.word	0x20400001

08004c98 <_fflush_r>:
 8004c98:	b538      	push	{r3, r4, r5, lr}
 8004c9a:	690b      	ldr	r3, [r1, #16]
 8004c9c:	4605      	mov	r5, r0
 8004c9e:	460c      	mov	r4, r1
 8004ca0:	b1db      	cbz	r3, 8004cda <_fflush_r+0x42>
 8004ca2:	b118      	cbz	r0, 8004cac <_fflush_r+0x14>
 8004ca4:	6983      	ldr	r3, [r0, #24]
 8004ca6:	b90b      	cbnz	r3, 8004cac <_fflush_r+0x14>
 8004ca8:	f7ff fa8e 	bl	80041c8 <__sinit>
 8004cac:	4b0c      	ldr	r3, [pc, #48]	; (8004ce0 <_fflush_r+0x48>)
 8004cae:	429c      	cmp	r4, r3
 8004cb0:	d109      	bne.n	8004cc6 <_fflush_r+0x2e>
 8004cb2:	686c      	ldr	r4, [r5, #4]
 8004cb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004cb8:	b17b      	cbz	r3, 8004cda <_fflush_r+0x42>
 8004cba:	4621      	mov	r1, r4
 8004cbc:	4628      	mov	r0, r5
 8004cbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004cc2:	f7ff bf63 	b.w	8004b8c <__sflush_r>
 8004cc6:	4b07      	ldr	r3, [pc, #28]	; (8004ce4 <_fflush_r+0x4c>)
 8004cc8:	429c      	cmp	r4, r3
 8004cca:	d101      	bne.n	8004cd0 <_fflush_r+0x38>
 8004ccc:	68ac      	ldr	r4, [r5, #8]
 8004cce:	e7f1      	b.n	8004cb4 <_fflush_r+0x1c>
 8004cd0:	4b05      	ldr	r3, [pc, #20]	; (8004ce8 <_fflush_r+0x50>)
 8004cd2:	429c      	cmp	r4, r3
 8004cd4:	bf08      	it	eq
 8004cd6:	68ec      	ldreq	r4, [r5, #12]
 8004cd8:	e7ec      	b.n	8004cb4 <_fflush_r+0x1c>
 8004cda:	2000      	movs	r0, #0
 8004cdc:	bd38      	pop	{r3, r4, r5, pc}
 8004cde:	bf00      	nop
 8004ce0:	08004f40 	.word	0x08004f40
 8004ce4:	08004f60 	.word	0x08004f60
 8004ce8:	08004f20 	.word	0x08004f20

08004cec <_lseek_r>:
 8004cec:	b538      	push	{r3, r4, r5, lr}
 8004cee:	4c07      	ldr	r4, [pc, #28]	; (8004d0c <_lseek_r+0x20>)
 8004cf0:	4605      	mov	r5, r0
 8004cf2:	4608      	mov	r0, r1
 8004cf4:	4611      	mov	r1, r2
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	6022      	str	r2, [r4, #0]
 8004cfa:	461a      	mov	r2, r3
 8004cfc:	f7ff f940 	bl	8003f80 <_lseek>
 8004d00:	1c43      	adds	r3, r0, #1
 8004d02:	d102      	bne.n	8004d0a <_lseek_r+0x1e>
 8004d04:	6823      	ldr	r3, [r4, #0]
 8004d06:	b103      	cbz	r3, 8004d0a <_lseek_r+0x1e>
 8004d08:	602b      	str	r3, [r5, #0]
 8004d0a:	bd38      	pop	{r3, r4, r5, pc}
 8004d0c:	20000568 	.word	0x20000568

08004d10 <__swhatbuf_r>:
 8004d10:	b570      	push	{r4, r5, r6, lr}
 8004d12:	460e      	mov	r6, r1
 8004d14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d18:	2900      	cmp	r1, #0
 8004d1a:	b096      	sub	sp, #88	; 0x58
 8004d1c:	4614      	mov	r4, r2
 8004d1e:	461d      	mov	r5, r3
 8004d20:	da07      	bge.n	8004d32 <__swhatbuf_r+0x22>
 8004d22:	2300      	movs	r3, #0
 8004d24:	602b      	str	r3, [r5, #0]
 8004d26:	89b3      	ldrh	r3, [r6, #12]
 8004d28:	061a      	lsls	r2, r3, #24
 8004d2a:	d410      	bmi.n	8004d4e <__swhatbuf_r+0x3e>
 8004d2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d30:	e00e      	b.n	8004d50 <__swhatbuf_r+0x40>
 8004d32:	466a      	mov	r2, sp
 8004d34:	f000 f8b2 	bl	8004e9c <_fstat_r>
 8004d38:	2800      	cmp	r0, #0
 8004d3a:	dbf2      	blt.n	8004d22 <__swhatbuf_r+0x12>
 8004d3c:	9a01      	ldr	r2, [sp, #4]
 8004d3e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004d42:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004d46:	425a      	negs	r2, r3
 8004d48:	415a      	adcs	r2, r3
 8004d4a:	602a      	str	r2, [r5, #0]
 8004d4c:	e7ee      	b.n	8004d2c <__swhatbuf_r+0x1c>
 8004d4e:	2340      	movs	r3, #64	; 0x40
 8004d50:	2000      	movs	r0, #0
 8004d52:	6023      	str	r3, [r4, #0]
 8004d54:	b016      	add	sp, #88	; 0x58
 8004d56:	bd70      	pop	{r4, r5, r6, pc}

08004d58 <__smakebuf_r>:
 8004d58:	898b      	ldrh	r3, [r1, #12]
 8004d5a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004d5c:	079d      	lsls	r5, r3, #30
 8004d5e:	4606      	mov	r6, r0
 8004d60:	460c      	mov	r4, r1
 8004d62:	d507      	bpl.n	8004d74 <__smakebuf_r+0x1c>
 8004d64:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004d68:	6023      	str	r3, [r4, #0]
 8004d6a:	6123      	str	r3, [r4, #16]
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	6163      	str	r3, [r4, #20]
 8004d70:	b002      	add	sp, #8
 8004d72:	bd70      	pop	{r4, r5, r6, pc}
 8004d74:	ab01      	add	r3, sp, #4
 8004d76:	466a      	mov	r2, sp
 8004d78:	f7ff ffca 	bl	8004d10 <__swhatbuf_r>
 8004d7c:	9900      	ldr	r1, [sp, #0]
 8004d7e:	4605      	mov	r5, r0
 8004d80:	4630      	mov	r0, r6
 8004d82:	f7ff faab 	bl	80042dc <_malloc_r>
 8004d86:	b948      	cbnz	r0, 8004d9c <__smakebuf_r+0x44>
 8004d88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d8c:	059a      	lsls	r2, r3, #22
 8004d8e:	d4ef      	bmi.n	8004d70 <__smakebuf_r+0x18>
 8004d90:	f023 0303 	bic.w	r3, r3, #3
 8004d94:	f043 0302 	orr.w	r3, r3, #2
 8004d98:	81a3      	strh	r3, [r4, #12]
 8004d9a:	e7e3      	b.n	8004d64 <__smakebuf_r+0xc>
 8004d9c:	4b0d      	ldr	r3, [pc, #52]	; (8004dd4 <__smakebuf_r+0x7c>)
 8004d9e:	62b3      	str	r3, [r6, #40]	; 0x28
 8004da0:	89a3      	ldrh	r3, [r4, #12]
 8004da2:	6020      	str	r0, [r4, #0]
 8004da4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004da8:	81a3      	strh	r3, [r4, #12]
 8004daa:	9b00      	ldr	r3, [sp, #0]
 8004dac:	6163      	str	r3, [r4, #20]
 8004dae:	9b01      	ldr	r3, [sp, #4]
 8004db0:	6120      	str	r0, [r4, #16]
 8004db2:	b15b      	cbz	r3, 8004dcc <__smakebuf_r+0x74>
 8004db4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004db8:	4630      	mov	r0, r6
 8004dba:	f000 f881 	bl	8004ec0 <_isatty_r>
 8004dbe:	b128      	cbz	r0, 8004dcc <__smakebuf_r+0x74>
 8004dc0:	89a3      	ldrh	r3, [r4, #12]
 8004dc2:	f023 0303 	bic.w	r3, r3, #3
 8004dc6:	f043 0301 	orr.w	r3, r3, #1
 8004dca:	81a3      	strh	r3, [r4, #12]
 8004dcc:	89a3      	ldrh	r3, [r4, #12]
 8004dce:	431d      	orrs	r5, r3
 8004dd0:	81a5      	strh	r5, [r4, #12]
 8004dd2:	e7cd      	b.n	8004d70 <__smakebuf_r+0x18>
 8004dd4:	08004191 	.word	0x08004191

08004dd8 <__malloc_lock>:
 8004dd8:	4770      	bx	lr

08004dda <__malloc_unlock>:
 8004dda:	4770      	bx	lr

08004ddc <_free_r>:
 8004ddc:	b538      	push	{r3, r4, r5, lr}
 8004dde:	4605      	mov	r5, r0
 8004de0:	2900      	cmp	r1, #0
 8004de2:	d045      	beq.n	8004e70 <_free_r+0x94>
 8004de4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004de8:	1f0c      	subs	r4, r1, #4
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	bfb8      	it	lt
 8004dee:	18e4      	addlt	r4, r4, r3
 8004df0:	f7ff fff2 	bl	8004dd8 <__malloc_lock>
 8004df4:	4a1f      	ldr	r2, [pc, #124]	; (8004e74 <_free_r+0x98>)
 8004df6:	6813      	ldr	r3, [r2, #0]
 8004df8:	4610      	mov	r0, r2
 8004dfa:	b933      	cbnz	r3, 8004e0a <_free_r+0x2e>
 8004dfc:	6063      	str	r3, [r4, #4]
 8004dfe:	6014      	str	r4, [r2, #0]
 8004e00:	4628      	mov	r0, r5
 8004e02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004e06:	f7ff bfe8 	b.w	8004dda <__malloc_unlock>
 8004e0a:	42a3      	cmp	r3, r4
 8004e0c:	d90c      	bls.n	8004e28 <_free_r+0x4c>
 8004e0e:	6821      	ldr	r1, [r4, #0]
 8004e10:	1862      	adds	r2, r4, r1
 8004e12:	4293      	cmp	r3, r2
 8004e14:	bf04      	itt	eq
 8004e16:	681a      	ldreq	r2, [r3, #0]
 8004e18:	685b      	ldreq	r3, [r3, #4]
 8004e1a:	6063      	str	r3, [r4, #4]
 8004e1c:	bf04      	itt	eq
 8004e1e:	1852      	addeq	r2, r2, r1
 8004e20:	6022      	streq	r2, [r4, #0]
 8004e22:	6004      	str	r4, [r0, #0]
 8004e24:	e7ec      	b.n	8004e00 <_free_r+0x24>
 8004e26:	4613      	mov	r3, r2
 8004e28:	685a      	ldr	r2, [r3, #4]
 8004e2a:	b10a      	cbz	r2, 8004e30 <_free_r+0x54>
 8004e2c:	42a2      	cmp	r2, r4
 8004e2e:	d9fa      	bls.n	8004e26 <_free_r+0x4a>
 8004e30:	6819      	ldr	r1, [r3, #0]
 8004e32:	1858      	adds	r0, r3, r1
 8004e34:	42a0      	cmp	r0, r4
 8004e36:	d10b      	bne.n	8004e50 <_free_r+0x74>
 8004e38:	6820      	ldr	r0, [r4, #0]
 8004e3a:	4401      	add	r1, r0
 8004e3c:	1858      	adds	r0, r3, r1
 8004e3e:	4282      	cmp	r2, r0
 8004e40:	6019      	str	r1, [r3, #0]
 8004e42:	d1dd      	bne.n	8004e00 <_free_r+0x24>
 8004e44:	6810      	ldr	r0, [r2, #0]
 8004e46:	6852      	ldr	r2, [r2, #4]
 8004e48:	605a      	str	r2, [r3, #4]
 8004e4a:	4401      	add	r1, r0
 8004e4c:	6019      	str	r1, [r3, #0]
 8004e4e:	e7d7      	b.n	8004e00 <_free_r+0x24>
 8004e50:	d902      	bls.n	8004e58 <_free_r+0x7c>
 8004e52:	230c      	movs	r3, #12
 8004e54:	602b      	str	r3, [r5, #0]
 8004e56:	e7d3      	b.n	8004e00 <_free_r+0x24>
 8004e58:	6820      	ldr	r0, [r4, #0]
 8004e5a:	1821      	adds	r1, r4, r0
 8004e5c:	428a      	cmp	r2, r1
 8004e5e:	bf04      	itt	eq
 8004e60:	6811      	ldreq	r1, [r2, #0]
 8004e62:	6852      	ldreq	r2, [r2, #4]
 8004e64:	6062      	str	r2, [r4, #4]
 8004e66:	bf04      	itt	eq
 8004e68:	1809      	addeq	r1, r1, r0
 8004e6a:	6021      	streq	r1, [r4, #0]
 8004e6c:	605c      	str	r4, [r3, #4]
 8004e6e:	e7c7      	b.n	8004e00 <_free_r+0x24>
 8004e70:	bd38      	pop	{r3, r4, r5, pc}
 8004e72:	bf00      	nop
 8004e74:	20000090 	.word	0x20000090

08004e78 <_read_r>:
 8004e78:	b538      	push	{r3, r4, r5, lr}
 8004e7a:	4c07      	ldr	r4, [pc, #28]	; (8004e98 <_read_r+0x20>)
 8004e7c:	4605      	mov	r5, r0
 8004e7e:	4608      	mov	r0, r1
 8004e80:	4611      	mov	r1, r2
 8004e82:	2200      	movs	r2, #0
 8004e84:	6022      	str	r2, [r4, #0]
 8004e86:	461a      	mov	r2, r3
 8004e88:	f7ff f81a 	bl	8003ec0 <_read>
 8004e8c:	1c43      	adds	r3, r0, #1
 8004e8e:	d102      	bne.n	8004e96 <_read_r+0x1e>
 8004e90:	6823      	ldr	r3, [r4, #0]
 8004e92:	b103      	cbz	r3, 8004e96 <_read_r+0x1e>
 8004e94:	602b      	str	r3, [r5, #0]
 8004e96:	bd38      	pop	{r3, r4, r5, pc}
 8004e98:	20000568 	.word	0x20000568

08004e9c <_fstat_r>:
 8004e9c:	b538      	push	{r3, r4, r5, lr}
 8004e9e:	4c07      	ldr	r4, [pc, #28]	; (8004ebc <_fstat_r+0x20>)
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	4605      	mov	r5, r0
 8004ea4:	4608      	mov	r0, r1
 8004ea6:	4611      	mov	r1, r2
 8004ea8:	6023      	str	r3, [r4, #0]
 8004eaa:	f7ff f84e 	bl	8003f4a <_fstat>
 8004eae:	1c43      	adds	r3, r0, #1
 8004eb0:	d102      	bne.n	8004eb8 <_fstat_r+0x1c>
 8004eb2:	6823      	ldr	r3, [r4, #0]
 8004eb4:	b103      	cbz	r3, 8004eb8 <_fstat_r+0x1c>
 8004eb6:	602b      	str	r3, [r5, #0]
 8004eb8:	bd38      	pop	{r3, r4, r5, pc}
 8004eba:	bf00      	nop
 8004ebc:	20000568 	.word	0x20000568

08004ec0 <_isatty_r>:
 8004ec0:	b538      	push	{r3, r4, r5, lr}
 8004ec2:	4c06      	ldr	r4, [pc, #24]	; (8004edc <_isatty_r+0x1c>)
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	4605      	mov	r5, r0
 8004ec8:	4608      	mov	r0, r1
 8004eca:	6023      	str	r3, [r4, #0]
 8004ecc:	f7ff f84d 	bl	8003f6a <_isatty>
 8004ed0:	1c43      	adds	r3, r0, #1
 8004ed2:	d102      	bne.n	8004eda <_isatty_r+0x1a>
 8004ed4:	6823      	ldr	r3, [r4, #0]
 8004ed6:	b103      	cbz	r3, 8004eda <_isatty_r+0x1a>
 8004ed8:	602b      	str	r3, [r5, #0]
 8004eda:	bd38      	pop	{r3, r4, r5, pc}
 8004edc:	20000568 	.word	0x20000568

08004ee0 <_init>:
 8004ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ee2:	bf00      	nop
 8004ee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ee6:	bc08      	pop	{r3}
 8004ee8:	469e      	mov	lr, r3
 8004eea:	4770      	bx	lr

08004eec <_fini>:
 8004eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eee:	bf00      	nop
 8004ef0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ef2:	bc08      	pop	{r3}
 8004ef4:	469e      	mov	lr, r3
 8004ef6:	4770      	bx	lr
