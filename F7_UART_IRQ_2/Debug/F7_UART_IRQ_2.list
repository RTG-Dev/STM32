
F7_UART_IRQ_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000578c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000164  0800595c  0800595c  0001595c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ac0  08005ac0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005ac0  08005ac0  00015ac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ac8  08005ac8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ac8  08005ac8  00015ac8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005acc  08005acc  00015acc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005ad0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000738  20000070  08005b40  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007a8  08005b40  000207a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000127be  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028a1  00000000  00000000  0003285e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ce0  00000000  00000000  00035100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bb8  00000000  00000000  00035de0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027181  00000000  00000000  00036998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f288  00000000  00000000  0005db19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eea0f  00000000  00000000  0006cda1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015b7b0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c50  00000000  00000000  0015b804  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005944 	.word	0x08005944

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08005944 	.word	0x08005944

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96e 	b.w	80005a4 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468c      	mov	ip, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8083 	bne.w	80003f6 <__udivmoddi4+0x116>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d947      	bls.n	8000386 <__udivmoddi4+0xa6>
 80002f6:	fab2 f282 	clz	r2, r2
 80002fa:	b142      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fc:	f1c2 0020 	rsb	r0, r2, #32
 8000300:	fa24 f000 	lsr.w	r0, r4, r0
 8000304:	4091      	lsls	r1, r2
 8000306:	4097      	lsls	r7, r2
 8000308:	ea40 0c01 	orr.w	ip, r0, r1
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbbc f6f8 	udiv	r6, ip, r8
 8000318:	fa1f fe87 	uxth.w	lr, r7
 800031c:	fb08 c116 	mls	r1, r8, r6, ip
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb06 f10e 	mul.w	r1, r6, lr
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000332:	f080 8119 	bcs.w	8000568 <__udivmoddi4+0x288>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8116 	bls.w	8000568 <__udivmoddi4+0x288>
 800033c:	3e02      	subs	r6, #2
 800033e:	443b      	add	r3, r7
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0f8 	udiv	r0, r3, r8
 8000348:	fb08 3310 	mls	r3, r8, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fe0e 	mul.w	lr, r0, lr
 8000354:	45a6      	cmp	lr, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	193c      	adds	r4, r7, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8105 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f240 8102 	bls.w	800056c <__udivmoddi4+0x28c>
 8000368:	3802      	subs	r0, #2
 800036a:	443c      	add	r4, r7
 800036c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000370:	eba4 040e 	sub.w	r4, r4, lr
 8000374:	2600      	movs	r6, #0
 8000376:	b11d      	cbz	r5, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c5 4300 	strd	r4, r3, [r5]
 8000380:	4631      	mov	r1, r6
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	b902      	cbnz	r2, 800038a <__udivmoddi4+0xaa>
 8000388:	deff      	udf	#255	; 0xff
 800038a:	fab2 f282 	clz	r2, r2
 800038e:	2a00      	cmp	r2, #0
 8000390:	d150      	bne.n	8000434 <__udivmoddi4+0x154>
 8000392:	1bcb      	subs	r3, r1, r7
 8000394:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000398:	fa1f f887 	uxth.w	r8, r7
 800039c:	2601      	movs	r6, #1
 800039e:	fbb3 fcfe 	udiv	ip, r3, lr
 80003a2:	0c21      	lsrs	r1, r4, #16
 80003a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb08 f30c 	mul.w	r3, r8, ip
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0xe2>
 80003bc:	428b      	cmp	r3, r1
 80003be:	f200 80e9 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1ac9      	subs	r1, r1, r3
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x10c>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x10a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80d9 	bhi.w	800059c <__udivmoddi4+0x2bc>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e7bf      	b.n	8000376 <__udivmoddi4+0x96>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0x12e>
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	f000 80b1 	beq.w	8000562 <__udivmoddi4+0x282>
 8000400:	2600      	movs	r6, #0
 8000402:	e9c5 0100 	strd	r0, r1, [r5]
 8000406:	4630      	mov	r0, r6
 8000408:	4631      	mov	r1, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	fab3 f683 	clz	r6, r3
 8000412:	2e00      	cmp	r6, #0
 8000414:	d14a      	bne.n	80004ac <__udivmoddi4+0x1cc>
 8000416:	428b      	cmp	r3, r1
 8000418:	d302      	bcc.n	8000420 <__udivmoddi4+0x140>
 800041a:	4282      	cmp	r2, r0
 800041c:	f200 80b8 	bhi.w	8000590 <__udivmoddi4+0x2b0>
 8000420:	1a84      	subs	r4, r0, r2
 8000422:	eb61 0103 	sbc.w	r1, r1, r3
 8000426:	2001      	movs	r0, #1
 8000428:	468c      	mov	ip, r1
 800042a:	2d00      	cmp	r5, #0
 800042c:	d0a8      	beq.n	8000380 <__udivmoddi4+0xa0>
 800042e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000432:	e7a5      	b.n	8000380 <__udivmoddi4+0xa0>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f603 	lsr.w	r6, r0, r3
 800043c:	4097      	lsls	r7, r2
 800043e:	fa01 f002 	lsl.w	r0, r1, r2
 8000442:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000446:	40d9      	lsrs	r1, r3
 8000448:	4330      	orrs	r0, r6
 800044a:	0c03      	lsrs	r3, r0, #16
 800044c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000450:	fa1f f887 	uxth.w	r8, r7
 8000454:	fb0e 1116 	mls	r1, lr, r6, r1
 8000458:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045c:	fb06 f108 	mul.w	r1, r6, r8
 8000460:	4299      	cmp	r1, r3
 8000462:	fa04 f402 	lsl.w	r4, r4, r2
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x19c>
 8000468:	18fb      	adds	r3, r7, r3
 800046a:	f106 3cff 	add.w	ip, r6, #4294967295
 800046e:	f080 808d 	bcs.w	800058c <__udivmoddi4+0x2ac>
 8000472:	4299      	cmp	r1, r3
 8000474:	f240 808a 	bls.w	800058c <__udivmoddi4+0x2ac>
 8000478:	3e02      	subs	r6, #2
 800047a:	443b      	add	r3, r7
 800047c:	1a5b      	subs	r3, r3, r1
 800047e:	b281      	uxth	r1, r0
 8000480:	fbb3 f0fe 	udiv	r0, r3, lr
 8000484:	fb0e 3310 	mls	r3, lr, r0, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb00 f308 	mul.w	r3, r0, r8
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0x1c4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f100 3cff 	add.w	ip, r0, #4294967295
 800049a:	d273      	bcs.n	8000584 <__udivmoddi4+0x2a4>
 800049c:	428b      	cmp	r3, r1
 800049e:	d971      	bls.n	8000584 <__udivmoddi4+0x2a4>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4439      	add	r1, r7
 80004a4:	1acb      	subs	r3, r1, r3
 80004a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004aa:	e778      	b.n	800039e <__udivmoddi4+0xbe>
 80004ac:	f1c6 0c20 	rsb	ip, r6, #32
 80004b0:	fa03 f406 	lsl.w	r4, r3, r6
 80004b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004b8:	431c      	orrs	r4, r3
 80004ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80004be:	fa01 f306 	lsl.w	r3, r1, r6
 80004c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ca:	431f      	orrs	r7, r3
 80004cc:	0c3b      	lsrs	r3, r7, #16
 80004ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d2:	fa1f f884 	uxth.w	r8, r4
 80004d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004de:	fb09 fa08 	mul.w	sl, r9, r8
 80004e2:	458a      	cmp	sl, r1
 80004e4:	fa02 f206 	lsl.w	r2, r2, r6
 80004e8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x220>
 80004ee:	1861      	adds	r1, r4, r1
 80004f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f4:	d248      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 80004f6:	458a      	cmp	sl, r1
 80004f8:	d946      	bls.n	8000588 <__udivmoddi4+0x2a8>
 80004fa:	f1a9 0902 	sub.w	r9, r9, #2
 80004fe:	4421      	add	r1, r4
 8000500:	eba1 010a 	sub.w	r1, r1, sl
 8000504:	b2bf      	uxth	r7, r7
 8000506:	fbb1 f0fe 	udiv	r0, r1, lr
 800050a:	fb0e 1110 	mls	r1, lr, r0, r1
 800050e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000512:	fb00 f808 	mul.w	r8, r0, r8
 8000516:	45b8      	cmp	r8, r7
 8000518:	d907      	bls.n	800052a <__udivmoddi4+0x24a>
 800051a:	19e7      	adds	r7, r4, r7
 800051c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000520:	d22e      	bcs.n	8000580 <__udivmoddi4+0x2a0>
 8000522:	45b8      	cmp	r8, r7
 8000524:	d92c      	bls.n	8000580 <__udivmoddi4+0x2a0>
 8000526:	3802      	subs	r0, #2
 8000528:	4427      	add	r7, r4
 800052a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800052e:	eba7 0708 	sub.w	r7, r7, r8
 8000532:	fba0 8902 	umull	r8, r9, r0, r2
 8000536:	454f      	cmp	r7, r9
 8000538:	46c6      	mov	lr, r8
 800053a:	4649      	mov	r1, r9
 800053c:	d31a      	bcc.n	8000574 <__udivmoddi4+0x294>
 800053e:	d017      	beq.n	8000570 <__udivmoddi4+0x290>
 8000540:	b15d      	cbz	r5, 800055a <__udivmoddi4+0x27a>
 8000542:	ebb3 020e 	subs.w	r2, r3, lr
 8000546:	eb67 0701 	sbc.w	r7, r7, r1
 800054a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800054e:	40f2      	lsrs	r2, r6
 8000550:	ea4c 0202 	orr.w	r2, ip, r2
 8000554:	40f7      	lsrs	r7, r6
 8000556:	e9c5 2700 	strd	r2, r7, [r5]
 800055a:	2600      	movs	r6, #0
 800055c:	4631      	mov	r1, r6
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e70b      	b.n	8000380 <__udivmoddi4+0xa0>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0x60>
 800056c:	4618      	mov	r0, r3
 800056e:	e6fd      	b.n	800036c <__udivmoddi4+0x8c>
 8000570:	4543      	cmp	r3, r8
 8000572:	d2e5      	bcs.n	8000540 <__udivmoddi4+0x260>
 8000574:	ebb8 0e02 	subs.w	lr, r8, r2
 8000578:	eb69 0104 	sbc.w	r1, r9, r4
 800057c:	3801      	subs	r0, #1
 800057e:	e7df      	b.n	8000540 <__udivmoddi4+0x260>
 8000580:	4608      	mov	r0, r1
 8000582:	e7d2      	b.n	800052a <__udivmoddi4+0x24a>
 8000584:	4660      	mov	r0, ip
 8000586:	e78d      	b.n	80004a4 <__udivmoddi4+0x1c4>
 8000588:	4681      	mov	r9, r0
 800058a:	e7b9      	b.n	8000500 <__udivmoddi4+0x220>
 800058c:	4666      	mov	r6, ip
 800058e:	e775      	b.n	800047c <__udivmoddi4+0x19c>
 8000590:	4630      	mov	r0, r6
 8000592:	e74a      	b.n	800042a <__udivmoddi4+0x14a>
 8000594:	f1ac 0c02 	sub.w	ip, ip, #2
 8000598:	4439      	add	r1, r7
 800059a:	e713      	b.n	80003c4 <__udivmoddi4+0xe4>
 800059c:	3802      	subs	r0, #2
 800059e:	443c      	add	r4, r7
 80005a0:	e724      	b.n	80003ec <__udivmoddi4+0x10c>
 80005a2:	bf00      	nop

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005ac:	2003      	movs	r0, #3
 80005ae:	f000 f94d 	bl	800084c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005b2:	2000      	movs	r0, #0
 80005b4:	f000 f806 	bl	80005c4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80005b8:	f003 fece 	bl	8004358 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80005bc:	2300      	movs	r3, #0
}
 80005be:	4618      	mov	r0, r3
 80005c0:	bd80      	pop	{r7, pc}
	...

080005c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005cc:	4b12      	ldr	r3, [pc, #72]	; (8000618 <HAL_InitTick+0x54>)
 80005ce:	681a      	ldr	r2, [r3, #0]
 80005d0:	4b12      	ldr	r3, [pc, #72]	; (800061c <HAL_InitTick+0x58>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	4619      	mov	r1, r3
 80005d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005da:	fbb3 f3f1 	udiv	r3, r3, r1
 80005de:	fbb2 f3f3 	udiv	r3, r2, r3
 80005e2:	4618      	mov	r0, r3
 80005e4:	f000 f967 	bl	80008b6 <HAL_SYSTICK_Config>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005ee:	2301      	movs	r3, #1
 80005f0:	e00e      	b.n	8000610 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	2b0f      	cmp	r3, #15
 80005f6:	d80a      	bhi.n	800060e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005f8:	2200      	movs	r2, #0
 80005fa:	6879      	ldr	r1, [r7, #4]
 80005fc:	f04f 30ff 	mov.w	r0, #4294967295
 8000600:	f000 f92f 	bl	8000862 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000604:	4a06      	ldr	r2, [pc, #24]	; (8000620 <HAL_InitTick+0x5c>)
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800060a:	2300      	movs	r3, #0
 800060c:	e000      	b.n	8000610 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800060e:	2301      	movs	r3, #1
}
 8000610:	4618      	mov	r0, r3
 8000612:	3708      	adds	r7, #8
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	20000008 	.word	0x20000008
 800061c:	20000004 	.word	0x20000004
 8000620:	20000000 	.word	0x20000000

08000624 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000628:	4b06      	ldr	r3, [pc, #24]	; (8000644 <HAL_IncTick+0x20>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	461a      	mov	r2, r3
 800062e:	4b06      	ldr	r3, [pc, #24]	; (8000648 <HAL_IncTick+0x24>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	4413      	add	r3, r2
 8000634:	4a04      	ldr	r2, [pc, #16]	; (8000648 <HAL_IncTick+0x24>)
 8000636:	6013      	str	r3, [r2, #0]
}
 8000638:	bf00      	nop
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop
 8000644:	20000004 	.word	0x20000004
 8000648:	2000009c 	.word	0x2000009c

0800064c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  return uwTick;
 8000650:	4b03      	ldr	r3, [pc, #12]	; (8000660 <HAL_GetTick+0x14>)
 8000652:	681b      	ldr	r3, [r3, #0]
}
 8000654:	4618      	mov	r0, r3
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop
 8000660:	2000009c 	.word	0x2000009c

08000664 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b084      	sub	sp, #16
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800066c:	f7ff ffee 	bl	800064c <HAL_GetTick>
 8000670:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000676:	68fb      	ldr	r3, [r7, #12]
 8000678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800067c:	d005      	beq.n	800068a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800067e:	4b0a      	ldr	r3, [pc, #40]	; (80006a8 <HAL_Delay+0x44>)
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	461a      	mov	r2, r3
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	4413      	add	r3, r2
 8000688:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800068a:	bf00      	nop
 800068c:	f7ff ffde 	bl	800064c <HAL_GetTick>
 8000690:	4602      	mov	r2, r0
 8000692:	68bb      	ldr	r3, [r7, #8]
 8000694:	1ad3      	subs	r3, r2, r3
 8000696:	68fa      	ldr	r2, [r7, #12]
 8000698:	429a      	cmp	r2, r3
 800069a:	d8f7      	bhi.n	800068c <HAL_Delay+0x28>
  {
  }
}
 800069c:	bf00      	nop
 800069e:	bf00      	nop
 80006a0:	3710      	adds	r7, #16
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	20000004 	.word	0x20000004

080006ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b085      	sub	sp, #20
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	f003 0307 	and.w	r3, r3, #7
 80006ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006bc:	4b0b      	ldr	r3, [pc, #44]	; (80006ec <__NVIC_SetPriorityGrouping+0x40>)
 80006be:	68db      	ldr	r3, [r3, #12]
 80006c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006c2:	68ba      	ldr	r2, [r7, #8]
 80006c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006c8:	4013      	ands	r3, r2
 80006ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006d0:	68bb      	ldr	r3, [r7, #8]
 80006d2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80006d4:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <__NVIC_SetPriorityGrouping+0x44>)
 80006d6:	4313      	orrs	r3, r2
 80006d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006da:	4a04      	ldr	r2, [pc, #16]	; (80006ec <__NVIC_SetPriorityGrouping+0x40>)
 80006dc:	68bb      	ldr	r3, [r7, #8]
 80006de:	60d3      	str	r3, [r2, #12]
}
 80006e0:	bf00      	nop
 80006e2:	3714      	adds	r7, #20
 80006e4:	46bd      	mov	sp, r7
 80006e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ea:	4770      	bx	lr
 80006ec:	e000ed00 	.word	0xe000ed00
 80006f0:	05fa0000 	.word	0x05fa0000

080006f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006f8:	4b04      	ldr	r3, [pc, #16]	; (800070c <__NVIC_GetPriorityGrouping+0x18>)
 80006fa:	68db      	ldr	r3, [r3, #12]
 80006fc:	0a1b      	lsrs	r3, r3, #8
 80006fe:	f003 0307 	and.w	r3, r3, #7
}
 8000702:	4618      	mov	r0, r3
 8000704:	46bd      	mov	sp, r7
 8000706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070a:	4770      	bx	lr
 800070c:	e000ed00 	.word	0xe000ed00

08000710 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000710:	b480      	push	{r7}
 8000712:	b083      	sub	sp, #12
 8000714:	af00      	add	r7, sp, #0
 8000716:	4603      	mov	r3, r0
 8000718:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800071a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800071e:	2b00      	cmp	r3, #0
 8000720:	db0b      	blt.n	800073a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000722:	79fb      	ldrb	r3, [r7, #7]
 8000724:	f003 021f 	and.w	r2, r3, #31
 8000728:	4907      	ldr	r1, [pc, #28]	; (8000748 <__NVIC_EnableIRQ+0x38>)
 800072a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800072e:	095b      	lsrs	r3, r3, #5
 8000730:	2001      	movs	r0, #1
 8000732:	fa00 f202 	lsl.w	r2, r0, r2
 8000736:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800073a:	bf00      	nop
 800073c:	370c      	adds	r7, #12
 800073e:	46bd      	mov	sp, r7
 8000740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop
 8000748:	e000e100 	.word	0xe000e100

0800074c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800074c:	b480      	push	{r7}
 800074e:	b083      	sub	sp, #12
 8000750:	af00      	add	r7, sp, #0
 8000752:	4603      	mov	r3, r0
 8000754:	6039      	str	r1, [r7, #0]
 8000756:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000758:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800075c:	2b00      	cmp	r3, #0
 800075e:	db0a      	blt.n	8000776 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000760:	683b      	ldr	r3, [r7, #0]
 8000762:	b2da      	uxtb	r2, r3
 8000764:	490c      	ldr	r1, [pc, #48]	; (8000798 <__NVIC_SetPriority+0x4c>)
 8000766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800076a:	0112      	lsls	r2, r2, #4
 800076c:	b2d2      	uxtb	r2, r2
 800076e:	440b      	add	r3, r1
 8000770:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000774:	e00a      	b.n	800078c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000776:	683b      	ldr	r3, [r7, #0]
 8000778:	b2da      	uxtb	r2, r3
 800077a:	4908      	ldr	r1, [pc, #32]	; (800079c <__NVIC_SetPriority+0x50>)
 800077c:	79fb      	ldrb	r3, [r7, #7]
 800077e:	f003 030f 	and.w	r3, r3, #15
 8000782:	3b04      	subs	r3, #4
 8000784:	0112      	lsls	r2, r2, #4
 8000786:	b2d2      	uxtb	r2, r2
 8000788:	440b      	add	r3, r1
 800078a:	761a      	strb	r2, [r3, #24]
}
 800078c:	bf00      	nop
 800078e:	370c      	adds	r7, #12
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr
 8000798:	e000e100 	.word	0xe000e100
 800079c:	e000ed00 	.word	0xe000ed00

080007a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b089      	sub	sp, #36	; 0x24
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	60f8      	str	r0, [r7, #12]
 80007a8:	60b9      	str	r1, [r7, #8]
 80007aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	f003 0307 	and.w	r3, r3, #7
 80007b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007b4:	69fb      	ldr	r3, [r7, #28]
 80007b6:	f1c3 0307 	rsb	r3, r3, #7
 80007ba:	2b04      	cmp	r3, #4
 80007bc:	bf28      	it	cs
 80007be:	2304      	movcs	r3, #4
 80007c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007c2:	69fb      	ldr	r3, [r7, #28]
 80007c4:	3304      	adds	r3, #4
 80007c6:	2b06      	cmp	r3, #6
 80007c8:	d902      	bls.n	80007d0 <NVIC_EncodePriority+0x30>
 80007ca:	69fb      	ldr	r3, [r7, #28]
 80007cc:	3b03      	subs	r3, #3
 80007ce:	e000      	b.n	80007d2 <NVIC_EncodePriority+0x32>
 80007d0:	2300      	movs	r3, #0
 80007d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007d4:	f04f 32ff 	mov.w	r2, #4294967295
 80007d8:	69bb      	ldr	r3, [r7, #24]
 80007da:	fa02 f303 	lsl.w	r3, r2, r3
 80007de:	43da      	mvns	r2, r3
 80007e0:	68bb      	ldr	r3, [r7, #8]
 80007e2:	401a      	ands	r2, r3
 80007e4:	697b      	ldr	r3, [r7, #20]
 80007e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007e8:	f04f 31ff 	mov.w	r1, #4294967295
 80007ec:	697b      	ldr	r3, [r7, #20]
 80007ee:	fa01 f303 	lsl.w	r3, r1, r3
 80007f2:	43d9      	mvns	r1, r3
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007f8:	4313      	orrs	r3, r2
         );
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	3724      	adds	r7, #36	; 0x24
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr
	...

08000808 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	3b01      	subs	r3, #1
 8000814:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000818:	d301      	bcc.n	800081e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800081a:	2301      	movs	r3, #1
 800081c:	e00f      	b.n	800083e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800081e:	4a0a      	ldr	r2, [pc, #40]	; (8000848 <SysTick_Config+0x40>)
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	3b01      	subs	r3, #1
 8000824:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000826:	210f      	movs	r1, #15
 8000828:	f04f 30ff 	mov.w	r0, #4294967295
 800082c:	f7ff ff8e 	bl	800074c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000830:	4b05      	ldr	r3, [pc, #20]	; (8000848 <SysTick_Config+0x40>)
 8000832:	2200      	movs	r2, #0
 8000834:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000836:	4b04      	ldr	r3, [pc, #16]	; (8000848 <SysTick_Config+0x40>)
 8000838:	2207      	movs	r2, #7
 800083a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800083c:	2300      	movs	r3, #0
}
 800083e:	4618      	mov	r0, r3
 8000840:	3708      	adds	r7, #8
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	e000e010 	.word	0xe000e010

0800084c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000854:	6878      	ldr	r0, [r7, #4]
 8000856:	f7ff ff29 	bl	80006ac <__NVIC_SetPriorityGrouping>
}
 800085a:	bf00      	nop
 800085c:	3708      	adds	r7, #8
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}

08000862 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000862:	b580      	push	{r7, lr}
 8000864:	b086      	sub	sp, #24
 8000866:	af00      	add	r7, sp, #0
 8000868:	4603      	mov	r3, r0
 800086a:	60b9      	str	r1, [r7, #8]
 800086c:	607a      	str	r2, [r7, #4]
 800086e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000870:	2300      	movs	r3, #0
 8000872:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000874:	f7ff ff3e 	bl	80006f4 <__NVIC_GetPriorityGrouping>
 8000878:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800087a:	687a      	ldr	r2, [r7, #4]
 800087c:	68b9      	ldr	r1, [r7, #8]
 800087e:	6978      	ldr	r0, [r7, #20]
 8000880:	f7ff ff8e 	bl	80007a0 <NVIC_EncodePriority>
 8000884:	4602      	mov	r2, r0
 8000886:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800088a:	4611      	mov	r1, r2
 800088c:	4618      	mov	r0, r3
 800088e:	f7ff ff5d 	bl	800074c <__NVIC_SetPriority>
}
 8000892:	bf00      	nop
 8000894:	3718      	adds	r7, #24
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}

0800089a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800089a:	b580      	push	{r7, lr}
 800089c:	b082      	sub	sp, #8
 800089e:	af00      	add	r7, sp, #0
 80008a0:	4603      	mov	r3, r0
 80008a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008a8:	4618      	mov	r0, r3
 80008aa:	f7ff ff31 	bl	8000710 <__NVIC_EnableIRQ>
}
 80008ae:	bf00      	nop
 80008b0:	3708      	adds	r7, #8
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}

080008b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008b6:	b580      	push	{r7, lr}
 80008b8:	b082      	sub	sp, #8
 80008ba:	af00      	add	r7, sp, #0
 80008bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008be:	6878      	ldr	r0, [r7, #4]
 80008c0:	f7ff ffa2 	bl	8000808 <SysTick_Config>
 80008c4:	4603      	mov	r3, r0
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	3708      	adds	r7, #8
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}

080008ce <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80008ce:	b480      	push	{r7}
 80008d0:	b083      	sub	sp, #12
 80008d2:	af00      	add	r7, sp, #0
 80008d4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80008dc:	b2db      	uxtb	r3, r3
 80008de:	2b02      	cmp	r3, #2
 80008e0:	d004      	beq.n	80008ec <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	2280      	movs	r2, #128	; 0x80
 80008e6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80008e8:	2301      	movs	r3, #1
 80008ea:	e00c      	b.n	8000906 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	2205      	movs	r2, #5
 80008f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	681a      	ldr	r2, [r3, #0]
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	f022 0201 	bic.w	r2, r2, #1
 8000902:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000904:	2300      	movs	r3, #0
}
 8000906:	4618      	mov	r0, r3
 8000908:	370c      	adds	r7, #12
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr
	...

08000914 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b088      	sub	sp, #32
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 800091c:	2300      	movs	r3, #0
 800091e:	61fb      	str	r3, [r7, #28]
 8000920:	2300      	movs	r3, #0
 8000922:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8000924:	4ba9      	ldr	r3, [pc, #676]	; (8000bcc <HAL_ETH_Init+0x2b8>)
 8000926:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8000928:	2300      	movs	r3, #0
 800092a:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 800092c:	2300      	movs	r3, #0
 800092e:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	2b00      	cmp	r3, #0
 8000934:	d101      	bne.n	800093a <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8000936:	2301      	movs	r3, #1
 8000938:	e181      	b.n	8000c3e <HAL_ETH_Init+0x32a>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000940:	b2db      	uxtb	r3, r3
 8000942:	2b00      	cmp	r3, #0
 8000944:	d106      	bne.n	8000954 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	2200      	movs	r2, #0
 800094a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800094e:	6878      	ldr	r0, [r7, #4]
 8000950:	f003 fd26 	bl	80043a0 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000954:	4b9e      	ldr	r3, [pc, #632]	; (8000bd0 <HAL_ETH_Init+0x2bc>)
 8000956:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000958:	4a9d      	ldr	r2, [pc, #628]	; (8000bd0 <HAL_ETH_Init+0x2bc>)
 800095a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800095e:	6453      	str	r3, [r2, #68]	; 0x44
 8000960:	4b9b      	ldr	r3, [pc, #620]	; (8000bd0 <HAL_ETH_Init+0x2bc>)
 8000962:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000964:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000968:	60bb      	str	r3, [r7, #8]
 800096a:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800096c:	4b99      	ldr	r3, [pc, #612]	; (8000bd4 <HAL_ETH_Init+0x2c0>)
 800096e:	685b      	ldr	r3, [r3, #4]
 8000970:	4a98      	ldr	r2, [pc, #608]	; (8000bd4 <HAL_ETH_Init+0x2c0>)
 8000972:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000976:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8000978:	4b96      	ldr	r3, [pc, #600]	; (8000bd4 <HAL_ETH_Init+0x2c0>)
 800097a:	685a      	ldr	r2, [r3, #4]
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	6a1b      	ldr	r3, [r3, #32]
 8000980:	4994      	ldr	r1, [pc, #592]	; (8000bd4 <HAL_ETH_Init+0x2c0>)
 8000982:	4313      	orrs	r3, r2
 8000984:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800098e:	681a      	ldr	r2, [r3, #0]
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	f042 0201 	orr.w	r2, r2, #1
 8000998:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800099c:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800099e:	f7ff fe55 	bl	800064c <HAL_GetTick>
 80009a2:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80009a4:	e011      	b.n	80009ca <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 80009a6:	f7ff fe51 	bl	800064c <HAL_GetTick>
 80009aa:	4602      	mov	r2, r0
 80009ac:	697b      	ldr	r3, [r7, #20]
 80009ae:	1ad3      	subs	r3, r2, r3
 80009b0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80009b4:	d909      	bls.n	80009ca <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	2203      	movs	r2, #3
 80009ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	2200      	movs	r2, #0
 80009c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 80009c6:	2303      	movs	r3, #3
 80009c8:	e139      	b.n	8000c3e <HAL_ETH_Init+0x32a>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	f003 0301 	and.w	r3, r3, #1
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d1e4      	bne.n	80009a6 <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	691b      	ldr	r3, [r3, #16]
 80009e2:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 80009e4:	69fb      	ldr	r3, [r7, #28]
 80009e6:	f023 031c 	bic.w	r3, r3, #28
 80009ea:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80009ec:	f001 fb48 	bl	8002080 <HAL_RCC_GetHCLKFreq>
 80009f0:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 80009f2:	69bb      	ldr	r3, [r7, #24]
 80009f4:	4a78      	ldr	r2, [pc, #480]	; (8000bd8 <HAL_ETH_Init+0x2c4>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d908      	bls.n	8000a0c <HAL_ETH_Init+0xf8>
 80009fa:	69bb      	ldr	r3, [r7, #24]
 80009fc:	4a77      	ldr	r2, [pc, #476]	; (8000bdc <HAL_ETH_Init+0x2c8>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d804      	bhi.n	8000a0c <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8000a02:	69fb      	ldr	r3, [r7, #28]
 8000a04:	f043 0308 	orr.w	r3, r3, #8
 8000a08:	61fb      	str	r3, [r7, #28]
 8000a0a:	e027      	b.n	8000a5c <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8000a0c:	69bb      	ldr	r3, [r7, #24]
 8000a0e:	4a73      	ldr	r2, [pc, #460]	; (8000bdc <HAL_ETH_Init+0x2c8>)
 8000a10:	4293      	cmp	r3, r2
 8000a12:	d908      	bls.n	8000a26 <HAL_ETH_Init+0x112>
 8000a14:	69bb      	ldr	r3, [r7, #24]
 8000a16:	4a6d      	ldr	r2, [pc, #436]	; (8000bcc <HAL_ETH_Init+0x2b8>)
 8000a18:	4293      	cmp	r3, r2
 8000a1a:	d204      	bcs.n	8000a26 <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8000a1c:	69fb      	ldr	r3, [r7, #28]
 8000a1e:	f043 030c 	orr.w	r3, r3, #12
 8000a22:	61fb      	str	r3, [r7, #28]
 8000a24:	e01a      	b.n	8000a5c <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8000a26:	69bb      	ldr	r3, [r7, #24]
 8000a28:	4a68      	ldr	r2, [pc, #416]	; (8000bcc <HAL_ETH_Init+0x2b8>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d303      	bcc.n	8000a36 <HAL_ETH_Init+0x122>
 8000a2e:	69bb      	ldr	r3, [r7, #24]
 8000a30:	4a6b      	ldr	r2, [pc, #428]	; (8000be0 <HAL_ETH_Init+0x2cc>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d911      	bls.n	8000a5a <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8000a36:	69bb      	ldr	r3, [r7, #24]
 8000a38:	4a69      	ldr	r2, [pc, #420]	; (8000be0 <HAL_ETH_Init+0x2cc>)
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d908      	bls.n	8000a50 <HAL_ETH_Init+0x13c>
 8000a3e:	69bb      	ldr	r3, [r7, #24]
 8000a40:	4a68      	ldr	r2, [pc, #416]	; (8000be4 <HAL_ETH_Init+0x2d0>)
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d804      	bhi.n	8000a50 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8000a46:	69fb      	ldr	r3, [r7, #28]
 8000a48:	f043 0304 	orr.w	r3, r3, #4
 8000a4c:	61fb      	str	r3, [r7, #28]
 8000a4e:	e005      	b.n	8000a5c <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8000a50:	69fb      	ldr	r3, [r7, #28]
 8000a52:	f043 0310 	orr.w	r3, r3, #16
 8000a56:	61fb      	str	r3, [r7, #28]
 8000a58:	e000      	b.n	8000a5c <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8000a5a:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	69fa      	ldr	r2, [r7, #28]
 8000a62:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8000a64:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000a68:	2100      	movs	r1, #0
 8000a6a:	6878      	ldr	r0, [r7, #4]
 8000a6c:	f000 f954 	bl	8000d18 <HAL_ETH_WritePHYRegister>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d00b      	beq.n	8000a8e <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8000a76:	2301      	movs	r3, #1
 8000a78:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8000a7a:	6939      	ldr	r1, [r7, #16]
 8000a7c:	6878      	ldr	r0, [r7, #4]
 8000a7e:	f000 f9b1 	bl	8000de4 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	2201      	movs	r2, #1
 8000a86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	e0d7      	b.n	8000c3e <HAL_ETH_Init+0x32a>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8000a8e:	20ff      	movs	r0, #255	; 0xff
 8000a90:	f7ff fde8 	bl	8000664 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	685b      	ldr	r3, [r3, #4]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	f000 80a5 	beq.w	8000be8 <HAL_ETH_Init+0x2d4>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8000a9e:	f7ff fdd5 	bl	800064c <HAL_GetTick>
 8000aa2:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000aa4:	f107 030c 	add.w	r3, r7, #12
 8000aa8:	461a      	mov	r2, r3
 8000aaa:	2101      	movs	r1, #1
 8000aac:	6878      	ldr	r0, [r7, #4]
 8000aae:	f000 f8cb 	bl	8000c48 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8000ab2:	f7ff fdcb 	bl	800064c <HAL_GetTick>
 8000ab6:	4602      	mov	r2, r0
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	1ad3      	subs	r3, r2, r3
 8000abc:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ac0:	4293      	cmp	r3, r2
 8000ac2:	d90f      	bls.n	8000ae4 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8000ac8:	6939      	ldr	r1, [r7, #16]
 8000aca:	6878      	ldr	r0, [r7, #4]
 8000acc:	f000 f98a 	bl	8000de4 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	2200      	movs	r2, #0
 8000adc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8000ae0:	2303      	movs	r3, #3
 8000ae2:	e0ac      	b.n	8000c3e <HAL_ETH_Init+0x32a>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	f003 0304 	and.w	r3, r3, #4
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d0da      	beq.n	8000aa4 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8000aee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000af2:	2100      	movs	r1, #0
 8000af4:	6878      	ldr	r0, [r7, #4]
 8000af6:	f000 f90f 	bl	8000d18 <HAL_ETH_WritePHYRegister>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d00b      	beq.n	8000b18 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8000b00:	2301      	movs	r3, #1
 8000b02:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8000b04:	6939      	ldr	r1, [r7, #16]
 8000b06:	6878      	ldr	r0, [r7, #4]
 8000b08:	f000 f96c 	bl	8000de4 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	2201      	movs	r2, #1
 8000b10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8000b14:	2301      	movs	r3, #1
 8000b16:	e092      	b.n	8000c3e <HAL_ETH_Init+0x32a>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8000b18:	f7ff fd98 	bl	800064c <HAL_GetTick>
 8000b1c:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000b1e:	f107 030c 	add.w	r3, r7, #12
 8000b22:	461a      	mov	r2, r3
 8000b24:	2101      	movs	r1, #1
 8000b26:	6878      	ldr	r0, [r7, #4]
 8000b28:	f000 f88e 	bl	8000c48 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8000b2c:	f7ff fd8e 	bl	800064c <HAL_GetTick>
 8000b30:	4602      	mov	r2, r0
 8000b32:	697b      	ldr	r3, [r7, #20]
 8000b34:	1ad3      	subs	r3, r2, r3
 8000b36:	f241 3288 	movw	r2, #5000	; 0x1388
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d90f      	bls.n	8000b5e <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8000b42:	6939      	ldr	r1, [r7, #16]
 8000b44:	6878      	ldr	r0, [r7, #4]
 8000b46:	f000 f94d 	bl	8000de4 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	2200      	movs	r2, #0
 8000b56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8000b5a:	2303      	movs	r3, #3
 8000b5c:	e06f      	b.n	8000c3e <HAL_ETH_Init+0x32a>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	f003 0320 	and.w	r3, r3, #32
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d0da      	beq.n	8000b1e <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8000b68:	f107 030c 	add.w	r3, r7, #12
 8000b6c:	461a      	mov	r2, r3
 8000b6e:	211f      	movs	r1, #31
 8000b70:	6878      	ldr	r0, [r7, #4]
 8000b72:	f000 f869 	bl	8000c48 <HAL_ETH_ReadPHYRegister>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d00b      	beq.n	8000b94 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8000b80:	6939      	ldr	r1, [r7, #16]
 8000b82:	6878      	ldr	r0, [r7, #4]
 8000b84:	f000 f92e 	bl	8000de4 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8000b90:	2301      	movs	r3, #1
 8000b92:	e054      	b.n	8000c3e <HAL_ETH_Init+0x32a>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	f003 0310 	and.w	r3, r3, #16
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d004      	beq.n	8000ba8 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ba4:	60da      	str	r2, [r3, #12]
 8000ba6:	e002      	b.n	8000bae <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	2200      	movs	r2, #0
 8000bac:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	f003 0304 	and.w	r3, r3, #4
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d003      	beq.n	8000bc0 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	2200      	movs	r2, #0
 8000bbc:	609a      	str	r2, [r3, #8]
 8000bbe:	e035      	b.n	8000c2c <HAL_ETH_Init+0x318>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000bc6:	609a      	str	r2, [r3, #8]
 8000bc8:	e030      	b.n	8000c2c <HAL_ETH_Init+0x318>
 8000bca:	bf00      	nop
 8000bcc:	03938700 	.word	0x03938700
 8000bd0:	40023800 	.word	0x40023800
 8000bd4:	40013800 	.word	0x40013800
 8000bd8:	01312cff 	.word	0x01312cff
 8000bdc:	02160ebf 	.word	0x02160ebf
 8000be0:	05f5e0ff 	.word	0x05f5e0ff
 8000be4:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	68db      	ldr	r3, [r3, #12]
 8000bec:	08db      	lsrs	r3, r3, #3
 8000bee:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	689b      	ldr	r3, [r3, #8]
 8000bf4:	085b      	lsrs	r3, r3, #1
 8000bf6:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8000bf8:	4313      	orrs	r3, r2
 8000bfa:	b29b      	uxth	r3, r3
 8000bfc:	461a      	mov	r2, r3
 8000bfe:	2100      	movs	r1, #0
 8000c00:	6878      	ldr	r0, [r7, #4]
 8000c02:	f000 f889 	bl	8000d18 <HAL_ETH_WritePHYRegister>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d00b      	beq.n	8000c24 <HAL_ETH_Init+0x310>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8000c10:	6939      	ldr	r1, [r7, #16]
 8000c12:	6878      	ldr	r0, [r7, #4]
 8000c14:	f000 f8e6 	bl	8000de4 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8000c20:	2301      	movs	r3, #1
 8000c22:	e00c      	b.n	8000c3e <HAL_ETH_Init+0x32a>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8000c24:	f640 70ff 	movw	r0, #4095	; 0xfff
 8000c28:	f7ff fd1c 	bl	8000664 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8000c2c:	6939      	ldr	r1, [r7, #16]
 8000c2e:	6878      	ldr	r0, [r7, #4]
 8000c30:	f000 f8d8 	bl	8000de4 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	2201      	movs	r2, #1
 8000c38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8000c3c:	2300      	movs	r3, #0
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	3720      	adds	r7, #32
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop

08000c48 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b086      	sub	sp, #24
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	60f8      	str	r0, [r7, #12]
 8000c50:	460b      	mov	r3, r1
 8000c52:	607a      	str	r2, [r7, #4]
 8000c54:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8000c56:	2300      	movs	r3, #0
 8000c58:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000c64:	b2db      	uxtb	r3, r3
 8000c66:	2b82      	cmp	r3, #130	; 0x82
 8000c68:	d101      	bne.n	8000c6e <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8000c6a:	2302      	movs	r3, #2
 8000c6c:	e050      	b.n	8000d10 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	2282      	movs	r2, #130	; 0x82
 8000c72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	691b      	ldr	r3, [r3, #16]
 8000c7c:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8000c7e:	697b      	ldr	r3, [r7, #20]
 8000c80:	f003 031c 	and.w	r3, r3, #28
 8000c84:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	8a1b      	ldrh	r3, [r3, #16]
 8000c8a:	02db      	lsls	r3, r3, #11
 8000c8c:	b29b      	uxth	r3, r3
 8000c8e:	697a      	ldr	r2, [r7, #20]
 8000c90:	4313      	orrs	r3, r2
 8000c92:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8000c94:	897b      	ldrh	r3, [r7, #10]
 8000c96:	019b      	lsls	r3, r3, #6
 8000c98:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8000c9c:	697a      	ldr	r2, [r7, #20]
 8000c9e:	4313      	orrs	r3, r2
 8000ca0:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8000ca2:	697b      	ldr	r3, [r7, #20]
 8000ca4:	f023 0302 	bic.w	r3, r3, #2
 8000ca8:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8000caa:	697b      	ldr	r3, [r7, #20]
 8000cac:	f043 0301 	orr.w	r3, r3, #1
 8000cb0:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	697a      	ldr	r2, [r7, #20]
 8000cb8:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8000cba:	f7ff fcc7 	bl	800064c <HAL_GetTick>
 8000cbe:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8000cc0:	e015      	b.n	8000cee <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8000cc2:	f7ff fcc3 	bl	800064c <HAL_GetTick>
 8000cc6:	4602      	mov	r2, r0
 8000cc8:	693b      	ldr	r3, [r7, #16]
 8000cca:	1ad3      	subs	r3, r2, r3
 8000ccc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cd0:	d309      	bcc.n	8000ce6 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	2200      	movs	r2, #0
 8000cde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8000ce2:	2303      	movs	r3, #3
 8000ce4:	e014      	b.n	8000d10 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	691b      	ldr	r3, [r3, #16]
 8000cec:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	f003 0301 	and.w	r3, r3, #1
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d1e4      	bne.n	8000cc2 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	695b      	ldr	r3, [r3, #20]
 8000cfe:	b29b      	uxth	r3, r3
 8000d00:	461a      	mov	r2, r3
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	2201      	movs	r2, #1
 8000d0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8000d0e:	2300      	movs	r3, #0
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	3718      	adds	r7, #24
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}

08000d18 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b086      	sub	sp, #24
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	60f8      	str	r0, [r7, #12]
 8000d20:	460b      	mov	r3, r1
 8000d22:	607a      	str	r2, [r7, #4]
 8000d24:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8000d26:	2300      	movs	r3, #0
 8000d28:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000d34:	b2db      	uxtb	r3, r3
 8000d36:	2b42      	cmp	r3, #66	; 0x42
 8000d38:	d101      	bne.n	8000d3e <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8000d3a:	2302      	movs	r3, #2
 8000d3c:	e04e      	b.n	8000ddc <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	2242      	movs	r2, #66	; 0x42
 8000d42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	691b      	ldr	r3, [r3, #16]
 8000d4c:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	f003 031c 	and.w	r3, r3, #28
 8000d54:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	8a1b      	ldrh	r3, [r3, #16]
 8000d5a:	02db      	lsls	r3, r3, #11
 8000d5c:	b29b      	uxth	r3, r3
 8000d5e:	697a      	ldr	r2, [r7, #20]
 8000d60:	4313      	orrs	r3, r2
 8000d62:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8000d64:	897b      	ldrh	r3, [r7, #10]
 8000d66:	019b      	lsls	r3, r3, #6
 8000d68:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8000d6c:	697a      	ldr	r2, [r7, #20]
 8000d6e:	4313      	orrs	r3, r2
 8000d70:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	f043 0302 	orr.w	r3, r3, #2
 8000d78:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8000d7a:	697b      	ldr	r3, [r7, #20]
 8000d7c:	f043 0301 	orr.w	r3, r3, #1
 8000d80:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	b29a      	uxth	r2, r3
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	697a      	ldr	r2, [r7, #20]
 8000d92:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8000d94:	f7ff fc5a 	bl	800064c <HAL_GetTick>
 8000d98:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8000d9a:	e015      	b.n	8000dc8 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8000d9c:	f7ff fc56 	bl	800064c <HAL_GetTick>
 8000da0:	4602      	mov	r2, r0
 8000da2:	693b      	ldr	r3, [r7, #16]
 8000da4:	1ad3      	subs	r3, r2, r3
 8000da6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000daa:	d309      	bcc.n	8000dc0 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	2201      	movs	r2, #1
 8000db0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	2200      	movs	r2, #0
 8000db8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8000dbc:	2303      	movs	r3, #3
 8000dbe:	e00d      	b.n	8000ddc <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	691b      	ldr	r3, [r3, #16]
 8000dc6:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	f003 0301 	and.w	r3, r3, #1
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d1e4      	bne.n	8000d9c <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8000dda:	2300      	movs	r3, #0
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	3718      	adds	r7, #24
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}

08000de4 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b0b0      	sub	sp, #192	; 0xc0
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
 8000dec:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8000dee:	2300      	movs	r3, #0
 8000df0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d007      	beq.n	8000e0a <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e00:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e08:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8000e12:	2300      	movs	r3, #0
 8000e14:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8000e16:	2300      	movs	r3, #0
 8000e18:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	69db      	ldr	r3, [r3, #28]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d103      	bne.n	8000e32 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8000e2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e2e:	663b      	str	r3, [r7, #96]	; 0x60
 8000e30:	e001      	b.n	8000e36 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8000e32:	2300      	movs	r3, #0
 8000e34:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8000e36:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e3a:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8000e40:	2300      	movs	r3, #0
 8000e42:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8000e44:	2300      	movs	r3, #0
 8000e46:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8000e50:	2340      	movs	r3, #64	; 0x40
 8000e52:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8000e54:	2300      	movs	r3, #0
 8000e56:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8000e60:	2300      	movs	r3, #0
 8000e62:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8000e66:	2300      	movs	r3, #0
 8000e68:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 8000e72:	2300      	movs	r3, #0
 8000e74:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8000e84:	2380      	movs	r3, #128	; 0x80
 8000e86:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8000e90:	2300      	movs	r3, #0
 8000e92:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8000e96:	2300      	movs	r3, #0
 8000e98:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8000eb8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000ebc:	4bab      	ldr	r3, [pc, #684]	; (800116c <ETH_MACDMAConfig+0x388>)
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8000ec4:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8000ec6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8000ec8:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8000eca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8000ecc:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8000ece:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8000ed0:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8000ed6:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8000ed8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8000eda:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8000edc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8000ede:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8000ee4:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8000ee6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8000ee8:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8000eea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8000eec:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8000eee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8000ef0:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8000ef2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8000ef4:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8000ef6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8000ef8:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8000efa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000efe:	4313      	orrs	r3, r2
 8000f00:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000f0c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8000f18:	2001      	movs	r0, #1
 8000f1a:	f7ff fba3 	bl	8000664 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000f26:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8000f28:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8000f2a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8000f2c:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8000f2e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8000f30:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8000f32:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8000f36:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8000f38:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8000f3c:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8000f3e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8000f42:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8000f44:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8000f48:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8000f4c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8000f54:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8000f56:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8000f62:	2001      	movs	r0, #1
 8000f64:	f7ff fb7e 	bl	8000664 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000f70:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8000f7a:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8000f84:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	699b      	ldr	r3, [r3, #24]
 8000f8c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8000f90:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000f94:	f64f 7341 	movw	r3, #65345	; 0xff41
 8000f98:	4013      	ands	r3, r2
 8000f9a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8000f9e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000fa2:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8000fa4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8000fa8:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8000faa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8000fae:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8000fb0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8000fb4:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8000fb6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8000fba:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8000fbc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8000fc0:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8000fc2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000fd4:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	699b      	ldr	r3, [r3, #24]
 8000fdc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8000fe0:	2001      	movs	r0, #1
 8000fe2:	f7ff fb3f 	bl	8000664 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000fee:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8000ff0:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8000ff4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	430a      	orrs	r2, r1
 8000ffe:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	69db      	ldr	r3, [r3, #28]
 8001006:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800100a:	2001      	movs	r0, #1
 800100c:	f7ff fb2a 	bl	8000664 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001018:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 800101a:	2300      	movs	r3, #0
 800101c:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 800101e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001022:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8001024:	2300      	movs	r3, #0
 8001026:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8001028:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800102c:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800102e:	2300      	movs	r3, #0
 8001030:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8001032:	2300      	movs	r3, #0
 8001034:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8001036:	2300      	movs	r3, #0
 8001038:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800103a:	2300      	movs	r3, #0
 800103c:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 800103e:	2304      	movs	r3, #4
 8001040:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8001042:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001046:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8001048:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800104c:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800104e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001052:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001054:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001058:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 800105a:	2380      	movs	r3, #128	; 0x80
 800105c:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 800105e:	2300      	movs	r3, #0
 8001060:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001062:	2300      	movs	r3, #0
 8001064:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	f241 0318 	movw	r3, #4120	; 0x1018
 800106e:	4413      	add	r3, r2
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8001076:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800107a:	4b3d      	ldr	r3, [pc, #244]	; (8001170 <ETH_MACDMAConfig+0x38c>)
 800107c:	4013      	ands	r3, r2
 800107e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001082:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8001084:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001086:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8001088:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 800108a:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 800108c:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 800108e:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8001090:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8001092:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8001094:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8001096:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8001098:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 800109a:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 800109c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 800109e:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 80010a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 80010a2:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80010a4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80010a8:	4313      	orrs	r3, r2
 80010aa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	f241 0318 	movw	r3, #4120	; 0x1018
 80010b6:	4413      	add	r3, r2
 80010b8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80010bc:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	f241 0318 	movw	r3, #4120	; 0x1018
 80010c6:	4413      	add	r3, r2
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80010ce:	2001      	movs	r0, #1
 80010d0:	f7ff fac8 	bl	8000664 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	f241 0318 	movw	r3, #4120	; 0x1018
 80010dc:	4413      	add	r3, r2
 80010de:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80010e2:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80010e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 80010e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80010e8:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80010ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 80010ec:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 80010ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80010f0:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 80010f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 80010f4:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 80010f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80010f8:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 80010fa:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 80010fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 80010fe:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001108:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800110c:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800111c:	2001      	movs	r0, #1
 800111e:	f7ff faa1 	bl	8000664 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800112a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800112e:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	699b      	ldr	r3, [r3, #24]
 8001134:	2b01      	cmp	r3, #1
 8001136:	d10d      	bne.n	8001154 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	f241 031c 	movw	r3, #4124	; 0x101c
 8001140:	4413      	add	r3, r2
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	687a      	ldr	r2, [r7, #4]
 8001146:	6811      	ldr	r1, [r2, #0]
 8001148:	4a0a      	ldr	r2, [pc, #40]	; (8001174 <ETH_MACDMAConfig+0x390>)
 800114a:	431a      	orrs	r2, r3
 800114c:	f241 031c 	movw	r3, #4124	; 0x101c
 8001150:	440b      	add	r3, r1
 8001152:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	695b      	ldr	r3, [r3, #20]
 8001158:	461a      	mov	r2, r3
 800115a:	2100      	movs	r1, #0
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	f000 f80b 	bl	8001178 <ETH_MACAddressConfig>
}
 8001162:	bf00      	nop
 8001164:	37c0      	adds	r7, #192	; 0xc0
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	ff20810f 	.word	0xff20810f
 8001170:	f8de3f23 	.word	0xf8de3f23
 8001174:	00010040 	.word	0x00010040

08001178 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001178:	b480      	push	{r7}
 800117a:	b087      	sub	sp, #28
 800117c:	af00      	add	r7, sp, #0
 800117e:	60f8      	str	r0, [r7, #12]
 8001180:	60b9      	str	r1, [r7, #8]
 8001182:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	3305      	adds	r3, #5
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	021b      	lsls	r3, r3, #8
 800118c:	687a      	ldr	r2, [r7, #4]
 800118e:	3204      	adds	r2, #4
 8001190:	7812      	ldrb	r2, [r2, #0]
 8001192:	4313      	orrs	r3, r2
 8001194:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8001196:	68ba      	ldr	r2, [r7, #8]
 8001198:	4b11      	ldr	r3, [pc, #68]	; (80011e0 <ETH_MACAddressConfig+0x68>)
 800119a:	4413      	add	r3, r2
 800119c:	461a      	mov	r2, r3
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	3303      	adds	r3, #3
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	061a      	lsls	r2, r3, #24
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	3302      	adds	r3, #2
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	041b      	lsls	r3, r3, #16
 80011b2:	431a      	orrs	r2, r3
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	3301      	adds	r3, #1
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	021b      	lsls	r3, r3, #8
 80011bc:	4313      	orrs	r3, r2
 80011be:	687a      	ldr	r2, [r7, #4]
 80011c0:	7812      	ldrb	r2, [r2, #0]
 80011c2:	4313      	orrs	r3, r2
 80011c4:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 80011c6:	68ba      	ldr	r2, [r7, #8]
 80011c8:	4b06      	ldr	r3, [pc, #24]	; (80011e4 <ETH_MACAddressConfig+0x6c>)
 80011ca:	4413      	add	r3, r2
 80011cc:	461a      	mov	r2, r3
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	6013      	str	r3, [r2, #0]
}
 80011d2:	bf00      	nop
 80011d4:	371c      	adds	r7, #28
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	40028040 	.word	0x40028040
 80011e4:	40028044 	.word	0x40028044

080011e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b089      	sub	sp, #36	; 0x24
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80011f2:	2300      	movs	r3, #0
 80011f4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80011f6:	2300      	movs	r3, #0
 80011f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80011fa:	2300      	movs	r3, #0
 80011fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80011fe:	2300      	movs	r3, #0
 8001200:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001202:	2300      	movs	r3, #0
 8001204:	61fb      	str	r3, [r7, #28]
 8001206:	e175      	b.n	80014f4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001208:	2201      	movs	r2, #1
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	697a      	ldr	r2, [r7, #20]
 8001218:	4013      	ands	r3, r2
 800121a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800121c:	693a      	ldr	r2, [r7, #16]
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	429a      	cmp	r2, r3
 8001222:	f040 8164 	bne.w	80014ee <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	2b02      	cmp	r3, #2
 800122c:	d003      	beq.n	8001236 <HAL_GPIO_Init+0x4e>
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	2b12      	cmp	r3, #18
 8001234:	d123      	bne.n	800127e <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	08da      	lsrs	r2, r3, #3
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	3208      	adds	r2, #8
 800123e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001242:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	f003 0307 	and.w	r3, r3, #7
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	220f      	movs	r2, #15
 800124e:	fa02 f303 	lsl.w	r3, r2, r3
 8001252:	43db      	mvns	r3, r3
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	4013      	ands	r3, r2
 8001258:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	691a      	ldr	r2, [r3, #16]
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	f003 0307 	and.w	r3, r3, #7
 8001264:	009b      	lsls	r3, r3, #2
 8001266:	fa02 f303 	lsl.w	r3, r2, r3
 800126a:	69ba      	ldr	r2, [r7, #24]
 800126c:	4313      	orrs	r3, r2
 800126e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	08da      	lsrs	r2, r3, #3
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	3208      	adds	r2, #8
 8001278:	69b9      	ldr	r1, [r7, #24]
 800127a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	005b      	lsls	r3, r3, #1
 8001288:	2203      	movs	r2, #3
 800128a:	fa02 f303 	lsl.w	r3, r2, r3
 800128e:	43db      	mvns	r3, r3
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	4013      	ands	r3, r2
 8001294:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	f003 0203 	and.w	r2, r3, #3
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	005b      	lsls	r3, r3, #1
 80012a2:	fa02 f303 	lsl.w	r3, r2, r3
 80012a6:	69ba      	ldr	r2, [r7, #24]
 80012a8:	4313      	orrs	r3, r2
 80012aa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	69ba      	ldr	r2, [r7, #24]
 80012b0:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	d00b      	beq.n	80012d2 <HAL_GPIO_Init+0xea>
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	2b02      	cmp	r3, #2
 80012c0:	d007      	beq.n	80012d2 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012c6:	2b11      	cmp	r3, #17
 80012c8:	d003      	beq.n	80012d2 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	2b12      	cmp	r3, #18
 80012d0:	d130      	bne.n	8001334 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80012d8:	69fb      	ldr	r3, [r7, #28]
 80012da:	005b      	lsls	r3, r3, #1
 80012dc:	2203      	movs	r2, #3
 80012de:	fa02 f303 	lsl.w	r3, r2, r3
 80012e2:	43db      	mvns	r3, r3
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	4013      	ands	r3, r2
 80012e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	68da      	ldr	r2, [r3, #12]
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	005b      	lsls	r3, r3, #1
 80012f2:	fa02 f303 	lsl.w	r3, r2, r3
 80012f6:	69ba      	ldr	r2, [r7, #24]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	69ba      	ldr	r2, [r7, #24]
 8001300:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001308:	2201      	movs	r2, #1
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	fa02 f303 	lsl.w	r3, r2, r3
 8001310:	43db      	mvns	r3, r3
 8001312:	69ba      	ldr	r2, [r7, #24]
 8001314:	4013      	ands	r3, r2
 8001316:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	091b      	lsrs	r3, r3, #4
 800131e:	f003 0201 	and.w	r2, r3, #1
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	fa02 f303 	lsl.w	r3, r2, r3
 8001328:	69ba      	ldr	r2, [r7, #24]
 800132a:	4313      	orrs	r3, r2
 800132c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	005b      	lsls	r3, r3, #1
 800133e:	2203      	movs	r2, #3
 8001340:	fa02 f303 	lsl.w	r3, r2, r3
 8001344:	43db      	mvns	r3, r3
 8001346:	69ba      	ldr	r2, [r7, #24]
 8001348:	4013      	ands	r3, r2
 800134a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	689a      	ldr	r2, [r3, #8]
 8001350:	69fb      	ldr	r3, [r7, #28]
 8001352:	005b      	lsls	r3, r3, #1
 8001354:	fa02 f303 	lsl.w	r3, r2, r3
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	4313      	orrs	r3, r2
 800135c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	69ba      	ldr	r2, [r7, #24]
 8001362:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800136c:	2b00      	cmp	r3, #0
 800136e:	f000 80be 	beq.w	80014ee <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001372:	4b66      	ldr	r3, [pc, #408]	; (800150c <HAL_GPIO_Init+0x324>)
 8001374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001376:	4a65      	ldr	r2, [pc, #404]	; (800150c <HAL_GPIO_Init+0x324>)
 8001378:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800137c:	6453      	str	r3, [r2, #68]	; 0x44
 800137e:	4b63      	ldr	r3, [pc, #396]	; (800150c <HAL_GPIO_Init+0x324>)
 8001380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001382:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001386:	60fb      	str	r3, [r7, #12]
 8001388:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800138a:	4a61      	ldr	r2, [pc, #388]	; (8001510 <HAL_GPIO_Init+0x328>)
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	089b      	lsrs	r3, r3, #2
 8001390:	3302      	adds	r3, #2
 8001392:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001396:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	f003 0303 	and.w	r3, r3, #3
 800139e:	009b      	lsls	r3, r3, #2
 80013a0:	220f      	movs	r2, #15
 80013a2:	fa02 f303 	lsl.w	r3, r2, r3
 80013a6:	43db      	mvns	r3, r3
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	4013      	ands	r3, r2
 80013ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4a58      	ldr	r2, [pc, #352]	; (8001514 <HAL_GPIO_Init+0x32c>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d037      	beq.n	8001426 <HAL_GPIO_Init+0x23e>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4a57      	ldr	r2, [pc, #348]	; (8001518 <HAL_GPIO_Init+0x330>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d031      	beq.n	8001422 <HAL_GPIO_Init+0x23a>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4a56      	ldr	r2, [pc, #344]	; (800151c <HAL_GPIO_Init+0x334>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d02b      	beq.n	800141e <HAL_GPIO_Init+0x236>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4a55      	ldr	r2, [pc, #340]	; (8001520 <HAL_GPIO_Init+0x338>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d025      	beq.n	800141a <HAL_GPIO_Init+0x232>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4a54      	ldr	r2, [pc, #336]	; (8001524 <HAL_GPIO_Init+0x33c>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d01f      	beq.n	8001416 <HAL_GPIO_Init+0x22e>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4a53      	ldr	r2, [pc, #332]	; (8001528 <HAL_GPIO_Init+0x340>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d019      	beq.n	8001412 <HAL_GPIO_Init+0x22a>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4a52      	ldr	r2, [pc, #328]	; (800152c <HAL_GPIO_Init+0x344>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d013      	beq.n	800140e <HAL_GPIO_Init+0x226>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4a51      	ldr	r2, [pc, #324]	; (8001530 <HAL_GPIO_Init+0x348>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d00d      	beq.n	800140a <HAL_GPIO_Init+0x222>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4a50      	ldr	r2, [pc, #320]	; (8001534 <HAL_GPIO_Init+0x34c>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d007      	beq.n	8001406 <HAL_GPIO_Init+0x21e>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4a4f      	ldr	r2, [pc, #316]	; (8001538 <HAL_GPIO_Init+0x350>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d101      	bne.n	8001402 <HAL_GPIO_Init+0x21a>
 80013fe:	2309      	movs	r3, #9
 8001400:	e012      	b.n	8001428 <HAL_GPIO_Init+0x240>
 8001402:	230a      	movs	r3, #10
 8001404:	e010      	b.n	8001428 <HAL_GPIO_Init+0x240>
 8001406:	2308      	movs	r3, #8
 8001408:	e00e      	b.n	8001428 <HAL_GPIO_Init+0x240>
 800140a:	2307      	movs	r3, #7
 800140c:	e00c      	b.n	8001428 <HAL_GPIO_Init+0x240>
 800140e:	2306      	movs	r3, #6
 8001410:	e00a      	b.n	8001428 <HAL_GPIO_Init+0x240>
 8001412:	2305      	movs	r3, #5
 8001414:	e008      	b.n	8001428 <HAL_GPIO_Init+0x240>
 8001416:	2304      	movs	r3, #4
 8001418:	e006      	b.n	8001428 <HAL_GPIO_Init+0x240>
 800141a:	2303      	movs	r3, #3
 800141c:	e004      	b.n	8001428 <HAL_GPIO_Init+0x240>
 800141e:	2302      	movs	r3, #2
 8001420:	e002      	b.n	8001428 <HAL_GPIO_Init+0x240>
 8001422:	2301      	movs	r3, #1
 8001424:	e000      	b.n	8001428 <HAL_GPIO_Init+0x240>
 8001426:	2300      	movs	r3, #0
 8001428:	69fa      	ldr	r2, [r7, #28]
 800142a:	f002 0203 	and.w	r2, r2, #3
 800142e:	0092      	lsls	r2, r2, #2
 8001430:	4093      	lsls	r3, r2
 8001432:	69ba      	ldr	r2, [r7, #24]
 8001434:	4313      	orrs	r3, r2
 8001436:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001438:	4935      	ldr	r1, [pc, #212]	; (8001510 <HAL_GPIO_Init+0x328>)
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	089b      	lsrs	r3, r3, #2
 800143e:	3302      	adds	r3, #2
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001446:	4b3d      	ldr	r3, [pc, #244]	; (800153c <HAL_GPIO_Init+0x354>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	43db      	mvns	r3, r3
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	4013      	ands	r3, r2
 8001454:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800145e:	2b00      	cmp	r3, #0
 8001460:	d003      	beq.n	800146a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001462:	69ba      	ldr	r2, [r7, #24]
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	4313      	orrs	r3, r2
 8001468:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800146a:	4a34      	ldr	r2, [pc, #208]	; (800153c <HAL_GPIO_Init+0x354>)
 800146c:	69bb      	ldr	r3, [r7, #24]
 800146e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001470:	4b32      	ldr	r3, [pc, #200]	; (800153c <HAL_GPIO_Init+0x354>)
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	43db      	mvns	r3, r3
 800147a:	69ba      	ldr	r2, [r7, #24]
 800147c:	4013      	ands	r3, r2
 800147e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001488:	2b00      	cmp	r3, #0
 800148a:	d003      	beq.n	8001494 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800148c:	69ba      	ldr	r2, [r7, #24]
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	4313      	orrs	r3, r2
 8001492:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001494:	4a29      	ldr	r2, [pc, #164]	; (800153c <HAL_GPIO_Init+0x354>)
 8001496:	69bb      	ldr	r3, [r7, #24]
 8001498:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800149a:	4b28      	ldr	r3, [pc, #160]	; (800153c <HAL_GPIO_Init+0x354>)
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	43db      	mvns	r3, r3
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	4013      	ands	r3, r2
 80014a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d003      	beq.n	80014be <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80014b6:	69ba      	ldr	r2, [r7, #24]
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	4313      	orrs	r3, r2
 80014bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014be:	4a1f      	ldr	r2, [pc, #124]	; (800153c <HAL_GPIO_Init+0x354>)
 80014c0:	69bb      	ldr	r3, [r7, #24]
 80014c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014c4:	4b1d      	ldr	r3, [pc, #116]	; (800153c <HAL_GPIO_Init+0x354>)
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	43db      	mvns	r3, r3
 80014ce:	69ba      	ldr	r2, [r7, #24]
 80014d0:	4013      	ands	r3, r2
 80014d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d003      	beq.n	80014e8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80014e0:	69ba      	ldr	r2, [r7, #24]
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	4313      	orrs	r3, r2
 80014e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014e8:	4a14      	ldr	r2, [pc, #80]	; (800153c <HAL_GPIO_Init+0x354>)
 80014ea:	69bb      	ldr	r3, [r7, #24]
 80014ec:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	3301      	adds	r3, #1
 80014f2:	61fb      	str	r3, [r7, #28]
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	2b0f      	cmp	r3, #15
 80014f8:	f67f ae86 	bls.w	8001208 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80014fc:	bf00      	nop
 80014fe:	bf00      	nop
 8001500:	3724      	adds	r7, #36	; 0x24
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	40023800 	.word	0x40023800
 8001510:	40013800 	.word	0x40013800
 8001514:	40020000 	.word	0x40020000
 8001518:	40020400 	.word	0x40020400
 800151c:	40020800 	.word	0x40020800
 8001520:	40020c00 	.word	0x40020c00
 8001524:	40021000 	.word	0x40021000
 8001528:	40021400 	.word	0x40021400
 800152c:	40021800 	.word	0x40021800
 8001530:	40021c00 	.word	0x40021c00
 8001534:	40022000 	.word	0x40022000
 8001538:	40022400 	.word	0x40022400
 800153c:	40013c00 	.word	0x40013c00

08001540 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	460b      	mov	r3, r1
 800154a:	807b      	strh	r3, [r7, #2]
 800154c:	4613      	mov	r3, r2
 800154e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001550:	787b      	ldrb	r3, [r7, #1]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d003      	beq.n	800155e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001556:	887a      	ldrh	r2, [r7, #2]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800155c:	e003      	b.n	8001566 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800155e:	887b      	ldrh	r3, [r7, #2]
 8001560:	041a      	lsls	r2, r3, #16
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	619a      	str	r2, [r3, #24]
}
 8001566:	bf00      	nop
 8001568:	370c      	adds	r7, #12
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr

08001572 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001572:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001574:	b08f      	sub	sp, #60	; 0x3c
 8001576:	af0a      	add	r7, sp, #40	; 0x28
 8001578:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d101      	bne.n	8001584 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001580:	2301      	movs	r3, #1
 8001582:	e10a      	b.n	800179a <HAL_PCD_Init+0x228>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800158a:	b2db      	uxtb	r3, r3
 800158c:	2b00      	cmp	r3, #0
 800158e:	d106      	bne.n	800159e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2200      	movs	r2, #0
 8001594:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001598:	6878      	ldr	r0, [r7, #4]
 800159a:	f003 f8b3 	bl	8004704 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2203      	movs	r2, #3
 80015a2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4618      	mov	r0, r3
 80015ac:	f002 f946 	bl	800383c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	603b      	str	r3, [r7, #0]
 80015b6:	687e      	ldr	r6, [r7, #4]
 80015b8:	466d      	mov	r5, sp
 80015ba:	f106 0410 	add.w	r4, r6, #16
 80015be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015c6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80015ca:	e885 0003 	stmia.w	r5, {r0, r1}
 80015ce:	1d33      	adds	r3, r6, #4
 80015d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015d2:	6838      	ldr	r0, [r7, #0]
 80015d4:	f002 f8da 	bl	800378c <USB_CoreInit>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d005      	beq.n	80015ea <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2202      	movs	r2, #2
 80015e2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e0d7      	b.n	800179a <HAL_PCD_Init+0x228>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	2100      	movs	r1, #0
 80015f0:	4618      	mov	r0, r3
 80015f2:	f002 f934 	bl	800385e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015f6:	2300      	movs	r3, #0
 80015f8:	73fb      	strb	r3, [r7, #15]
 80015fa:	e04a      	b.n	8001692 <HAL_PCD_Init+0x120>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80015fc:	7bfa      	ldrb	r2, [r7, #15]
 80015fe:	6879      	ldr	r1, [r7, #4]
 8001600:	4613      	mov	r3, r2
 8001602:	00db      	lsls	r3, r3, #3
 8001604:	1a9b      	subs	r3, r3, r2
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	440b      	add	r3, r1
 800160a:	333d      	adds	r3, #61	; 0x3d
 800160c:	2201      	movs	r2, #1
 800160e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001610:	7bfa      	ldrb	r2, [r7, #15]
 8001612:	6879      	ldr	r1, [r7, #4]
 8001614:	4613      	mov	r3, r2
 8001616:	00db      	lsls	r3, r3, #3
 8001618:	1a9b      	subs	r3, r3, r2
 800161a:	009b      	lsls	r3, r3, #2
 800161c:	440b      	add	r3, r1
 800161e:	333c      	adds	r3, #60	; 0x3c
 8001620:	7bfa      	ldrb	r2, [r7, #15]
 8001622:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001624:	7bfa      	ldrb	r2, [r7, #15]
 8001626:	7bfb      	ldrb	r3, [r7, #15]
 8001628:	b298      	uxth	r0, r3
 800162a:	6879      	ldr	r1, [r7, #4]
 800162c:	4613      	mov	r3, r2
 800162e:	00db      	lsls	r3, r3, #3
 8001630:	1a9b      	subs	r3, r3, r2
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	440b      	add	r3, r1
 8001636:	3342      	adds	r3, #66	; 0x42
 8001638:	4602      	mov	r2, r0
 800163a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800163c:	7bfa      	ldrb	r2, [r7, #15]
 800163e:	6879      	ldr	r1, [r7, #4]
 8001640:	4613      	mov	r3, r2
 8001642:	00db      	lsls	r3, r3, #3
 8001644:	1a9b      	subs	r3, r3, r2
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	440b      	add	r3, r1
 800164a:	333f      	adds	r3, #63	; 0x3f
 800164c:	2200      	movs	r2, #0
 800164e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001650:	7bfa      	ldrb	r2, [r7, #15]
 8001652:	6879      	ldr	r1, [r7, #4]
 8001654:	4613      	mov	r3, r2
 8001656:	00db      	lsls	r3, r3, #3
 8001658:	1a9b      	subs	r3, r3, r2
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	440b      	add	r3, r1
 800165e:	3344      	adds	r3, #68	; 0x44
 8001660:	2200      	movs	r2, #0
 8001662:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001664:	7bfa      	ldrb	r2, [r7, #15]
 8001666:	6879      	ldr	r1, [r7, #4]
 8001668:	4613      	mov	r3, r2
 800166a:	00db      	lsls	r3, r3, #3
 800166c:	1a9b      	subs	r3, r3, r2
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	440b      	add	r3, r1
 8001672:	3348      	adds	r3, #72	; 0x48
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001678:	7bfa      	ldrb	r2, [r7, #15]
 800167a:	6879      	ldr	r1, [r7, #4]
 800167c:	4613      	mov	r3, r2
 800167e:	00db      	lsls	r3, r3, #3
 8001680:	1a9b      	subs	r3, r3, r2
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	440b      	add	r3, r1
 8001686:	3350      	adds	r3, #80	; 0x50
 8001688:	2200      	movs	r2, #0
 800168a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800168c:	7bfb      	ldrb	r3, [r7, #15]
 800168e:	3301      	adds	r3, #1
 8001690:	73fb      	strb	r3, [r7, #15]
 8001692:	7bfa      	ldrb	r2, [r7, #15]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	429a      	cmp	r2, r3
 800169a:	d3af      	bcc.n	80015fc <HAL_PCD_Init+0x8a>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800169c:	2300      	movs	r3, #0
 800169e:	73fb      	strb	r3, [r7, #15]
 80016a0:	e044      	b.n	800172c <HAL_PCD_Init+0x1ba>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80016a2:	7bfa      	ldrb	r2, [r7, #15]
 80016a4:	6879      	ldr	r1, [r7, #4]
 80016a6:	4613      	mov	r3, r2
 80016a8:	00db      	lsls	r3, r3, #3
 80016aa:	1a9b      	subs	r3, r3, r2
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	440b      	add	r3, r1
 80016b0:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80016b4:	2200      	movs	r2, #0
 80016b6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80016b8:	7bfa      	ldrb	r2, [r7, #15]
 80016ba:	6879      	ldr	r1, [r7, #4]
 80016bc:	4613      	mov	r3, r2
 80016be:	00db      	lsls	r3, r3, #3
 80016c0:	1a9b      	subs	r3, r3, r2
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	440b      	add	r3, r1
 80016c6:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80016ca:	7bfa      	ldrb	r2, [r7, #15]
 80016cc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80016ce:	7bfa      	ldrb	r2, [r7, #15]
 80016d0:	6879      	ldr	r1, [r7, #4]
 80016d2:	4613      	mov	r3, r2
 80016d4:	00db      	lsls	r3, r3, #3
 80016d6:	1a9b      	subs	r3, r3, r2
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	440b      	add	r3, r1
 80016dc:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80016e0:	2200      	movs	r2, #0
 80016e2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80016e4:	7bfa      	ldrb	r2, [r7, #15]
 80016e6:	6879      	ldr	r1, [r7, #4]
 80016e8:	4613      	mov	r3, r2
 80016ea:	00db      	lsls	r3, r3, #3
 80016ec:	1a9b      	subs	r3, r3, r2
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	440b      	add	r3, r1
 80016f2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80016f6:	2200      	movs	r2, #0
 80016f8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80016fa:	7bfa      	ldrb	r2, [r7, #15]
 80016fc:	6879      	ldr	r1, [r7, #4]
 80016fe:	4613      	mov	r3, r2
 8001700:	00db      	lsls	r3, r3, #3
 8001702:	1a9b      	subs	r3, r3, r2
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	440b      	add	r3, r1
 8001708:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001710:	7bfa      	ldrb	r2, [r7, #15]
 8001712:	6879      	ldr	r1, [r7, #4]
 8001714:	4613      	mov	r3, r2
 8001716:	00db      	lsls	r3, r3, #3
 8001718:	1a9b      	subs	r3, r3, r2
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	440b      	add	r3, r1
 800171e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001722:	2200      	movs	r2, #0
 8001724:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001726:	7bfb      	ldrb	r3, [r7, #15]
 8001728:	3301      	adds	r3, #1
 800172a:	73fb      	strb	r3, [r7, #15]
 800172c:	7bfa      	ldrb	r2, [r7, #15]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	429a      	cmp	r2, r3
 8001734:	d3b5      	bcc.n	80016a2 <HAL_PCD_Init+0x130>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	603b      	str	r3, [r7, #0]
 800173c:	687e      	ldr	r6, [r7, #4]
 800173e:	466d      	mov	r5, sp
 8001740:	f106 0410 	add.w	r4, r6, #16
 8001744:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001746:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001748:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800174a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800174c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001750:	e885 0003 	stmia.w	r5, {r0, r1}
 8001754:	1d33      	adds	r3, r6, #4
 8001756:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001758:	6838      	ldr	r0, [r7, #0]
 800175a:	f002 f8ab 	bl	80038b4 <USB_DevInit>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d005      	beq.n	8001770 <HAL_PCD_Init+0x1fe>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2202      	movs	r2, #2
 8001768:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800176c:	2301      	movs	r3, #1
 800176e:	e014      	b.n	800179a <HAL_PCD_Init+0x228>
  }

  hpcd->USB_Address = 0U;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2200      	movs	r2, #0
 8001774:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2201      	movs	r2, #1
 800177c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001784:	2b01      	cmp	r3, #1
 8001786:	d102      	bne.n	800178e <HAL_PCD_Init+0x21c>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	f000 f80b 	bl	80017a4 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4618      	mov	r0, r3
 8001794:	f002 fa6b 	bl	8003c6e <USB_DevDisconnect>

  return HAL_OK;
 8001798:	2300      	movs	r3, #0
}
 800179a:	4618      	mov	r0, r3
 800179c:	3714      	adds	r7, #20
 800179e:	46bd      	mov	sp, r7
 80017a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080017a4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b085      	sub	sp, #20
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2201      	movs	r2, #1
 80017b6:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2200      	movs	r2, #0
 80017be:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	699b      	ldr	r3, [r3, #24]
 80017c6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80017d2:	4b05      	ldr	r3, [pc, #20]	; (80017e8 <HAL_PCDEx_ActivateLPM+0x44>)
 80017d4:	4313      	orrs	r3, r2
 80017d6:	68fa      	ldr	r2, [r7, #12]
 80017d8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80017da:	2300      	movs	r3, #0
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3714      	adds	r7, #20
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr
 80017e8:	10000003 	.word	0x10000003

080017ec <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80017f0:	4b05      	ldr	r3, [pc, #20]	; (8001808 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a04      	ldr	r2, [pc, #16]	; (8001808 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80017f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017fa:	6013      	str	r3, [r2, #0]
}
 80017fc:	bf00      	nop
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	40007000 	.word	0x40007000

0800180c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b086      	sub	sp, #24
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8001814:	2300      	movs	r3, #0
 8001816:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d101      	bne.n	8001822 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e25c      	b.n	8001cdc <HAL_RCC_OscConfig+0x4d0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0301 	and.w	r3, r3, #1
 800182a:	2b00      	cmp	r3, #0
 800182c:	f000 8087 	beq.w	800193e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001830:	4b96      	ldr	r3, [pc, #600]	; (8001a8c <HAL_RCC_OscConfig+0x280>)
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	f003 030c 	and.w	r3, r3, #12
 8001838:	2b04      	cmp	r3, #4
 800183a:	d00c      	beq.n	8001856 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800183c:	4b93      	ldr	r3, [pc, #588]	; (8001a8c <HAL_RCC_OscConfig+0x280>)
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	f003 030c 	and.w	r3, r3, #12
 8001844:	2b08      	cmp	r3, #8
 8001846:	d112      	bne.n	800186e <HAL_RCC_OscConfig+0x62>
 8001848:	4b90      	ldr	r3, [pc, #576]	; (8001a8c <HAL_RCC_OscConfig+0x280>)
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001850:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001854:	d10b      	bne.n	800186e <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001856:	4b8d      	ldr	r3, [pc, #564]	; (8001a8c <HAL_RCC_OscConfig+0x280>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800185e:	2b00      	cmp	r3, #0
 8001860:	d06c      	beq.n	800193c <HAL_RCC_OscConfig+0x130>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d168      	bne.n	800193c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e236      	b.n	8001cdc <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001876:	d106      	bne.n	8001886 <HAL_RCC_OscConfig+0x7a>
 8001878:	4b84      	ldr	r3, [pc, #528]	; (8001a8c <HAL_RCC_OscConfig+0x280>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a83      	ldr	r2, [pc, #524]	; (8001a8c <HAL_RCC_OscConfig+0x280>)
 800187e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001882:	6013      	str	r3, [r2, #0]
 8001884:	e02e      	b.n	80018e4 <HAL_RCC_OscConfig+0xd8>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d10c      	bne.n	80018a8 <HAL_RCC_OscConfig+0x9c>
 800188e:	4b7f      	ldr	r3, [pc, #508]	; (8001a8c <HAL_RCC_OscConfig+0x280>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a7e      	ldr	r2, [pc, #504]	; (8001a8c <HAL_RCC_OscConfig+0x280>)
 8001894:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001898:	6013      	str	r3, [r2, #0]
 800189a:	4b7c      	ldr	r3, [pc, #496]	; (8001a8c <HAL_RCC_OscConfig+0x280>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a7b      	ldr	r2, [pc, #492]	; (8001a8c <HAL_RCC_OscConfig+0x280>)
 80018a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018a4:	6013      	str	r3, [r2, #0]
 80018a6:	e01d      	b.n	80018e4 <HAL_RCC_OscConfig+0xd8>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018b0:	d10c      	bne.n	80018cc <HAL_RCC_OscConfig+0xc0>
 80018b2:	4b76      	ldr	r3, [pc, #472]	; (8001a8c <HAL_RCC_OscConfig+0x280>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a75      	ldr	r2, [pc, #468]	; (8001a8c <HAL_RCC_OscConfig+0x280>)
 80018b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018bc:	6013      	str	r3, [r2, #0]
 80018be:	4b73      	ldr	r3, [pc, #460]	; (8001a8c <HAL_RCC_OscConfig+0x280>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a72      	ldr	r2, [pc, #456]	; (8001a8c <HAL_RCC_OscConfig+0x280>)
 80018c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018c8:	6013      	str	r3, [r2, #0]
 80018ca:	e00b      	b.n	80018e4 <HAL_RCC_OscConfig+0xd8>
 80018cc:	4b6f      	ldr	r3, [pc, #444]	; (8001a8c <HAL_RCC_OscConfig+0x280>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a6e      	ldr	r2, [pc, #440]	; (8001a8c <HAL_RCC_OscConfig+0x280>)
 80018d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018d6:	6013      	str	r3, [r2, #0]
 80018d8:	4b6c      	ldr	r3, [pc, #432]	; (8001a8c <HAL_RCC_OscConfig+0x280>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a6b      	ldr	r2, [pc, #428]	; (8001a8c <HAL_RCC_OscConfig+0x280>)
 80018de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d013      	beq.n	8001914 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ec:	f7fe feae 	bl	800064c <HAL_GetTick>
 80018f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018f2:	e008      	b.n	8001906 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018f4:	f7fe feaa 	bl	800064c <HAL_GetTick>
 80018f8:	4602      	mov	r2, r0
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	2b64      	cmp	r3, #100	; 0x64
 8001900:	d901      	bls.n	8001906 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001902:	2303      	movs	r3, #3
 8001904:	e1ea      	b.n	8001cdc <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001906:	4b61      	ldr	r3, [pc, #388]	; (8001a8c <HAL_RCC_OscConfig+0x280>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d0f0      	beq.n	80018f4 <HAL_RCC_OscConfig+0xe8>
 8001912:	e014      	b.n	800193e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001914:	f7fe fe9a 	bl	800064c <HAL_GetTick>
 8001918:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800191a:	e008      	b.n	800192e <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800191c:	f7fe fe96 	bl	800064c <HAL_GetTick>
 8001920:	4602      	mov	r2, r0
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	2b64      	cmp	r3, #100	; 0x64
 8001928:	d901      	bls.n	800192e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800192a:	2303      	movs	r3, #3
 800192c:	e1d6      	b.n	8001cdc <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800192e:	4b57      	ldr	r3, [pc, #348]	; (8001a8c <HAL_RCC_OscConfig+0x280>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001936:	2b00      	cmp	r3, #0
 8001938:	d1f0      	bne.n	800191c <HAL_RCC_OscConfig+0x110>
 800193a:	e000      	b.n	800193e <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800193c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 0302 	and.w	r3, r3, #2
 8001946:	2b00      	cmp	r3, #0
 8001948:	d069      	beq.n	8001a1e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800194a:	4b50      	ldr	r3, [pc, #320]	; (8001a8c <HAL_RCC_OscConfig+0x280>)
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	f003 030c 	and.w	r3, r3, #12
 8001952:	2b00      	cmp	r3, #0
 8001954:	d00b      	beq.n	800196e <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001956:	4b4d      	ldr	r3, [pc, #308]	; (8001a8c <HAL_RCC_OscConfig+0x280>)
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	f003 030c 	and.w	r3, r3, #12
 800195e:	2b08      	cmp	r3, #8
 8001960:	d11c      	bne.n	800199c <HAL_RCC_OscConfig+0x190>
 8001962:	4b4a      	ldr	r3, [pc, #296]	; (8001a8c <HAL_RCC_OscConfig+0x280>)
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d116      	bne.n	800199c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800196e:	4b47      	ldr	r3, [pc, #284]	; (8001a8c <HAL_RCC_OscConfig+0x280>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 0302 	and.w	r3, r3, #2
 8001976:	2b00      	cmp	r3, #0
 8001978:	d005      	beq.n	8001986 <HAL_RCC_OscConfig+0x17a>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	68db      	ldr	r3, [r3, #12]
 800197e:	2b01      	cmp	r3, #1
 8001980:	d001      	beq.n	8001986 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e1aa      	b.n	8001cdc <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001986:	4b41      	ldr	r3, [pc, #260]	; (8001a8c <HAL_RCC_OscConfig+0x280>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	691b      	ldr	r3, [r3, #16]
 8001992:	00db      	lsls	r3, r3, #3
 8001994:	493d      	ldr	r1, [pc, #244]	; (8001a8c <HAL_RCC_OscConfig+0x280>)
 8001996:	4313      	orrs	r3, r2
 8001998:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800199a:	e040      	b.n	8001a1e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d023      	beq.n	80019ec <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019a4:	4b39      	ldr	r3, [pc, #228]	; (8001a8c <HAL_RCC_OscConfig+0x280>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a38      	ldr	r2, [pc, #224]	; (8001a8c <HAL_RCC_OscConfig+0x280>)
 80019aa:	f043 0301 	orr.w	r3, r3, #1
 80019ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019b0:	f7fe fe4c 	bl	800064c <HAL_GetTick>
 80019b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019b6:	e008      	b.n	80019ca <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019b8:	f7fe fe48 	bl	800064c <HAL_GetTick>
 80019bc:	4602      	mov	r2, r0
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	2b02      	cmp	r3, #2
 80019c4:	d901      	bls.n	80019ca <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80019c6:	2303      	movs	r3, #3
 80019c8:	e188      	b.n	8001cdc <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019ca:	4b30      	ldr	r3, [pc, #192]	; (8001a8c <HAL_RCC_OscConfig+0x280>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 0302 	and.w	r3, r3, #2
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d0f0      	beq.n	80019b8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019d6:	4b2d      	ldr	r3, [pc, #180]	; (8001a8c <HAL_RCC_OscConfig+0x280>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	691b      	ldr	r3, [r3, #16]
 80019e2:	00db      	lsls	r3, r3, #3
 80019e4:	4929      	ldr	r1, [pc, #164]	; (8001a8c <HAL_RCC_OscConfig+0x280>)
 80019e6:	4313      	orrs	r3, r2
 80019e8:	600b      	str	r3, [r1, #0]
 80019ea:	e018      	b.n	8001a1e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019ec:	4b27      	ldr	r3, [pc, #156]	; (8001a8c <HAL_RCC_OscConfig+0x280>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a26      	ldr	r2, [pc, #152]	; (8001a8c <HAL_RCC_OscConfig+0x280>)
 80019f2:	f023 0301 	bic.w	r3, r3, #1
 80019f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019f8:	f7fe fe28 	bl	800064c <HAL_GetTick>
 80019fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019fe:	e008      	b.n	8001a12 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a00:	f7fe fe24 	bl	800064c <HAL_GetTick>
 8001a04:	4602      	mov	r2, r0
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	2b02      	cmp	r3, #2
 8001a0c:	d901      	bls.n	8001a12 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	e164      	b.n	8001cdc <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a12:	4b1e      	ldr	r3, [pc, #120]	; (8001a8c <HAL_RCC_OscConfig+0x280>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 0302 	and.w	r3, r3, #2
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d1f0      	bne.n	8001a00 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 0308 	and.w	r3, r3, #8
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d038      	beq.n	8001a9c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	695b      	ldr	r3, [r3, #20]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d019      	beq.n	8001a66 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a32:	4b16      	ldr	r3, [pc, #88]	; (8001a8c <HAL_RCC_OscConfig+0x280>)
 8001a34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a36:	4a15      	ldr	r2, [pc, #84]	; (8001a8c <HAL_RCC_OscConfig+0x280>)
 8001a38:	f043 0301 	orr.w	r3, r3, #1
 8001a3c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a3e:	f7fe fe05 	bl	800064c <HAL_GetTick>
 8001a42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a44:	e008      	b.n	8001a58 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a46:	f7fe fe01 	bl	800064c <HAL_GetTick>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	1ad3      	subs	r3, r2, r3
 8001a50:	2b02      	cmp	r3, #2
 8001a52:	d901      	bls.n	8001a58 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001a54:	2303      	movs	r3, #3
 8001a56:	e141      	b.n	8001cdc <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a58:	4b0c      	ldr	r3, [pc, #48]	; (8001a8c <HAL_RCC_OscConfig+0x280>)
 8001a5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a5c:	f003 0302 	and.w	r3, r3, #2
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d0f0      	beq.n	8001a46 <HAL_RCC_OscConfig+0x23a>
 8001a64:	e01a      	b.n	8001a9c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a66:	4b09      	ldr	r3, [pc, #36]	; (8001a8c <HAL_RCC_OscConfig+0x280>)
 8001a68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a6a:	4a08      	ldr	r2, [pc, #32]	; (8001a8c <HAL_RCC_OscConfig+0x280>)
 8001a6c:	f023 0301 	bic.w	r3, r3, #1
 8001a70:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a72:	f7fe fdeb 	bl	800064c <HAL_GetTick>
 8001a76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a78:	e00a      	b.n	8001a90 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a7a:	f7fe fde7 	bl	800064c <HAL_GetTick>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	2b02      	cmp	r3, #2
 8001a86:	d903      	bls.n	8001a90 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001a88:	2303      	movs	r3, #3
 8001a8a:	e127      	b.n	8001cdc <HAL_RCC_OscConfig+0x4d0>
 8001a8c:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a90:	4b94      	ldr	r3, [pc, #592]	; (8001ce4 <HAL_RCC_OscConfig+0x4d8>)
 8001a92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a94:	f003 0302 	and.w	r3, r3, #2
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d1ee      	bne.n	8001a7a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 0304 	and.w	r3, r3, #4
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	f000 80a4 	beq.w	8001bf2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001aaa:	4b8e      	ldr	r3, [pc, #568]	; (8001ce4 <HAL_RCC_OscConfig+0x4d8>)
 8001aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d10d      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ab6:	4b8b      	ldr	r3, [pc, #556]	; (8001ce4 <HAL_RCC_OscConfig+0x4d8>)
 8001ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aba:	4a8a      	ldr	r2, [pc, #552]	; (8001ce4 <HAL_RCC_OscConfig+0x4d8>)
 8001abc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ac0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ac2:	4b88      	ldr	r3, [pc, #544]	; (8001ce4 <HAL_RCC_OscConfig+0x4d8>)
 8001ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aca:	60fb      	str	r3, [r7, #12]
 8001acc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ad2:	4b85      	ldr	r3, [pc, #532]	; (8001ce8 <HAL_RCC_OscConfig+0x4dc>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d118      	bne.n	8001b10 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001ade:	4b82      	ldr	r3, [pc, #520]	; (8001ce8 <HAL_RCC_OscConfig+0x4dc>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a81      	ldr	r2, [pc, #516]	; (8001ce8 <HAL_RCC_OscConfig+0x4dc>)
 8001ae4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ae8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001aea:	f7fe fdaf 	bl	800064c <HAL_GetTick>
 8001aee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001af0:	e008      	b.n	8001b04 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001af2:	f7fe fdab 	bl	800064c <HAL_GetTick>
 8001af6:	4602      	mov	r2, r0
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	1ad3      	subs	r3, r2, r3
 8001afc:	2b64      	cmp	r3, #100	; 0x64
 8001afe:	d901      	bls.n	8001b04 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001b00:	2303      	movs	r3, #3
 8001b02:	e0eb      	b.n	8001cdc <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b04:	4b78      	ldr	r3, [pc, #480]	; (8001ce8 <HAL_RCC_OscConfig+0x4dc>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d0f0      	beq.n	8001af2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d106      	bne.n	8001b26 <HAL_RCC_OscConfig+0x31a>
 8001b18:	4b72      	ldr	r3, [pc, #456]	; (8001ce4 <HAL_RCC_OscConfig+0x4d8>)
 8001b1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b1c:	4a71      	ldr	r2, [pc, #452]	; (8001ce4 <HAL_RCC_OscConfig+0x4d8>)
 8001b1e:	f043 0301 	orr.w	r3, r3, #1
 8001b22:	6713      	str	r3, [r2, #112]	; 0x70
 8001b24:	e02d      	b.n	8001b82 <HAL_RCC_OscConfig+0x376>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d10c      	bne.n	8001b48 <HAL_RCC_OscConfig+0x33c>
 8001b2e:	4b6d      	ldr	r3, [pc, #436]	; (8001ce4 <HAL_RCC_OscConfig+0x4d8>)
 8001b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b32:	4a6c      	ldr	r2, [pc, #432]	; (8001ce4 <HAL_RCC_OscConfig+0x4d8>)
 8001b34:	f023 0301 	bic.w	r3, r3, #1
 8001b38:	6713      	str	r3, [r2, #112]	; 0x70
 8001b3a:	4b6a      	ldr	r3, [pc, #424]	; (8001ce4 <HAL_RCC_OscConfig+0x4d8>)
 8001b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b3e:	4a69      	ldr	r2, [pc, #420]	; (8001ce4 <HAL_RCC_OscConfig+0x4d8>)
 8001b40:	f023 0304 	bic.w	r3, r3, #4
 8001b44:	6713      	str	r3, [r2, #112]	; 0x70
 8001b46:	e01c      	b.n	8001b82 <HAL_RCC_OscConfig+0x376>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	2b05      	cmp	r3, #5
 8001b4e:	d10c      	bne.n	8001b6a <HAL_RCC_OscConfig+0x35e>
 8001b50:	4b64      	ldr	r3, [pc, #400]	; (8001ce4 <HAL_RCC_OscConfig+0x4d8>)
 8001b52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b54:	4a63      	ldr	r2, [pc, #396]	; (8001ce4 <HAL_RCC_OscConfig+0x4d8>)
 8001b56:	f043 0304 	orr.w	r3, r3, #4
 8001b5a:	6713      	str	r3, [r2, #112]	; 0x70
 8001b5c:	4b61      	ldr	r3, [pc, #388]	; (8001ce4 <HAL_RCC_OscConfig+0x4d8>)
 8001b5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b60:	4a60      	ldr	r2, [pc, #384]	; (8001ce4 <HAL_RCC_OscConfig+0x4d8>)
 8001b62:	f043 0301 	orr.w	r3, r3, #1
 8001b66:	6713      	str	r3, [r2, #112]	; 0x70
 8001b68:	e00b      	b.n	8001b82 <HAL_RCC_OscConfig+0x376>
 8001b6a:	4b5e      	ldr	r3, [pc, #376]	; (8001ce4 <HAL_RCC_OscConfig+0x4d8>)
 8001b6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b6e:	4a5d      	ldr	r2, [pc, #372]	; (8001ce4 <HAL_RCC_OscConfig+0x4d8>)
 8001b70:	f023 0301 	bic.w	r3, r3, #1
 8001b74:	6713      	str	r3, [r2, #112]	; 0x70
 8001b76:	4b5b      	ldr	r3, [pc, #364]	; (8001ce4 <HAL_RCC_OscConfig+0x4d8>)
 8001b78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b7a:	4a5a      	ldr	r2, [pc, #360]	; (8001ce4 <HAL_RCC_OscConfig+0x4d8>)
 8001b7c:	f023 0304 	bic.w	r3, r3, #4
 8001b80:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d015      	beq.n	8001bb6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b8a:	f7fe fd5f 	bl	800064c <HAL_GetTick>
 8001b8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b90:	e00a      	b.n	8001ba8 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b92:	f7fe fd5b 	bl	800064c <HAL_GetTick>
 8001b96:	4602      	mov	r2, r0
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	1ad3      	subs	r3, r2, r3
 8001b9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d901      	bls.n	8001ba8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	e099      	b.n	8001cdc <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ba8:	4b4e      	ldr	r3, [pc, #312]	; (8001ce4 <HAL_RCC_OscConfig+0x4d8>)
 8001baa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bac:	f003 0302 	and.w	r3, r3, #2
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d0ee      	beq.n	8001b92 <HAL_RCC_OscConfig+0x386>
 8001bb4:	e014      	b.n	8001be0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bb6:	f7fe fd49 	bl	800064c <HAL_GetTick>
 8001bba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bbc:	e00a      	b.n	8001bd4 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bbe:	f7fe fd45 	bl	800064c <HAL_GetTick>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	1ad3      	subs	r3, r2, r3
 8001bc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d901      	bls.n	8001bd4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	e083      	b.n	8001cdc <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bd4:	4b43      	ldr	r3, [pc, #268]	; (8001ce4 <HAL_RCC_OscConfig+0x4d8>)
 8001bd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bd8:	f003 0302 	and.w	r3, r3, #2
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d1ee      	bne.n	8001bbe <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001be0:	7dfb      	ldrb	r3, [r7, #23]
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d105      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001be6:	4b3f      	ldr	r3, [pc, #252]	; (8001ce4 <HAL_RCC_OscConfig+0x4d8>)
 8001be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bea:	4a3e      	ldr	r2, [pc, #248]	; (8001ce4 <HAL_RCC_OscConfig+0x4d8>)
 8001bec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bf0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	699b      	ldr	r3, [r3, #24]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d06f      	beq.n	8001cda <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bfa:	4b3a      	ldr	r3, [pc, #232]	; (8001ce4 <HAL_RCC_OscConfig+0x4d8>)
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	f003 030c 	and.w	r3, r3, #12
 8001c02:	2b08      	cmp	r3, #8
 8001c04:	d067      	beq.n	8001cd6 <HAL_RCC_OscConfig+0x4ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	699b      	ldr	r3, [r3, #24]
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d149      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x496>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c0e:	4b35      	ldr	r3, [pc, #212]	; (8001ce4 <HAL_RCC_OscConfig+0x4d8>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a34      	ldr	r2, [pc, #208]	; (8001ce4 <HAL_RCC_OscConfig+0x4d8>)
 8001c14:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c1a:	f7fe fd17 	bl	800064c <HAL_GetTick>
 8001c1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c20:	e008      	b.n	8001c34 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c22:	f7fe fd13 	bl	800064c <HAL_GetTick>
 8001c26:	4602      	mov	r2, r0
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	1ad3      	subs	r3, r2, r3
 8001c2c:	2b02      	cmp	r3, #2
 8001c2e:	d901      	bls.n	8001c34 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001c30:	2303      	movs	r3, #3
 8001c32:	e053      	b.n	8001cdc <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c34:	4b2b      	ldr	r3, [pc, #172]	; (8001ce4 <HAL_RCC_OscConfig+0x4d8>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d1f0      	bne.n	8001c22 <HAL_RCC_OscConfig+0x416>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	69da      	ldr	r2, [r3, #28]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6a1b      	ldr	r3, [r3, #32]
 8001c48:	431a      	orrs	r2, r3
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c4e:	019b      	lsls	r3, r3, #6
 8001c50:	431a      	orrs	r2, r3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c56:	085b      	lsrs	r3, r3, #1
 8001c58:	3b01      	subs	r3, #1
 8001c5a:	041b      	lsls	r3, r3, #16
 8001c5c:	431a      	orrs	r2, r3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c62:	061b      	lsls	r3, r3, #24
 8001c64:	4313      	orrs	r3, r2
 8001c66:	4a1f      	ldr	r2, [pc, #124]	; (8001ce4 <HAL_RCC_OscConfig+0x4d8>)
 8001c68:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001c6c:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c6e:	4b1d      	ldr	r3, [pc, #116]	; (8001ce4 <HAL_RCC_OscConfig+0x4d8>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a1c      	ldr	r2, [pc, #112]	; (8001ce4 <HAL_RCC_OscConfig+0x4d8>)
 8001c74:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c7a:	f7fe fce7 	bl	800064c <HAL_GetTick>
 8001c7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c80:	e008      	b.n	8001c94 <HAL_RCC_OscConfig+0x488>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c82:	f7fe fce3 	bl	800064c <HAL_GetTick>
 8001c86:	4602      	mov	r2, r0
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	1ad3      	subs	r3, r2, r3
 8001c8c:	2b02      	cmp	r3, #2
 8001c8e:	d901      	bls.n	8001c94 <HAL_RCC_OscConfig+0x488>
          {
            return HAL_TIMEOUT;
 8001c90:	2303      	movs	r3, #3
 8001c92:	e023      	b.n	8001cdc <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c94:	4b13      	ldr	r3, [pc, #76]	; (8001ce4 <HAL_RCC_OscConfig+0x4d8>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d0f0      	beq.n	8001c82 <HAL_RCC_OscConfig+0x476>
 8001ca0:	e01b      	b.n	8001cda <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ca2:	4b10      	ldr	r3, [pc, #64]	; (8001ce4 <HAL_RCC_OscConfig+0x4d8>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a0f      	ldr	r2, [pc, #60]	; (8001ce4 <HAL_RCC_OscConfig+0x4d8>)
 8001ca8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001cac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cae:	f7fe fccd 	bl	800064c <HAL_GetTick>
 8001cb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cb4:	e008      	b.n	8001cc8 <HAL_RCC_OscConfig+0x4bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cb6:	f7fe fcc9 	bl	800064c <HAL_GetTick>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	1ad3      	subs	r3, r2, r3
 8001cc0:	2b02      	cmp	r3, #2
 8001cc2:	d901      	bls.n	8001cc8 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	e009      	b.n	8001cdc <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cc8:	4b06      	ldr	r3, [pc, #24]	; (8001ce4 <HAL_RCC_OscConfig+0x4d8>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d1f0      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x4aa>
 8001cd4:	e001      	b.n	8001cda <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e000      	b.n	8001cdc <HAL_RCC_OscConfig+0x4d0>
    }
  }
  return HAL_OK;
 8001cda:	2300      	movs	r3, #0
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3718      	adds	r7, #24
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	40023800 	.word	0x40023800
 8001ce8:	40007000 	.word	0x40007000

08001cec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b084      	sub	sp, #16
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d101      	bne.n	8001d04 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e0ce      	b.n	8001ea2 <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d04:	4b69      	ldr	r3, [pc, #420]	; (8001eac <HAL_RCC_ClockConfig+0x1c0>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 030f 	and.w	r3, r3, #15
 8001d0c:	683a      	ldr	r2, [r7, #0]
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d910      	bls.n	8001d34 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d12:	4b66      	ldr	r3, [pc, #408]	; (8001eac <HAL_RCC_ClockConfig+0x1c0>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f023 020f 	bic.w	r2, r3, #15
 8001d1a:	4964      	ldr	r1, [pc, #400]	; (8001eac <HAL_RCC_ClockConfig+0x1c0>)
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d22:	4b62      	ldr	r3, [pc, #392]	; (8001eac <HAL_RCC_ClockConfig+0x1c0>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 030f 	and.w	r3, r3, #15
 8001d2a:	683a      	ldr	r2, [r7, #0]
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d001      	beq.n	8001d34 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e0b6      	b.n	8001ea2 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 0302 	and.w	r3, r3, #2
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d020      	beq.n	8001d82 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 0304 	and.w	r3, r3, #4
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d005      	beq.n	8001d58 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d4c:	4b58      	ldr	r3, [pc, #352]	; (8001eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	4a57      	ldr	r2, [pc, #348]	; (8001eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d52:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001d56:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 0308 	and.w	r3, r3, #8
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d005      	beq.n	8001d70 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d64:	4b52      	ldr	r3, [pc, #328]	; (8001eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	4a51      	ldr	r2, [pc, #324]	; (8001eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d6a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001d6e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d70:	4b4f      	ldr	r3, [pc, #316]	; (8001eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	494c      	ldr	r1, [pc, #304]	; (8001eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 0301 	and.w	r3, r3, #1
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d040      	beq.n	8001e10 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d107      	bne.n	8001da6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d96:	4b46      	ldr	r3, [pc, #280]	; (8001eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d115      	bne.n	8001dce <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e07d      	b.n	8001ea2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	2b02      	cmp	r3, #2
 8001dac:	d107      	bne.n	8001dbe <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dae:	4b40      	ldr	r3, [pc, #256]	; (8001eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d109      	bne.n	8001dce <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e071      	b.n	8001ea2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dbe:	4b3c      	ldr	r3, [pc, #240]	; (8001eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 0302 	and.w	r3, r3, #2
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d101      	bne.n	8001dce <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e069      	b.n	8001ea2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dce:	4b38      	ldr	r3, [pc, #224]	; (8001eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	f023 0203 	bic.w	r2, r3, #3
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	4935      	ldr	r1, [pc, #212]	; (8001eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001de0:	f7fe fc34 	bl	800064c <HAL_GetTick>
 8001de4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001de6:	e00a      	b.n	8001dfe <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001de8:	f7fe fc30 	bl	800064c <HAL_GetTick>
 8001dec:	4602      	mov	r2, r0
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d901      	bls.n	8001dfe <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e051      	b.n	8001ea2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dfe:	4b2c      	ldr	r3, [pc, #176]	; (8001eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	f003 020c 	and.w	r2, r3, #12
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d1eb      	bne.n	8001de8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e10:	4b26      	ldr	r3, [pc, #152]	; (8001eac <HAL_RCC_ClockConfig+0x1c0>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 030f 	and.w	r3, r3, #15
 8001e18:	683a      	ldr	r2, [r7, #0]
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	d210      	bcs.n	8001e40 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e1e:	4b23      	ldr	r3, [pc, #140]	; (8001eac <HAL_RCC_ClockConfig+0x1c0>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f023 020f 	bic.w	r2, r3, #15
 8001e26:	4921      	ldr	r1, [pc, #132]	; (8001eac <HAL_RCC_ClockConfig+0x1c0>)
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e2e:	4b1f      	ldr	r3, [pc, #124]	; (8001eac <HAL_RCC_ClockConfig+0x1c0>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 030f 	and.w	r3, r3, #15
 8001e36:	683a      	ldr	r2, [r7, #0]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d001      	beq.n	8001e40 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e030      	b.n	8001ea2 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 0304 	and.w	r3, r3, #4
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d008      	beq.n	8001e5e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e4c:	4b18      	ldr	r3, [pc, #96]	; (8001eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	4915      	ldr	r1, [pc, #84]	; (8001eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0308 	and.w	r3, r3, #8
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d009      	beq.n	8001e7e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e6a:	4b11      	ldr	r3, [pc, #68]	; (8001eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	691b      	ldr	r3, [r3, #16]
 8001e76:	00db      	lsls	r3, r3, #3
 8001e78:	490d      	ldr	r1, [pc, #52]	; (8001eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e7e:	f000 f81d 	bl	8001ebc <HAL_RCC_GetSysClockFreq>
 8001e82:	4602      	mov	r2, r0
 8001e84:	4b0a      	ldr	r3, [pc, #40]	; (8001eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	091b      	lsrs	r3, r3, #4
 8001e8a:	f003 030f 	and.w	r3, r3, #15
 8001e8e:	4909      	ldr	r1, [pc, #36]	; (8001eb4 <HAL_RCC_ClockConfig+0x1c8>)
 8001e90:	5ccb      	ldrb	r3, [r1, r3]
 8001e92:	fa22 f303 	lsr.w	r3, r2, r3
 8001e96:	4a08      	ldr	r2, [pc, #32]	; (8001eb8 <HAL_RCC_ClockConfig+0x1cc>)
 8001e98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001e9a:	2000      	movs	r0, #0
 8001e9c:	f7fe fb92 	bl	80005c4 <HAL_InitTick>

  return HAL_OK;
 8001ea0:	2300      	movs	r3, #0
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3710      	adds	r7, #16
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	40023c00 	.word	0x40023c00
 8001eb0:	40023800 	.word	0x40023800
 8001eb4:	08005a10 	.word	0x08005a10
 8001eb8:	20000008 	.word	0x20000008

08001ebc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ebc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001ec0:	b084      	sub	sp, #16
 8001ec2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	607b      	str	r3, [r7, #4]
 8001ec8:	2300      	movs	r3, #0
 8001eca:	60fb      	str	r3, [r7, #12]
 8001ecc:	2300      	movs	r3, #0
 8001ece:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ed4:	4b67      	ldr	r3, [pc, #412]	; (8002074 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	f003 030c 	and.w	r3, r3, #12
 8001edc:	2b08      	cmp	r3, #8
 8001ede:	d00d      	beq.n	8001efc <HAL_RCC_GetSysClockFreq+0x40>
 8001ee0:	2b08      	cmp	r3, #8
 8001ee2:	f200 80bd 	bhi.w	8002060 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d002      	beq.n	8001ef0 <HAL_RCC_GetSysClockFreq+0x34>
 8001eea:	2b04      	cmp	r3, #4
 8001eec:	d003      	beq.n	8001ef6 <HAL_RCC_GetSysClockFreq+0x3a>
 8001eee:	e0b7      	b.n	8002060 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ef0:	4b61      	ldr	r3, [pc, #388]	; (8002078 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001ef2:	60bb      	str	r3, [r7, #8]
       break;
 8001ef4:	e0b7      	b.n	8002066 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ef6:	4b61      	ldr	r3, [pc, #388]	; (800207c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001ef8:	60bb      	str	r3, [r7, #8]
      break;
 8001efa:	e0b4      	b.n	8002066 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001efc:	4b5d      	ldr	r3, [pc, #372]	; (8002074 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f04:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001f06:	4b5b      	ldr	r3, [pc, #364]	; (8002074 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d04d      	beq.n	8001fae <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f12:	4b58      	ldr	r3, [pc, #352]	; (8002074 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	099b      	lsrs	r3, r3, #6
 8001f18:	461a      	mov	r2, r3
 8001f1a:	f04f 0300 	mov.w	r3, #0
 8001f1e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001f22:	f04f 0100 	mov.w	r1, #0
 8001f26:	ea02 0800 	and.w	r8, r2, r0
 8001f2a:	ea03 0901 	and.w	r9, r3, r1
 8001f2e:	4640      	mov	r0, r8
 8001f30:	4649      	mov	r1, r9
 8001f32:	f04f 0200 	mov.w	r2, #0
 8001f36:	f04f 0300 	mov.w	r3, #0
 8001f3a:	014b      	lsls	r3, r1, #5
 8001f3c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001f40:	0142      	lsls	r2, r0, #5
 8001f42:	4610      	mov	r0, r2
 8001f44:	4619      	mov	r1, r3
 8001f46:	ebb0 0008 	subs.w	r0, r0, r8
 8001f4a:	eb61 0109 	sbc.w	r1, r1, r9
 8001f4e:	f04f 0200 	mov.w	r2, #0
 8001f52:	f04f 0300 	mov.w	r3, #0
 8001f56:	018b      	lsls	r3, r1, #6
 8001f58:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001f5c:	0182      	lsls	r2, r0, #6
 8001f5e:	1a12      	subs	r2, r2, r0
 8001f60:	eb63 0301 	sbc.w	r3, r3, r1
 8001f64:	f04f 0000 	mov.w	r0, #0
 8001f68:	f04f 0100 	mov.w	r1, #0
 8001f6c:	00d9      	lsls	r1, r3, #3
 8001f6e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001f72:	00d0      	lsls	r0, r2, #3
 8001f74:	4602      	mov	r2, r0
 8001f76:	460b      	mov	r3, r1
 8001f78:	eb12 0208 	adds.w	r2, r2, r8
 8001f7c:	eb43 0309 	adc.w	r3, r3, r9
 8001f80:	f04f 0000 	mov.w	r0, #0
 8001f84:	f04f 0100 	mov.w	r1, #0
 8001f88:	0259      	lsls	r1, r3, #9
 8001f8a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001f8e:	0250      	lsls	r0, r2, #9
 8001f90:	4602      	mov	r2, r0
 8001f92:	460b      	mov	r3, r1
 8001f94:	4610      	mov	r0, r2
 8001f96:	4619      	mov	r1, r3
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	f04f 0300 	mov.w	r3, #0
 8001fa0:	f7fe f986 	bl	80002b0 <__aeabi_uldivmod>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	460b      	mov	r3, r1
 8001fa8:	4613      	mov	r3, r2
 8001faa:	60fb      	str	r3, [r7, #12]
 8001fac:	e04a      	b.n	8002044 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fae:	4b31      	ldr	r3, [pc, #196]	; (8002074 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	099b      	lsrs	r3, r3, #6
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	f04f 0300 	mov.w	r3, #0
 8001fba:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001fbe:	f04f 0100 	mov.w	r1, #0
 8001fc2:	ea02 0400 	and.w	r4, r2, r0
 8001fc6:	ea03 0501 	and.w	r5, r3, r1
 8001fca:	4620      	mov	r0, r4
 8001fcc:	4629      	mov	r1, r5
 8001fce:	f04f 0200 	mov.w	r2, #0
 8001fd2:	f04f 0300 	mov.w	r3, #0
 8001fd6:	014b      	lsls	r3, r1, #5
 8001fd8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001fdc:	0142      	lsls	r2, r0, #5
 8001fde:	4610      	mov	r0, r2
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	1b00      	subs	r0, r0, r4
 8001fe4:	eb61 0105 	sbc.w	r1, r1, r5
 8001fe8:	f04f 0200 	mov.w	r2, #0
 8001fec:	f04f 0300 	mov.w	r3, #0
 8001ff0:	018b      	lsls	r3, r1, #6
 8001ff2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001ff6:	0182      	lsls	r2, r0, #6
 8001ff8:	1a12      	subs	r2, r2, r0
 8001ffa:	eb63 0301 	sbc.w	r3, r3, r1
 8001ffe:	f04f 0000 	mov.w	r0, #0
 8002002:	f04f 0100 	mov.w	r1, #0
 8002006:	00d9      	lsls	r1, r3, #3
 8002008:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800200c:	00d0      	lsls	r0, r2, #3
 800200e:	4602      	mov	r2, r0
 8002010:	460b      	mov	r3, r1
 8002012:	1912      	adds	r2, r2, r4
 8002014:	eb45 0303 	adc.w	r3, r5, r3
 8002018:	f04f 0000 	mov.w	r0, #0
 800201c:	f04f 0100 	mov.w	r1, #0
 8002020:	0299      	lsls	r1, r3, #10
 8002022:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002026:	0290      	lsls	r0, r2, #10
 8002028:	4602      	mov	r2, r0
 800202a:	460b      	mov	r3, r1
 800202c:	4610      	mov	r0, r2
 800202e:	4619      	mov	r1, r3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	461a      	mov	r2, r3
 8002034:	f04f 0300 	mov.w	r3, #0
 8002038:	f7fe f93a 	bl	80002b0 <__aeabi_uldivmod>
 800203c:	4602      	mov	r2, r0
 800203e:	460b      	mov	r3, r1
 8002040:	4613      	mov	r3, r2
 8002042:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8002044:	4b0b      	ldr	r3, [pc, #44]	; (8002074 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	0c1b      	lsrs	r3, r3, #16
 800204a:	f003 0303 	and.w	r3, r3, #3
 800204e:	3301      	adds	r3, #1
 8002050:	005b      	lsls	r3, r3, #1
 8002052:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002054:	68fa      	ldr	r2, [r7, #12]
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	fbb2 f3f3 	udiv	r3, r2, r3
 800205c:	60bb      	str	r3, [r7, #8]
      break;
 800205e:	e002      	b.n	8002066 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002060:	4b05      	ldr	r3, [pc, #20]	; (8002078 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002062:	60bb      	str	r3, [r7, #8]
      break;
 8002064:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002066:	68bb      	ldr	r3, [r7, #8]
}
 8002068:	4618      	mov	r0, r3
 800206a:	3710      	adds	r7, #16
 800206c:	46bd      	mov	sp, r7
 800206e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002072:	bf00      	nop
 8002074:	40023800 	.word	0x40023800
 8002078:	00f42400 	.word	0x00f42400
 800207c:	007a1200 	.word	0x007a1200

08002080 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002084:	4b03      	ldr	r3, [pc, #12]	; (8002094 <HAL_RCC_GetHCLKFreq+0x14>)
 8002086:	681b      	ldr	r3, [r3, #0]
}
 8002088:	4618      	mov	r0, r3
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr
 8002092:	bf00      	nop
 8002094:	20000008 	.word	0x20000008

08002098 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800209c:	f7ff fff0 	bl	8002080 <HAL_RCC_GetHCLKFreq>
 80020a0:	4602      	mov	r2, r0
 80020a2:	4b05      	ldr	r3, [pc, #20]	; (80020b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	0a9b      	lsrs	r3, r3, #10
 80020a8:	f003 0307 	and.w	r3, r3, #7
 80020ac:	4903      	ldr	r1, [pc, #12]	; (80020bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80020ae:	5ccb      	ldrb	r3, [r1, r3]
 80020b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	40023800 	.word	0x40023800
 80020bc:	08005a20 	.word	0x08005a20

080020c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80020c4:	f7ff ffdc 	bl	8002080 <HAL_RCC_GetHCLKFreq>
 80020c8:	4602      	mov	r2, r0
 80020ca:	4b05      	ldr	r3, [pc, #20]	; (80020e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	0b5b      	lsrs	r3, r3, #13
 80020d0:	f003 0307 	and.w	r3, r3, #7
 80020d4:	4903      	ldr	r1, [pc, #12]	; (80020e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80020d6:	5ccb      	ldrb	r3, [r1, r3]
 80020d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020dc:	4618      	mov	r0, r3
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	40023800 	.word	0x40023800
 80020e4:	08005a20 	.word	0x08005a20

080020e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b088      	sub	sp, #32
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80020f0:	2300      	movs	r3, #0
 80020f2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80020f4:	2300      	movs	r3, #0
 80020f6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80020f8:	2300      	movs	r3, #0
 80020fa:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80020fc:	2300      	movs	r3, #0
 80020fe:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002100:	2300      	movs	r3, #0
 8002102:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 0301 	and.w	r3, r3, #1
 800210c:	2b00      	cmp	r3, #0
 800210e:	d012      	beq.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002110:	4b69      	ldr	r3, [pc, #420]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	4a68      	ldr	r2, [pc, #416]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002116:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800211a:	6093      	str	r3, [r2, #8]
 800211c:	4b66      	ldr	r3, [pc, #408]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800211e:	689a      	ldr	r2, [r3, #8]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002124:	4964      	ldr	r1, [pc, #400]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002126:	4313      	orrs	r3, r2
 8002128:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800212e:	2b00      	cmp	r3, #0
 8002130:	d101      	bne.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002132:	2301      	movs	r3, #1
 8002134:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d017      	beq.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002142:	4b5d      	ldr	r3, [pc, #372]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002144:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002148:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002150:	4959      	ldr	r1, [pc, #356]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002152:	4313      	orrs	r3, r2
 8002154:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800215c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002160:	d101      	bne.n	8002166 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002162:	2301      	movs	r3, #1
 8002164:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800216a:	2b00      	cmp	r3, #0
 800216c:	d101      	bne.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800216e:	2301      	movs	r3, #1
 8002170:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d017      	beq.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800217e:	4b4e      	ldr	r3, [pc, #312]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002180:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002184:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218c:	494a      	ldr	r1, [pc, #296]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800218e:	4313      	orrs	r3, r2
 8002190:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002198:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800219c:	d101      	bne.n	80021a2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800219e:	2301      	movs	r3, #1
 80021a0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d101      	bne.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80021aa:	2301      	movs	r3, #1
 80021ac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d001      	beq.n	80021be <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80021ba:	2301      	movs	r3, #1
 80021bc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0320 	and.w	r3, r3, #32
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	f000 808b 	beq.w	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80021cc:	4b3a      	ldr	r3, [pc, #232]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d0:	4a39      	ldr	r2, [pc, #228]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021d6:	6413      	str	r3, [r2, #64]	; 0x40
 80021d8:	4b37      	ldr	r3, [pc, #220]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021e0:	60bb      	str	r3, [r7, #8]
 80021e2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80021e4:	4b35      	ldr	r3, [pc, #212]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a34      	ldr	r2, [pc, #208]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80021ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021f0:	f7fe fa2c 	bl	800064c <HAL_GetTick>
 80021f4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80021f6:	e008      	b.n	800220a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021f8:	f7fe fa28 	bl	800064c <HAL_GetTick>
 80021fc:	4602      	mov	r2, r0
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	2b64      	cmp	r3, #100	; 0x64
 8002204:	d901      	bls.n	800220a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002206:	2303      	movs	r3, #3
 8002208:	e355      	b.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800220a:	4b2c      	ldr	r3, [pc, #176]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002212:	2b00      	cmp	r3, #0
 8002214:	d0f0      	beq.n	80021f8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002216:	4b28      	ldr	r3, [pc, #160]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800221a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800221e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d035      	beq.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800222e:	693a      	ldr	r2, [r7, #16]
 8002230:	429a      	cmp	r2, r3
 8002232:	d02e      	beq.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002234:	4b20      	ldr	r3, [pc, #128]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002236:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002238:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800223c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800223e:	4b1e      	ldr	r3, [pc, #120]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002242:	4a1d      	ldr	r2, [pc, #116]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002244:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002248:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800224a:	4b1b      	ldr	r3, [pc, #108]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800224c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800224e:	4a1a      	ldr	r2, [pc, #104]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002250:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002254:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002256:	4a18      	ldr	r2, [pc, #96]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800225c:	4b16      	ldr	r3, [pc, #88]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800225e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002260:	f003 0301 	and.w	r3, r3, #1
 8002264:	2b01      	cmp	r3, #1
 8002266:	d114      	bne.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002268:	f7fe f9f0 	bl	800064c <HAL_GetTick>
 800226c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800226e:	e00a      	b.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002270:	f7fe f9ec 	bl	800064c <HAL_GetTick>
 8002274:	4602      	mov	r2, r0
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	f241 3288 	movw	r2, #5000	; 0x1388
 800227e:	4293      	cmp	r3, r2
 8002280:	d901      	bls.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	e317      	b.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002286:	4b0c      	ldr	r3, [pc, #48]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800228a:	f003 0302 	and.w	r3, r3, #2
 800228e:	2b00      	cmp	r3, #0
 8002290:	d0ee      	beq.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002296:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800229a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800229e:	d111      	bne.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80022a0:	4b05      	ldr	r3, [pc, #20]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80022ac:	4b04      	ldr	r3, [pc, #16]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80022ae:	400b      	ands	r3, r1
 80022b0:	4901      	ldr	r1, [pc, #4]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022b2:	4313      	orrs	r3, r2
 80022b4:	608b      	str	r3, [r1, #8]
 80022b6:	e00b      	b.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80022b8:	40023800 	.word	0x40023800
 80022bc:	40007000 	.word	0x40007000
 80022c0:	0ffffcff 	.word	0x0ffffcff
 80022c4:	4bb0      	ldr	r3, [pc, #704]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	4aaf      	ldr	r2, [pc, #700]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80022ca:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80022ce:	6093      	str	r3, [r2, #8]
 80022d0:	4bad      	ldr	r3, [pc, #692]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80022d2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022dc:	49aa      	ldr	r1, [pc, #680]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80022de:	4313      	orrs	r3, r2
 80022e0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0310 	and.w	r3, r3, #16
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d010      	beq.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80022ee:	4ba6      	ldr	r3, [pc, #664]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80022f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022f4:	4aa4      	ldr	r2, [pc, #656]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80022f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022fa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80022fe:	4ba2      	ldr	r3, [pc, #648]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002300:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002308:	499f      	ldr	r1, [pc, #636]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800230a:	4313      	orrs	r3, r2
 800230c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002318:	2b00      	cmp	r3, #0
 800231a:	d00a      	beq.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800231c:	4b9a      	ldr	r3, [pc, #616]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800231e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002322:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800232a:	4997      	ldr	r1, [pc, #604]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800232c:	4313      	orrs	r3, r2
 800232e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800233a:	2b00      	cmp	r3, #0
 800233c:	d00a      	beq.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800233e:	4b92      	ldr	r3, [pc, #584]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002340:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002344:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800234c:	498e      	ldr	r1, [pc, #568]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800234e:	4313      	orrs	r3, r2
 8002350:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800235c:	2b00      	cmp	r3, #0
 800235e:	d00a      	beq.n	8002376 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002360:	4b89      	ldr	r3, [pc, #548]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002362:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002366:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800236e:	4986      	ldr	r1, [pc, #536]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002370:	4313      	orrs	r3, r2
 8002372:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d00a      	beq.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002382:	4b81      	ldr	r3, [pc, #516]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002384:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002388:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002390:	497d      	ldr	r1, [pc, #500]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002392:	4313      	orrs	r3, r2
 8002394:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d00a      	beq.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80023a4:	4b78      	ldr	r3, [pc, #480]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80023a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023aa:	f023 0203 	bic.w	r2, r3, #3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023b2:	4975      	ldr	r1, [pc, #468]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80023b4:	4313      	orrs	r3, r2
 80023b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d00a      	beq.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80023c6:	4b70      	ldr	r3, [pc, #448]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80023c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023cc:	f023 020c 	bic.w	r2, r3, #12
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023d4:	496c      	ldr	r1, [pc, #432]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80023d6:	4313      	orrs	r3, r2
 80023d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d00a      	beq.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80023e8:	4b67      	ldr	r3, [pc, #412]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80023ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ee:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023f6:	4964      	ldr	r1, [pc, #400]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80023f8:	4313      	orrs	r3, r2
 80023fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002406:	2b00      	cmp	r3, #0
 8002408:	d00a      	beq.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800240a:	4b5f      	ldr	r3, [pc, #380]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800240c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002410:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002418:	495b      	ldr	r1, [pc, #364]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800241a:	4313      	orrs	r3, r2
 800241c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002428:	2b00      	cmp	r3, #0
 800242a:	d00a      	beq.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800242c:	4b56      	ldr	r3, [pc, #344]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800242e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002432:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800243a:	4953      	ldr	r1, [pc, #332]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800243c:	4313      	orrs	r3, r2
 800243e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800244a:	2b00      	cmp	r3, #0
 800244c:	d00a      	beq.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800244e:	4b4e      	ldr	r3, [pc, #312]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002450:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002454:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800245c:	494a      	ldr	r1, [pc, #296]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800245e:	4313      	orrs	r3, r2
 8002460:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800246c:	2b00      	cmp	r3, #0
 800246e:	d00a      	beq.n	8002486 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002470:	4b45      	ldr	r3, [pc, #276]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002472:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002476:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800247e:	4942      	ldr	r1, [pc, #264]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002480:	4313      	orrs	r3, r2
 8002482:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d00a      	beq.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002492:	4b3d      	ldr	r3, [pc, #244]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002494:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002498:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024a0:	4939      	ldr	r1, [pc, #228]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80024a2:	4313      	orrs	r3, r2
 80024a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d00a      	beq.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80024b4:	4b34      	ldr	r3, [pc, #208]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80024b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024ba:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80024c2:	4931      	ldr	r1, [pc, #196]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80024c4:	4313      	orrs	r3, r2
 80024c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d011      	beq.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80024d6:	4b2c      	ldr	r3, [pc, #176]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80024d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024dc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80024e4:	4928      	ldr	r1, [pc, #160]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80024e6:	4313      	orrs	r3, r2
 80024e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80024f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80024f4:	d101      	bne.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80024f6:	2301      	movs	r3, #1
 80024f8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0308 	and.w	r3, r3, #8
 8002502:	2b00      	cmp	r3, #0
 8002504:	d001      	beq.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002506:	2301      	movs	r3, #1
 8002508:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d00a      	beq.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002516:	4b1c      	ldr	r3, [pc, #112]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002518:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800251c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002524:	4918      	ldr	r1, [pc, #96]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002526:	4313      	orrs	r3, r2
 8002528:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002534:	2b00      	cmp	r3, #0
 8002536:	d00b      	beq.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002538:	4b13      	ldr	r3, [pc, #76]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800253a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800253e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002548:	490f      	ldr	r1, [pc, #60]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800254a:	4313      	orrs	r3, r2
 800254c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	2b01      	cmp	r3, #1
 8002554:	d005      	beq.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800255e:	f040 80d8 	bne.w	8002712 <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002562:	4b09      	ldr	r3, [pc, #36]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a08      	ldr	r2, [pc, #32]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002568:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800256c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800256e:	f7fe f86d 	bl	800064c <HAL_GetTick>
 8002572:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002574:	e00a      	b.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002576:	f7fe f869 	bl	800064c <HAL_GetTick>
 800257a:	4602      	mov	r2, r0
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	2b64      	cmp	r3, #100	; 0x64
 8002582:	d903      	bls.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002584:	2303      	movs	r3, #3
 8002586:	e196      	b.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8002588:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800258c:	4b6c      	ldr	r3, [pc, #432]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002594:	2b00      	cmp	r3, #0
 8002596:	d1ee      	bne.n	8002576 <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0301 	and.w	r3, r3, #1
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d021      	beq.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x500>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d11d      	bne.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80025ac:	4b64      	ldr	r3, [pc, #400]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80025ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025b2:	0c1b      	lsrs	r3, r3, #16
 80025b4:	f003 0303 	and.w	r3, r3, #3
 80025b8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80025ba:	4b61      	ldr	r3, [pc, #388]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80025bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025c0:	0e1b      	lsrs	r3, r3, #24
 80025c2:	f003 030f 	and.w	r3, r3, #15
 80025c6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	019a      	lsls	r2, r3, #6
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	041b      	lsls	r3, r3, #16
 80025d2:	431a      	orrs	r2, r3
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	061b      	lsls	r3, r3, #24
 80025d8:	431a      	orrs	r2, r3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	071b      	lsls	r3, r3, #28
 80025e0:	4957      	ldr	r1, [pc, #348]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80025e2:	4313      	orrs	r3, r2
 80025e4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d004      	beq.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0x516>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80025fc:	d00a      	beq.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002606:	2b00      	cmp	r3, #0
 8002608:	d02e      	beq.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002612:	d129      	bne.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002614:	4b4a      	ldr	r3, [pc, #296]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002616:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800261a:	0c1b      	lsrs	r3, r3, #16
 800261c:	f003 0303 	and.w	r3, r3, #3
 8002620:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002622:	4b47      	ldr	r3, [pc, #284]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002624:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002628:	0f1b      	lsrs	r3, r3, #28
 800262a:	f003 0307 	and.w	r3, r3, #7
 800262e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	019a      	lsls	r2, r3, #6
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	041b      	lsls	r3, r3, #16
 800263a:	431a      	orrs	r2, r3
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	061b      	lsls	r3, r3, #24
 8002642:	431a      	orrs	r2, r3
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	071b      	lsls	r3, r3, #28
 8002648:	493d      	ldr	r1, [pc, #244]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800264a:	4313      	orrs	r3, r2
 800264c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002650:	4b3b      	ldr	r3, [pc, #236]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002652:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002656:	f023 021f 	bic.w	r2, r3, #31
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800265e:	3b01      	subs	r3, #1
 8002660:	4937      	ldr	r1, [pc, #220]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002662:	4313      	orrs	r3, r2
 8002664:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002670:	2b00      	cmp	r3, #0
 8002672:	d01d      	beq.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002674:	4b32      	ldr	r3, [pc, #200]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002676:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800267a:	0e1b      	lsrs	r3, r3, #24
 800267c:	f003 030f 	and.w	r3, r3, #15
 8002680:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002682:	4b2f      	ldr	r3, [pc, #188]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002684:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002688:	0f1b      	lsrs	r3, r3, #28
 800268a:	f003 0307 	and.w	r3, r3, #7
 800268e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	019a      	lsls	r2, r3, #6
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	691b      	ldr	r3, [r3, #16]
 800269a:	041b      	lsls	r3, r3, #16
 800269c:	431a      	orrs	r2, r3
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	061b      	lsls	r3, r3, #24
 80026a2:	431a      	orrs	r2, r3
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	071b      	lsls	r3, r3, #28
 80026a8:	4925      	ldr	r1, [pc, #148]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80026aa:	4313      	orrs	r3, r2
 80026ac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d011      	beq.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	019a      	lsls	r2, r3, #6
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	691b      	ldr	r3, [r3, #16]
 80026c6:	041b      	lsls	r3, r3, #16
 80026c8:	431a      	orrs	r2, r3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	061b      	lsls	r3, r3, #24
 80026d0:	431a      	orrs	r2, r3
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	071b      	lsls	r3, r3, #28
 80026d8:	4919      	ldr	r1, [pc, #100]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80026da:	4313      	orrs	r3, r2
 80026dc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80026e0:	4b17      	ldr	r3, [pc, #92]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a16      	ldr	r2, [pc, #88]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80026e6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80026ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026ec:	f7fd ffae 	bl	800064c <HAL_GetTick>
 80026f0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80026f2:	e008      	b.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80026f4:	f7fd ffaa 	bl	800064c <HAL_GetTick>
 80026f8:	4602      	mov	r2, r0
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	2b64      	cmp	r3, #100	; 0x64
 8002700:	d901      	bls.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002702:	2303      	movs	r3, #3
 8002704:	e0d7      	b.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002706:	4b0e      	ldr	r3, [pc, #56]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d0f0      	beq.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002712:	69bb      	ldr	r3, [r7, #24]
 8002714:	2b01      	cmp	r3, #1
 8002716:	f040 80cd 	bne.w	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800271a:	4b09      	ldr	r3, [pc, #36]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a08      	ldr	r2, [pc, #32]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002720:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002724:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002726:	f7fd ff91 	bl	800064c <HAL_GetTick>
 800272a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800272c:	e00a      	b.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800272e:	f7fd ff8d 	bl	800064c <HAL_GetTick>
 8002732:	4602      	mov	r2, r0
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	1ad3      	subs	r3, r2, r3
 8002738:	2b64      	cmp	r3, #100	; 0x64
 800273a:	d903      	bls.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800273c:	2303      	movs	r3, #3
 800273e:	e0ba      	b.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8002740:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002744:	4b5e      	ldr	r3, [pc, #376]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800274c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002750:	d0ed      	beq.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d003      	beq.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x67e>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002762:	2b00      	cmp	r3, #0
 8002764:	d009      	beq.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800276e:	2b00      	cmp	r3, #0
 8002770:	d02e      	beq.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002776:	2b00      	cmp	r3, #0
 8002778:	d12a      	bne.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800277a:	4b51      	ldr	r3, [pc, #324]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800277c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002780:	0c1b      	lsrs	r3, r3, #16
 8002782:	f003 0303 	and.w	r3, r3, #3
 8002786:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002788:	4b4d      	ldr	r3, [pc, #308]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800278a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800278e:	0f1b      	lsrs	r3, r3, #28
 8002790:	f003 0307 	and.w	r3, r3, #7
 8002794:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	695b      	ldr	r3, [r3, #20]
 800279a:	019a      	lsls	r2, r3, #6
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	041b      	lsls	r3, r3, #16
 80027a0:	431a      	orrs	r2, r3
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	699b      	ldr	r3, [r3, #24]
 80027a6:	061b      	lsls	r3, r3, #24
 80027a8:	431a      	orrs	r2, r3
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	071b      	lsls	r3, r3, #28
 80027ae:	4944      	ldr	r1, [pc, #272]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80027b0:	4313      	orrs	r3, r2
 80027b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80027b6:	4b42      	ldr	r3, [pc, #264]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80027b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027bc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027c4:	3b01      	subs	r3, #1
 80027c6:	021b      	lsls	r3, r3, #8
 80027c8:	493d      	ldr	r1, [pc, #244]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80027ca:	4313      	orrs	r3, r2
 80027cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d022      	beq.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80027e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80027e4:	d11d      	bne.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80027e6:	4b36      	ldr	r3, [pc, #216]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80027e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ec:	0e1b      	lsrs	r3, r3, #24
 80027ee:	f003 030f 	and.w	r3, r3, #15
 80027f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80027f4:	4b32      	ldr	r3, [pc, #200]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80027f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027fa:	0f1b      	lsrs	r3, r3, #28
 80027fc:	f003 0307 	and.w	r3, r3, #7
 8002800:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	695b      	ldr	r3, [r3, #20]
 8002806:	019a      	lsls	r2, r3, #6
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6a1b      	ldr	r3, [r3, #32]
 800280c:	041b      	lsls	r3, r3, #16
 800280e:	431a      	orrs	r2, r3
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	061b      	lsls	r3, r3, #24
 8002814:	431a      	orrs	r2, r3
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	071b      	lsls	r3, r3, #28
 800281a:	4929      	ldr	r1, [pc, #164]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800281c:	4313      	orrs	r3, r2
 800281e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 0308 	and.w	r3, r3, #8
 800282a:	2b00      	cmp	r3, #0
 800282c:	d028      	beq.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800282e:	4b24      	ldr	r3, [pc, #144]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002830:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002834:	0e1b      	lsrs	r3, r3, #24
 8002836:	f003 030f 	and.w	r3, r3, #15
 800283a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800283c:	4b20      	ldr	r3, [pc, #128]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800283e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002842:	0c1b      	lsrs	r3, r3, #16
 8002844:	f003 0303 	and.w	r3, r3, #3
 8002848:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	695b      	ldr	r3, [r3, #20]
 800284e:	019a      	lsls	r2, r3, #6
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	041b      	lsls	r3, r3, #16
 8002854:	431a      	orrs	r2, r3
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	061b      	lsls	r3, r3, #24
 800285a:	431a      	orrs	r2, r3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	69db      	ldr	r3, [r3, #28]
 8002860:	071b      	lsls	r3, r3, #28
 8002862:	4917      	ldr	r1, [pc, #92]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002864:	4313      	orrs	r3, r2
 8002866:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800286a:	4b15      	ldr	r3, [pc, #84]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800286c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002870:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002878:	4911      	ldr	r1, [pc, #68]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800287a:	4313      	orrs	r3, r2
 800287c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002880:	4b0f      	ldr	r3, [pc, #60]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a0e      	ldr	r2, [pc, #56]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002886:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800288a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800288c:	f7fd fede 	bl	800064c <HAL_GetTick>
 8002890:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002892:	e008      	b.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002894:	f7fd feda 	bl	800064c <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	2b64      	cmp	r3, #100	; 0x64
 80028a0:	d901      	bls.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	e007      	b.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80028a6:	4b06      	ldr	r3, [pc, #24]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80028ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80028b2:	d1ef      	bne.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 80028b4:	2300      	movs	r3, #0
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3720      	adds	r7, #32
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	40023800 	.word	0x40023800

080028c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d101      	bne.n	80028d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e040      	b.n	8002958 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d106      	bne.n	80028ec <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2200      	movs	r2, #0
 80028e2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f001 fe12 	bl	8004510 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2224      	movs	r2, #36	; 0x24
 80028f0:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f022 0201 	bic.w	r2, r2, #1
 8002900:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f000 fa8e 	bl	8002e24 <UART_SetConfig>
 8002908:	4603      	mov	r3, r0
 800290a:	2b01      	cmp	r3, #1
 800290c:	d101      	bne.n	8002912 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e022      	b.n	8002958 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002916:	2b00      	cmp	r3, #0
 8002918:	d002      	beq.n	8002920 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f000 fd28 	bl	8003370 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	685a      	ldr	r2, [r3, #4]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800292e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	689a      	ldr	r2, [r3, #8]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800293e:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f042 0201 	orr.w	r2, r2, #1
 800294e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	f000 fdaf 	bl	80034b4 <UART_CheckIdleState>
 8002956:	4603      	mov	r3, r0
}
 8002958:	4618      	mov	r0, r3
 800295a:	3708      	adds	r7, #8
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}

08002960 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b08a      	sub	sp, #40	; 0x28
 8002964:	af02      	add	r7, sp, #8
 8002966:	60f8      	str	r0, [r7, #12]
 8002968:	60b9      	str	r1, [r7, #8]
 800296a:	603b      	str	r3, [r7, #0]
 800296c:	4613      	mov	r3, r2
 800296e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002974:	2b20      	cmp	r3, #32
 8002976:	d17f      	bne.n	8002a78 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d002      	beq.n	8002984 <HAL_UART_Transmit+0x24>
 800297e:	88fb      	ldrh	r3, [r7, #6]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d101      	bne.n	8002988 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	e078      	b.n	8002a7a <HAL_UART_Transmit+0x11a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800298e:	2b01      	cmp	r3, #1
 8002990:	d101      	bne.n	8002996 <HAL_UART_Transmit+0x36>
 8002992:	2302      	movs	r3, #2
 8002994:	e071      	b.n	8002a7a <HAL_UART_Transmit+0x11a>
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2201      	movs	r2, #1
 800299a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2200      	movs	r2, #0
 80029a2:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2221      	movs	r2, #33	; 0x21
 80029a8:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80029aa:	f7fd fe4f 	bl	800064c <HAL_GetTick>
 80029ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	88fa      	ldrh	r2, [r7, #6]
 80029b4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	88fa      	ldrh	r2, [r7, #6]
 80029bc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

        /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029c8:	d108      	bne.n	80029dc <HAL_UART_Transmit+0x7c>
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	691b      	ldr	r3, [r3, #16]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d104      	bne.n	80029dc <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 80029d2:	2300      	movs	r3, #0
 80029d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	61bb      	str	r3, [r7, #24]
 80029da:	e003      	b.n	80029e4 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80029e0:	2300      	movs	r3, #0
 80029e2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80029e4:	e02c      	b.n	8002a40 <HAL_UART_Transmit+0xe0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	9300      	str	r3, [sp, #0]
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	2200      	movs	r2, #0
 80029ee:	2180      	movs	r1, #128	; 0x80
 80029f0:	68f8      	ldr	r0, [r7, #12]
 80029f2:	f000 fd8e 	bl	8003512 <UART_WaitOnFlagUntilTimeout>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d001      	beq.n	8002a00 <HAL_UART_Transmit+0xa0>
      {
        return HAL_TIMEOUT;
 80029fc:	2303      	movs	r3, #3
 80029fe:	e03c      	b.n	8002a7a <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d10b      	bne.n	8002a1e <HAL_UART_Transmit+0xbe>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a06:	69bb      	ldr	r3, [r7, #24]
 8002a08:	881b      	ldrh	r3, [r3, #0]
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a14:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002a16:	69bb      	ldr	r3, [r7, #24]
 8002a18:	3302      	adds	r3, #2
 8002a1a:	61bb      	str	r3, [r7, #24]
 8002a1c:	e007      	b.n	8002a2e <HAL_UART_Transmit+0xce>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	781a      	ldrb	r2, [r3, #0]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	3301      	adds	r3, #1
 8002a2c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002a34:	b29b      	uxth	r3, r3
 8002a36:	3b01      	subs	r3, #1
 8002a38:	b29a      	uxth	r2, r3
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d1cc      	bne.n	80029e6 <HAL_UART_Transmit+0x86>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	9300      	str	r3, [sp, #0]
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	2200      	movs	r2, #0
 8002a54:	2140      	movs	r1, #64	; 0x40
 8002a56:	68f8      	ldr	r0, [r7, #12]
 8002a58:	f000 fd5b 	bl	8003512 <UART_WaitOnFlagUntilTimeout>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d001      	beq.n	8002a66 <HAL_UART_Transmit+0x106>
    {
      return HAL_TIMEOUT;
 8002a62:	2303      	movs	r3, #3
 8002a64:	e009      	b.n	8002a7a <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2220      	movs	r2, #32
 8002a6a:	675a      	str	r2, [r3, #116]	; 0x74

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8002a74:	2300      	movs	r3, #0
 8002a76:	e000      	b.n	8002a7a <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8002a78:	2302      	movs	r3, #2
  }
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3720      	adds	r7, #32
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
	...

08002a84 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b085      	sub	sp, #20
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	60f8      	str	r0, [r7, #12]
 8002a8c:	60b9      	str	r1, [r7, #8]
 8002a8e:	4613      	mov	r3, r2
 8002a90:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a96:	2b20      	cmp	r3, #32
 8002a98:	f040 808a 	bne.w	8002bb0 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d002      	beq.n	8002aa8 <HAL_UART_Receive_IT+0x24>
 8002aa2:	88fb      	ldrh	r3, [r7, #6]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d101      	bne.n	8002aac <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e082      	b.n	8002bb2 <HAL_UART_Receive_IT+0x12e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d101      	bne.n	8002aba <HAL_UART_Receive_IT+0x36>
 8002ab6:	2302      	movs	r3, #2
 8002ab8:	e07b      	b.n	8002bb2 <HAL_UART_Receive_IT+0x12e>
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2201      	movs	r2, #1
 8002abe:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	68ba      	ldr	r2, [r7, #8]
 8002ac6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	88fa      	ldrh	r2, [r7, #6]
 8002acc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	88fa      	ldrh	r2, [r7, #6]
 8002ad4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2200      	movs	r2, #0
 8002adc:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ae6:	d10e      	bne.n	8002b06 <HAL_UART_Receive_IT+0x82>
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	691b      	ldr	r3, [r3, #16]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d105      	bne.n	8002afc <HAL_UART_Receive_IT+0x78>
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002af6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002afa:	e02d      	b.n	8002b58 <HAL_UART_Receive_IT+0xd4>
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	22ff      	movs	r2, #255	; 0xff
 8002b00:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002b04:	e028      	b.n	8002b58 <HAL_UART_Receive_IT+0xd4>
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d10d      	bne.n	8002b2a <HAL_UART_Receive_IT+0xa6>
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	691b      	ldr	r3, [r3, #16]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d104      	bne.n	8002b20 <HAL_UART_Receive_IT+0x9c>
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	22ff      	movs	r2, #255	; 0xff
 8002b1a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002b1e:	e01b      	b.n	8002b58 <HAL_UART_Receive_IT+0xd4>
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	227f      	movs	r2, #127	; 0x7f
 8002b24:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002b28:	e016      	b.n	8002b58 <HAL_UART_Receive_IT+0xd4>
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b32:	d10d      	bne.n	8002b50 <HAL_UART_Receive_IT+0xcc>
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	691b      	ldr	r3, [r3, #16]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d104      	bne.n	8002b46 <HAL_UART_Receive_IT+0xc2>
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	227f      	movs	r2, #127	; 0x7f
 8002b40:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002b44:	e008      	b.n	8002b58 <HAL_UART_Receive_IT+0xd4>
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	223f      	movs	r2, #63	; 0x3f
 8002b4a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002b4e:	e003      	b.n	8002b58 <HAL_UART_Receive_IT+0xd4>
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2200      	movs	r2, #0
 8002b54:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2222      	movs	r2, #34	; 0x22
 8002b62:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	689a      	ldr	r2, [r3, #8]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f042 0201 	orr.w	r2, r2, #1
 8002b72:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b7c:	d107      	bne.n	8002b8e <HAL_UART_Receive_IT+0x10a>
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	691b      	ldr	r3, [r3, #16]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d103      	bne.n	8002b8e <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	4a0d      	ldr	r2, [pc, #52]	; (8002bc0 <HAL_UART_Receive_IT+0x13c>)
 8002b8a:	661a      	str	r2, [r3, #96]	; 0x60
 8002b8c:	e002      	b.n	8002b94 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	4a0c      	ldr	r2, [pc, #48]	; (8002bc4 <HAL_UART_Receive_IT+0x140>)
 8002b92:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2200      	movs	r2, #0
 8002b98:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8002baa:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8002bac:	2300      	movs	r3, #0
 8002bae:	e000      	b.n	8002bb2 <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 8002bb0:	2302      	movs	r3, #2
  }
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3714      	adds	r7, #20
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
 8002bbe:	bf00      	nop
 8002bc0:	080036e7 	.word	0x080036e7
 8002bc4:	08003641 	.word	0x08003641

08002bc8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b088      	sub	sp, #32
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	69db      	ldr	r3, [r3, #28]
 8002bd6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	f003 030f 	and.w	r3, r3, #15
 8002bee:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d113      	bne.n	8002c1e <HAL_UART_IRQHandler+0x56>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	f003 0320 	and.w	r3, r3, #32
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d00e      	beq.n	8002c1e <HAL_UART_IRQHandler+0x56>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002c00:	69bb      	ldr	r3, [r7, #24]
 8002c02:	f003 0320 	and.w	r3, r3, #32
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d009      	beq.n	8002c1e <HAL_UART_IRQHandler+0x56>
    {
      if (huart->RxISR != NULL)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	f000 80ea 	beq.w	8002de8 <HAL_UART_IRQHandler+0x220>
      {
        huart->RxISR(huart);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	4798      	blx	r3
      }
      return;
 8002c1c:	e0e4      	b.n	8002de8 <HAL_UART_IRQHandler+0x220>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	f000 80c0 	beq.w	8002da6 <HAL_UART_IRQHandler+0x1de>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	f003 0301 	and.w	r3, r3, #1
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d105      	bne.n	8002c3c <HAL_UART_IRQHandler+0x74>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8002c30:	69bb      	ldr	r3, [r7, #24]
 8002c32:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	f000 80b5 	beq.w	8002da6 <HAL_UART_IRQHandler+0x1de>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	f003 0301 	and.w	r3, r3, #1
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d00e      	beq.n	8002c64 <HAL_UART_IRQHandler+0x9c>
 8002c46:	69bb      	ldr	r3, [r7, #24]
 8002c48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d009      	beq.n	8002c64 <HAL_UART_IRQHandler+0x9c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	2201      	movs	r2, #1
 8002c56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c5c:	f043 0201 	orr.w	r2, r3, #1
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	f003 0302 	and.w	r3, r3, #2
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d00e      	beq.n	8002c8c <HAL_UART_IRQHandler+0xc4>
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	f003 0301 	and.w	r3, r3, #1
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d009      	beq.n	8002c8c <HAL_UART_IRQHandler+0xc4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	2202      	movs	r2, #2
 8002c7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c84:	f043 0204 	orr.w	r2, r3, #4
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	f003 0304 	and.w	r3, r3, #4
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d00e      	beq.n	8002cb4 <HAL_UART_IRQHandler+0xec>
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	f003 0301 	and.w	r3, r3, #1
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d009      	beq.n	8002cb4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	2204      	movs	r2, #4
 8002ca6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002cac:	f043 0202 	orr.w	r2, r3, #2
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	f003 0308 	and.w	r3, r3, #8
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d013      	beq.n	8002ce6 <HAL_UART_IRQHandler+0x11e>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002cbe:	69bb      	ldr	r3, [r7, #24]
 8002cc0:	f003 0320 	and.w	r3, r3, #32
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d104      	bne.n	8002cd2 <HAL_UART_IRQHandler+0x10a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d009      	beq.n	8002ce6 <HAL_UART_IRQHandler+0x11e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	2208      	movs	r2, #8
 8002cd8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002cde:	f043 0208 	orr.w	r2, r3, #8
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d07e      	beq.n	8002dec <HAL_UART_IRQHandler+0x224>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	f003 0320 	and.w	r3, r3, #32
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d00c      	beq.n	8002d12 <HAL_UART_IRQHandler+0x14a>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002cf8:	69bb      	ldr	r3, [r7, #24]
 8002cfa:	f003 0320 	and.w	r3, r3, #32
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d007      	beq.n	8002d12 <HAL_UART_IRQHandler+0x14a>
      {
        if (huart->RxISR != NULL)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d003      	beq.n	8002d12 <HAL_UART_IRQHandler+0x14a>
        {
          huart->RxISR(huart);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d16:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d22:	2b40      	cmp	r3, #64	; 0x40
 8002d24:	d004      	beq.n	8002d30 <HAL_UART_IRQHandler+0x168>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	f003 0308 	and.w	r3, r3, #8
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d031      	beq.n	8002d94 <HAL_UART_IRQHandler+0x1cc>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002d30:	6878      	ldr	r0, [r7, #4]
 8002d32:	f000 fc36 	bl	80035a2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d40:	2b40      	cmp	r3, #64	; 0x40
 8002d42:	d123      	bne.n	8002d8c <HAL_UART_IRQHandler+0x1c4>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	689a      	ldr	r2, [r3, #8]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d52:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d013      	beq.n	8002d84 <HAL_UART_IRQHandler+0x1bc>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d60:	4a25      	ldr	r2, [pc, #148]	; (8002df8 <HAL_UART_IRQHandler+0x230>)
 8002d62:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f7fd fdb0 	bl	80008ce <HAL_DMA_Abort_IT>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d016      	beq.n	8002da2 <HAL_UART_IRQHandler+0x1da>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8002d7e:	4610      	mov	r0, r2
 8002d80:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d82:	e00e      	b.n	8002da2 <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	f000 f843 	bl	8002e10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d8a:	e00a      	b.n	8002da2 <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002d8c:	6878      	ldr	r0, [r7, #4]
 8002d8e:	f000 f83f 	bl	8002e10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d92:	e006      	b.n	8002da2 <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002d94:	6878      	ldr	r0, [r7, #4]
 8002d96:	f000 f83b 	bl	8002e10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8002da0:	e024      	b.n	8002dec <HAL_UART_IRQHandler+0x224>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002da2:	bf00      	nop
    return;
 8002da4:	e022      	b.n	8002dec <HAL_UART_IRQHandler+0x224>

  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d00d      	beq.n	8002dcc <HAL_UART_IRQHandler+0x204>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002db0:	69bb      	ldr	r3, [r7, #24]
 8002db2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d008      	beq.n	8002dcc <HAL_UART_IRQHandler+0x204>
  {
    if (huart->TxISR != NULL)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d016      	beq.n	8002df0 <HAL_UART_IRQHandler+0x228>
    {
      huart->TxISR(huart);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	4798      	blx	r3
    }
    return;
 8002dca:	e011      	b.n	8002df0 <HAL_UART_IRQHandler+0x228>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d00d      	beq.n	8002df2 <HAL_UART_IRQHandler+0x22a>
 8002dd6:	69bb      	ldr	r3, [r7, #24]
 8002dd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d008      	beq.n	8002df2 <HAL_UART_IRQHandler+0x22a>
  {
    UART_EndTransmit_IT(huart);
 8002de0:	6878      	ldr	r0, [r7, #4]
 8002de2:	f000 fc14 	bl	800360e <UART_EndTransmit_IT>
    return;
 8002de6:	e004      	b.n	8002df2 <HAL_UART_IRQHandler+0x22a>
      return;
 8002de8:	bf00      	nop
 8002dea:	e002      	b.n	8002df2 <HAL_UART_IRQHandler+0x22a>
    return;
 8002dec:	bf00      	nop
 8002dee:	e000      	b.n	8002df2 <HAL_UART_IRQHandler+0x22a>
    return;
 8002df0:	bf00      	nop
  }

}
 8002df2:	3720      	adds	r7, #32
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	080035e3 	.word	0x080035e3

08002dfc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002e04:	bf00      	nop
 8002e06:	370c      	adds	r7, #12
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr

08002e10 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002e18:	bf00      	nop
 8002e1a:	370c      	adds	r7, #12
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr

08002e24 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b088      	sub	sp, #32
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e30:	2300      	movs	r3, #0
 8002e32:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	689a      	ldr	r2, [r3, #8]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	691b      	ldr	r3, [r3, #16]
 8002e3c:	431a      	orrs	r2, r3
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	695b      	ldr	r3, [r3, #20]
 8002e42:	431a      	orrs	r2, r3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	69db      	ldr	r3, [r3, #28]
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	4ba7      	ldr	r3, [pc, #668]	; (80030f0 <UART_SetConfig+0x2cc>)
 8002e54:	4013      	ands	r3, r2
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	6812      	ldr	r2, [r2, #0]
 8002e5a:	6939      	ldr	r1, [r7, #16]
 8002e5c:	430b      	orrs	r3, r1
 8002e5e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	68da      	ldr	r2, [r3, #12]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	430a      	orrs	r2, r1
 8002e74:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	699b      	ldr	r3, [r3, #24]
 8002e7a:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6a1b      	ldr	r3, [r3, #32]
 8002e80:	693a      	ldr	r2, [r7, #16]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	693a      	ldr	r2, [r7, #16]
 8002e96:	430a      	orrs	r2, r1
 8002e98:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a95      	ldr	r2, [pc, #596]	; (80030f4 <UART_SetConfig+0x2d0>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d120      	bne.n	8002ee6 <UART_SetConfig+0xc2>
 8002ea4:	4b94      	ldr	r3, [pc, #592]	; (80030f8 <UART_SetConfig+0x2d4>)
 8002ea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eaa:	f003 0303 	and.w	r3, r3, #3
 8002eae:	2b03      	cmp	r3, #3
 8002eb0:	d816      	bhi.n	8002ee0 <UART_SetConfig+0xbc>
 8002eb2:	a201      	add	r2, pc, #4	; (adr r2, 8002eb8 <UART_SetConfig+0x94>)
 8002eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eb8:	08002ec9 	.word	0x08002ec9
 8002ebc:	08002ed5 	.word	0x08002ed5
 8002ec0:	08002ecf 	.word	0x08002ecf
 8002ec4:	08002edb 	.word	0x08002edb
 8002ec8:	2301      	movs	r3, #1
 8002eca:	77fb      	strb	r3, [r7, #31]
 8002ecc:	e14f      	b.n	800316e <UART_SetConfig+0x34a>
 8002ece:	2302      	movs	r3, #2
 8002ed0:	77fb      	strb	r3, [r7, #31]
 8002ed2:	e14c      	b.n	800316e <UART_SetConfig+0x34a>
 8002ed4:	2304      	movs	r3, #4
 8002ed6:	77fb      	strb	r3, [r7, #31]
 8002ed8:	e149      	b.n	800316e <UART_SetConfig+0x34a>
 8002eda:	2308      	movs	r3, #8
 8002edc:	77fb      	strb	r3, [r7, #31]
 8002ede:	e146      	b.n	800316e <UART_SetConfig+0x34a>
 8002ee0:	2310      	movs	r3, #16
 8002ee2:	77fb      	strb	r3, [r7, #31]
 8002ee4:	e143      	b.n	800316e <UART_SetConfig+0x34a>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a84      	ldr	r2, [pc, #528]	; (80030fc <UART_SetConfig+0x2d8>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d132      	bne.n	8002f56 <UART_SetConfig+0x132>
 8002ef0:	4b81      	ldr	r3, [pc, #516]	; (80030f8 <UART_SetConfig+0x2d4>)
 8002ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ef6:	f003 030c 	and.w	r3, r3, #12
 8002efa:	2b0c      	cmp	r3, #12
 8002efc:	d828      	bhi.n	8002f50 <UART_SetConfig+0x12c>
 8002efe:	a201      	add	r2, pc, #4	; (adr r2, 8002f04 <UART_SetConfig+0xe0>)
 8002f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f04:	08002f39 	.word	0x08002f39
 8002f08:	08002f51 	.word	0x08002f51
 8002f0c:	08002f51 	.word	0x08002f51
 8002f10:	08002f51 	.word	0x08002f51
 8002f14:	08002f45 	.word	0x08002f45
 8002f18:	08002f51 	.word	0x08002f51
 8002f1c:	08002f51 	.word	0x08002f51
 8002f20:	08002f51 	.word	0x08002f51
 8002f24:	08002f3f 	.word	0x08002f3f
 8002f28:	08002f51 	.word	0x08002f51
 8002f2c:	08002f51 	.word	0x08002f51
 8002f30:	08002f51 	.word	0x08002f51
 8002f34:	08002f4b 	.word	0x08002f4b
 8002f38:	2300      	movs	r3, #0
 8002f3a:	77fb      	strb	r3, [r7, #31]
 8002f3c:	e117      	b.n	800316e <UART_SetConfig+0x34a>
 8002f3e:	2302      	movs	r3, #2
 8002f40:	77fb      	strb	r3, [r7, #31]
 8002f42:	e114      	b.n	800316e <UART_SetConfig+0x34a>
 8002f44:	2304      	movs	r3, #4
 8002f46:	77fb      	strb	r3, [r7, #31]
 8002f48:	e111      	b.n	800316e <UART_SetConfig+0x34a>
 8002f4a:	2308      	movs	r3, #8
 8002f4c:	77fb      	strb	r3, [r7, #31]
 8002f4e:	e10e      	b.n	800316e <UART_SetConfig+0x34a>
 8002f50:	2310      	movs	r3, #16
 8002f52:	77fb      	strb	r3, [r7, #31]
 8002f54:	e10b      	b.n	800316e <UART_SetConfig+0x34a>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a69      	ldr	r2, [pc, #420]	; (8003100 <UART_SetConfig+0x2dc>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d120      	bne.n	8002fa2 <UART_SetConfig+0x17e>
 8002f60:	4b65      	ldr	r3, [pc, #404]	; (80030f8 <UART_SetConfig+0x2d4>)
 8002f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f66:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002f6a:	2b30      	cmp	r3, #48	; 0x30
 8002f6c:	d013      	beq.n	8002f96 <UART_SetConfig+0x172>
 8002f6e:	2b30      	cmp	r3, #48	; 0x30
 8002f70:	d814      	bhi.n	8002f9c <UART_SetConfig+0x178>
 8002f72:	2b20      	cmp	r3, #32
 8002f74:	d009      	beq.n	8002f8a <UART_SetConfig+0x166>
 8002f76:	2b20      	cmp	r3, #32
 8002f78:	d810      	bhi.n	8002f9c <UART_SetConfig+0x178>
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d002      	beq.n	8002f84 <UART_SetConfig+0x160>
 8002f7e:	2b10      	cmp	r3, #16
 8002f80:	d006      	beq.n	8002f90 <UART_SetConfig+0x16c>
 8002f82:	e00b      	b.n	8002f9c <UART_SetConfig+0x178>
 8002f84:	2300      	movs	r3, #0
 8002f86:	77fb      	strb	r3, [r7, #31]
 8002f88:	e0f1      	b.n	800316e <UART_SetConfig+0x34a>
 8002f8a:	2302      	movs	r3, #2
 8002f8c:	77fb      	strb	r3, [r7, #31]
 8002f8e:	e0ee      	b.n	800316e <UART_SetConfig+0x34a>
 8002f90:	2304      	movs	r3, #4
 8002f92:	77fb      	strb	r3, [r7, #31]
 8002f94:	e0eb      	b.n	800316e <UART_SetConfig+0x34a>
 8002f96:	2308      	movs	r3, #8
 8002f98:	77fb      	strb	r3, [r7, #31]
 8002f9a:	e0e8      	b.n	800316e <UART_SetConfig+0x34a>
 8002f9c:	2310      	movs	r3, #16
 8002f9e:	77fb      	strb	r3, [r7, #31]
 8002fa0:	e0e5      	b.n	800316e <UART_SetConfig+0x34a>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a57      	ldr	r2, [pc, #348]	; (8003104 <UART_SetConfig+0x2e0>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d120      	bne.n	8002fee <UART_SetConfig+0x1ca>
 8002fac:	4b52      	ldr	r3, [pc, #328]	; (80030f8 <UART_SetConfig+0x2d4>)
 8002fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fb2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002fb6:	2bc0      	cmp	r3, #192	; 0xc0
 8002fb8:	d013      	beq.n	8002fe2 <UART_SetConfig+0x1be>
 8002fba:	2bc0      	cmp	r3, #192	; 0xc0
 8002fbc:	d814      	bhi.n	8002fe8 <UART_SetConfig+0x1c4>
 8002fbe:	2b80      	cmp	r3, #128	; 0x80
 8002fc0:	d009      	beq.n	8002fd6 <UART_SetConfig+0x1b2>
 8002fc2:	2b80      	cmp	r3, #128	; 0x80
 8002fc4:	d810      	bhi.n	8002fe8 <UART_SetConfig+0x1c4>
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d002      	beq.n	8002fd0 <UART_SetConfig+0x1ac>
 8002fca:	2b40      	cmp	r3, #64	; 0x40
 8002fcc:	d006      	beq.n	8002fdc <UART_SetConfig+0x1b8>
 8002fce:	e00b      	b.n	8002fe8 <UART_SetConfig+0x1c4>
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	77fb      	strb	r3, [r7, #31]
 8002fd4:	e0cb      	b.n	800316e <UART_SetConfig+0x34a>
 8002fd6:	2302      	movs	r3, #2
 8002fd8:	77fb      	strb	r3, [r7, #31]
 8002fda:	e0c8      	b.n	800316e <UART_SetConfig+0x34a>
 8002fdc:	2304      	movs	r3, #4
 8002fde:	77fb      	strb	r3, [r7, #31]
 8002fe0:	e0c5      	b.n	800316e <UART_SetConfig+0x34a>
 8002fe2:	2308      	movs	r3, #8
 8002fe4:	77fb      	strb	r3, [r7, #31]
 8002fe6:	e0c2      	b.n	800316e <UART_SetConfig+0x34a>
 8002fe8:	2310      	movs	r3, #16
 8002fea:	77fb      	strb	r3, [r7, #31]
 8002fec:	e0bf      	b.n	800316e <UART_SetConfig+0x34a>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a45      	ldr	r2, [pc, #276]	; (8003108 <UART_SetConfig+0x2e4>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d125      	bne.n	8003044 <UART_SetConfig+0x220>
 8002ff8:	4b3f      	ldr	r3, [pc, #252]	; (80030f8 <UART_SetConfig+0x2d4>)
 8002ffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ffe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003002:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003006:	d017      	beq.n	8003038 <UART_SetConfig+0x214>
 8003008:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800300c:	d817      	bhi.n	800303e <UART_SetConfig+0x21a>
 800300e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003012:	d00b      	beq.n	800302c <UART_SetConfig+0x208>
 8003014:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003018:	d811      	bhi.n	800303e <UART_SetConfig+0x21a>
 800301a:	2b00      	cmp	r3, #0
 800301c:	d003      	beq.n	8003026 <UART_SetConfig+0x202>
 800301e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003022:	d006      	beq.n	8003032 <UART_SetConfig+0x20e>
 8003024:	e00b      	b.n	800303e <UART_SetConfig+0x21a>
 8003026:	2300      	movs	r3, #0
 8003028:	77fb      	strb	r3, [r7, #31]
 800302a:	e0a0      	b.n	800316e <UART_SetConfig+0x34a>
 800302c:	2302      	movs	r3, #2
 800302e:	77fb      	strb	r3, [r7, #31]
 8003030:	e09d      	b.n	800316e <UART_SetConfig+0x34a>
 8003032:	2304      	movs	r3, #4
 8003034:	77fb      	strb	r3, [r7, #31]
 8003036:	e09a      	b.n	800316e <UART_SetConfig+0x34a>
 8003038:	2308      	movs	r3, #8
 800303a:	77fb      	strb	r3, [r7, #31]
 800303c:	e097      	b.n	800316e <UART_SetConfig+0x34a>
 800303e:	2310      	movs	r3, #16
 8003040:	77fb      	strb	r3, [r7, #31]
 8003042:	e094      	b.n	800316e <UART_SetConfig+0x34a>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a30      	ldr	r2, [pc, #192]	; (800310c <UART_SetConfig+0x2e8>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d125      	bne.n	800309a <UART_SetConfig+0x276>
 800304e:	4b2a      	ldr	r3, [pc, #168]	; (80030f8 <UART_SetConfig+0x2d4>)
 8003050:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003054:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003058:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800305c:	d017      	beq.n	800308e <UART_SetConfig+0x26a>
 800305e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003062:	d817      	bhi.n	8003094 <UART_SetConfig+0x270>
 8003064:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003068:	d00b      	beq.n	8003082 <UART_SetConfig+0x25e>
 800306a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800306e:	d811      	bhi.n	8003094 <UART_SetConfig+0x270>
 8003070:	2b00      	cmp	r3, #0
 8003072:	d003      	beq.n	800307c <UART_SetConfig+0x258>
 8003074:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003078:	d006      	beq.n	8003088 <UART_SetConfig+0x264>
 800307a:	e00b      	b.n	8003094 <UART_SetConfig+0x270>
 800307c:	2301      	movs	r3, #1
 800307e:	77fb      	strb	r3, [r7, #31]
 8003080:	e075      	b.n	800316e <UART_SetConfig+0x34a>
 8003082:	2302      	movs	r3, #2
 8003084:	77fb      	strb	r3, [r7, #31]
 8003086:	e072      	b.n	800316e <UART_SetConfig+0x34a>
 8003088:	2304      	movs	r3, #4
 800308a:	77fb      	strb	r3, [r7, #31]
 800308c:	e06f      	b.n	800316e <UART_SetConfig+0x34a>
 800308e:	2308      	movs	r3, #8
 8003090:	77fb      	strb	r3, [r7, #31]
 8003092:	e06c      	b.n	800316e <UART_SetConfig+0x34a>
 8003094:	2310      	movs	r3, #16
 8003096:	77fb      	strb	r3, [r7, #31]
 8003098:	e069      	b.n	800316e <UART_SetConfig+0x34a>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a1c      	ldr	r2, [pc, #112]	; (8003110 <UART_SetConfig+0x2ec>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d137      	bne.n	8003114 <UART_SetConfig+0x2f0>
 80030a4:	4b14      	ldr	r3, [pc, #80]	; (80030f8 <UART_SetConfig+0x2d4>)
 80030a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030aa:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80030ae:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80030b2:	d017      	beq.n	80030e4 <UART_SetConfig+0x2c0>
 80030b4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80030b8:	d817      	bhi.n	80030ea <UART_SetConfig+0x2c6>
 80030ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030be:	d00b      	beq.n	80030d8 <UART_SetConfig+0x2b4>
 80030c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030c4:	d811      	bhi.n	80030ea <UART_SetConfig+0x2c6>
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d003      	beq.n	80030d2 <UART_SetConfig+0x2ae>
 80030ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030ce:	d006      	beq.n	80030de <UART_SetConfig+0x2ba>
 80030d0:	e00b      	b.n	80030ea <UART_SetConfig+0x2c6>
 80030d2:	2300      	movs	r3, #0
 80030d4:	77fb      	strb	r3, [r7, #31]
 80030d6:	e04a      	b.n	800316e <UART_SetConfig+0x34a>
 80030d8:	2302      	movs	r3, #2
 80030da:	77fb      	strb	r3, [r7, #31]
 80030dc:	e047      	b.n	800316e <UART_SetConfig+0x34a>
 80030de:	2304      	movs	r3, #4
 80030e0:	77fb      	strb	r3, [r7, #31]
 80030e2:	e044      	b.n	800316e <UART_SetConfig+0x34a>
 80030e4:	2308      	movs	r3, #8
 80030e6:	77fb      	strb	r3, [r7, #31]
 80030e8:	e041      	b.n	800316e <UART_SetConfig+0x34a>
 80030ea:	2310      	movs	r3, #16
 80030ec:	77fb      	strb	r3, [r7, #31]
 80030ee:	e03e      	b.n	800316e <UART_SetConfig+0x34a>
 80030f0:	efff69f3 	.word	0xefff69f3
 80030f4:	40011000 	.word	0x40011000
 80030f8:	40023800 	.word	0x40023800
 80030fc:	40004400 	.word	0x40004400
 8003100:	40004800 	.word	0x40004800
 8003104:	40004c00 	.word	0x40004c00
 8003108:	40005000 	.word	0x40005000
 800310c:	40011400 	.word	0x40011400
 8003110:	40007800 	.word	0x40007800
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a91      	ldr	r2, [pc, #580]	; (8003360 <UART_SetConfig+0x53c>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d125      	bne.n	800316a <UART_SetConfig+0x346>
 800311e:	4b91      	ldr	r3, [pc, #580]	; (8003364 <UART_SetConfig+0x540>)
 8003120:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003124:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003128:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800312c:	d017      	beq.n	800315e <UART_SetConfig+0x33a>
 800312e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003132:	d817      	bhi.n	8003164 <UART_SetConfig+0x340>
 8003134:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003138:	d00b      	beq.n	8003152 <UART_SetConfig+0x32e>
 800313a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800313e:	d811      	bhi.n	8003164 <UART_SetConfig+0x340>
 8003140:	2b00      	cmp	r3, #0
 8003142:	d003      	beq.n	800314c <UART_SetConfig+0x328>
 8003144:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003148:	d006      	beq.n	8003158 <UART_SetConfig+0x334>
 800314a:	e00b      	b.n	8003164 <UART_SetConfig+0x340>
 800314c:	2300      	movs	r3, #0
 800314e:	77fb      	strb	r3, [r7, #31]
 8003150:	e00d      	b.n	800316e <UART_SetConfig+0x34a>
 8003152:	2302      	movs	r3, #2
 8003154:	77fb      	strb	r3, [r7, #31]
 8003156:	e00a      	b.n	800316e <UART_SetConfig+0x34a>
 8003158:	2304      	movs	r3, #4
 800315a:	77fb      	strb	r3, [r7, #31]
 800315c:	e007      	b.n	800316e <UART_SetConfig+0x34a>
 800315e:	2308      	movs	r3, #8
 8003160:	77fb      	strb	r3, [r7, #31]
 8003162:	e004      	b.n	800316e <UART_SetConfig+0x34a>
 8003164:	2310      	movs	r3, #16
 8003166:	77fb      	strb	r3, [r7, #31]
 8003168:	e001      	b.n	800316e <UART_SetConfig+0x34a>
 800316a:	2310      	movs	r3, #16
 800316c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	69db      	ldr	r3, [r3, #28]
 8003172:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003176:	d17c      	bne.n	8003272 <UART_SetConfig+0x44e>
  {
    switch (clocksource)
 8003178:	7ffb      	ldrb	r3, [r7, #31]
 800317a:	2b08      	cmp	r3, #8
 800317c:	d859      	bhi.n	8003232 <UART_SetConfig+0x40e>
 800317e:	a201      	add	r2, pc, #4	; (adr r2, 8003184 <UART_SetConfig+0x360>)
 8003180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003184:	080031a9 	.word	0x080031a9
 8003188:	080031c7 	.word	0x080031c7
 800318c:	080031e5 	.word	0x080031e5
 8003190:	08003233 	.word	0x08003233
 8003194:	080031fd 	.word	0x080031fd
 8003198:	08003233 	.word	0x08003233
 800319c:	08003233 	.word	0x08003233
 80031a0:	08003233 	.word	0x08003233
 80031a4:	0800321b 	.word	0x0800321b
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80031a8:	f7fe ff76 	bl	8002098 <HAL_RCC_GetPCLK1Freq>
 80031ac:	4603      	mov	r3, r0
 80031ae:	005a      	lsls	r2, r3, #1
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	085b      	lsrs	r3, r3, #1
 80031b6:	441a      	add	r2, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80031c0:	b29b      	uxth	r3, r3
 80031c2:	61bb      	str	r3, [r7, #24]
        break;
 80031c4:	e038      	b.n	8003238 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80031c6:	f7fe ff7b 	bl	80020c0 <HAL_RCC_GetPCLK2Freq>
 80031ca:	4603      	mov	r3, r0
 80031cc:	005a      	lsls	r2, r3, #1
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	085b      	lsrs	r3, r3, #1
 80031d4:	441a      	add	r2, r3
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	fbb2 f3f3 	udiv	r3, r2, r3
 80031de:	b29b      	uxth	r3, r3
 80031e0:	61bb      	str	r3, [r7, #24]
        break;
 80031e2:	e029      	b.n	8003238 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	085a      	lsrs	r2, r3, #1
 80031ea:	4b5f      	ldr	r3, [pc, #380]	; (8003368 <UART_SetConfig+0x544>)
 80031ec:	4413      	add	r3, r2
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	6852      	ldr	r2, [r2, #4]
 80031f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	61bb      	str	r3, [r7, #24]
        break;
 80031fa:	e01d      	b.n	8003238 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80031fc:	f7fe fe5e 	bl	8001ebc <HAL_RCC_GetSysClockFreq>
 8003200:	4603      	mov	r3, r0
 8003202:	005a      	lsls	r2, r3, #1
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	085b      	lsrs	r3, r3, #1
 800320a:	441a      	add	r2, r3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	fbb2 f3f3 	udiv	r3, r2, r3
 8003214:	b29b      	uxth	r3, r3
 8003216:	61bb      	str	r3, [r7, #24]
        break;
 8003218:	e00e      	b.n	8003238 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	085b      	lsrs	r3, r3, #1
 8003220:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	fbb2 f3f3 	udiv	r3, r2, r3
 800322c:	b29b      	uxth	r3, r3
 800322e:	61bb      	str	r3, [r7, #24]
        break;
 8003230:	e002      	b.n	8003238 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	75fb      	strb	r3, [r7, #23]
        break;
 8003236:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003238:	69bb      	ldr	r3, [r7, #24]
 800323a:	2b0f      	cmp	r3, #15
 800323c:	d916      	bls.n	800326c <UART_SetConfig+0x448>
 800323e:	69bb      	ldr	r3, [r7, #24]
 8003240:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003244:	d212      	bcs.n	800326c <UART_SetConfig+0x448>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003246:	69bb      	ldr	r3, [r7, #24]
 8003248:	b29b      	uxth	r3, r3
 800324a:	f023 030f 	bic.w	r3, r3, #15
 800324e:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003250:	69bb      	ldr	r3, [r7, #24]
 8003252:	085b      	lsrs	r3, r3, #1
 8003254:	b29b      	uxth	r3, r3
 8003256:	f003 0307 	and.w	r3, r3, #7
 800325a:	b29a      	uxth	r2, r3
 800325c:	89fb      	ldrh	r3, [r7, #14]
 800325e:	4313      	orrs	r3, r2
 8003260:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	89fa      	ldrh	r2, [r7, #14]
 8003268:	60da      	str	r2, [r3, #12]
 800326a:	e06e      	b.n	800334a <UART_SetConfig+0x526>
    }
    else
    {
      ret = HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	75fb      	strb	r3, [r7, #23]
 8003270:	e06b      	b.n	800334a <UART_SetConfig+0x526>
    }
  }
  else
  {
    switch (clocksource)
 8003272:	7ffb      	ldrb	r3, [r7, #31]
 8003274:	2b08      	cmp	r3, #8
 8003276:	d857      	bhi.n	8003328 <UART_SetConfig+0x504>
 8003278:	a201      	add	r2, pc, #4	; (adr r2, 8003280 <UART_SetConfig+0x45c>)
 800327a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800327e:	bf00      	nop
 8003280:	080032a5 	.word	0x080032a5
 8003284:	080032c1 	.word	0x080032c1
 8003288:	080032dd 	.word	0x080032dd
 800328c:	08003329 	.word	0x08003329
 8003290:	080032f5 	.word	0x080032f5
 8003294:	08003329 	.word	0x08003329
 8003298:	08003329 	.word	0x08003329
 800329c:	08003329 	.word	0x08003329
 80032a0:	08003311 	.word	0x08003311
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80032a4:	f7fe fef8 	bl	8002098 <HAL_RCC_GetPCLK1Freq>
 80032a8:	4602      	mov	r2, r0
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	085b      	lsrs	r3, r3, #1
 80032b0:	441a      	add	r2, r3
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ba:	b29b      	uxth	r3, r3
 80032bc:	61bb      	str	r3, [r7, #24]
        break;
 80032be:	e036      	b.n	800332e <UART_SetConfig+0x50a>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80032c0:	f7fe fefe 	bl	80020c0 <HAL_RCC_GetPCLK2Freq>
 80032c4:	4602      	mov	r2, r0
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	085b      	lsrs	r3, r3, #1
 80032cc:	441a      	add	r2, r3
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	61bb      	str	r3, [r7, #24]
        break;
 80032da:	e028      	b.n	800332e <UART_SetConfig+0x50a>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	085a      	lsrs	r2, r3, #1
 80032e2:	4b22      	ldr	r3, [pc, #136]	; (800336c <UART_SetConfig+0x548>)
 80032e4:	4413      	add	r3, r2
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	6852      	ldr	r2, [r2, #4]
 80032ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80032ee:	b29b      	uxth	r3, r3
 80032f0:	61bb      	str	r3, [r7, #24]
        break;
 80032f2:	e01c      	b.n	800332e <UART_SetConfig+0x50a>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80032f4:	f7fe fde2 	bl	8001ebc <HAL_RCC_GetSysClockFreq>
 80032f8:	4602      	mov	r2, r0
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	085b      	lsrs	r3, r3, #1
 8003300:	441a      	add	r2, r3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	fbb2 f3f3 	udiv	r3, r2, r3
 800330a:	b29b      	uxth	r3, r3
 800330c:	61bb      	str	r3, [r7, #24]
        break;
 800330e:	e00e      	b.n	800332e <UART_SetConfig+0x50a>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	085b      	lsrs	r3, r3, #1
 8003316:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003322:	b29b      	uxth	r3, r3
 8003324:	61bb      	str	r3, [r7, #24]
        break;
 8003326:	e002      	b.n	800332e <UART_SetConfig+0x50a>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	75fb      	strb	r3, [r7, #23]
        break;
 800332c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800332e:	69bb      	ldr	r3, [r7, #24]
 8003330:	2b0f      	cmp	r3, #15
 8003332:	d908      	bls.n	8003346 <UART_SetConfig+0x522>
 8003334:	69bb      	ldr	r3, [r7, #24]
 8003336:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800333a:	d204      	bcs.n	8003346 <UART_SetConfig+0x522>
    {
      huart->Instance->BRR = usartdiv;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	69ba      	ldr	r2, [r7, #24]
 8003342:	60da      	str	r2, [r3, #12]
 8003344:	e001      	b.n	800334a <UART_SetConfig+0x526>
    }
    else
    {
      ret = HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2200      	movs	r2, #0
 800334e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2200      	movs	r2, #0
 8003354:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003356:	7dfb      	ldrb	r3, [r7, #23]
}
 8003358:	4618      	mov	r0, r3
 800335a:	3720      	adds	r7, #32
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}
 8003360:	40007c00 	.word	0x40007c00
 8003364:	40023800 	.word	0x40023800
 8003368:	01e84800 	.word	0x01e84800
 800336c:	00f42400 	.word	0x00f42400

08003370 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003370:	b480      	push	{r7}
 8003372:	b083      	sub	sp, #12
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337c:	f003 0301 	and.w	r3, r3, #1
 8003380:	2b00      	cmp	r3, #0
 8003382:	d00a      	beq.n	800339a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	430a      	orrs	r2, r1
 8003398:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339e:	f003 0302 	and.w	r3, r3, #2
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d00a      	beq.n	80033bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	430a      	orrs	r2, r1
 80033ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c0:	f003 0304 	and.w	r3, r3, #4
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d00a      	beq.n	80033de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	430a      	orrs	r2, r1
 80033dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e2:	f003 0308 	and.w	r3, r3, #8
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d00a      	beq.n	8003400 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	430a      	orrs	r2, r1
 80033fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003404:	f003 0310 	and.w	r3, r3, #16
 8003408:	2b00      	cmp	r3, #0
 800340a:	d00a      	beq.n	8003422 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	430a      	orrs	r2, r1
 8003420:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003426:	f003 0320 	and.w	r3, r3, #32
 800342a:	2b00      	cmp	r3, #0
 800342c:	d00a      	beq.n	8003444 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	430a      	orrs	r2, r1
 8003442:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003448:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800344c:	2b00      	cmp	r3, #0
 800344e:	d01a      	beq.n	8003486 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	430a      	orrs	r2, r1
 8003464:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800346e:	d10a      	bne.n	8003486 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	430a      	orrs	r2, r1
 8003484:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800348e:	2b00      	cmp	r3, #0
 8003490:	d00a      	beq.n	80034a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	430a      	orrs	r2, r1
 80034a6:	605a      	str	r2, [r3, #4]
  }
}
 80034a8:	bf00      	nop
 80034aa:	370c      	adds	r7, #12
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr

080034b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b086      	sub	sp, #24
 80034b8:	af02      	add	r7, sp, #8
 80034ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2200      	movs	r2, #0
 80034c0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80034c2:	f7fd f8c3 	bl	800064c <HAL_GetTick>
 80034c6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 0308 	and.w	r3, r3, #8
 80034d2:	2b08      	cmp	r3, #8
 80034d4:	d10e      	bne.n	80034f4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034d6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80034da:	9300      	str	r3, [sp, #0]
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2200      	movs	r2, #0
 80034e0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f000 f814 	bl	8003512 <UART_WaitOnFlagUntilTimeout>
 80034ea:	4603      	mov	r3, r0
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d001      	beq.n	80034f4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034f0:	2303      	movs	r3, #3
 80034f2:	e00a      	b.n	800350a <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2220      	movs	r2, #32
 80034f8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2220      	movs	r2, #32
 80034fe:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003508:	2300      	movs	r3, #0
}
 800350a:	4618      	mov	r0, r3
 800350c:	3710      	adds	r7, #16
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}

08003512 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003512:	b580      	push	{r7, lr}
 8003514:	b084      	sub	sp, #16
 8003516:	af00      	add	r7, sp, #0
 8003518:	60f8      	str	r0, [r7, #12]
 800351a:	60b9      	str	r1, [r7, #8]
 800351c:	603b      	str	r3, [r7, #0]
 800351e:	4613      	mov	r3, r2
 8003520:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003522:	e02a      	b.n	800357a <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003524:	69bb      	ldr	r3, [r7, #24]
 8003526:	f1b3 3fff 	cmp.w	r3, #4294967295
 800352a:	d026      	beq.n	800357a <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800352c:	f7fd f88e 	bl	800064c <HAL_GetTick>
 8003530:	4602      	mov	r2, r0
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	69ba      	ldr	r2, [r7, #24]
 8003538:	429a      	cmp	r2, r3
 800353a:	d302      	bcc.n	8003542 <UART_WaitOnFlagUntilTimeout+0x30>
 800353c:	69bb      	ldr	r3, [r7, #24]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d11b      	bne.n	800357a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003550:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	689a      	ldr	r2, [r3, #8]
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f022 0201 	bic.w	r2, r2, #1
 8003560:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2220      	movs	r2, #32
 8003566:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2220      	movs	r2, #32
 800356c:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2200      	movs	r2, #0
 8003572:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	e00f      	b.n	800359a <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	69da      	ldr	r2, [r3, #28]
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	4013      	ands	r3, r2
 8003584:	68ba      	ldr	r2, [r7, #8]
 8003586:	429a      	cmp	r2, r3
 8003588:	bf0c      	ite	eq
 800358a:	2301      	moveq	r3, #1
 800358c:	2300      	movne	r3, #0
 800358e:	b2db      	uxtb	r3, r3
 8003590:	461a      	mov	r2, r3
 8003592:	79fb      	ldrb	r3, [r7, #7]
 8003594:	429a      	cmp	r2, r3
 8003596:	d0c5      	beq.n	8003524 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003598:	2300      	movs	r3, #0
}
 800359a:	4618      	mov	r0, r3
 800359c:	3710      	adds	r7, #16
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}

080035a2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80035a2:	b480      	push	{r7}
 80035a4:	b083      	sub	sp, #12
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80035b8:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	689a      	ldr	r2, [r3, #8]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f022 0201 	bic.w	r2, r2, #1
 80035c8:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2220      	movs	r2, #32
 80035ce:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2200      	movs	r2, #0
 80035d4:	661a      	str	r2, [r3, #96]	; 0x60
}
 80035d6:	bf00      	nop
 80035d8:	370c      	adds	r7, #12
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr

080035e2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80035e2:	b580      	push	{r7, lr}
 80035e4:	b084      	sub	sp, #16
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2200      	movs	r2, #0
 80035f4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2200      	movs	r2, #0
 80035fc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003600:	68f8      	ldr	r0, [r7, #12]
 8003602:	f7ff fc05 	bl	8002e10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003606:	bf00      	nop
 8003608:	3710      	adds	r7, #16
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}

0800360e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800360e:	b580      	push	{r7, lr}
 8003610:	b082      	sub	sp, #8
 8003612:	af00      	add	r7, sp, #0
 8003614:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003624:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2220      	movs	r2, #32
 800362a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2200      	movs	r2, #0
 8003630:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f7ff fbe2 	bl	8002dfc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003638:	bf00      	nop
 800363a:	3708      	adds	r7, #8
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}

08003640 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b084      	sub	sp, #16
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800364e:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003654:	2b22      	cmp	r3, #34	; 0x22
 8003656:	d13a      	bne.n	80036ce <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365e:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003660:	89bb      	ldrh	r3, [r7, #12]
 8003662:	b2d9      	uxtb	r1, r3
 8003664:	89fb      	ldrh	r3, [r7, #14]
 8003666:	b2da      	uxtb	r2, r3
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800366c:	400a      	ands	r2, r1
 800366e:	b2d2      	uxtb	r2, r2
 8003670:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003676:	1c5a      	adds	r2, r3, #1
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003682:	b29b      	uxth	r3, r3
 8003684:	3b01      	subs	r3, #1
 8003686:	b29a      	uxth	r2, r3
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003694:	b29b      	uxth	r3, r3
 8003696:	2b00      	cmp	r3, #0
 8003698:	d121      	bne.n	80036de <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80036a8:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	689a      	ldr	r2, [r3, #8]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f022 0201 	bic.w	r2, r2, #1
 80036b8:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2220      	movs	r2, #32
 80036be:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2200      	movs	r2, #0
 80036c4:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f000 fbbe 	bl	8003e48 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80036cc:	e007      	b.n	80036de <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	699a      	ldr	r2, [r3, #24]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f042 0208 	orr.w	r2, r2, #8
 80036dc:	619a      	str	r2, [r3, #24]
}
 80036de:	bf00      	nop
 80036e0:	3710      	adds	r7, #16
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}

080036e6 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80036e6:	b580      	push	{r7, lr}
 80036e8:	b084      	sub	sp, #16
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80036f4:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036fa:	2b22      	cmp	r3, #34	; 0x22
 80036fc:	d13a      	bne.n	8003774 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003704:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800370a:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800370c:	89ba      	ldrh	r2, [r7, #12]
 800370e:	89fb      	ldrh	r3, [r7, #14]
 8003710:	4013      	ands	r3, r2
 8003712:	b29a      	uxth	r2, r3
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800371c:	1c9a      	adds	r2, r3, #2
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003728:	b29b      	uxth	r3, r3
 800372a:	3b01      	subs	r3, #1
 800372c:	b29a      	uxth	r2, r3
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800373a:	b29b      	uxth	r3, r3
 800373c:	2b00      	cmp	r3, #0
 800373e:	d121      	bne.n	8003784 <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800374e:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	689a      	ldr	r2, [r3, #8]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f022 0201 	bic.w	r2, r2, #1
 800375e:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2220      	movs	r2, #32
 8003764:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	f000 fb6b 	bl	8003e48 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003772:	e007      	b.n	8003784 <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	699a      	ldr	r2, [r3, #24]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f042 0208 	orr.w	r2, r2, #8
 8003782:	619a      	str	r2, [r3, #24]
}
 8003784:	bf00      	nop
 8003786:	3710      	adds	r7, #16
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}

0800378c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800378c:	b084      	sub	sp, #16
 800378e:	b580      	push	{r7, lr}
 8003790:	b084      	sub	sp, #16
 8003792:	af00      	add	r7, sp, #0
 8003794:	6078      	str	r0, [r7, #4]
 8003796:	f107 001c 	add.w	r0, r7, #28
 800379a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800379e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d120      	bne.n	80037e6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037a8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	68da      	ldr	r2, [r3, #12]
 80037b4:	4b20      	ldr	r3, [pc, #128]	; (8003838 <USB_CoreInit+0xac>)
 80037b6:	4013      	ands	r3, r2
 80037b8:	687a      	ldr	r2, [r7, #4]
 80037ba:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80037c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d105      	bne.n	80037da <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	68db      	ldr	r3, [r3, #12]
 80037d2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f000 fa60 	bl	8003ca0 <USB_CoreReset>
 80037e0:	4603      	mov	r3, r0
 80037e2:	73fb      	strb	r3, [r7, #15]
 80037e4:	e010      	b.n	8003808 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f000 fa54 	bl	8003ca0 <USB_CoreReset>
 80037f8:	4603      	mov	r3, r0
 80037fa:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003800:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8003808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800380a:	2b01      	cmp	r3, #1
 800380c:	d10b      	bne.n	8003826 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	f043 0206 	orr.w	r2, r3, #6
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	f043 0220 	orr.w	r2, r3, #32
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003826:	7bfb      	ldrb	r3, [r7, #15]
}
 8003828:	4618      	mov	r0, r3
 800382a:	3710      	adds	r7, #16
 800382c:	46bd      	mov	sp, r7
 800382e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003832:	b004      	add	sp, #16
 8003834:	4770      	bx	lr
 8003836:	bf00      	nop
 8003838:	ffbdffbf 	.word	0xffbdffbf

0800383c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	f023 0201 	bic.w	r2, r3, #1
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003850:	2300      	movs	r3, #0
}
 8003852:	4618      	mov	r0, r3
 8003854:	370c      	adds	r7, #12
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr

0800385e <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800385e:	b580      	push	{r7, lr}
 8003860:	b082      	sub	sp, #8
 8003862:	af00      	add	r7, sp, #0
 8003864:	6078      	str	r0, [r7, #4]
 8003866:	460b      	mov	r3, r1
 8003868:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	68db      	ldr	r3, [r3, #12]
 800386e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003876:	78fb      	ldrb	r3, [r7, #3]
 8003878:	2b01      	cmp	r3, #1
 800387a:	d106      	bne.n	800388a <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	60da      	str	r2, [r3, #12]
 8003888:	e00b      	b.n	80038a2 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800388a:	78fb      	ldrb	r3, [r7, #3]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d106      	bne.n	800389e <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	60da      	str	r2, [r3, #12]
 800389c:	e001      	b.n	80038a2 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e003      	b.n	80038aa <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80038a2:	2032      	movs	r0, #50	; 0x32
 80038a4:	f7fc fede 	bl	8000664 <HAL_Delay>

  return HAL_OK;
 80038a8:	2300      	movs	r3, #0
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3708      	adds	r7, #8
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
	...

080038b4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80038b4:	b084      	sub	sp, #16
 80038b6:	b580      	push	{r7, lr}
 80038b8:	b086      	sub	sp, #24
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	6078      	str	r0, [r7, #4]
 80038be:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80038c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80038c6:	2300      	movs	r3, #0
 80038c8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80038ce:	2300      	movs	r3, #0
 80038d0:	613b      	str	r3, [r7, #16]
 80038d2:	e009      	b.n	80038e8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80038d4:	687a      	ldr	r2, [r7, #4]
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	3340      	adds	r3, #64	; 0x40
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	4413      	add	r3, r2
 80038de:	2200      	movs	r2, #0
 80038e0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	3301      	adds	r3, #1
 80038e6:	613b      	str	r3, [r7, #16]
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	2b0e      	cmp	r3, #14
 80038ec:	d9f2      	bls.n	80038d4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80038ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d112      	bne.n	800391a <USB_DevInit+0x66>
  {
    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038f8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	601a      	str	r2, [r3, #0]
 8003918:	e005      	b.n	8003926 <USB_DevInit+0x72>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800391e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800392c:	461a      	mov	r2, r3
 800392e:	2300      	movs	r3, #0
 8003930:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003938:	4619      	mov	r1, r3
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003940:	461a      	mov	r2, r3
 8003942:	680b      	ldr	r3, [r1, #0]
 8003944:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003948:	2b01      	cmp	r3, #1
 800394a:	d10c      	bne.n	8003966 <USB_DevInit+0xb2>
  {
    if (cfg.speed == USB_OTG_SPEED_HIGH)
 800394c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800394e:	2b00      	cmp	r3, #0
 8003950:	d104      	bne.n	800395c <USB_DevInit+0xa8>
    {
      /* Set High speed phy */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003952:	2100      	movs	r1, #0
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f000 f971 	bl	8003c3c <USB_SetDevSpeed>
 800395a:	e018      	b.n	800398e <USB_DevInit+0xda>
    }
    else
    {
      /* set High speed phy in Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800395c:	2101      	movs	r1, #1
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f000 f96c 	bl	8003c3c <USB_SetDevSpeed>
 8003964:	e013      	b.n	800398e <USB_DevInit+0xda>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8003966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003968:	2b03      	cmp	r3, #3
 800396a:	d10c      	bne.n	8003986 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USB_OTG_SPEED_HIGH)
 800396c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800396e:	2b00      	cmp	r3, #0
 8003970:	d104      	bne.n	800397c <USB_DevInit+0xc8>
    {
      /* Set High speed phy */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003972:	2100      	movs	r1, #0
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	f000 f961 	bl	8003c3c <USB_SetDevSpeed>
 800397a:	e008      	b.n	800398e <USB_DevInit+0xda>
    }
    else
    {
      /* set High speed phy in Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800397c:	2101      	movs	r1, #1
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f000 f95c 	bl	8003c3c <USB_SetDevSpeed>
 8003984:	e003      	b.n	800398e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Full speed phy */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003986:	2103      	movs	r1, #3
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f000 f957 	bl	8003c3c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800398e:	2110      	movs	r1, #16
 8003990:	6878      	ldr	r0, [r7, #4]
 8003992:	f000 f90b 	bl	8003bac <USB_FlushTxFifo>
 8003996:	4603      	mov	r3, r0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d001      	beq.n	80039a0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	f000 f929 	bl	8003bf8 <USB_FlushRxFifo>
 80039a6:	4603      	mov	r3, r0
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d001      	beq.n	80039b0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039b6:	461a      	mov	r2, r3
 80039b8:	2300      	movs	r3, #0
 80039ba:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039c2:	461a      	mov	r2, r3
 80039c4:	2300      	movs	r3, #0
 80039c6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039ce:	461a      	mov	r2, r3
 80039d0:	2300      	movs	r3, #0
 80039d2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80039d4:	2300      	movs	r3, #0
 80039d6:	613b      	str	r3, [r7, #16]
 80039d8:	e043      	b.n	8003a62 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	015a      	lsls	r2, r3, #5
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	4413      	add	r3, r2
 80039e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80039ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80039f0:	d118      	bne.n	8003a24 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d10a      	bne.n	8003a0e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	015a      	lsls	r2, r3, #5
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	4413      	add	r3, r2
 8003a00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a04:	461a      	mov	r2, r3
 8003a06:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003a0a:	6013      	str	r3, [r2, #0]
 8003a0c:	e013      	b.n	8003a36 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	015a      	lsls	r2, r3, #5
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	4413      	add	r3, r2
 8003a16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a1a:	461a      	mov	r2, r3
 8003a1c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003a20:	6013      	str	r3, [r2, #0]
 8003a22:	e008      	b.n	8003a36 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	015a      	lsls	r2, r3, #5
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	4413      	add	r3, r2
 8003a2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a30:	461a      	mov	r2, r3
 8003a32:	2300      	movs	r3, #0
 8003a34:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	015a      	lsls	r2, r3, #5
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	4413      	add	r3, r2
 8003a3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a42:	461a      	mov	r2, r3
 8003a44:	2300      	movs	r3, #0
 8003a46:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	015a      	lsls	r2, r3, #5
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	4413      	add	r3, r2
 8003a50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a54:	461a      	mov	r2, r3
 8003a56:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003a5a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	3301      	adds	r3, #1
 8003a60:	613b      	str	r3, [r7, #16]
 8003a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a64:	693a      	ldr	r2, [r7, #16]
 8003a66:	429a      	cmp	r2, r3
 8003a68:	d3b7      	bcc.n	80039da <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	613b      	str	r3, [r7, #16]
 8003a6e:	e043      	b.n	8003af8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	015a      	lsls	r2, r3, #5
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	4413      	add	r3, r2
 8003a78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003a82:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003a86:	d118      	bne.n	8003aba <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d10a      	bne.n	8003aa4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	015a      	lsls	r2, r3, #5
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	4413      	add	r3, r2
 8003a96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003aa0:	6013      	str	r3, [r2, #0]
 8003aa2:	e013      	b.n	8003acc <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	015a      	lsls	r2, r3, #5
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	4413      	add	r3, r2
 8003aac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003ab6:	6013      	str	r3, [r2, #0]
 8003ab8:	e008      	b.n	8003acc <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	015a      	lsls	r2, r3, #5
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	4413      	add	r3, r2
 8003ac2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ac6:	461a      	mov	r2, r3
 8003ac8:	2300      	movs	r3, #0
 8003aca:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	015a      	lsls	r2, r3, #5
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	4413      	add	r3, r2
 8003ad4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ad8:	461a      	mov	r2, r3
 8003ada:	2300      	movs	r3, #0
 8003adc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	015a      	lsls	r2, r3, #5
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	4413      	add	r3, r2
 8003ae6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003aea:	461a      	mov	r2, r3
 8003aec:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003af0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	3301      	adds	r3, #1
 8003af6:	613b      	str	r3, [r7, #16]
 8003af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afa:	693a      	ldr	r2, [r7, #16]
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d3b7      	bcc.n	8003a70 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b06:	691b      	ldr	r3, [r3, #16]
 8003b08:	68fa      	ldr	r2, [r7, #12]
 8003b0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b0e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b12:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 8003b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d110      	bne.n	8003b3c <USB_DevInit+0x288>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b20:	461a      	mov	r2, r3
 8003b22:	4b1e      	ldr	r3, [pc, #120]	; (8003b9c <USB_DevInit+0x2e8>)
 8003b24:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b34:	4619      	mov	r1, r3
 8003b36:	4b1a      	ldr	r3, [pc, #104]	; (8003ba0 <USB_DevInit+0x2ec>)
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	630b      	str	r3, [r1, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003b48:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d105      	bne.n	8003b5c <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	699b      	ldr	r3, [r3, #24]
 8003b54:	f043 0210 	orr.w	r2, r3, #16
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	699a      	ldr	r2, [r3, #24]
 8003b60:	4b10      	ldr	r3, [pc, #64]	; (8003ba4 <USB_DevInit+0x2f0>)
 8003b62:	4313      	orrs	r3, r2
 8003b64:	687a      	ldr	r2, [r7, #4]
 8003b66:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003b68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d005      	beq.n	8003b7a <USB_DevInit+0x2c6>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	699b      	ldr	r3, [r3, #24]
 8003b72:	f043 0208 	orr.w	r2, r3, #8
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003b7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d105      	bne.n	8003b8c <USB_DevInit+0x2d8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	699a      	ldr	r2, [r3, #24]
 8003b84:	4b08      	ldr	r3, [pc, #32]	; (8003ba8 <USB_DevInit+0x2f4>)
 8003b86:	4313      	orrs	r3, r2
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003b8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3718      	adds	r7, #24
 8003b92:	46bd      	mov	sp, r7
 8003b94:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003b98:	b004      	add	sp, #16
 8003b9a:	4770      	bx	lr
 8003b9c:	00800100 	.word	0x00800100
 8003ba0:	00010003 	.word	0x00010003
 8003ba4:	803c3800 	.word	0x803c3800
 8003ba8:	40000004 	.word	0x40000004

08003bac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b085      	sub	sp, #20
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
 8003bb4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	019b      	lsls	r3, r3, #6
 8003bbe:	f043 0220 	orr.w	r2, r3, #32
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	3301      	adds	r3, #1
 8003bca:	60fb      	str	r3, [r7, #12]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	4a09      	ldr	r2, [pc, #36]	; (8003bf4 <USB_FlushTxFifo+0x48>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d901      	bls.n	8003bd8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8003bd4:	2303      	movs	r3, #3
 8003bd6:	e006      	b.n	8003be6 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	691b      	ldr	r3, [r3, #16]
 8003bdc:	f003 0320 	and.w	r3, r3, #32
 8003be0:	2b20      	cmp	r3, #32
 8003be2:	d0f0      	beq.n	8003bc6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8003be4:	2300      	movs	r3, #0
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3714      	adds	r7, #20
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr
 8003bf2:	bf00      	nop
 8003bf4:	00030d40 	.word	0x00030d40

08003bf8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b085      	sub	sp, #20
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8003c00:	2300      	movs	r3, #0
 8003c02:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2210      	movs	r2, #16
 8003c08:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	3301      	adds	r3, #1
 8003c0e:	60fb      	str	r3, [r7, #12]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	4a09      	ldr	r2, [pc, #36]	; (8003c38 <USB_FlushRxFifo+0x40>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d901      	bls.n	8003c1c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8003c18:	2303      	movs	r3, #3
 8003c1a:	e006      	b.n	8003c2a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	691b      	ldr	r3, [r3, #16]
 8003c20:	f003 0310 	and.w	r3, r3, #16
 8003c24:	2b10      	cmp	r3, #16
 8003c26:	d0f0      	beq.n	8003c0a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8003c28:	2300      	movs	r3, #0
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3714      	adds	r7, #20
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr
 8003c36:	bf00      	nop
 8003c38:	00030d40 	.word	0x00030d40

08003c3c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b085      	sub	sp, #20
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	460b      	mov	r3, r1
 8003c46:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	78fb      	ldrb	r3, [r7, #3]
 8003c56:	68f9      	ldr	r1, [r7, #12]
 8003c58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003c60:	2300      	movs	r3, #0
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3714      	adds	r7, #20
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr

08003c6e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003c6e:	b580      	push	{r7, lr}
 8003c70:	b084      	sub	sp, #16
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	68fa      	ldr	r2, [r7, #12]
 8003c84:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c88:	f043 0302 	orr.w	r3, r3, #2
 8003c8c:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8003c8e:	2003      	movs	r0, #3
 8003c90:	f7fc fce8 	bl	8000664 <HAL_Delay>

  return HAL_OK;
 8003c94:	2300      	movs	r3, #0
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3710      	adds	r7, #16
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
	...

08003ca0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b085      	sub	sp, #20
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	3301      	adds	r3, #1
 8003cb0:	60fb      	str	r3, [r7, #12]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	4a13      	ldr	r2, [pc, #76]	; (8003d04 <USB_CoreReset+0x64>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d901      	bls.n	8003cbe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e01b      	b.n	8003cf6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	691b      	ldr	r3, [r3, #16]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	daf2      	bge.n	8003cac <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	691b      	ldr	r3, [r3, #16]
 8003cce:	f043 0201 	orr.w	r2, r3, #1
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	3301      	adds	r3, #1
 8003cda:	60fb      	str	r3, [r7, #12]
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	4a09      	ldr	r2, [pc, #36]	; (8003d04 <USB_CoreReset+0x64>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d901      	bls.n	8003ce8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003ce4:	2303      	movs	r3, #3
 8003ce6:	e006      	b.n	8003cf6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	691b      	ldr	r3, [r3, #16]
 8003cec:	f003 0301 	and.w	r3, r3, #1
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d0f0      	beq.n	8003cd6 <USB_CoreReset+0x36>

  return HAL_OK;
 8003cf4:	2300      	movs	r3, #0
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3714      	adds	r7, #20
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr
 8003d02:	bf00      	nop
 8003d04:	00030d40 	.word	0x00030d40

08003d08 <__io_putchar>:
//===========================================================================
/*
 * function for printf
 */
int __io_putchar(int ch)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b082      	sub	sp, #8
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8003d10:	1d39      	adds	r1, r7, #4
 8003d12:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003d16:	2201      	movs	r2, #1
 8003d18:	4803      	ldr	r0, [pc, #12]	; (8003d28 <__io_putchar+0x20>)
 8003d1a:	f7fe fe21 	bl	8002960 <HAL_UART_Transmit>
	return ch;
 8003d1e:	687b      	ldr	r3, [r7, #4]
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3708      	adds	r7, #8
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}
 8003d28:	200000a0 	.word	0x200000a0

08003d2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003d30:	f7fc fc3a 	bl	80005a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003d34:	f000 f8de 	bl	8003ef4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003d38:	f000 fa64 	bl	8004204 <MX_GPIO_Init>
  MX_ETH_Init();
 8003d3c:	f000 f96e 	bl	800401c <MX_ETH_Init>
  MX_UART4_Init();
 8003d40:	f000 f9a2 	bl	8004088 <MX_UART4_Init>
  MX_USART3_UART_Init();
 8003d44:	f000 fa00 	bl	8004148 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8003d48:	f000 fa2e 	bl	80041a8 <MX_USB_OTG_FS_PCD_Init>
  MX_UART5_Init();
 8003d4c:	f000 f9cc 	bl	80040e8 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart3, uart3_r_buff, 10);
 8003d50:	220a      	movs	r2, #10
 8003d52:	492c      	ldr	r1, [pc, #176]	; (8003e04 <main+0xd8>)
 8003d54:	482c      	ldr	r0, [pc, #176]	; (8003e08 <main+0xdc>)
 8003d56:	f7fe fe95 	bl	8002a84 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart5, uart5_r_buff, 10);
 8003d5a:	220a      	movs	r2, #10
 8003d5c:	492b      	ldr	r1, [pc, #172]	; (8003e0c <main+0xe0>)
 8003d5e:	482c      	ldr	r0, [pc, #176]	; (8003e10 <main+0xe4>)
 8003d60:	f7fe fe90 	bl	8002a84 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart4, uart4_r_buff, 10);
 8003d64:	220a      	movs	r2, #10
 8003d66:	492b      	ldr	r1, [pc, #172]	; (8003e14 <main+0xe8>)
 8003d68:	482b      	ldr	r0, [pc, #172]	; (8003e18 <main+0xec>)
 8003d6a:	f7fe fe8b 	bl	8002a84 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	 printf("\n\rInput any text \n\r");
 8003d6e:	482b      	ldr	r0, [pc, #172]	; (8003e1c <main+0xf0>)
 8003d70:	f000 fe92 	bl	8004a98 <iprintf>
  while (1)
  {
	  if(uart3_flag_calback)
 8003d74:	4b2a      	ldr	r3, [pc, #168]	; (8003e20 <main+0xf4>)
 8003d76:	781b      	ldrb	r3, [r3, #0]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d012      	beq.n	8003da2 <main+0x76>
	  {
		  printf("callback flag uart3 up [%s]\n\r",uart3_r_buff);
 8003d7c:	4921      	ldr	r1, [pc, #132]	; (8003e04 <main+0xd8>)
 8003d7e:	4829      	ldr	r0, [pc, #164]	; (8003e24 <main+0xf8>)
 8003d80:	f000 fe8a 	bl	8004a98 <iprintf>
		  uart3_flag_calback = 0;
 8003d84:	4b26      	ldr	r3, [pc, #152]	; (8003e20 <main+0xf4>)
 8003d86:	2200      	movs	r2, #0
 8003d88:	701a      	strb	r2, [r3, #0]
//		  HAL_UART_Transmit(&huart4, uart3_r_buff, 10,0xffff);
		  HAL_UART_Transmit(&huart5, uart3_r_buff, 10,0xffff);
 8003d8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003d8e:	220a      	movs	r2, #10
 8003d90:	491c      	ldr	r1, [pc, #112]	; (8003e04 <main+0xd8>)
 8003d92:	481f      	ldr	r0, [pc, #124]	; (8003e10 <main+0xe4>)
 8003d94:	f7fe fde4 	bl	8002960 <HAL_UART_Transmit>
		  memset(uart3_r_buff,0,sizeof(uart3_r_buff));
 8003d98:	2264      	movs	r2, #100	; 0x64
 8003d9a:	2100      	movs	r1, #0
 8003d9c:	4819      	ldr	r0, [pc, #100]	; (8003e04 <main+0xd8>)
 8003d9e:	f000 fe73 	bl	8004a88 <memset>
	  }
	  if(uart4_flag_calback)
 8003da2:	4b21      	ldr	r3, [pc, #132]	; (8003e28 <main+0xfc>)
 8003da4:	781b      	ldrb	r3, [r3, #0]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d006      	beq.n	8003db8 <main+0x8c>
	  {
		  printf("callback flag uart4 up [%s]\n\r",uart4_r_buff);
 8003daa:	491a      	ldr	r1, [pc, #104]	; (8003e14 <main+0xe8>)
 8003dac:	481f      	ldr	r0, [pc, #124]	; (8003e2c <main+0x100>)
 8003dae:	f000 fe73 	bl	8004a98 <iprintf>
		  uart4_flag_calback = 0;
 8003db2:	4b1d      	ldr	r3, [pc, #116]	; (8003e28 <main+0xfc>)
 8003db4:	2200      	movs	r2, #0
 8003db6:	701a      	strb	r2, [r3, #0]
	  }
	  if(uart5_flag_calback)
 8003db8:	4b1d      	ldr	r3, [pc, #116]	; (8003e30 <main+0x104>)
 8003dba:	781b      	ldrb	r3, [r3, #0]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d006      	beq.n	8003dce <main+0xa2>
	  {
		  printf("callback flag uart5 up [%s]\n\r",uart5_r_buff);
 8003dc0:	4912      	ldr	r1, [pc, #72]	; (8003e0c <main+0xe0>)
 8003dc2:	481c      	ldr	r0, [pc, #112]	; (8003e34 <main+0x108>)
 8003dc4:	f000 fe68 	bl	8004a98 <iprintf>
		  uart5_flag_calback = 0;
 8003dc8:	4b19      	ldr	r3, [pc, #100]	; (8003e30 <main+0x104>)
 8003dca:	2200      	movs	r2, #0
 8003dcc:	701a      	strb	r2, [r3, #0]
	  }
	  if(uart3_flag_h)
 8003dce:	4b1a      	ldr	r3, [pc, #104]	; (8003e38 <main+0x10c>)
 8003dd0:	781b      	ldrb	r3, [r3, #0]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d0ce      	beq.n	8003d74 <main+0x48>
	  {
//		  printf("USART3_IRQHandler flag UP\n\r");
		  printf("huart3.RxXferCount [%d]\n\r",
				  huart3.RxXferCount);
 8003dd6:	4b0c      	ldr	r3, [pc, #48]	; (8003e08 <main+0xdc>)
 8003dd8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003ddc:	b29b      	uxth	r3, r3
		  printf("huart3.RxXferCount [%d]\n\r",
 8003dde:	4619      	mov	r1, r3
 8003de0:	4816      	ldr	r0, [pc, #88]	; (8003e3c <main+0x110>)
 8003de2:	f000 fe59 	bl	8004a98 <iprintf>
		  printf("huart3.RxXferSize [%d]\n\r",
				  huart3.RxXferSize);
 8003de6:	4b08      	ldr	r3, [pc, #32]	; (8003e08 <main+0xdc>)
 8003de8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
		  printf("huart3.RxXferSize [%d]\n\r",
 8003dec:	4619      	mov	r1, r3
 8003dee:	4814      	ldr	r0, [pc, #80]	; (8003e40 <main+0x114>)
 8003df0:	f000 fe52 	bl	8004a98 <iprintf>
		  printf("[%s]\n\r",uart3_r_buff);
 8003df4:	4903      	ldr	r1, [pc, #12]	; (8003e04 <main+0xd8>)
 8003df6:	4813      	ldr	r0, [pc, #76]	; (8003e44 <main+0x118>)
 8003df8:	f000 fe4e 	bl	8004a98 <iprintf>
		  uart3_flag_h = 0;
 8003dfc:	4b0e      	ldr	r3, [pc, #56]	; (8003e38 <main+0x10c>)
 8003dfe:	2200      	movs	r2, #0
 8003e00:	701a      	strb	r2, [r3, #0]
	  if(uart3_flag_calback)
 8003e02:	e7b7      	b.n	8003d74 <main+0x48>
 8003e04:	20000608 	.word	0x20000608
 8003e08:	200000a0 	.word	0x200000a0
 8003e0c:	20000524 	.word	0x20000524
 8003e10:	20000588 	.word	0x20000588
 8003e14:	2000066c 	.word	0x2000066c
 8003e18:	200006d0 	.word	0x200006d0
 8003e1c:	0800595c 	.word	0x0800595c
 8003e20:	2000008c 	.word	0x2000008c
 8003e24:	08005970 	.word	0x08005970
 8003e28:	2000008d 	.word	0x2000008d
 8003e2c:	08005990 	.word	0x08005990
 8003e30:	2000008e 	.word	0x2000008e
 8003e34:	080059b0 	.word	0x080059b0
 8003e38:	2000008f 	.word	0x2000008f
 8003e3c:	080059d0 	.word	0x080059d0
 8003e40:	080059ec 	.word	0x080059ec
 8003e44:	08005a08 	.word	0x08005a08

08003e48 <HAL_UART_RxCpltCallback>:
(+) MspInitCallback           : UART MspInit.
(+) MspDeInitCallback         : UART MspDeInit.
*/

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b082      	sub	sp, #8
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
	if(huart->Instance==UART4)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a14      	ldr	r2, [pc, #80]	; (8003ea8 <HAL_UART_RxCpltCallback+0x60>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d107      	bne.n	8003e6a <HAL_UART_RxCpltCallback+0x22>
	{
		uart4_flag_calback = 1;
 8003e5a:	4b14      	ldr	r3, [pc, #80]	; (8003eac <HAL_UART_RxCpltCallback+0x64>)
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart4, uart4_r_buff, 10);
 8003e60:	220a      	movs	r2, #10
 8003e62:	4913      	ldr	r1, [pc, #76]	; (8003eb0 <HAL_UART_RxCpltCallback+0x68>)
 8003e64:	4813      	ldr	r0, [pc, #76]	; (8003eb4 <HAL_UART_RxCpltCallback+0x6c>)
 8003e66:	f7fe fe0d 	bl	8002a84 <HAL_UART_Receive_IT>
	}
	if(huart->Instance==UART5)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a12      	ldr	r2, [pc, #72]	; (8003eb8 <HAL_UART_RxCpltCallback+0x70>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d107      	bne.n	8003e84 <HAL_UART_RxCpltCallback+0x3c>
	{
		uart5_flag_calback = 1;
 8003e74:	4b11      	ldr	r3, [pc, #68]	; (8003ebc <HAL_UART_RxCpltCallback+0x74>)
 8003e76:	2201      	movs	r2, #1
 8003e78:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart5, uart5_r_buff, 10);
 8003e7a:	220a      	movs	r2, #10
 8003e7c:	4910      	ldr	r1, [pc, #64]	; (8003ec0 <HAL_UART_RxCpltCallback+0x78>)
 8003e7e:	4811      	ldr	r0, [pc, #68]	; (8003ec4 <HAL_UART_RxCpltCallback+0x7c>)
 8003e80:	f7fe fe00 	bl	8002a84 <HAL_UART_Receive_IT>
	}
	if(huart->Instance==USART3)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a0f      	ldr	r2, [pc, #60]	; (8003ec8 <HAL_UART_RxCpltCallback+0x80>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d107      	bne.n	8003e9e <HAL_UART_RxCpltCallback+0x56>
	{
		uart3_flag_calback = 1;
 8003e8e:	4b0f      	ldr	r3, [pc, #60]	; (8003ecc <HAL_UART_RxCpltCallback+0x84>)
 8003e90:	2201      	movs	r2, #1
 8003e92:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart3, uart3_r_buff, 10);
 8003e94:	220a      	movs	r2, #10
 8003e96:	490e      	ldr	r1, [pc, #56]	; (8003ed0 <HAL_UART_RxCpltCallback+0x88>)
 8003e98:	480e      	ldr	r0, [pc, #56]	; (8003ed4 <HAL_UART_RxCpltCallback+0x8c>)
 8003e9a:	f7fe fdf3 	bl	8002a84 <HAL_UART_Receive_IT>
	}
}
 8003e9e:	bf00      	nop
 8003ea0:	3708      	adds	r7, #8
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop
 8003ea8:	40004c00 	.word	0x40004c00
 8003eac:	2000008d 	.word	0x2000008d
 8003eb0:	2000066c 	.word	0x2000066c
 8003eb4:	200006d0 	.word	0x200006d0
 8003eb8:	40005000 	.word	0x40005000
 8003ebc:	2000008e 	.word	0x2000008e
 8003ec0:	20000524 	.word	0x20000524
 8003ec4:	20000588 	.word	0x20000588
 8003ec8:	40004800 	.word	0x40004800
 8003ecc:	2000008c 	.word	0x2000008c
 8003ed0:	20000608 	.word	0x20000608
 8003ed4:	200000a0 	.word	0x200000a0

08003ed8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003edc:	4803      	ldr	r0, [pc, #12]	; (8003eec <USART3_IRQHandler+0x14>)
 8003ede:	f7fe fe73 	bl	8002bc8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */
	uart3_flag_h = 1;
 8003ee2:	4b03      	ldr	r3, [pc, #12]	; (8003ef0 <USART3_IRQHandler+0x18>)
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	701a      	strb	r2, [r3, #0]
  /* USER CODE END USART3_IRQn 1 */
}
 8003ee8:	bf00      	nop
 8003eea:	bd80      	pop	{r7, pc}
 8003eec:	200000a0 	.word	0x200000a0
 8003ef0:	2000008f 	.word	0x2000008f

08003ef4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b0b4      	sub	sp, #208	; 0xd0
 8003ef8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003efa:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003efe:	2230      	movs	r2, #48	; 0x30
 8003f00:	2100      	movs	r1, #0
 8003f02:	4618      	mov	r0, r3
 8003f04:	f000 fdc0 	bl	8004a88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003f08:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	601a      	str	r2, [r3, #0]
 8003f10:	605a      	str	r2, [r3, #4]
 8003f12:	609a      	str	r2, [r3, #8]
 8003f14:	60da      	str	r2, [r3, #12]
 8003f16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003f18:	f107 0308 	add.w	r3, r7, #8
 8003f1c:	2284      	movs	r2, #132	; 0x84
 8003f1e:	2100      	movs	r1, #0
 8003f20:	4618      	mov	r0, r3
 8003f22:	f000 fdb1 	bl	8004a88 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8003f26:	f7fd fc61 	bl	80017ec <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003f2a:	4b39      	ldr	r3, [pc, #228]	; (8004010 <SystemClock_Config+0x11c>)
 8003f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2e:	4a38      	ldr	r2, [pc, #224]	; (8004010 <SystemClock_Config+0x11c>)
 8003f30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f34:	6413      	str	r3, [r2, #64]	; 0x40
 8003f36:	4b36      	ldr	r3, [pc, #216]	; (8004010 <SystemClock_Config+0x11c>)
 8003f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f3e:	607b      	str	r3, [r7, #4]
 8003f40:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8003f42:	4b34      	ldr	r3, [pc, #208]	; (8004014 <SystemClock_Config+0x120>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003f4a:	4a32      	ldr	r2, [pc, #200]	; (8004014 <SystemClock_Config+0x120>)
 8003f4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f50:	6013      	str	r3, [r2, #0]
 8003f52:	4b30      	ldr	r3, [pc, #192]	; (8004014 <SystemClock_Config+0x120>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003f5a:	603b      	str	r3, [r7, #0]
 8003f5c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8003f64:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8003f68:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003f6c:	2302      	movs	r3, #2
 8003f6e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003f72:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003f76:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003f7a:	2304      	movs	r3, #4
 8003f7c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 72;
 8003f80:	2348      	movs	r3, #72	; 0x48
 8003f82:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003f86:	2302      	movs	r3, #2
 8003f88:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8003f8c:	2303      	movs	r3, #3
 8003f8e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003f92:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003f96:	4618      	mov	r0, r3
 8003f98:	f7fd fc38 	bl	800180c <HAL_RCC_OscConfig>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d001      	beq.n	8003fa6 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8003fa2:	f000 f9d1 	bl	8004348 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003fa6:	230f      	movs	r3, #15
 8003fa8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003fac:	2302      	movs	r3, #2
 8003fae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003fb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003fbc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003fc6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003fca:	2102      	movs	r1, #2
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f7fd fe8d 	bl	8001cec <HAL_RCC_ClockConfig>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d001      	beq.n	8003fdc <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8003fd8:	f000 f9b6 	bl	8004348 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_UART4
 8003fdc:	4b0e      	ldr	r3, [pc, #56]	; (8004018 <SystemClock_Config+0x124>)
 8003fde:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_UART5|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8003fec:	2300      	movs	r3, #0
 8003fee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003ff2:	f107 0308 	add.w	r3, r7, #8
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f7fe f876 	bl	80020e8 <HAL_RCCEx_PeriphCLKConfig>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d001      	beq.n	8004006 <SystemClock_Config+0x112>
  {
    Error_Handler();
 8004002:	f000 f9a1 	bl	8004348 <Error_Handler>
  }
}
 8004006:	bf00      	nop
 8004008:	37d0      	adds	r7, #208	; 0xd0
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}
 800400e:	bf00      	nop
 8004010:	40023800 	.word	0x40023800
 8004014:	40007000 	.word	0x40007000
 8004018:	00200700 	.word	0x00200700

0800401c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b082      	sub	sp, #8
 8004020:	af00      	add	r7, sp, #0
   uint8_t MACAddr[6] ;

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8004022:	4b17      	ldr	r3, [pc, #92]	; (8004080 <MX_ETH_Init+0x64>)
 8004024:	4a17      	ldr	r2, [pc, #92]	; (8004084 <MX_ETH_Init+0x68>)
 8004026:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8004028:	4b15      	ldr	r3, [pc, #84]	; (8004080 <MX_ETH_Init+0x64>)
 800402a:	2201      	movs	r2, #1
 800402c:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 800402e:	4b14      	ldr	r3, [pc, #80]	; (8004080 <MX_ETH_Init+0x64>)
 8004030:	2200      	movs	r2, #0
 8004032:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8004034:	2300      	movs	r3, #0
 8004036:	703b      	strb	r3, [r7, #0]
  MACAddr[1] = 0x80;
 8004038:	2380      	movs	r3, #128	; 0x80
 800403a:	707b      	strb	r3, [r7, #1]
  MACAddr[2] = 0xE1;
 800403c:	23e1      	movs	r3, #225	; 0xe1
 800403e:	70bb      	strb	r3, [r7, #2]
  MACAddr[3] = 0x00;
 8004040:	2300      	movs	r3, #0
 8004042:	70fb      	strb	r3, [r7, #3]
  MACAddr[4] = 0x00;
 8004044:	2300      	movs	r3, #0
 8004046:	713b      	strb	r3, [r7, #4]
  MACAddr[5] = 0x00;
 8004048:	2300      	movs	r3, #0
 800404a:	717b      	strb	r3, [r7, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800404c:	4a0c      	ldr	r2, [pc, #48]	; (8004080 <MX_ETH_Init+0x64>)
 800404e:	463b      	mov	r3, r7
 8004050:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8004052:	4b0b      	ldr	r3, [pc, #44]	; (8004080 <MX_ETH_Init+0x64>)
 8004054:	2200      	movs	r2, #0
 8004056:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8004058:	4b09      	ldr	r3, [pc, #36]	; (8004080 <MX_ETH_Init+0x64>)
 800405a:	2200      	movs	r2, #0
 800405c:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800405e:	4b08      	ldr	r3, [pc, #32]	; (8004080 <MX_ETH_Init+0x64>)
 8004060:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004064:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8004066:	4806      	ldr	r0, [pc, #24]	; (8004080 <MX_ETH_Init+0x64>)
 8004068:	f7fc fc54 	bl	8000914 <HAL_ETH_Init>
 800406c:	4603      	mov	r3, r0
 800406e:	2b00      	cmp	r3, #0
 8004070:	d001      	beq.n	8004076 <MX_ETH_Init+0x5a>
  {
    Error_Handler();
 8004072:	f000 f969 	bl	8004348 <Error_Handler>
  }
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8004076:	bf00      	nop
 8004078:	3708      	adds	r7, #8
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}
 800407e:	bf00      	nop
 8004080:	20000750 	.word	0x20000750
 8004084:	40028000 	.word	0x40028000

08004088 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800408c:	4b14      	ldr	r3, [pc, #80]	; (80040e0 <MX_UART4_Init+0x58>)
 800408e:	4a15      	ldr	r2, [pc, #84]	; (80040e4 <MX_UART4_Init+0x5c>)
 8004090:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8004092:	4b13      	ldr	r3, [pc, #76]	; (80040e0 <MX_UART4_Init+0x58>)
 8004094:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004098:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800409a:	4b11      	ldr	r3, [pc, #68]	; (80040e0 <MX_UART4_Init+0x58>)
 800409c:	2200      	movs	r2, #0
 800409e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80040a0:	4b0f      	ldr	r3, [pc, #60]	; (80040e0 <MX_UART4_Init+0x58>)
 80040a2:	2200      	movs	r2, #0
 80040a4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80040a6:	4b0e      	ldr	r3, [pc, #56]	; (80040e0 <MX_UART4_Init+0x58>)
 80040a8:	2200      	movs	r2, #0
 80040aa:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80040ac:	4b0c      	ldr	r3, [pc, #48]	; (80040e0 <MX_UART4_Init+0x58>)
 80040ae:	220c      	movs	r2, #12
 80040b0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80040b2:	4b0b      	ldr	r3, [pc, #44]	; (80040e0 <MX_UART4_Init+0x58>)
 80040b4:	2200      	movs	r2, #0
 80040b6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80040b8:	4b09      	ldr	r3, [pc, #36]	; (80040e0 <MX_UART4_Init+0x58>)
 80040ba:	2200      	movs	r2, #0
 80040bc:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80040be:	4b08      	ldr	r3, [pc, #32]	; (80040e0 <MX_UART4_Init+0x58>)
 80040c0:	2200      	movs	r2, #0
 80040c2:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80040c4:	4b06      	ldr	r3, [pc, #24]	; (80040e0 <MX_UART4_Init+0x58>)
 80040c6:	2200      	movs	r2, #0
 80040c8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80040ca:	4805      	ldr	r0, [pc, #20]	; (80040e0 <MX_UART4_Init+0x58>)
 80040cc:	f7fe fbfa 	bl	80028c4 <HAL_UART_Init>
 80040d0:	4603      	mov	r3, r0
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d001      	beq.n	80040da <MX_UART4_Init+0x52>
  {
    Error_Handler();
 80040d6:	f000 f937 	bl	8004348 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80040da:	bf00      	nop
 80040dc:	bd80      	pop	{r7, pc}
 80040de:	bf00      	nop
 80040e0:	200006d0 	.word	0x200006d0
 80040e4:	40004c00 	.word	0x40004c00

080040e8 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80040ec:	4b14      	ldr	r3, [pc, #80]	; (8004140 <MX_UART5_Init+0x58>)
 80040ee:	4a15      	ldr	r2, [pc, #84]	; (8004144 <MX_UART5_Init+0x5c>)
 80040f0:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80040f2:	4b13      	ldr	r3, [pc, #76]	; (8004140 <MX_UART5_Init+0x58>)
 80040f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80040f8:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80040fa:	4b11      	ldr	r3, [pc, #68]	; (8004140 <MX_UART5_Init+0x58>)
 80040fc:	2200      	movs	r2, #0
 80040fe:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8004100:	4b0f      	ldr	r3, [pc, #60]	; (8004140 <MX_UART5_Init+0x58>)
 8004102:	2200      	movs	r2, #0
 8004104:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8004106:	4b0e      	ldr	r3, [pc, #56]	; (8004140 <MX_UART5_Init+0x58>)
 8004108:	2200      	movs	r2, #0
 800410a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800410c:	4b0c      	ldr	r3, [pc, #48]	; (8004140 <MX_UART5_Init+0x58>)
 800410e:	220c      	movs	r2, #12
 8004110:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004112:	4b0b      	ldr	r3, [pc, #44]	; (8004140 <MX_UART5_Init+0x58>)
 8004114:	2200      	movs	r2, #0
 8004116:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8004118:	4b09      	ldr	r3, [pc, #36]	; (8004140 <MX_UART5_Init+0x58>)
 800411a:	2200      	movs	r2, #0
 800411c:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800411e:	4b08      	ldr	r3, [pc, #32]	; (8004140 <MX_UART5_Init+0x58>)
 8004120:	2200      	movs	r2, #0
 8004122:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004124:	4b06      	ldr	r3, [pc, #24]	; (8004140 <MX_UART5_Init+0x58>)
 8004126:	2200      	movs	r2, #0
 8004128:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800412a:	4805      	ldr	r0, [pc, #20]	; (8004140 <MX_UART5_Init+0x58>)
 800412c:	f7fe fbca 	bl	80028c4 <HAL_UART_Init>
 8004130:	4603      	mov	r3, r0
 8004132:	2b00      	cmp	r3, #0
 8004134:	d001      	beq.n	800413a <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8004136:	f000 f907 	bl	8004348 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800413a:	bf00      	nop
 800413c:	bd80      	pop	{r7, pc}
 800413e:	bf00      	nop
 8004140:	20000588 	.word	0x20000588
 8004144:	40005000 	.word	0x40005000

08004148 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800414c:	4b14      	ldr	r3, [pc, #80]	; (80041a0 <MX_USART3_UART_Init+0x58>)
 800414e:	4a15      	ldr	r2, [pc, #84]	; (80041a4 <MX_USART3_UART_Init+0x5c>)
 8004150:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8004152:	4b13      	ldr	r3, [pc, #76]	; (80041a0 <MX_USART3_UART_Init+0x58>)
 8004154:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004158:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800415a:	4b11      	ldr	r3, [pc, #68]	; (80041a0 <MX_USART3_UART_Init+0x58>)
 800415c:	2200      	movs	r2, #0
 800415e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004160:	4b0f      	ldr	r3, [pc, #60]	; (80041a0 <MX_USART3_UART_Init+0x58>)
 8004162:	2200      	movs	r2, #0
 8004164:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004166:	4b0e      	ldr	r3, [pc, #56]	; (80041a0 <MX_USART3_UART_Init+0x58>)
 8004168:	2200      	movs	r2, #0
 800416a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800416c:	4b0c      	ldr	r3, [pc, #48]	; (80041a0 <MX_USART3_UART_Init+0x58>)
 800416e:	220c      	movs	r2, #12
 8004170:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004172:	4b0b      	ldr	r3, [pc, #44]	; (80041a0 <MX_USART3_UART_Init+0x58>)
 8004174:	2200      	movs	r2, #0
 8004176:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004178:	4b09      	ldr	r3, [pc, #36]	; (80041a0 <MX_USART3_UART_Init+0x58>)
 800417a:	2200      	movs	r2, #0
 800417c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800417e:	4b08      	ldr	r3, [pc, #32]	; (80041a0 <MX_USART3_UART_Init+0x58>)
 8004180:	2200      	movs	r2, #0
 8004182:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004184:	4b06      	ldr	r3, [pc, #24]	; (80041a0 <MX_USART3_UART_Init+0x58>)
 8004186:	2200      	movs	r2, #0
 8004188:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800418a:	4805      	ldr	r0, [pc, #20]	; (80041a0 <MX_USART3_UART_Init+0x58>)
 800418c:	f7fe fb9a 	bl	80028c4 <HAL_UART_Init>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d001      	beq.n	800419a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8004196:	f000 f8d7 	bl	8004348 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800419a:	bf00      	nop
 800419c:	bd80      	pop	{r7, pc}
 800419e:	bf00      	nop
 80041a0:	200000a0 	.word	0x200000a0
 80041a4:	40004800 	.word	0x40004800

080041a8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80041ac:	4b14      	ldr	r3, [pc, #80]	; (8004200 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80041ae:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80041b2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80041b4:	4b12      	ldr	r3, [pc, #72]	; (8004200 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80041b6:	2206      	movs	r2, #6
 80041b8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80041ba:	4b11      	ldr	r3, [pc, #68]	; (8004200 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80041bc:	2202      	movs	r2, #2
 80041be:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80041c0:	4b0f      	ldr	r3, [pc, #60]	; (8004200 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80041c2:	2200      	movs	r2, #0
 80041c4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80041c6:	4b0e      	ldr	r3, [pc, #56]	; (8004200 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80041c8:	2202      	movs	r2, #2
 80041ca:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80041cc:	4b0c      	ldr	r3, [pc, #48]	; (8004200 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80041ce:	2201      	movs	r2, #1
 80041d0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80041d2:	4b0b      	ldr	r3, [pc, #44]	; (8004200 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80041d4:	2200      	movs	r2, #0
 80041d6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80041d8:	4b09      	ldr	r3, [pc, #36]	; (8004200 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80041da:	2200      	movs	r2, #0
 80041dc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80041de:	4b08      	ldr	r3, [pc, #32]	; (8004200 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80041e0:	2201      	movs	r2, #1
 80041e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80041e4:	4b06      	ldr	r3, [pc, #24]	; (8004200 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80041e6:	2200      	movs	r2, #0
 80041e8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80041ea:	4805      	ldr	r0, [pc, #20]	; (8004200 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80041ec:	f7fd f9c1 	bl	8001572 <HAL_PCD_Init>
 80041f0:	4603      	mov	r3, r0
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d001      	beq.n	80041fa <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80041f6:	f000 f8a7 	bl	8004348 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80041fa:	bf00      	nop
 80041fc:	bd80      	pop	{r7, pc}
 80041fe:	bf00      	nop
 8004200:	20000120 	.word	0x20000120

08004204 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b08c      	sub	sp, #48	; 0x30
 8004208:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800420a:	f107 031c 	add.w	r3, r7, #28
 800420e:	2200      	movs	r2, #0
 8004210:	601a      	str	r2, [r3, #0]
 8004212:	605a      	str	r2, [r3, #4]
 8004214:	609a      	str	r2, [r3, #8]
 8004216:	60da      	str	r2, [r3, #12]
 8004218:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800421a:	4b46      	ldr	r3, [pc, #280]	; (8004334 <MX_GPIO_Init+0x130>)
 800421c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800421e:	4a45      	ldr	r2, [pc, #276]	; (8004334 <MX_GPIO_Init+0x130>)
 8004220:	f043 0304 	orr.w	r3, r3, #4
 8004224:	6313      	str	r3, [r2, #48]	; 0x30
 8004226:	4b43      	ldr	r3, [pc, #268]	; (8004334 <MX_GPIO_Init+0x130>)
 8004228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800422a:	f003 0304 	and.w	r3, r3, #4
 800422e:	61bb      	str	r3, [r7, #24]
 8004230:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004232:	4b40      	ldr	r3, [pc, #256]	; (8004334 <MX_GPIO_Init+0x130>)
 8004234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004236:	4a3f      	ldr	r2, [pc, #252]	; (8004334 <MX_GPIO_Init+0x130>)
 8004238:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800423c:	6313      	str	r3, [r2, #48]	; 0x30
 800423e:	4b3d      	ldr	r3, [pc, #244]	; (8004334 <MX_GPIO_Init+0x130>)
 8004240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004242:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004246:	617b      	str	r3, [r7, #20]
 8004248:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800424a:	4b3a      	ldr	r3, [pc, #232]	; (8004334 <MX_GPIO_Init+0x130>)
 800424c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800424e:	4a39      	ldr	r2, [pc, #228]	; (8004334 <MX_GPIO_Init+0x130>)
 8004250:	f043 0301 	orr.w	r3, r3, #1
 8004254:	6313      	str	r3, [r2, #48]	; 0x30
 8004256:	4b37      	ldr	r3, [pc, #220]	; (8004334 <MX_GPIO_Init+0x130>)
 8004258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800425a:	f003 0301 	and.w	r3, r3, #1
 800425e:	613b      	str	r3, [r7, #16]
 8004260:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004262:	4b34      	ldr	r3, [pc, #208]	; (8004334 <MX_GPIO_Init+0x130>)
 8004264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004266:	4a33      	ldr	r2, [pc, #204]	; (8004334 <MX_GPIO_Init+0x130>)
 8004268:	f043 0302 	orr.w	r3, r3, #2
 800426c:	6313      	str	r3, [r2, #48]	; 0x30
 800426e:	4b31      	ldr	r3, [pc, #196]	; (8004334 <MX_GPIO_Init+0x130>)
 8004270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004272:	f003 0302 	and.w	r3, r3, #2
 8004276:	60fb      	str	r3, [r7, #12]
 8004278:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800427a:	4b2e      	ldr	r3, [pc, #184]	; (8004334 <MX_GPIO_Init+0x130>)
 800427c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800427e:	4a2d      	ldr	r2, [pc, #180]	; (8004334 <MX_GPIO_Init+0x130>)
 8004280:	f043 0308 	orr.w	r3, r3, #8
 8004284:	6313      	str	r3, [r2, #48]	; 0x30
 8004286:	4b2b      	ldr	r3, [pc, #172]	; (8004334 <MX_GPIO_Init+0x130>)
 8004288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800428a:	f003 0308 	and.w	r3, r3, #8
 800428e:	60bb      	str	r3, [r7, #8]
 8004290:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004292:	4b28      	ldr	r3, [pc, #160]	; (8004334 <MX_GPIO_Init+0x130>)
 8004294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004296:	4a27      	ldr	r2, [pc, #156]	; (8004334 <MX_GPIO_Init+0x130>)
 8004298:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800429c:	6313      	str	r3, [r2, #48]	; 0x30
 800429e:	4b25      	ldr	r3, [pc, #148]	; (8004334 <MX_GPIO_Init+0x130>)
 80042a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042a6:	607b      	str	r3, [r7, #4]
 80042a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80042aa:	2200      	movs	r2, #0
 80042ac:	f244 0181 	movw	r1, #16513	; 0x4081
 80042b0:	4821      	ldr	r0, [pc, #132]	; (8004338 <MX_GPIO_Init+0x134>)
 80042b2:	f7fd f945 	bl	8001540 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80042b6:	2200      	movs	r2, #0
 80042b8:	2140      	movs	r1, #64	; 0x40
 80042ba:	4820      	ldr	r0, [pc, #128]	; (800433c <MX_GPIO_Init+0x138>)
 80042bc:	f7fd f940 	bl	8001540 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80042c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80042c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80042c6:	4b1e      	ldr	r3, [pc, #120]	; (8004340 <MX_GPIO_Init+0x13c>)
 80042c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042ca:	2300      	movs	r3, #0
 80042cc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80042ce:	f107 031c 	add.w	r3, r7, #28
 80042d2:	4619      	mov	r1, r3
 80042d4:	481b      	ldr	r0, [pc, #108]	; (8004344 <MX_GPIO_Init+0x140>)
 80042d6:	f7fc ff87 	bl	80011e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80042da:	f244 0381 	movw	r3, #16513	; 0x4081
 80042de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80042e0:	2301      	movs	r3, #1
 80042e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042e4:	2300      	movs	r3, #0
 80042e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042e8:	2300      	movs	r3, #0
 80042ea:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042ec:	f107 031c 	add.w	r3, r7, #28
 80042f0:	4619      	mov	r1, r3
 80042f2:	4811      	ldr	r0, [pc, #68]	; (8004338 <MX_GPIO_Init+0x134>)
 80042f4:	f7fc ff78 	bl	80011e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80042f8:	2340      	movs	r3, #64	; 0x40
 80042fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80042fc:	2301      	movs	r3, #1
 80042fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004300:	2300      	movs	r3, #0
 8004302:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004304:	2300      	movs	r3, #0
 8004306:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8004308:	f107 031c 	add.w	r3, r7, #28
 800430c:	4619      	mov	r1, r3
 800430e:	480b      	ldr	r0, [pc, #44]	; (800433c <MX_GPIO_Init+0x138>)
 8004310:	f7fc ff6a 	bl	80011e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8004314:	2380      	movs	r3, #128	; 0x80
 8004316:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004318:	2300      	movs	r3, #0
 800431a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800431c:	2300      	movs	r3, #0
 800431e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8004320:	f107 031c 	add.w	r3, r7, #28
 8004324:	4619      	mov	r1, r3
 8004326:	4805      	ldr	r0, [pc, #20]	; (800433c <MX_GPIO_Init+0x138>)
 8004328:	f7fc ff5e 	bl	80011e8 <HAL_GPIO_Init>

}
 800432c:	bf00      	nop
 800432e:	3730      	adds	r7, #48	; 0x30
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}
 8004334:	40023800 	.word	0x40023800
 8004338:	40020400 	.word	0x40020400
 800433c:	40021800 	.word	0x40021800
 8004340:	10110000 	.word	0x10110000
 8004344:	40020800 	.word	0x40020800

08004348 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004348:	b480      	push	{r7}
 800434a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800434c:	bf00      	nop
 800434e:	46bd      	mov	sp, r7
 8004350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004354:	4770      	bx	lr
	...

08004358 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004358:	b480      	push	{r7}
 800435a:	b083      	sub	sp, #12
 800435c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800435e:	4b0f      	ldr	r3, [pc, #60]	; (800439c <HAL_MspInit+0x44>)
 8004360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004362:	4a0e      	ldr	r2, [pc, #56]	; (800439c <HAL_MspInit+0x44>)
 8004364:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004368:	6413      	str	r3, [r2, #64]	; 0x40
 800436a:	4b0c      	ldr	r3, [pc, #48]	; (800439c <HAL_MspInit+0x44>)
 800436c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800436e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004372:	607b      	str	r3, [r7, #4]
 8004374:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004376:	4b09      	ldr	r3, [pc, #36]	; (800439c <HAL_MspInit+0x44>)
 8004378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800437a:	4a08      	ldr	r2, [pc, #32]	; (800439c <HAL_MspInit+0x44>)
 800437c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004380:	6453      	str	r3, [r2, #68]	; 0x44
 8004382:	4b06      	ldr	r3, [pc, #24]	; (800439c <HAL_MspInit+0x44>)
 8004384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004386:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800438a:	603b      	str	r3, [r7, #0]
 800438c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800438e:	bf00      	nop
 8004390:	370c      	adds	r7, #12
 8004392:	46bd      	mov	sp, r7
 8004394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004398:	4770      	bx	lr
 800439a:	bf00      	nop
 800439c:	40023800 	.word	0x40023800

080043a0 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b08e      	sub	sp, #56	; 0x38
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80043ac:	2200      	movs	r2, #0
 80043ae:	601a      	str	r2, [r3, #0]
 80043b0:	605a      	str	r2, [r3, #4]
 80043b2:	609a      	str	r2, [r3, #8]
 80043b4:	60da      	str	r2, [r3, #12]
 80043b6:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a4e      	ldr	r2, [pc, #312]	; (80044f8 <HAL_ETH_MspInit+0x158>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	f040 8096 	bne.w	80044f0 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80043c4:	4b4d      	ldr	r3, [pc, #308]	; (80044fc <HAL_ETH_MspInit+0x15c>)
 80043c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043c8:	4a4c      	ldr	r2, [pc, #304]	; (80044fc <HAL_ETH_MspInit+0x15c>)
 80043ca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80043ce:	6313      	str	r3, [r2, #48]	; 0x30
 80043d0:	4b4a      	ldr	r3, [pc, #296]	; (80044fc <HAL_ETH_MspInit+0x15c>)
 80043d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043d8:	623b      	str	r3, [r7, #32]
 80043da:	6a3b      	ldr	r3, [r7, #32]
 80043dc:	4b47      	ldr	r3, [pc, #284]	; (80044fc <HAL_ETH_MspInit+0x15c>)
 80043de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043e0:	4a46      	ldr	r2, [pc, #280]	; (80044fc <HAL_ETH_MspInit+0x15c>)
 80043e2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80043e6:	6313      	str	r3, [r2, #48]	; 0x30
 80043e8:	4b44      	ldr	r3, [pc, #272]	; (80044fc <HAL_ETH_MspInit+0x15c>)
 80043ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80043f0:	61fb      	str	r3, [r7, #28]
 80043f2:	69fb      	ldr	r3, [r7, #28]
 80043f4:	4b41      	ldr	r3, [pc, #260]	; (80044fc <HAL_ETH_MspInit+0x15c>)
 80043f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043f8:	4a40      	ldr	r2, [pc, #256]	; (80044fc <HAL_ETH_MspInit+0x15c>)
 80043fa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80043fe:	6313      	str	r3, [r2, #48]	; 0x30
 8004400:	4b3e      	ldr	r3, [pc, #248]	; (80044fc <HAL_ETH_MspInit+0x15c>)
 8004402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004404:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004408:	61bb      	str	r3, [r7, #24]
 800440a:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800440c:	4b3b      	ldr	r3, [pc, #236]	; (80044fc <HAL_ETH_MspInit+0x15c>)
 800440e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004410:	4a3a      	ldr	r2, [pc, #232]	; (80044fc <HAL_ETH_MspInit+0x15c>)
 8004412:	f043 0304 	orr.w	r3, r3, #4
 8004416:	6313      	str	r3, [r2, #48]	; 0x30
 8004418:	4b38      	ldr	r3, [pc, #224]	; (80044fc <HAL_ETH_MspInit+0x15c>)
 800441a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800441c:	f003 0304 	and.w	r3, r3, #4
 8004420:	617b      	str	r3, [r7, #20]
 8004422:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004424:	4b35      	ldr	r3, [pc, #212]	; (80044fc <HAL_ETH_MspInit+0x15c>)
 8004426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004428:	4a34      	ldr	r2, [pc, #208]	; (80044fc <HAL_ETH_MspInit+0x15c>)
 800442a:	f043 0301 	orr.w	r3, r3, #1
 800442e:	6313      	str	r3, [r2, #48]	; 0x30
 8004430:	4b32      	ldr	r3, [pc, #200]	; (80044fc <HAL_ETH_MspInit+0x15c>)
 8004432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004434:	f003 0301 	and.w	r3, r3, #1
 8004438:	613b      	str	r3, [r7, #16]
 800443a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800443c:	4b2f      	ldr	r3, [pc, #188]	; (80044fc <HAL_ETH_MspInit+0x15c>)
 800443e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004440:	4a2e      	ldr	r2, [pc, #184]	; (80044fc <HAL_ETH_MspInit+0x15c>)
 8004442:	f043 0302 	orr.w	r3, r3, #2
 8004446:	6313      	str	r3, [r2, #48]	; 0x30
 8004448:	4b2c      	ldr	r3, [pc, #176]	; (80044fc <HAL_ETH_MspInit+0x15c>)
 800444a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800444c:	f003 0302 	and.w	r3, r3, #2
 8004450:	60fb      	str	r3, [r7, #12]
 8004452:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004454:	4b29      	ldr	r3, [pc, #164]	; (80044fc <HAL_ETH_MspInit+0x15c>)
 8004456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004458:	4a28      	ldr	r2, [pc, #160]	; (80044fc <HAL_ETH_MspInit+0x15c>)
 800445a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800445e:	6313      	str	r3, [r2, #48]	; 0x30
 8004460:	4b26      	ldr	r3, [pc, #152]	; (80044fc <HAL_ETH_MspInit+0x15c>)
 8004462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004464:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004468:	60bb      	str	r3, [r7, #8]
 800446a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800446c:	2332      	movs	r3, #50	; 0x32
 800446e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004470:	2302      	movs	r3, #2
 8004472:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004474:	2300      	movs	r3, #0
 8004476:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004478:	2303      	movs	r3, #3
 800447a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800447c:	230b      	movs	r3, #11
 800447e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004480:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004484:	4619      	mov	r1, r3
 8004486:	481e      	ldr	r0, [pc, #120]	; (8004500 <HAL_ETH_MspInit+0x160>)
 8004488:	f7fc feae 	bl	80011e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800448c:	2386      	movs	r3, #134	; 0x86
 800448e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004490:	2302      	movs	r3, #2
 8004492:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004494:	2300      	movs	r3, #0
 8004496:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004498:	2303      	movs	r3, #3
 800449a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800449c:	230b      	movs	r3, #11
 800449e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80044a4:	4619      	mov	r1, r3
 80044a6:	4817      	ldr	r0, [pc, #92]	; (8004504 <HAL_ETH_MspInit+0x164>)
 80044a8:	f7fc fe9e 	bl	80011e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80044ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80044b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044b2:	2302      	movs	r3, #2
 80044b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044b6:	2300      	movs	r3, #0
 80044b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044ba:	2303      	movs	r3, #3
 80044bc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80044be:	230b      	movs	r3, #11
 80044c0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80044c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80044c6:	4619      	mov	r1, r3
 80044c8:	480f      	ldr	r0, [pc, #60]	; (8004508 <HAL_ETH_MspInit+0x168>)
 80044ca:	f7fc fe8d 	bl	80011e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80044ce:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80044d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044d4:	2302      	movs	r3, #2
 80044d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044d8:	2300      	movs	r3, #0
 80044da:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044dc:	2303      	movs	r3, #3
 80044de:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80044e0:	230b      	movs	r3, #11
 80044e2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80044e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80044e8:	4619      	mov	r1, r3
 80044ea:	4808      	ldr	r0, [pc, #32]	; (800450c <HAL_ETH_MspInit+0x16c>)
 80044ec:	f7fc fe7c 	bl	80011e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80044f0:	bf00      	nop
 80044f2:	3738      	adds	r7, #56	; 0x38
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}
 80044f8:	40028000 	.word	0x40028000
 80044fc:	40023800 	.word	0x40023800
 8004500:	40020800 	.word	0x40020800
 8004504:	40020000 	.word	0x40020000
 8004508:	40020400 	.word	0x40020400
 800450c:	40021800 	.word	0x40021800

08004510 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b090      	sub	sp, #64	; 0x40
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004518:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800451c:	2200      	movs	r2, #0
 800451e:	601a      	str	r2, [r3, #0]
 8004520:	605a      	str	r2, [r3, #4]
 8004522:	609a      	str	r2, [r3, #8]
 8004524:	60da      	str	r2, [r3, #12]
 8004526:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a6e      	ldr	r2, [pc, #440]	; (80046e8 <HAL_UART_MspInit+0x1d8>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d14d      	bne.n	80045ce <HAL_UART_MspInit+0xbe>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8004532:	4b6e      	ldr	r3, [pc, #440]	; (80046ec <HAL_UART_MspInit+0x1dc>)
 8004534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004536:	4a6d      	ldr	r2, [pc, #436]	; (80046ec <HAL_UART_MspInit+0x1dc>)
 8004538:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800453c:	6413      	str	r3, [r2, #64]	; 0x40
 800453e:	4b6b      	ldr	r3, [pc, #428]	; (80046ec <HAL_UART_MspInit+0x1dc>)
 8004540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004542:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004546:	62bb      	str	r3, [r7, #40]	; 0x28
 8004548:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800454a:	4b68      	ldr	r3, [pc, #416]	; (80046ec <HAL_UART_MspInit+0x1dc>)
 800454c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800454e:	4a67      	ldr	r2, [pc, #412]	; (80046ec <HAL_UART_MspInit+0x1dc>)
 8004550:	f043 0301 	orr.w	r3, r3, #1
 8004554:	6313      	str	r3, [r2, #48]	; 0x30
 8004556:	4b65      	ldr	r3, [pc, #404]	; (80046ec <HAL_UART_MspInit+0x1dc>)
 8004558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800455a:	f003 0301 	and.w	r3, r3, #1
 800455e:	627b      	str	r3, [r7, #36]	; 0x24
 8004560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004562:	4b62      	ldr	r3, [pc, #392]	; (80046ec <HAL_UART_MspInit+0x1dc>)
 8004564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004566:	4a61      	ldr	r2, [pc, #388]	; (80046ec <HAL_UART_MspInit+0x1dc>)
 8004568:	f043 0304 	orr.w	r3, r3, #4
 800456c:	6313      	str	r3, [r2, #48]	; 0x30
 800456e:	4b5f      	ldr	r3, [pc, #380]	; (80046ec <HAL_UART_MspInit+0x1dc>)
 8004570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004572:	f003 0304 	and.w	r3, r3, #4
 8004576:	623b      	str	r3, [r7, #32]
 8004578:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration    
    PA0/WKUP     ------> UART4_TX
    PC11     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800457a:	2301      	movs	r3, #1
 800457c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800457e:	2302      	movs	r3, #2
 8004580:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004582:	2300      	movs	r3, #0
 8004584:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004586:	2303      	movs	r3, #3
 8004588:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800458a:	2308      	movs	r3, #8
 800458c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800458e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004592:	4619      	mov	r1, r3
 8004594:	4856      	ldr	r0, [pc, #344]	; (80046f0 <HAL_UART_MspInit+0x1e0>)
 8004596:	f7fc fe27 	bl	80011e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800459a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800459e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045a0:	2302      	movs	r3, #2
 80045a2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045a4:	2300      	movs	r3, #0
 80045a6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045a8:	2303      	movs	r3, #3
 80045aa:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80045ac:	2308      	movs	r3, #8
 80045ae:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80045b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80045b4:	4619      	mov	r1, r3
 80045b6:	484f      	ldr	r0, [pc, #316]	; (80046f4 <HAL_UART_MspInit+0x1e4>)
 80045b8:	f7fc fe16 	bl	80011e8 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80045bc:	2200      	movs	r2, #0
 80045be:	2100      	movs	r1, #0
 80045c0:	2034      	movs	r0, #52	; 0x34
 80045c2:	f7fc f94e 	bl	8000862 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80045c6:	2034      	movs	r0, #52	; 0x34
 80045c8:	f7fc f967 	bl	800089a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80045cc:	e088      	b.n	80046e0 <HAL_UART_MspInit+0x1d0>
  else if(huart->Instance==UART5)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a49      	ldr	r2, [pc, #292]	; (80046f8 <HAL_UART_MspInit+0x1e8>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d14d      	bne.n	8004674 <HAL_UART_MspInit+0x164>
    __HAL_RCC_UART5_CLK_ENABLE();
 80045d8:	4b44      	ldr	r3, [pc, #272]	; (80046ec <HAL_UART_MspInit+0x1dc>)
 80045da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045dc:	4a43      	ldr	r2, [pc, #268]	; (80046ec <HAL_UART_MspInit+0x1dc>)
 80045de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80045e2:	6413      	str	r3, [r2, #64]	; 0x40
 80045e4:	4b41      	ldr	r3, [pc, #260]	; (80046ec <HAL_UART_MspInit+0x1dc>)
 80045e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045ec:	61fb      	str	r3, [r7, #28]
 80045ee:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80045f0:	4b3e      	ldr	r3, [pc, #248]	; (80046ec <HAL_UART_MspInit+0x1dc>)
 80045f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045f4:	4a3d      	ldr	r2, [pc, #244]	; (80046ec <HAL_UART_MspInit+0x1dc>)
 80045f6:	f043 0304 	orr.w	r3, r3, #4
 80045fa:	6313      	str	r3, [r2, #48]	; 0x30
 80045fc:	4b3b      	ldr	r3, [pc, #236]	; (80046ec <HAL_UART_MspInit+0x1dc>)
 80045fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004600:	f003 0304 	and.w	r3, r3, #4
 8004604:	61bb      	str	r3, [r7, #24]
 8004606:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004608:	4b38      	ldr	r3, [pc, #224]	; (80046ec <HAL_UART_MspInit+0x1dc>)
 800460a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800460c:	4a37      	ldr	r2, [pc, #220]	; (80046ec <HAL_UART_MspInit+0x1dc>)
 800460e:	f043 0308 	orr.w	r3, r3, #8
 8004612:	6313      	str	r3, [r2, #48]	; 0x30
 8004614:	4b35      	ldr	r3, [pc, #212]	; (80046ec <HAL_UART_MspInit+0x1dc>)
 8004616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004618:	f003 0308 	and.w	r3, r3, #8
 800461c:	617b      	str	r3, [r7, #20]
 800461e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004620:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004624:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004626:	2302      	movs	r3, #2
 8004628:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800462a:	2300      	movs	r3, #0
 800462c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800462e:	2303      	movs	r3, #3
 8004630:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8004632:	2308      	movs	r3, #8
 8004634:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004636:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800463a:	4619      	mov	r1, r3
 800463c:	482d      	ldr	r0, [pc, #180]	; (80046f4 <HAL_UART_MspInit+0x1e4>)
 800463e:	f7fc fdd3 	bl	80011e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004642:	2304      	movs	r3, #4
 8004644:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004646:	2302      	movs	r3, #2
 8004648:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800464a:	2300      	movs	r3, #0
 800464c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800464e:	2303      	movs	r3, #3
 8004650:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8004652:	2308      	movs	r3, #8
 8004654:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004656:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800465a:	4619      	mov	r1, r3
 800465c:	4827      	ldr	r0, [pc, #156]	; (80046fc <HAL_UART_MspInit+0x1ec>)
 800465e:	f7fc fdc3 	bl	80011e8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8004662:	2200      	movs	r2, #0
 8004664:	2100      	movs	r1, #0
 8004666:	2035      	movs	r0, #53	; 0x35
 8004668:	f7fc f8fb 	bl	8000862 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 800466c:	2035      	movs	r0, #53	; 0x35
 800466e:	f7fc f914 	bl	800089a <HAL_NVIC_EnableIRQ>
}
 8004672:	e035      	b.n	80046e0 <HAL_UART_MspInit+0x1d0>
  else if(huart->Instance==USART3)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a21      	ldr	r2, [pc, #132]	; (8004700 <HAL_UART_MspInit+0x1f0>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d130      	bne.n	80046e0 <HAL_UART_MspInit+0x1d0>
    __HAL_RCC_USART3_CLK_ENABLE();
 800467e:	4b1b      	ldr	r3, [pc, #108]	; (80046ec <HAL_UART_MspInit+0x1dc>)
 8004680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004682:	4a1a      	ldr	r2, [pc, #104]	; (80046ec <HAL_UART_MspInit+0x1dc>)
 8004684:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004688:	6413      	str	r3, [r2, #64]	; 0x40
 800468a:	4b18      	ldr	r3, [pc, #96]	; (80046ec <HAL_UART_MspInit+0x1dc>)
 800468c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800468e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004692:	613b      	str	r3, [r7, #16]
 8004694:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004696:	4b15      	ldr	r3, [pc, #84]	; (80046ec <HAL_UART_MspInit+0x1dc>)
 8004698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800469a:	4a14      	ldr	r2, [pc, #80]	; (80046ec <HAL_UART_MspInit+0x1dc>)
 800469c:	f043 0308 	orr.w	r3, r3, #8
 80046a0:	6313      	str	r3, [r2, #48]	; 0x30
 80046a2:	4b12      	ldr	r3, [pc, #72]	; (80046ec <HAL_UART_MspInit+0x1dc>)
 80046a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046a6:	f003 0308 	and.w	r3, r3, #8
 80046aa:	60fb      	str	r3, [r7, #12]
 80046ac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80046ae:	f44f 7340 	mov.w	r3, #768	; 0x300
 80046b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046b4:	2302      	movs	r3, #2
 80046b6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046b8:	2300      	movs	r3, #0
 80046ba:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046bc:	2303      	movs	r3, #3
 80046be:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80046c0:	2307      	movs	r3, #7
 80046c2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80046c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80046c8:	4619      	mov	r1, r3
 80046ca:	480c      	ldr	r0, [pc, #48]	; (80046fc <HAL_UART_MspInit+0x1ec>)
 80046cc:	f7fc fd8c 	bl	80011e8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80046d0:	2200      	movs	r2, #0
 80046d2:	2100      	movs	r1, #0
 80046d4:	2027      	movs	r0, #39	; 0x27
 80046d6:	f7fc f8c4 	bl	8000862 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80046da:	2027      	movs	r0, #39	; 0x27
 80046dc:	f7fc f8dd 	bl	800089a <HAL_NVIC_EnableIRQ>
}
 80046e0:	bf00      	nop
 80046e2:	3740      	adds	r7, #64	; 0x40
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}
 80046e8:	40004c00 	.word	0x40004c00
 80046ec:	40023800 	.word	0x40023800
 80046f0:	40020000 	.word	0x40020000
 80046f4:	40020800 	.word	0x40020800
 80046f8:	40005000 	.word	0x40005000
 80046fc:	40020c00 	.word	0x40020c00
 8004700:	40004800 	.word	0x40004800

08004704 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b08a      	sub	sp, #40	; 0x28
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800470c:	f107 0314 	add.w	r3, r7, #20
 8004710:	2200      	movs	r2, #0
 8004712:	601a      	str	r2, [r3, #0]
 8004714:	605a      	str	r2, [r3, #4]
 8004716:	609a      	str	r2, [r3, #8]
 8004718:	60da      	str	r2, [r3, #12]
 800471a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004724:	d141      	bne.n	80047aa <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004726:	4b23      	ldr	r3, [pc, #140]	; (80047b4 <HAL_PCD_MspInit+0xb0>)
 8004728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800472a:	4a22      	ldr	r2, [pc, #136]	; (80047b4 <HAL_PCD_MspInit+0xb0>)
 800472c:	f043 0301 	orr.w	r3, r3, #1
 8004730:	6313      	str	r3, [r2, #48]	; 0x30
 8004732:	4b20      	ldr	r3, [pc, #128]	; (80047b4 <HAL_PCD_MspInit+0xb0>)
 8004734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004736:	f003 0301 	and.w	r3, r3, #1
 800473a:	613b      	str	r3, [r7, #16]
 800473c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800473e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8004742:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004744:	2302      	movs	r3, #2
 8004746:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004748:	2300      	movs	r3, #0
 800474a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800474c:	2303      	movs	r3, #3
 800474e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8004750:	230a      	movs	r3, #10
 8004752:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004754:	f107 0314 	add.w	r3, r7, #20
 8004758:	4619      	mov	r1, r3
 800475a:	4817      	ldr	r0, [pc, #92]	; (80047b8 <HAL_PCD_MspInit+0xb4>)
 800475c:	f7fc fd44 	bl	80011e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8004760:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004764:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004766:	2300      	movs	r3, #0
 8004768:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800476a:	2300      	movs	r3, #0
 800476c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800476e:	f107 0314 	add.w	r3, r7, #20
 8004772:	4619      	mov	r1, r3
 8004774:	4810      	ldr	r0, [pc, #64]	; (80047b8 <HAL_PCD_MspInit+0xb4>)
 8004776:	f7fc fd37 	bl	80011e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800477a:	4b0e      	ldr	r3, [pc, #56]	; (80047b4 <HAL_PCD_MspInit+0xb0>)
 800477c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800477e:	4a0d      	ldr	r2, [pc, #52]	; (80047b4 <HAL_PCD_MspInit+0xb0>)
 8004780:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004784:	6353      	str	r3, [r2, #52]	; 0x34
 8004786:	4b0b      	ldr	r3, [pc, #44]	; (80047b4 <HAL_PCD_MspInit+0xb0>)
 8004788:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800478a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800478e:	60fb      	str	r3, [r7, #12]
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	4b08      	ldr	r3, [pc, #32]	; (80047b4 <HAL_PCD_MspInit+0xb0>)
 8004794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004796:	4a07      	ldr	r2, [pc, #28]	; (80047b4 <HAL_PCD_MspInit+0xb0>)
 8004798:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800479c:	6453      	str	r3, [r2, #68]	; 0x44
 800479e:	4b05      	ldr	r3, [pc, #20]	; (80047b4 <HAL_PCD_MspInit+0xb0>)
 80047a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047a6:	60bb      	str	r3, [r7, #8]
 80047a8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80047aa:	bf00      	nop
 80047ac:	3728      	adds	r7, #40	; 0x28
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}
 80047b2:	bf00      	nop
 80047b4:	40023800 	.word	0x40023800
 80047b8:	40020000 	.word	0x40020000

080047bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80047bc:	b480      	push	{r7}
 80047be:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80047c0:	bf00      	nop
 80047c2:	46bd      	mov	sp, r7
 80047c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c8:	4770      	bx	lr

080047ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80047ca:	b480      	push	{r7}
 80047cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80047ce:	e7fe      	b.n	80047ce <HardFault_Handler+0x4>

080047d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80047d0:	b480      	push	{r7}
 80047d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80047d4:	e7fe      	b.n	80047d4 <MemManage_Handler+0x4>

080047d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80047d6:	b480      	push	{r7}
 80047d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80047da:	e7fe      	b.n	80047da <BusFault_Handler+0x4>

080047dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80047dc:	b480      	push	{r7}
 80047de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80047e0:	e7fe      	b.n	80047e0 <UsageFault_Handler+0x4>

080047e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80047e2:	b480      	push	{r7}
 80047e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80047e6:	bf00      	nop
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr

080047f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80047f0:	b480      	push	{r7}
 80047f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80047f4:	bf00      	nop
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr

080047fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80047fe:	b480      	push	{r7}
 8004800:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004802:	bf00      	nop
 8004804:	46bd      	mov	sp, r7
 8004806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480a:	4770      	bx	lr

0800480c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004810:	f7fb ff08 	bl	8000624 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004814:	bf00      	nop
 8004816:	bd80      	pop	{r7, pc}

08004818 <UART4_IRQHandler>:
/******************************************************************************/
/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800481c:	4802      	ldr	r0, [pc, #8]	; (8004828 <UART4_IRQHandler+0x10>)
 800481e:	f7fe f9d3 	bl	8002bc8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8004822:	bf00      	nop
 8004824:	bd80      	pop	{r7, pc}
 8004826:	bf00      	nop
 8004828:	200006d0 	.word	0x200006d0

0800482c <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8004830:	4802      	ldr	r0, [pc, #8]	; (800483c <UART5_IRQHandler+0x10>)
 8004832:	f7fe f9c9 	bl	8002bc8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8004836:	bf00      	nop
 8004838:	bd80      	pop	{r7, pc}
 800483a:	bf00      	nop
 800483c:	20000588 	.word	0x20000588

08004840 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b086      	sub	sp, #24
 8004844:	af00      	add	r7, sp, #0
 8004846:	60f8      	str	r0, [r7, #12]
 8004848:	60b9      	str	r1, [r7, #8]
 800484a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800484c:	2300      	movs	r3, #0
 800484e:	617b      	str	r3, [r7, #20]
 8004850:	e00a      	b.n	8004868 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004852:	f3af 8000 	nop.w
 8004856:	4601      	mov	r1, r0
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	1c5a      	adds	r2, r3, #1
 800485c:	60ba      	str	r2, [r7, #8]
 800485e:	b2ca      	uxtb	r2, r1
 8004860:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	3301      	adds	r3, #1
 8004866:	617b      	str	r3, [r7, #20]
 8004868:	697a      	ldr	r2, [r7, #20]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	429a      	cmp	r2, r3
 800486e:	dbf0      	blt.n	8004852 <_read+0x12>
	}

return len;
 8004870:	687b      	ldr	r3, [r7, #4]
}
 8004872:	4618      	mov	r0, r3
 8004874:	3718      	adds	r7, #24
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}

0800487a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800487a:	b580      	push	{r7, lr}
 800487c:	b086      	sub	sp, #24
 800487e:	af00      	add	r7, sp, #0
 8004880:	60f8      	str	r0, [r7, #12]
 8004882:	60b9      	str	r1, [r7, #8]
 8004884:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004886:	2300      	movs	r3, #0
 8004888:	617b      	str	r3, [r7, #20]
 800488a:	e009      	b.n	80048a0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	1c5a      	adds	r2, r3, #1
 8004890:	60ba      	str	r2, [r7, #8]
 8004892:	781b      	ldrb	r3, [r3, #0]
 8004894:	4618      	mov	r0, r3
 8004896:	f7ff fa37 	bl	8003d08 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	3301      	adds	r3, #1
 800489e:	617b      	str	r3, [r7, #20]
 80048a0:	697a      	ldr	r2, [r7, #20]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	429a      	cmp	r2, r3
 80048a6:	dbf1      	blt.n	800488c <_write+0x12>
	}
	return len;
 80048a8:	687b      	ldr	r3, [r7, #4]
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3718      	adds	r7, #24
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}

080048b2 <_close>:

int _close(int file)
{
 80048b2:	b480      	push	{r7}
 80048b4:	b083      	sub	sp, #12
 80048b6:	af00      	add	r7, sp, #0
 80048b8:	6078      	str	r0, [r7, #4]
	return -1;
 80048ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80048be:	4618      	mov	r0, r3
 80048c0:	370c      	adds	r7, #12
 80048c2:	46bd      	mov	sp, r7
 80048c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c8:	4770      	bx	lr

080048ca <_fstat>:


int _fstat(int file, struct stat *st)
{
 80048ca:	b480      	push	{r7}
 80048cc:	b083      	sub	sp, #12
 80048ce:	af00      	add	r7, sp, #0
 80048d0:	6078      	str	r0, [r7, #4]
 80048d2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80048da:	605a      	str	r2, [r3, #4]
	return 0;
 80048dc:	2300      	movs	r3, #0
}
 80048de:	4618      	mov	r0, r3
 80048e0:	370c      	adds	r7, #12
 80048e2:	46bd      	mov	sp, r7
 80048e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e8:	4770      	bx	lr

080048ea <_isatty>:

int _isatty(int file)
{
 80048ea:	b480      	push	{r7}
 80048ec:	b083      	sub	sp, #12
 80048ee:	af00      	add	r7, sp, #0
 80048f0:	6078      	str	r0, [r7, #4]
	return 1;
 80048f2:	2301      	movs	r3, #1
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	370c      	adds	r7, #12
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr

08004900 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004900:	b480      	push	{r7}
 8004902:	b085      	sub	sp, #20
 8004904:	af00      	add	r7, sp, #0
 8004906:	60f8      	str	r0, [r7, #12]
 8004908:	60b9      	str	r1, [r7, #8]
 800490a:	607a      	str	r2, [r7, #4]
	return 0;
 800490c:	2300      	movs	r3, #0
}
 800490e:	4618      	mov	r0, r3
 8004910:	3714      	adds	r7, #20
 8004912:	46bd      	mov	sp, r7
 8004914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004918:	4770      	bx	lr
	...

0800491c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b084      	sub	sp, #16
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004924:	4b11      	ldr	r3, [pc, #68]	; (800496c <_sbrk+0x50>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d102      	bne.n	8004932 <_sbrk+0x16>
		heap_end = &end;
 800492c:	4b0f      	ldr	r3, [pc, #60]	; (800496c <_sbrk+0x50>)
 800492e:	4a10      	ldr	r2, [pc, #64]	; (8004970 <_sbrk+0x54>)
 8004930:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8004932:	4b0e      	ldr	r3, [pc, #56]	; (800496c <_sbrk+0x50>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8004938:	4b0c      	ldr	r3, [pc, #48]	; (800496c <_sbrk+0x50>)
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	4413      	add	r3, r2
 8004940:	466a      	mov	r2, sp
 8004942:	4293      	cmp	r3, r2
 8004944:	d907      	bls.n	8004956 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8004946:	f000 f875 	bl	8004a34 <__errno>
 800494a:	4603      	mov	r3, r0
 800494c:	220c      	movs	r2, #12
 800494e:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8004950:	f04f 33ff 	mov.w	r3, #4294967295
 8004954:	e006      	b.n	8004964 <_sbrk+0x48>
	}

	heap_end += incr;
 8004956:	4b05      	ldr	r3, [pc, #20]	; (800496c <_sbrk+0x50>)
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	4413      	add	r3, r2
 800495e:	4a03      	ldr	r2, [pc, #12]	; (800496c <_sbrk+0x50>)
 8004960:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8004962:	68fb      	ldr	r3, [r7, #12]
}
 8004964:	4618      	mov	r0, r3
 8004966:	3710      	adds	r7, #16
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}
 800496c:	20000090 	.word	0x20000090
 8004970:	200007a8 	.word	0x200007a8

08004974 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004974:	b480      	push	{r7}
 8004976:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004978:	4b15      	ldr	r3, [pc, #84]	; (80049d0 <SystemInit+0x5c>)
 800497a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800497e:	4a14      	ldr	r2, [pc, #80]	; (80049d0 <SystemInit+0x5c>)
 8004980:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004984:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8004988:	4b12      	ldr	r3, [pc, #72]	; (80049d4 <SystemInit+0x60>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a11      	ldr	r2, [pc, #68]	; (80049d4 <SystemInit+0x60>)
 800498e:	f043 0301 	orr.w	r3, r3, #1
 8004992:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004994:	4b0f      	ldr	r3, [pc, #60]	; (80049d4 <SystemInit+0x60>)
 8004996:	2200      	movs	r2, #0
 8004998:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800499a:	4b0e      	ldr	r3, [pc, #56]	; (80049d4 <SystemInit+0x60>)
 800499c:	681a      	ldr	r2, [r3, #0]
 800499e:	490d      	ldr	r1, [pc, #52]	; (80049d4 <SystemInit+0x60>)
 80049a0:	4b0d      	ldr	r3, [pc, #52]	; (80049d8 <SystemInit+0x64>)
 80049a2:	4013      	ands	r3, r2
 80049a4:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80049a6:	4b0b      	ldr	r3, [pc, #44]	; (80049d4 <SystemInit+0x60>)
 80049a8:	4a0c      	ldr	r2, [pc, #48]	; (80049dc <SystemInit+0x68>)
 80049aa:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80049ac:	4b09      	ldr	r3, [pc, #36]	; (80049d4 <SystemInit+0x60>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a08      	ldr	r2, [pc, #32]	; (80049d4 <SystemInit+0x60>)
 80049b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049b6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80049b8:	4b06      	ldr	r3, [pc, #24]	; (80049d4 <SystemInit+0x60>)
 80049ba:	2200      	movs	r2, #0
 80049bc:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80049be:	4b04      	ldr	r3, [pc, #16]	; (80049d0 <SystemInit+0x5c>)
 80049c0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80049c4:	609a      	str	r2, [r3, #8]
#endif
}
 80049c6:	bf00      	nop
 80049c8:	46bd      	mov	sp, r7
 80049ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ce:	4770      	bx	lr
 80049d0:	e000ed00 	.word	0xe000ed00
 80049d4:	40023800 	.word	0x40023800
 80049d8:	fef6ffff 	.word	0xfef6ffff
 80049dc:	24003010 	.word	0x24003010

080049e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80049e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004a18 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80049e4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80049e6:	e003      	b.n	80049f0 <LoopCopyDataInit>

080049e8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80049e8:	4b0c      	ldr	r3, [pc, #48]	; (8004a1c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80049ea:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80049ec:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80049ee:	3104      	adds	r1, #4

080049f0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80049f0:	480b      	ldr	r0, [pc, #44]	; (8004a20 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80049f2:	4b0c      	ldr	r3, [pc, #48]	; (8004a24 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80049f4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80049f6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80049f8:	d3f6      	bcc.n	80049e8 <CopyDataInit>
  ldr  r2, =_sbss
 80049fa:	4a0b      	ldr	r2, [pc, #44]	; (8004a28 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80049fc:	e002      	b.n	8004a04 <LoopFillZerobss>

080049fe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80049fe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004a00:	f842 3b04 	str.w	r3, [r2], #4

08004a04 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004a04:	4b09      	ldr	r3, [pc, #36]	; (8004a2c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004a06:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004a08:	d3f9      	bcc.n	80049fe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004a0a:	f7ff ffb3 	bl	8004974 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004a0e:	f000 f817 	bl	8004a40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004a12:	f7ff f98b 	bl	8003d2c <main>
  bx  lr    
 8004a16:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004a18:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8004a1c:	08005ad0 	.word	0x08005ad0
  ldr  r0, =_sdata
 8004a20:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004a24:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8004a28:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8004a2c:	200007a8 	.word	0x200007a8

08004a30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004a30:	e7fe      	b.n	8004a30 <ADC_IRQHandler>
	...

08004a34 <__errno>:
 8004a34:	4b01      	ldr	r3, [pc, #4]	; (8004a3c <__errno+0x8>)
 8004a36:	6818      	ldr	r0, [r3, #0]
 8004a38:	4770      	bx	lr
 8004a3a:	bf00      	nop
 8004a3c:	2000000c 	.word	0x2000000c

08004a40 <__libc_init_array>:
 8004a40:	b570      	push	{r4, r5, r6, lr}
 8004a42:	4d0d      	ldr	r5, [pc, #52]	; (8004a78 <__libc_init_array+0x38>)
 8004a44:	4c0d      	ldr	r4, [pc, #52]	; (8004a7c <__libc_init_array+0x3c>)
 8004a46:	1b64      	subs	r4, r4, r5
 8004a48:	10a4      	asrs	r4, r4, #2
 8004a4a:	2600      	movs	r6, #0
 8004a4c:	42a6      	cmp	r6, r4
 8004a4e:	d109      	bne.n	8004a64 <__libc_init_array+0x24>
 8004a50:	4d0b      	ldr	r5, [pc, #44]	; (8004a80 <__libc_init_array+0x40>)
 8004a52:	4c0c      	ldr	r4, [pc, #48]	; (8004a84 <__libc_init_array+0x44>)
 8004a54:	f000 ff76 	bl	8005944 <_init>
 8004a58:	1b64      	subs	r4, r4, r5
 8004a5a:	10a4      	asrs	r4, r4, #2
 8004a5c:	2600      	movs	r6, #0
 8004a5e:	42a6      	cmp	r6, r4
 8004a60:	d105      	bne.n	8004a6e <__libc_init_array+0x2e>
 8004a62:	bd70      	pop	{r4, r5, r6, pc}
 8004a64:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a68:	4798      	blx	r3
 8004a6a:	3601      	adds	r6, #1
 8004a6c:	e7ee      	b.n	8004a4c <__libc_init_array+0xc>
 8004a6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a72:	4798      	blx	r3
 8004a74:	3601      	adds	r6, #1
 8004a76:	e7f2      	b.n	8004a5e <__libc_init_array+0x1e>
 8004a78:	08005ac8 	.word	0x08005ac8
 8004a7c:	08005ac8 	.word	0x08005ac8
 8004a80:	08005ac8 	.word	0x08005ac8
 8004a84:	08005acc 	.word	0x08005acc

08004a88 <memset>:
 8004a88:	4402      	add	r2, r0
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d100      	bne.n	8004a92 <memset+0xa>
 8004a90:	4770      	bx	lr
 8004a92:	f803 1b01 	strb.w	r1, [r3], #1
 8004a96:	e7f9      	b.n	8004a8c <memset+0x4>

08004a98 <iprintf>:
 8004a98:	b40f      	push	{r0, r1, r2, r3}
 8004a9a:	4b0a      	ldr	r3, [pc, #40]	; (8004ac4 <iprintf+0x2c>)
 8004a9c:	b513      	push	{r0, r1, r4, lr}
 8004a9e:	681c      	ldr	r4, [r3, #0]
 8004aa0:	b124      	cbz	r4, 8004aac <iprintf+0x14>
 8004aa2:	69a3      	ldr	r3, [r4, #24]
 8004aa4:	b913      	cbnz	r3, 8004aac <iprintf+0x14>
 8004aa6:	4620      	mov	r0, r4
 8004aa8:	f000 f866 	bl	8004b78 <__sinit>
 8004aac:	ab05      	add	r3, sp, #20
 8004aae:	9a04      	ldr	r2, [sp, #16]
 8004ab0:	68a1      	ldr	r1, [r4, #8]
 8004ab2:	9301      	str	r3, [sp, #4]
 8004ab4:	4620      	mov	r0, r4
 8004ab6:	f000 f983 	bl	8004dc0 <_vfiprintf_r>
 8004aba:	b002      	add	sp, #8
 8004abc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ac0:	b004      	add	sp, #16
 8004ac2:	4770      	bx	lr
 8004ac4:	2000000c 	.word	0x2000000c

08004ac8 <std>:
 8004ac8:	2300      	movs	r3, #0
 8004aca:	b510      	push	{r4, lr}
 8004acc:	4604      	mov	r4, r0
 8004ace:	e9c0 3300 	strd	r3, r3, [r0]
 8004ad2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004ad6:	6083      	str	r3, [r0, #8]
 8004ad8:	8181      	strh	r1, [r0, #12]
 8004ada:	6643      	str	r3, [r0, #100]	; 0x64
 8004adc:	81c2      	strh	r2, [r0, #14]
 8004ade:	6183      	str	r3, [r0, #24]
 8004ae0:	4619      	mov	r1, r3
 8004ae2:	2208      	movs	r2, #8
 8004ae4:	305c      	adds	r0, #92	; 0x5c
 8004ae6:	f7ff ffcf 	bl	8004a88 <memset>
 8004aea:	4b05      	ldr	r3, [pc, #20]	; (8004b00 <std+0x38>)
 8004aec:	6263      	str	r3, [r4, #36]	; 0x24
 8004aee:	4b05      	ldr	r3, [pc, #20]	; (8004b04 <std+0x3c>)
 8004af0:	62a3      	str	r3, [r4, #40]	; 0x28
 8004af2:	4b05      	ldr	r3, [pc, #20]	; (8004b08 <std+0x40>)
 8004af4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004af6:	4b05      	ldr	r3, [pc, #20]	; (8004b0c <std+0x44>)
 8004af8:	6224      	str	r4, [r4, #32]
 8004afa:	6323      	str	r3, [r4, #48]	; 0x30
 8004afc:	bd10      	pop	{r4, pc}
 8004afe:	bf00      	nop
 8004b00:	08005369 	.word	0x08005369
 8004b04:	0800538b 	.word	0x0800538b
 8004b08:	080053c3 	.word	0x080053c3
 8004b0c:	080053e7 	.word	0x080053e7

08004b10 <_cleanup_r>:
 8004b10:	4901      	ldr	r1, [pc, #4]	; (8004b18 <_cleanup_r+0x8>)
 8004b12:	f000 b8af 	b.w	8004c74 <_fwalk_reent>
 8004b16:	bf00      	nop
 8004b18:	080056c1 	.word	0x080056c1

08004b1c <__sfmoreglue>:
 8004b1c:	b570      	push	{r4, r5, r6, lr}
 8004b1e:	1e4a      	subs	r2, r1, #1
 8004b20:	2568      	movs	r5, #104	; 0x68
 8004b22:	4355      	muls	r5, r2
 8004b24:	460e      	mov	r6, r1
 8004b26:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004b2a:	f000 f8c5 	bl	8004cb8 <_malloc_r>
 8004b2e:	4604      	mov	r4, r0
 8004b30:	b140      	cbz	r0, 8004b44 <__sfmoreglue+0x28>
 8004b32:	2100      	movs	r1, #0
 8004b34:	e9c0 1600 	strd	r1, r6, [r0]
 8004b38:	300c      	adds	r0, #12
 8004b3a:	60a0      	str	r0, [r4, #8]
 8004b3c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004b40:	f7ff ffa2 	bl	8004a88 <memset>
 8004b44:	4620      	mov	r0, r4
 8004b46:	bd70      	pop	{r4, r5, r6, pc}

08004b48 <__sfp_lock_acquire>:
 8004b48:	4801      	ldr	r0, [pc, #4]	; (8004b50 <__sfp_lock_acquire+0x8>)
 8004b4a:	f000 b8b3 	b.w	8004cb4 <__retarget_lock_acquire_recursive>
 8004b4e:	bf00      	nop
 8004b50:	200007a0 	.word	0x200007a0

08004b54 <__sfp_lock_release>:
 8004b54:	4801      	ldr	r0, [pc, #4]	; (8004b5c <__sfp_lock_release+0x8>)
 8004b56:	f000 b8ae 	b.w	8004cb6 <__retarget_lock_release_recursive>
 8004b5a:	bf00      	nop
 8004b5c:	200007a0 	.word	0x200007a0

08004b60 <__sinit_lock_acquire>:
 8004b60:	4801      	ldr	r0, [pc, #4]	; (8004b68 <__sinit_lock_acquire+0x8>)
 8004b62:	f000 b8a7 	b.w	8004cb4 <__retarget_lock_acquire_recursive>
 8004b66:	bf00      	nop
 8004b68:	2000079b 	.word	0x2000079b

08004b6c <__sinit_lock_release>:
 8004b6c:	4801      	ldr	r0, [pc, #4]	; (8004b74 <__sinit_lock_release+0x8>)
 8004b6e:	f000 b8a2 	b.w	8004cb6 <__retarget_lock_release_recursive>
 8004b72:	bf00      	nop
 8004b74:	2000079b 	.word	0x2000079b

08004b78 <__sinit>:
 8004b78:	b510      	push	{r4, lr}
 8004b7a:	4604      	mov	r4, r0
 8004b7c:	f7ff fff0 	bl	8004b60 <__sinit_lock_acquire>
 8004b80:	69a3      	ldr	r3, [r4, #24]
 8004b82:	b11b      	cbz	r3, 8004b8c <__sinit+0x14>
 8004b84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b88:	f7ff bff0 	b.w	8004b6c <__sinit_lock_release>
 8004b8c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004b90:	6523      	str	r3, [r4, #80]	; 0x50
 8004b92:	4b13      	ldr	r3, [pc, #76]	; (8004be0 <__sinit+0x68>)
 8004b94:	4a13      	ldr	r2, [pc, #76]	; (8004be4 <__sinit+0x6c>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	62a2      	str	r2, [r4, #40]	; 0x28
 8004b9a:	42a3      	cmp	r3, r4
 8004b9c:	bf04      	itt	eq
 8004b9e:	2301      	moveq	r3, #1
 8004ba0:	61a3      	streq	r3, [r4, #24]
 8004ba2:	4620      	mov	r0, r4
 8004ba4:	f000 f820 	bl	8004be8 <__sfp>
 8004ba8:	6060      	str	r0, [r4, #4]
 8004baa:	4620      	mov	r0, r4
 8004bac:	f000 f81c 	bl	8004be8 <__sfp>
 8004bb0:	60a0      	str	r0, [r4, #8]
 8004bb2:	4620      	mov	r0, r4
 8004bb4:	f000 f818 	bl	8004be8 <__sfp>
 8004bb8:	2200      	movs	r2, #0
 8004bba:	60e0      	str	r0, [r4, #12]
 8004bbc:	2104      	movs	r1, #4
 8004bbe:	6860      	ldr	r0, [r4, #4]
 8004bc0:	f7ff ff82 	bl	8004ac8 <std>
 8004bc4:	68a0      	ldr	r0, [r4, #8]
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	2109      	movs	r1, #9
 8004bca:	f7ff ff7d 	bl	8004ac8 <std>
 8004bce:	68e0      	ldr	r0, [r4, #12]
 8004bd0:	2202      	movs	r2, #2
 8004bd2:	2112      	movs	r1, #18
 8004bd4:	f7ff ff78 	bl	8004ac8 <std>
 8004bd8:	2301      	movs	r3, #1
 8004bda:	61a3      	str	r3, [r4, #24]
 8004bdc:	e7d2      	b.n	8004b84 <__sinit+0xc>
 8004bde:	bf00      	nop
 8004be0:	08005a28 	.word	0x08005a28
 8004be4:	08004b11 	.word	0x08004b11

08004be8 <__sfp>:
 8004be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bea:	4607      	mov	r7, r0
 8004bec:	f7ff ffac 	bl	8004b48 <__sfp_lock_acquire>
 8004bf0:	4b1e      	ldr	r3, [pc, #120]	; (8004c6c <__sfp+0x84>)
 8004bf2:	681e      	ldr	r6, [r3, #0]
 8004bf4:	69b3      	ldr	r3, [r6, #24]
 8004bf6:	b913      	cbnz	r3, 8004bfe <__sfp+0x16>
 8004bf8:	4630      	mov	r0, r6
 8004bfa:	f7ff ffbd 	bl	8004b78 <__sinit>
 8004bfe:	3648      	adds	r6, #72	; 0x48
 8004c00:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004c04:	3b01      	subs	r3, #1
 8004c06:	d503      	bpl.n	8004c10 <__sfp+0x28>
 8004c08:	6833      	ldr	r3, [r6, #0]
 8004c0a:	b30b      	cbz	r3, 8004c50 <__sfp+0x68>
 8004c0c:	6836      	ldr	r6, [r6, #0]
 8004c0e:	e7f7      	b.n	8004c00 <__sfp+0x18>
 8004c10:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004c14:	b9d5      	cbnz	r5, 8004c4c <__sfp+0x64>
 8004c16:	4b16      	ldr	r3, [pc, #88]	; (8004c70 <__sfp+0x88>)
 8004c18:	60e3      	str	r3, [r4, #12]
 8004c1a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004c1e:	6665      	str	r5, [r4, #100]	; 0x64
 8004c20:	f000 f847 	bl	8004cb2 <__retarget_lock_init_recursive>
 8004c24:	f7ff ff96 	bl	8004b54 <__sfp_lock_release>
 8004c28:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004c2c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004c30:	6025      	str	r5, [r4, #0]
 8004c32:	61a5      	str	r5, [r4, #24]
 8004c34:	2208      	movs	r2, #8
 8004c36:	4629      	mov	r1, r5
 8004c38:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004c3c:	f7ff ff24 	bl	8004a88 <memset>
 8004c40:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004c44:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004c48:	4620      	mov	r0, r4
 8004c4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c4c:	3468      	adds	r4, #104	; 0x68
 8004c4e:	e7d9      	b.n	8004c04 <__sfp+0x1c>
 8004c50:	2104      	movs	r1, #4
 8004c52:	4638      	mov	r0, r7
 8004c54:	f7ff ff62 	bl	8004b1c <__sfmoreglue>
 8004c58:	4604      	mov	r4, r0
 8004c5a:	6030      	str	r0, [r6, #0]
 8004c5c:	2800      	cmp	r0, #0
 8004c5e:	d1d5      	bne.n	8004c0c <__sfp+0x24>
 8004c60:	f7ff ff78 	bl	8004b54 <__sfp_lock_release>
 8004c64:	230c      	movs	r3, #12
 8004c66:	603b      	str	r3, [r7, #0]
 8004c68:	e7ee      	b.n	8004c48 <__sfp+0x60>
 8004c6a:	bf00      	nop
 8004c6c:	08005a28 	.word	0x08005a28
 8004c70:	ffff0001 	.word	0xffff0001

08004c74 <_fwalk_reent>:
 8004c74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c78:	4606      	mov	r6, r0
 8004c7a:	4688      	mov	r8, r1
 8004c7c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004c80:	2700      	movs	r7, #0
 8004c82:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004c86:	f1b9 0901 	subs.w	r9, r9, #1
 8004c8a:	d505      	bpl.n	8004c98 <_fwalk_reent+0x24>
 8004c8c:	6824      	ldr	r4, [r4, #0]
 8004c8e:	2c00      	cmp	r4, #0
 8004c90:	d1f7      	bne.n	8004c82 <_fwalk_reent+0xe>
 8004c92:	4638      	mov	r0, r7
 8004c94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c98:	89ab      	ldrh	r3, [r5, #12]
 8004c9a:	2b01      	cmp	r3, #1
 8004c9c:	d907      	bls.n	8004cae <_fwalk_reent+0x3a>
 8004c9e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004ca2:	3301      	adds	r3, #1
 8004ca4:	d003      	beq.n	8004cae <_fwalk_reent+0x3a>
 8004ca6:	4629      	mov	r1, r5
 8004ca8:	4630      	mov	r0, r6
 8004caa:	47c0      	blx	r8
 8004cac:	4307      	orrs	r7, r0
 8004cae:	3568      	adds	r5, #104	; 0x68
 8004cb0:	e7e9      	b.n	8004c86 <_fwalk_reent+0x12>

08004cb2 <__retarget_lock_init_recursive>:
 8004cb2:	4770      	bx	lr

08004cb4 <__retarget_lock_acquire_recursive>:
 8004cb4:	4770      	bx	lr

08004cb6 <__retarget_lock_release_recursive>:
 8004cb6:	4770      	bx	lr

08004cb8 <_malloc_r>:
 8004cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cba:	1ccd      	adds	r5, r1, #3
 8004cbc:	f025 0503 	bic.w	r5, r5, #3
 8004cc0:	3508      	adds	r5, #8
 8004cc2:	2d0c      	cmp	r5, #12
 8004cc4:	bf38      	it	cc
 8004cc6:	250c      	movcc	r5, #12
 8004cc8:	2d00      	cmp	r5, #0
 8004cca:	4606      	mov	r6, r0
 8004ccc:	db01      	blt.n	8004cd2 <_malloc_r+0x1a>
 8004cce:	42a9      	cmp	r1, r5
 8004cd0:	d903      	bls.n	8004cda <_malloc_r+0x22>
 8004cd2:	230c      	movs	r3, #12
 8004cd4:	6033      	str	r3, [r6, #0]
 8004cd6:	2000      	movs	r0, #0
 8004cd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004cda:	f000 fda3 	bl	8005824 <__malloc_lock>
 8004cde:	4921      	ldr	r1, [pc, #132]	; (8004d64 <_malloc_r+0xac>)
 8004ce0:	680a      	ldr	r2, [r1, #0]
 8004ce2:	4614      	mov	r4, r2
 8004ce4:	b99c      	cbnz	r4, 8004d0e <_malloc_r+0x56>
 8004ce6:	4f20      	ldr	r7, [pc, #128]	; (8004d68 <_malloc_r+0xb0>)
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	b923      	cbnz	r3, 8004cf6 <_malloc_r+0x3e>
 8004cec:	4621      	mov	r1, r4
 8004cee:	4630      	mov	r0, r6
 8004cf0:	f000 fb2a 	bl	8005348 <_sbrk_r>
 8004cf4:	6038      	str	r0, [r7, #0]
 8004cf6:	4629      	mov	r1, r5
 8004cf8:	4630      	mov	r0, r6
 8004cfa:	f000 fb25 	bl	8005348 <_sbrk_r>
 8004cfe:	1c43      	adds	r3, r0, #1
 8004d00:	d123      	bne.n	8004d4a <_malloc_r+0x92>
 8004d02:	230c      	movs	r3, #12
 8004d04:	6033      	str	r3, [r6, #0]
 8004d06:	4630      	mov	r0, r6
 8004d08:	f000 fd92 	bl	8005830 <__malloc_unlock>
 8004d0c:	e7e3      	b.n	8004cd6 <_malloc_r+0x1e>
 8004d0e:	6823      	ldr	r3, [r4, #0]
 8004d10:	1b5b      	subs	r3, r3, r5
 8004d12:	d417      	bmi.n	8004d44 <_malloc_r+0x8c>
 8004d14:	2b0b      	cmp	r3, #11
 8004d16:	d903      	bls.n	8004d20 <_malloc_r+0x68>
 8004d18:	6023      	str	r3, [r4, #0]
 8004d1a:	441c      	add	r4, r3
 8004d1c:	6025      	str	r5, [r4, #0]
 8004d1e:	e004      	b.n	8004d2a <_malloc_r+0x72>
 8004d20:	6863      	ldr	r3, [r4, #4]
 8004d22:	42a2      	cmp	r2, r4
 8004d24:	bf0c      	ite	eq
 8004d26:	600b      	streq	r3, [r1, #0]
 8004d28:	6053      	strne	r3, [r2, #4]
 8004d2a:	4630      	mov	r0, r6
 8004d2c:	f000 fd80 	bl	8005830 <__malloc_unlock>
 8004d30:	f104 000b 	add.w	r0, r4, #11
 8004d34:	1d23      	adds	r3, r4, #4
 8004d36:	f020 0007 	bic.w	r0, r0, #7
 8004d3a:	1ac2      	subs	r2, r0, r3
 8004d3c:	d0cc      	beq.n	8004cd8 <_malloc_r+0x20>
 8004d3e:	1a1b      	subs	r3, r3, r0
 8004d40:	50a3      	str	r3, [r4, r2]
 8004d42:	e7c9      	b.n	8004cd8 <_malloc_r+0x20>
 8004d44:	4622      	mov	r2, r4
 8004d46:	6864      	ldr	r4, [r4, #4]
 8004d48:	e7cc      	b.n	8004ce4 <_malloc_r+0x2c>
 8004d4a:	1cc4      	adds	r4, r0, #3
 8004d4c:	f024 0403 	bic.w	r4, r4, #3
 8004d50:	42a0      	cmp	r0, r4
 8004d52:	d0e3      	beq.n	8004d1c <_malloc_r+0x64>
 8004d54:	1a21      	subs	r1, r4, r0
 8004d56:	4630      	mov	r0, r6
 8004d58:	f000 faf6 	bl	8005348 <_sbrk_r>
 8004d5c:	3001      	adds	r0, #1
 8004d5e:	d1dd      	bne.n	8004d1c <_malloc_r+0x64>
 8004d60:	e7cf      	b.n	8004d02 <_malloc_r+0x4a>
 8004d62:	bf00      	nop
 8004d64:	20000094 	.word	0x20000094
 8004d68:	20000098 	.word	0x20000098

08004d6c <__sfputc_r>:
 8004d6c:	6893      	ldr	r3, [r2, #8]
 8004d6e:	3b01      	subs	r3, #1
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	b410      	push	{r4}
 8004d74:	6093      	str	r3, [r2, #8]
 8004d76:	da08      	bge.n	8004d8a <__sfputc_r+0x1e>
 8004d78:	6994      	ldr	r4, [r2, #24]
 8004d7a:	42a3      	cmp	r3, r4
 8004d7c:	db01      	blt.n	8004d82 <__sfputc_r+0x16>
 8004d7e:	290a      	cmp	r1, #10
 8004d80:	d103      	bne.n	8004d8a <__sfputc_r+0x1e>
 8004d82:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004d86:	f000 bb33 	b.w	80053f0 <__swbuf_r>
 8004d8a:	6813      	ldr	r3, [r2, #0]
 8004d8c:	1c58      	adds	r0, r3, #1
 8004d8e:	6010      	str	r0, [r2, #0]
 8004d90:	7019      	strb	r1, [r3, #0]
 8004d92:	4608      	mov	r0, r1
 8004d94:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004d98:	4770      	bx	lr

08004d9a <__sfputs_r>:
 8004d9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d9c:	4606      	mov	r6, r0
 8004d9e:	460f      	mov	r7, r1
 8004da0:	4614      	mov	r4, r2
 8004da2:	18d5      	adds	r5, r2, r3
 8004da4:	42ac      	cmp	r4, r5
 8004da6:	d101      	bne.n	8004dac <__sfputs_r+0x12>
 8004da8:	2000      	movs	r0, #0
 8004daa:	e007      	b.n	8004dbc <__sfputs_r+0x22>
 8004dac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004db0:	463a      	mov	r2, r7
 8004db2:	4630      	mov	r0, r6
 8004db4:	f7ff ffda 	bl	8004d6c <__sfputc_r>
 8004db8:	1c43      	adds	r3, r0, #1
 8004dba:	d1f3      	bne.n	8004da4 <__sfputs_r+0xa>
 8004dbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004dc0 <_vfiprintf_r>:
 8004dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dc4:	460d      	mov	r5, r1
 8004dc6:	b09d      	sub	sp, #116	; 0x74
 8004dc8:	4614      	mov	r4, r2
 8004dca:	4698      	mov	r8, r3
 8004dcc:	4606      	mov	r6, r0
 8004dce:	b118      	cbz	r0, 8004dd8 <_vfiprintf_r+0x18>
 8004dd0:	6983      	ldr	r3, [r0, #24]
 8004dd2:	b90b      	cbnz	r3, 8004dd8 <_vfiprintf_r+0x18>
 8004dd4:	f7ff fed0 	bl	8004b78 <__sinit>
 8004dd8:	4b89      	ldr	r3, [pc, #548]	; (8005000 <_vfiprintf_r+0x240>)
 8004dda:	429d      	cmp	r5, r3
 8004ddc:	d11b      	bne.n	8004e16 <_vfiprintf_r+0x56>
 8004dde:	6875      	ldr	r5, [r6, #4]
 8004de0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004de2:	07d9      	lsls	r1, r3, #31
 8004de4:	d405      	bmi.n	8004df2 <_vfiprintf_r+0x32>
 8004de6:	89ab      	ldrh	r3, [r5, #12]
 8004de8:	059a      	lsls	r2, r3, #22
 8004dea:	d402      	bmi.n	8004df2 <_vfiprintf_r+0x32>
 8004dec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004dee:	f7ff ff61 	bl	8004cb4 <__retarget_lock_acquire_recursive>
 8004df2:	89ab      	ldrh	r3, [r5, #12]
 8004df4:	071b      	lsls	r3, r3, #28
 8004df6:	d501      	bpl.n	8004dfc <_vfiprintf_r+0x3c>
 8004df8:	692b      	ldr	r3, [r5, #16]
 8004dfa:	b9eb      	cbnz	r3, 8004e38 <_vfiprintf_r+0x78>
 8004dfc:	4629      	mov	r1, r5
 8004dfe:	4630      	mov	r0, r6
 8004e00:	f000 fb5a 	bl	80054b8 <__swsetup_r>
 8004e04:	b1c0      	cbz	r0, 8004e38 <_vfiprintf_r+0x78>
 8004e06:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004e08:	07dc      	lsls	r4, r3, #31
 8004e0a:	d50e      	bpl.n	8004e2a <_vfiprintf_r+0x6a>
 8004e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8004e10:	b01d      	add	sp, #116	; 0x74
 8004e12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e16:	4b7b      	ldr	r3, [pc, #492]	; (8005004 <_vfiprintf_r+0x244>)
 8004e18:	429d      	cmp	r5, r3
 8004e1a:	d101      	bne.n	8004e20 <_vfiprintf_r+0x60>
 8004e1c:	68b5      	ldr	r5, [r6, #8]
 8004e1e:	e7df      	b.n	8004de0 <_vfiprintf_r+0x20>
 8004e20:	4b79      	ldr	r3, [pc, #484]	; (8005008 <_vfiprintf_r+0x248>)
 8004e22:	429d      	cmp	r5, r3
 8004e24:	bf08      	it	eq
 8004e26:	68f5      	ldreq	r5, [r6, #12]
 8004e28:	e7da      	b.n	8004de0 <_vfiprintf_r+0x20>
 8004e2a:	89ab      	ldrh	r3, [r5, #12]
 8004e2c:	0598      	lsls	r0, r3, #22
 8004e2e:	d4ed      	bmi.n	8004e0c <_vfiprintf_r+0x4c>
 8004e30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004e32:	f7ff ff40 	bl	8004cb6 <__retarget_lock_release_recursive>
 8004e36:	e7e9      	b.n	8004e0c <_vfiprintf_r+0x4c>
 8004e38:	2300      	movs	r3, #0
 8004e3a:	9309      	str	r3, [sp, #36]	; 0x24
 8004e3c:	2320      	movs	r3, #32
 8004e3e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004e42:	f8cd 800c 	str.w	r8, [sp, #12]
 8004e46:	2330      	movs	r3, #48	; 0x30
 8004e48:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800500c <_vfiprintf_r+0x24c>
 8004e4c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004e50:	f04f 0901 	mov.w	r9, #1
 8004e54:	4623      	mov	r3, r4
 8004e56:	469a      	mov	sl, r3
 8004e58:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004e5c:	b10a      	cbz	r2, 8004e62 <_vfiprintf_r+0xa2>
 8004e5e:	2a25      	cmp	r2, #37	; 0x25
 8004e60:	d1f9      	bne.n	8004e56 <_vfiprintf_r+0x96>
 8004e62:	ebba 0b04 	subs.w	fp, sl, r4
 8004e66:	d00b      	beq.n	8004e80 <_vfiprintf_r+0xc0>
 8004e68:	465b      	mov	r3, fp
 8004e6a:	4622      	mov	r2, r4
 8004e6c:	4629      	mov	r1, r5
 8004e6e:	4630      	mov	r0, r6
 8004e70:	f7ff ff93 	bl	8004d9a <__sfputs_r>
 8004e74:	3001      	adds	r0, #1
 8004e76:	f000 80aa 	beq.w	8004fce <_vfiprintf_r+0x20e>
 8004e7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004e7c:	445a      	add	r2, fp
 8004e7e:	9209      	str	r2, [sp, #36]	; 0x24
 8004e80:	f89a 3000 	ldrb.w	r3, [sl]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	f000 80a2 	beq.w	8004fce <_vfiprintf_r+0x20e>
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	f04f 32ff 	mov.w	r2, #4294967295
 8004e90:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004e94:	f10a 0a01 	add.w	sl, sl, #1
 8004e98:	9304      	str	r3, [sp, #16]
 8004e9a:	9307      	str	r3, [sp, #28]
 8004e9c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004ea0:	931a      	str	r3, [sp, #104]	; 0x68
 8004ea2:	4654      	mov	r4, sl
 8004ea4:	2205      	movs	r2, #5
 8004ea6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004eaa:	4858      	ldr	r0, [pc, #352]	; (800500c <_vfiprintf_r+0x24c>)
 8004eac:	f7fb f9b0 	bl	8000210 <memchr>
 8004eb0:	9a04      	ldr	r2, [sp, #16]
 8004eb2:	b9d8      	cbnz	r0, 8004eec <_vfiprintf_r+0x12c>
 8004eb4:	06d1      	lsls	r1, r2, #27
 8004eb6:	bf44      	itt	mi
 8004eb8:	2320      	movmi	r3, #32
 8004eba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004ebe:	0713      	lsls	r3, r2, #28
 8004ec0:	bf44      	itt	mi
 8004ec2:	232b      	movmi	r3, #43	; 0x2b
 8004ec4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004ec8:	f89a 3000 	ldrb.w	r3, [sl]
 8004ecc:	2b2a      	cmp	r3, #42	; 0x2a
 8004ece:	d015      	beq.n	8004efc <_vfiprintf_r+0x13c>
 8004ed0:	9a07      	ldr	r2, [sp, #28]
 8004ed2:	4654      	mov	r4, sl
 8004ed4:	2000      	movs	r0, #0
 8004ed6:	f04f 0c0a 	mov.w	ip, #10
 8004eda:	4621      	mov	r1, r4
 8004edc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004ee0:	3b30      	subs	r3, #48	; 0x30
 8004ee2:	2b09      	cmp	r3, #9
 8004ee4:	d94e      	bls.n	8004f84 <_vfiprintf_r+0x1c4>
 8004ee6:	b1b0      	cbz	r0, 8004f16 <_vfiprintf_r+0x156>
 8004ee8:	9207      	str	r2, [sp, #28]
 8004eea:	e014      	b.n	8004f16 <_vfiprintf_r+0x156>
 8004eec:	eba0 0308 	sub.w	r3, r0, r8
 8004ef0:	fa09 f303 	lsl.w	r3, r9, r3
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	9304      	str	r3, [sp, #16]
 8004ef8:	46a2      	mov	sl, r4
 8004efa:	e7d2      	b.n	8004ea2 <_vfiprintf_r+0xe2>
 8004efc:	9b03      	ldr	r3, [sp, #12]
 8004efe:	1d19      	adds	r1, r3, #4
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	9103      	str	r1, [sp, #12]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	bfbb      	ittet	lt
 8004f08:	425b      	neglt	r3, r3
 8004f0a:	f042 0202 	orrlt.w	r2, r2, #2
 8004f0e:	9307      	strge	r3, [sp, #28]
 8004f10:	9307      	strlt	r3, [sp, #28]
 8004f12:	bfb8      	it	lt
 8004f14:	9204      	strlt	r2, [sp, #16]
 8004f16:	7823      	ldrb	r3, [r4, #0]
 8004f18:	2b2e      	cmp	r3, #46	; 0x2e
 8004f1a:	d10c      	bne.n	8004f36 <_vfiprintf_r+0x176>
 8004f1c:	7863      	ldrb	r3, [r4, #1]
 8004f1e:	2b2a      	cmp	r3, #42	; 0x2a
 8004f20:	d135      	bne.n	8004f8e <_vfiprintf_r+0x1ce>
 8004f22:	9b03      	ldr	r3, [sp, #12]
 8004f24:	1d1a      	adds	r2, r3, #4
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	9203      	str	r2, [sp, #12]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	bfb8      	it	lt
 8004f2e:	f04f 33ff 	movlt.w	r3, #4294967295
 8004f32:	3402      	adds	r4, #2
 8004f34:	9305      	str	r3, [sp, #20]
 8004f36:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800501c <_vfiprintf_r+0x25c>
 8004f3a:	7821      	ldrb	r1, [r4, #0]
 8004f3c:	2203      	movs	r2, #3
 8004f3e:	4650      	mov	r0, sl
 8004f40:	f7fb f966 	bl	8000210 <memchr>
 8004f44:	b140      	cbz	r0, 8004f58 <_vfiprintf_r+0x198>
 8004f46:	2340      	movs	r3, #64	; 0x40
 8004f48:	eba0 000a 	sub.w	r0, r0, sl
 8004f4c:	fa03 f000 	lsl.w	r0, r3, r0
 8004f50:	9b04      	ldr	r3, [sp, #16]
 8004f52:	4303      	orrs	r3, r0
 8004f54:	3401      	adds	r4, #1
 8004f56:	9304      	str	r3, [sp, #16]
 8004f58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f5c:	482c      	ldr	r0, [pc, #176]	; (8005010 <_vfiprintf_r+0x250>)
 8004f5e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004f62:	2206      	movs	r2, #6
 8004f64:	f7fb f954 	bl	8000210 <memchr>
 8004f68:	2800      	cmp	r0, #0
 8004f6a:	d03f      	beq.n	8004fec <_vfiprintf_r+0x22c>
 8004f6c:	4b29      	ldr	r3, [pc, #164]	; (8005014 <_vfiprintf_r+0x254>)
 8004f6e:	bb1b      	cbnz	r3, 8004fb8 <_vfiprintf_r+0x1f8>
 8004f70:	9b03      	ldr	r3, [sp, #12]
 8004f72:	3307      	adds	r3, #7
 8004f74:	f023 0307 	bic.w	r3, r3, #7
 8004f78:	3308      	adds	r3, #8
 8004f7a:	9303      	str	r3, [sp, #12]
 8004f7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f7e:	443b      	add	r3, r7
 8004f80:	9309      	str	r3, [sp, #36]	; 0x24
 8004f82:	e767      	b.n	8004e54 <_vfiprintf_r+0x94>
 8004f84:	fb0c 3202 	mla	r2, ip, r2, r3
 8004f88:	460c      	mov	r4, r1
 8004f8a:	2001      	movs	r0, #1
 8004f8c:	e7a5      	b.n	8004eda <_vfiprintf_r+0x11a>
 8004f8e:	2300      	movs	r3, #0
 8004f90:	3401      	adds	r4, #1
 8004f92:	9305      	str	r3, [sp, #20]
 8004f94:	4619      	mov	r1, r3
 8004f96:	f04f 0c0a 	mov.w	ip, #10
 8004f9a:	4620      	mov	r0, r4
 8004f9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004fa0:	3a30      	subs	r2, #48	; 0x30
 8004fa2:	2a09      	cmp	r2, #9
 8004fa4:	d903      	bls.n	8004fae <_vfiprintf_r+0x1ee>
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d0c5      	beq.n	8004f36 <_vfiprintf_r+0x176>
 8004faa:	9105      	str	r1, [sp, #20]
 8004fac:	e7c3      	b.n	8004f36 <_vfiprintf_r+0x176>
 8004fae:	fb0c 2101 	mla	r1, ip, r1, r2
 8004fb2:	4604      	mov	r4, r0
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	e7f0      	b.n	8004f9a <_vfiprintf_r+0x1da>
 8004fb8:	ab03      	add	r3, sp, #12
 8004fba:	9300      	str	r3, [sp, #0]
 8004fbc:	462a      	mov	r2, r5
 8004fbe:	4b16      	ldr	r3, [pc, #88]	; (8005018 <_vfiprintf_r+0x258>)
 8004fc0:	a904      	add	r1, sp, #16
 8004fc2:	4630      	mov	r0, r6
 8004fc4:	f3af 8000 	nop.w
 8004fc8:	4607      	mov	r7, r0
 8004fca:	1c78      	adds	r0, r7, #1
 8004fcc:	d1d6      	bne.n	8004f7c <_vfiprintf_r+0x1bc>
 8004fce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004fd0:	07d9      	lsls	r1, r3, #31
 8004fd2:	d405      	bmi.n	8004fe0 <_vfiprintf_r+0x220>
 8004fd4:	89ab      	ldrh	r3, [r5, #12]
 8004fd6:	059a      	lsls	r2, r3, #22
 8004fd8:	d402      	bmi.n	8004fe0 <_vfiprintf_r+0x220>
 8004fda:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004fdc:	f7ff fe6b 	bl	8004cb6 <__retarget_lock_release_recursive>
 8004fe0:	89ab      	ldrh	r3, [r5, #12]
 8004fe2:	065b      	lsls	r3, r3, #25
 8004fe4:	f53f af12 	bmi.w	8004e0c <_vfiprintf_r+0x4c>
 8004fe8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004fea:	e711      	b.n	8004e10 <_vfiprintf_r+0x50>
 8004fec:	ab03      	add	r3, sp, #12
 8004fee:	9300      	str	r3, [sp, #0]
 8004ff0:	462a      	mov	r2, r5
 8004ff2:	4b09      	ldr	r3, [pc, #36]	; (8005018 <_vfiprintf_r+0x258>)
 8004ff4:	a904      	add	r1, sp, #16
 8004ff6:	4630      	mov	r0, r6
 8004ff8:	f000 f880 	bl	80050fc <_printf_i>
 8004ffc:	e7e4      	b.n	8004fc8 <_vfiprintf_r+0x208>
 8004ffe:	bf00      	nop
 8005000:	08005a4c 	.word	0x08005a4c
 8005004:	08005a6c 	.word	0x08005a6c
 8005008:	08005a2c 	.word	0x08005a2c
 800500c:	08005a8c 	.word	0x08005a8c
 8005010:	08005a96 	.word	0x08005a96
 8005014:	00000000 	.word	0x00000000
 8005018:	08004d9b 	.word	0x08004d9b
 800501c:	08005a92 	.word	0x08005a92

08005020 <_printf_common>:
 8005020:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005024:	4616      	mov	r6, r2
 8005026:	4699      	mov	r9, r3
 8005028:	688a      	ldr	r2, [r1, #8]
 800502a:	690b      	ldr	r3, [r1, #16]
 800502c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005030:	4293      	cmp	r3, r2
 8005032:	bfb8      	it	lt
 8005034:	4613      	movlt	r3, r2
 8005036:	6033      	str	r3, [r6, #0]
 8005038:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800503c:	4607      	mov	r7, r0
 800503e:	460c      	mov	r4, r1
 8005040:	b10a      	cbz	r2, 8005046 <_printf_common+0x26>
 8005042:	3301      	adds	r3, #1
 8005044:	6033      	str	r3, [r6, #0]
 8005046:	6823      	ldr	r3, [r4, #0]
 8005048:	0699      	lsls	r1, r3, #26
 800504a:	bf42      	ittt	mi
 800504c:	6833      	ldrmi	r3, [r6, #0]
 800504e:	3302      	addmi	r3, #2
 8005050:	6033      	strmi	r3, [r6, #0]
 8005052:	6825      	ldr	r5, [r4, #0]
 8005054:	f015 0506 	ands.w	r5, r5, #6
 8005058:	d106      	bne.n	8005068 <_printf_common+0x48>
 800505a:	f104 0a19 	add.w	sl, r4, #25
 800505e:	68e3      	ldr	r3, [r4, #12]
 8005060:	6832      	ldr	r2, [r6, #0]
 8005062:	1a9b      	subs	r3, r3, r2
 8005064:	42ab      	cmp	r3, r5
 8005066:	dc26      	bgt.n	80050b6 <_printf_common+0x96>
 8005068:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800506c:	1e13      	subs	r3, r2, #0
 800506e:	6822      	ldr	r2, [r4, #0]
 8005070:	bf18      	it	ne
 8005072:	2301      	movne	r3, #1
 8005074:	0692      	lsls	r2, r2, #26
 8005076:	d42b      	bmi.n	80050d0 <_printf_common+0xb0>
 8005078:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800507c:	4649      	mov	r1, r9
 800507e:	4638      	mov	r0, r7
 8005080:	47c0      	blx	r8
 8005082:	3001      	adds	r0, #1
 8005084:	d01e      	beq.n	80050c4 <_printf_common+0xa4>
 8005086:	6823      	ldr	r3, [r4, #0]
 8005088:	68e5      	ldr	r5, [r4, #12]
 800508a:	6832      	ldr	r2, [r6, #0]
 800508c:	f003 0306 	and.w	r3, r3, #6
 8005090:	2b04      	cmp	r3, #4
 8005092:	bf08      	it	eq
 8005094:	1aad      	subeq	r5, r5, r2
 8005096:	68a3      	ldr	r3, [r4, #8]
 8005098:	6922      	ldr	r2, [r4, #16]
 800509a:	bf0c      	ite	eq
 800509c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80050a0:	2500      	movne	r5, #0
 80050a2:	4293      	cmp	r3, r2
 80050a4:	bfc4      	itt	gt
 80050a6:	1a9b      	subgt	r3, r3, r2
 80050a8:	18ed      	addgt	r5, r5, r3
 80050aa:	2600      	movs	r6, #0
 80050ac:	341a      	adds	r4, #26
 80050ae:	42b5      	cmp	r5, r6
 80050b0:	d11a      	bne.n	80050e8 <_printf_common+0xc8>
 80050b2:	2000      	movs	r0, #0
 80050b4:	e008      	b.n	80050c8 <_printf_common+0xa8>
 80050b6:	2301      	movs	r3, #1
 80050b8:	4652      	mov	r2, sl
 80050ba:	4649      	mov	r1, r9
 80050bc:	4638      	mov	r0, r7
 80050be:	47c0      	blx	r8
 80050c0:	3001      	adds	r0, #1
 80050c2:	d103      	bne.n	80050cc <_printf_common+0xac>
 80050c4:	f04f 30ff 	mov.w	r0, #4294967295
 80050c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050cc:	3501      	adds	r5, #1
 80050ce:	e7c6      	b.n	800505e <_printf_common+0x3e>
 80050d0:	18e1      	adds	r1, r4, r3
 80050d2:	1c5a      	adds	r2, r3, #1
 80050d4:	2030      	movs	r0, #48	; 0x30
 80050d6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80050da:	4422      	add	r2, r4
 80050dc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80050e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80050e4:	3302      	adds	r3, #2
 80050e6:	e7c7      	b.n	8005078 <_printf_common+0x58>
 80050e8:	2301      	movs	r3, #1
 80050ea:	4622      	mov	r2, r4
 80050ec:	4649      	mov	r1, r9
 80050ee:	4638      	mov	r0, r7
 80050f0:	47c0      	blx	r8
 80050f2:	3001      	adds	r0, #1
 80050f4:	d0e6      	beq.n	80050c4 <_printf_common+0xa4>
 80050f6:	3601      	adds	r6, #1
 80050f8:	e7d9      	b.n	80050ae <_printf_common+0x8e>
	...

080050fc <_printf_i>:
 80050fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005100:	460c      	mov	r4, r1
 8005102:	4691      	mov	r9, r2
 8005104:	7e27      	ldrb	r7, [r4, #24]
 8005106:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005108:	2f78      	cmp	r7, #120	; 0x78
 800510a:	4680      	mov	r8, r0
 800510c:	469a      	mov	sl, r3
 800510e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005112:	d807      	bhi.n	8005124 <_printf_i+0x28>
 8005114:	2f62      	cmp	r7, #98	; 0x62
 8005116:	d80a      	bhi.n	800512e <_printf_i+0x32>
 8005118:	2f00      	cmp	r7, #0
 800511a:	f000 80d8 	beq.w	80052ce <_printf_i+0x1d2>
 800511e:	2f58      	cmp	r7, #88	; 0x58
 8005120:	f000 80a3 	beq.w	800526a <_printf_i+0x16e>
 8005124:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005128:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800512c:	e03a      	b.n	80051a4 <_printf_i+0xa8>
 800512e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005132:	2b15      	cmp	r3, #21
 8005134:	d8f6      	bhi.n	8005124 <_printf_i+0x28>
 8005136:	a001      	add	r0, pc, #4	; (adr r0, 800513c <_printf_i+0x40>)
 8005138:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800513c:	08005195 	.word	0x08005195
 8005140:	080051a9 	.word	0x080051a9
 8005144:	08005125 	.word	0x08005125
 8005148:	08005125 	.word	0x08005125
 800514c:	08005125 	.word	0x08005125
 8005150:	08005125 	.word	0x08005125
 8005154:	080051a9 	.word	0x080051a9
 8005158:	08005125 	.word	0x08005125
 800515c:	08005125 	.word	0x08005125
 8005160:	08005125 	.word	0x08005125
 8005164:	08005125 	.word	0x08005125
 8005168:	080052b5 	.word	0x080052b5
 800516c:	080051d9 	.word	0x080051d9
 8005170:	08005297 	.word	0x08005297
 8005174:	08005125 	.word	0x08005125
 8005178:	08005125 	.word	0x08005125
 800517c:	080052d7 	.word	0x080052d7
 8005180:	08005125 	.word	0x08005125
 8005184:	080051d9 	.word	0x080051d9
 8005188:	08005125 	.word	0x08005125
 800518c:	08005125 	.word	0x08005125
 8005190:	0800529f 	.word	0x0800529f
 8005194:	680b      	ldr	r3, [r1, #0]
 8005196:	1d1a      	adds	r2, r3, #4
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	600a      	str	r2, [r1, #0]
 800519c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80051a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80051a4:	2301      	movs	r3, #1
 80051a6:	e0a3      	b.n	80052f0 <_printf_i+0x1f4>
 80051a8:	6825      	ldr	r5, [r4, #0]
 80051aa:	6808      	ldr	r0, [r1, #0]
 80051ac:	062e      	lsls	r6, r5, #24
 80051ae:	f100 0304 	add.w	r3, r0, #4
 80051b2:	d50a      	bpl.n	80051ca <_printf_i+0xce>
 80051b4:	6805      	ldr	r5, [r0, #0]
 80051b6:	600b      	str	r3, [r1, #0]
 80051b8:	2d00      	cmp	r5, #0
 80051ba:	da03      	bge.n	80051c4 <_printf_i+0xc8>
 80051bc:	232d      	movs	r3, #45	; 0x2d
 80051be:	426d      	negs	r5, r5
 80051c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051c4:	485e      	ldr	r0, [pc, #376]	; (8005340 <_printf_i+0x244>)
 80051c6:	230a      	movs	r3, #10
 80051c8:	e019      	b.n	80051fe <_printf_i+0x102>
 80051ca:	f015 0f40 	tst.w	r5, #64	; 0x40
 80051ce:	6805      	ldr	r5, [r0, #0]
 80051d0:	600b      	str	r3, [r1, #0]
 80051d2:	bf18      	it	ne
 80051d4:	b22d      	sxthne	r5, r5
 80051d6:	e7ef      	b.n	80051b8 <_printf_i+0xbc>
 80051d8:	680b      	ldr	r3, [r1, #0]
 80051da:	6825      	ldr	r5, [r4, #0]
 80051dc:	1d18      	adds	r0, r3, #4
 80051de:	6008      	str	r0, [r1, #0]
 80051e0:	0628      	lsls	r0, r5, #24
 80051e2:	d501      	bpl.n	80051e8 <_printf_i+0xec>
 80051e4:	681d      	ldr	r5, [r3, #0]
 80051e6:	e002      	b.n	80051ee <_printf_i+0xf2>
 80051e8:	0669      	lsls	r1, r5, #25
 80051ea:	d5fb      	bpl.n	80051e4 <_printf_i+0xe8>
 80051ec:	881d      	ldrh	r5, [r3, #0]
 80051ee:	4854      	ldr	r0, [pc, #336]	; (8005340 <_printf_i+0x244>)
 80051f0:	2f6f      	cmp	r7, #111	; 0x6f
 80051f2:	bf0c      	ite	eq
 80051f4:	2308      	moveq	r3, #8
 80051f6:	230a      	movne	r3, #10
 80051f8:	2100      	movs	r1, #0
 80051fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80051fe:	6866      	ldr	r6, [r4, #4]
 8005200:	60a6      	str	r6, [r4, #8]
 8005202:	2e00      	cmp	r6, #0
 8005204:	bfa2      	ittt	ge
 8005206:	6821      	ldrge	r1, [r4, #0]
 8005208:	f021 0104 	bicge.w	r1, r1, #4
 800520c:	6021      	strge	r1, [r4, #0]
 800520e:	b90d      	cbnz	r5, 8005214 <_printf_i+0x118>
 8005210:	2e00      	cmp	r6, #0
 8005212:	d04d      	beq.n	80052b0 <_printf_i+0x1b4>
 8005214:	4616      	mov	r6, r2
 8005216:	fbb5 f1f3 	udiv	r1, r5, r3
 800521a:	fb03 5711 	mls	r7, r3, r1, r5
 800521e:	5dc7      	ldrb	r7, [r0, r7]
 8005220:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005224:	462f      	mov	r7, r5
 8005226:	42bb      	cmp	r3, r7
 8005228:	460d      	mov	r5, r1
 800522a:	d9f4      	bls.n	8005216 <_printf_i+0x11a>
 800522c:	2b08      	cmp	r3, #8
 800522e:	d10b      	bne.n	8005248 <_printf_i+0x14c>
 8005230:	6823      	ldr	r3, [r4, #0]
 8005232:	07df      	lsls	r7, r3, #31
 8005234:	d508      	bpl.n	8005248 <_printf_i+0x14c>
 8005236:	6923      	ldr	r3, [r4, #16]
 8005238:	6861      	ldr	r1, [r4, #4]
 800523a:	4299      	cmp	r1, r3
 800523c:	bfde      	ittt	le
 800523e:	2330      	movle	r3, #48	; 0x30
 8005240:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005244:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005248:	1b92      	subs	r2, r2, r6
 800524a:	6122      	str	r2, [r4, #16]
 800524c:	f8cd a000 	str.w	sl, [sp]
 8005250:	464b      	mov	r3, r9
 8005252:	aa03      	add	r2, sp, #12
 8005254:	4621      	mov	r1, r4
 8005256:	4640      	mov	r0, r8
 8005258:	f7ff fee2 	bl	8005020 <_printf_common>
 800525c:	3001      	adds	r0, #1
 800525e:	d14c      	bne.n	80052fa <_printf_i+0x1fe>
 8005260:	f04f 30ff 	mov.w	r0, #4294967295
 8005264:	b004      	add	sp, #16
 8005266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800526a:	4835      	ldr	r0, [pc, #212]	; (8005340 <_printf_i+0x244>)
 800526c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005270:	6823      	ldr	r3, [r4, #0]
 8005272:	680e      	ldr	r6, [r1, #0]
 8005274:	061f      	lsls	r7, r3, #24
 8005276:	f856 5b04 	ldr.w	r5, [r6], #4
 800527a:	600e      	str	r6, [r1, #0]
 800527c:	d514      	bpl.n	80052a8 <_printf_i+0x1ac>
 800527e:	07d9      	lsls	r1, r3, #31
 8005280:	bf44      	itt	mi
 8005282:	f043 0320 	orrmi.w	r3, r3, #32
 8005286:	6023      	strmi	r3, [r4, #0]
 8005288:	b91d      	cbnz	r5, 8005292 <_printf_i+0x196>
 800528a:	6823      	ldr	r3, [r4, #0]
 800528c:	f023 0320 	bic.w	r3, r3, #32
 8005290:	6023      	str	r3, [r4, #0]
 8005292:	2310      	movs	r3, #16
 8005294:	e7b0      	b.n	80051f8 <_printf_i+0xfc>
 8005296:	6823      	ldr	r3, [r4, #0]
 8005298:	f043 0320 	orr.w	r3, r3, #32
 800529c:	6023      	str	r3, [r4, #0]
 800529e:	2378      	movs	r3, #120	; 0x78
 80052a0:	4828      	ldr	r0, [pc, #160]	; (8005344 <_printf_i+0x248>)
 80052a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80052a6:	e7e3      	b.n	8005270 <_printf_i+0x174>
 80052a8:	065e      	lsls	r6, r3, #25
 80052aa:	bf48      	it	mi
 80052ac:	b2ad      	uxthmi	r5, r5
 80052ae:	e7e6      	b.n	800527e <_printf_i+0x182>
 80052b0:	4616      	mov	r6, r2
 80052b2:	e7bb      	b.n	800522c <_printf_i+0x130>
 80052b4:	680b      	ldr	r3, [r1, #0]
 80052b6:	6826      	ldr	r6, [r4, #0]
 80052b8:	6960      	ldr	r0, [r4, #20]
 80052ba:	1d1d      	adds	r5, r3, #4
 80052bc:	600d      	str	r5, [r1, #0]
 80052be:	0635      	lsls	r5, r6, #24
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	d501      	bpl.n	80052c8 <_printf_i+0x1cc>
 80052c4:	6018      	str	r0, [r3, #0]
 80052c6:	e002      	b.n	80052ce <_printf_i+0x1d2>
 80052c8:	0671      	lsls	r1, r6, #25
 80052ca:	d5fb      	bpl.n	80052c4 <_printf_i+0x1c8>
 80052cc:	8018      	strh	r0, [r3, #0]
 80052ce:	2300      	movs	r3, #0
 80052d0:	6123      	str	r3, [r4, #16]
 80052d2:	4616      	mov	r6, r2
 80052d4:	e7ba      	b.n	800524c <_printf_i+0x150>
 80052d6:	680b      	ldr	r3, [r1, #0]
 80052d8:	1d1a      	adds	r2, r3, #4
 80052da:	600a      	str	r2, [r1, #0]
 80052dc:	681e      	ldr	r6, [r3, #0]
 80052de:	6862      	ldr	r2, [r4, #4]
 80052e0:	2100      	movs	r1, #0
 80052e2:	4630      	mov	r0, r6
 80052e4:	f7fa ff94 	bl	8000210 <memchr>
 80052e8:	b108      	cbz	r0, 80052ee <_printf_i+0x1f2>
 80052ea:	1b80      	subs	r0, r0, r6
 80052ec:	6060      	str	r0, [r4, #4]
 80052ee:	6863      	ldr	r3, [r4, #4]
 80052f0:	6123      	str	r3, [r4, #16]
 80052f2:	2300      	movs	r3, #0
 80052f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052f8:	e7a8      	b.n	800524c <_printf_i+0x150>
 80052fa:	6923      	ldr	r3, [r4, #16]
 80052fc:	4632      	mov	r2, r6
 80052fe:	4649      	mov	r1, r9
 8005300:	4640      	mov	r0, r8
 8005302:	47d0      	blx	sl
 8005304:	3001      	adds	r0, #1
 8005306:	d0ab      	beq.n	8005260 <_printf_i+0x164>
 8005308:	6823      	ldr	r3, [r4, #0]
 800530a:	079b      	lsls	r3, r3, #30
 800530c:	d413      	bmi.n	8005336 <_printf_i+0x23a>
 800530e:	68e0      	ldr	r0, [r4, #12]
 8005310:	9b03      	ldr	r3, [sp, #12]
 8005312:	4298      	cmp	r0, r3
 8005314:	bfb8      	it	lt
 8005316:	4618      	movlt	r0, r3
 8005318:	e7a4      	b.n	8005264 <_printf_i+0x168>
 800531a:	2301      	movs	r3, #1
 800531c:	4632      	mov	r2, r6
 800531e:	4649      	mov	r1, r9
 8005320:	4640      	mov	r0, r8
 8005322:	47d0      	blx	sl
 8005324:	3001      	adds	r0, #1
 8005326:	d09b      	beq.n	8005260 <_printf_i+0x164>
 8005328:	3501      	adds	r5, #1
 800532a:	68e3      	ldr	r3, [r4, #12]
 800532c:	9903      	ldr	r1, [sp, #12]
 800532e:	1a5b      	subs	r3, r3, r1
 8005330:	42ab      	cmp	r3, r5
 8005332:	dcf2      	bgt.n	800531a <_printf_i+0x21e>
 8005334:	e7eb      	b.n	800530e <_printf_i+0x212>
 8005336:	2500      	movs	r5, #0
 8005338:	f104 0619 	add.w	r6, r4, #25
 800533c:	e7f5      	b.n	800532a <_printf_i+0x22e>
 800533e:	bf00      	nop
 8005340:	08005a9d 	.word	0x08005a9d
 8005344:	08005aae 	.word	0x08005aae

08005348 <_sbrk_r>:
 8005348:	b538      	push	{r3, r4, r5, lr}
 800534a:	4d06      	ldr	r5, [pc, #24]	; (8005364 <_sbrk_r+0x1c>)
 800534c:	2300      	movs	r3, #0
 800534e:	4604      	mov	r4, r0
 8005350:	4608      	mov	r0, r1
 8005352:	602b      	str	r3, [r5, #0]
 8005354:	f7ff fae2 	bl	800491c <_sbrk>
 8005358:	1c43      	adds	r3, r0, #1
 800535a:	d102      	bne.n	8005362 <_sbrk_r+0x1a>
 800535c:	682b      	ldr	r3, [r5, #0]
 800535e:	b103      	cbz	r3, 8005362 <_sbrk_r+0x1a>
 8005360:	6023      	str	r3, [r4, #0]
 8005362:	bd38      	pop	{r3, r4, r5, pc}
 8005364:	200007a4 	.word	0x200007a4

08005368 <__sread>:
 8005368:	b510      	push	{r4, lr}
 800536a:	460c      	mov	r4, r1
 800536c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005370:	f000 fab4 	bl	80058dc <_read_r>
 8005374:	2800      	cmp	r0, #0
 8005376:	bfab      	itete	ge
 8005378:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800537a:	89a3      	ldrhlt	r3, [r4, #12]
 800537c:	181b      	addge	r3, r3, r0
 800537e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005382:	bfac      	ite	ge
 8005384:	6563      	strge	r3, [r4, #84]	; 0x54
 8005386:	81a3      	strhlt	r3, [r4, #12]
 8005388:	bd10      	pop	{r4, pc}

0800538a <__swrite>:
 800538a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800538e:	461f      	mov	r7, r3
 8005390:	898b      	ldrh	r3, [r1, #12]
 8005392:	05db      	lsls	r3, r3, #23
 8005394:	4605      	mov	r5, r0
 8005396:	460c      	mov	r4, r1
 8005398:	4616      	mov	r6, r2
 800539a:	d505      	bpl.n	80053a8 <__swrite+0x1e>
 800539c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053a0:	2302      	movs	r3, #2
 80053a2:	2200      	movs	r2, #0
 80053a4:	f000 f9c8 	bl	8005738 <_lseek_r>
 80053a8:	89a3      	ldrh	r3, [r4, #12]
 80053aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80053ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80053b2:	81a3      	strh	r3, [r4, #12]
 80053b4:	4632      	mov	r2, r6
 80053b6:	463b      	mov	r3, r7
 80053b8:	4628      	mov	r0, r5
 80053ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80053be:	f000 b869 	b.w	8005494 <_write_r>

080053c2 <__sseek>:
 80053c2:	b510      	push	{r4, lr}
 80053c4:	460c      	mov	r4, r1
 80053c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053ca:	f000 f9b5 	bl	8005738 <_lseek_r>
 80053ce:	1c43      	adds	r3, r0, #1
 80053d0:	89a3      	ldrh	r3, [r4, #12]
 80053d2:	bf15      	itete	ne
 80053d4:	6560      	strne	r0, [r4, #84]	; 0x54
 80053d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80053da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80053de:	81a3      	strheq	r3, [r4, #12]
 80053e0:	bf18      	it	ne
 80053e2:	81a3      	strhne	r3, [r4, #12]
 80053e4:	bd10      	pop	{r4, pc}

080053e6 <__sclose>:
 80053e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053ea:	f000 b8d3 	b.w	8005594 <_close_r>
	...

080053f0 <__swbuf_r>:
 80053f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053f2:	460e      	mov	r6, r1
 80053f4:	4614      	mov	r4, r2
 80053f6:	4605      	mov	r5, r0
 80053f8:	b118      	cbz	r0, 8005402 <__swbuf_r+0x12>
 80053fa:	6983      	ldr	r3, [r0, #24]
 80053fc:	b90b      	cbnz	r3, 8005402 <__swbuf_r+0x12>
 80053fe:	f7ff fbbb 	bl	8004b78 <__sinit>
 8005402:	4b21      	ldr	r3, [pc, #132]	; (8005488 <__swbuf_r+0x98>)
 8005404:	429c      	cmp	r4, r3
 8005406:	d12b      	bne.n	8005460 <__swbuf_r+0x70>
 8005408:	686c      	ldr	r4, [r5, #4]
 800540a:	69a3      	ldr	r3, [r4, #24]
 800540c:	60a3      	str	r3, [r4, #8]
 800540e:	89a3      	ldrh	r3, [r4, #12]
 8005410:	071a      	lsls	r2, r3, #28
 8005412:	d52f      	bpl.n	8005474 <__swbuf_r+0x84>
 8005414:	6923      	ldr	r3, [r4, #16]
 8005416:	b36b      	cbz	r3, 8005474 <__swbuf_r+0x84>
 8005418:	6923      	ldr	r3, [r4, #16]
 800541a:	6820      	ldr	r0, [r4, #0]
 800541c:	1ac0      	subs	r0, r0, r3
 800541e:	6963      	ldr	r3, [r4, #20]
 8005420:	b2f6      	uxtb	r6, r6
 8005422:	4283      	cmp	r3, r0
 8005424:	4637      	mov	r7, r6
 8005426:	dc04      	bgt.n	8005432 <__swbuf_r+0x42>
 8005428:	4621      	mov	r1, r4
 800542a:	4628      	mov	r0, r5
 800542c:	f000 f948 	bl	80056c0 <_fflush_r>
 8005430:	bb30      	cbnz	r0, 8005480 <__swbuf_r+0x90>
 8005432:	68a3      	ldr	r3, [r4, #8]
 8005434:	3b01      	subs	r3, #1
 8005436:	60a3      	str	r3, [r4, #8]
 8005438:	6823      	ldr	r3, [r4, #0]
 800543a:	1c5a      	adds	r2, r3, #1
 800543c:	6022      	str	r2, [r4, #0]
 800543e:	701e      	strb	r6, [r3, #0]
 8005440:	6963      	ldr	r3, [r4, #20]
 8005442:	3001      	adds	r0, #1
 8005444:	4283      	cmp	r3, r0
 8005446:	d004      	beq.n	8005452 <__swbuf_r+0x62>
 8005448:	89a3      	ldrh	r3, [r4, #12]
 800544a:	07db      	lsls	r3, r3, #31
 800544c:	d506      	bpl.n	800545c <__swbuf_r+0x6c>
 800544e:	2e0a      	cmp	r6, #10
 8005450:	d104      	bne.n	800545c <__swbuf_r+0x6c>
 8005452:	4621      	mov	r1, r4
 8005454:	4628      	mov	r0, r5
 8005456:	f000 f933 	bl	80056c0 <_fflush_r>
 800545a:	b988      	cbnz	r0, 8005480 <__swbuf_r+0x90>
 800545c:	4638      	mov	r0, r7
 800545e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005460:	4b0a      	ldr	r3, [pc, #40]	; (800548c <__swbuf_r+0x9c>)
 8005462:	429c      	cmp	r4, r3
 8005464:	d101      	bne.n	800546a <__swbuf_r+0x7a>
 8005466:	68ac      	ldr	r4, [r5, #8]
 8005468:	e7cf      	b.n	800540a <__swbuf_r+0x1a>
 800546a:	4b09      	ldr	r3, [pc, #36]	; (8005490 <__swbuf_r+0xa0>)
 800546c:	429c      	cmp	r4, r3
 800546e:	bf08      	it	eq
 8005470:	68ec      	ldreq	r4, [r5, #12]
 8005472:	e7ca      	b.n	800540a <__swbuf_r+0x1a>
 8005474:	4621      	mov	r1, r4
 8005476:	4628      	mov	r0, r5
 8005478:	f000 f81e 	bl	80054b8 <__swsetup_r>
 800547c:	2800      	cmp	r0, #0
 800547e:	d0cb      	beq.n	8005418 <__swbuf_r+0x28>
 8005480:	f04f 37ff 	mov.w	r7, #4294967295
 8005484:	e7ea      	b.n	800545c <__swbuf_r+0x6c>
 8005486:	bf00      	nop
 8005488:	08005a4c 	.word	0x08005a4c
 800548c:	08005a6c 	.word	0x08005a6c
 8005490:	08005a2c 	.word	0x08005a2c

08005494 <_write_r>:
 8005494:	b538      	push	{r3, r4, r5, lr}
 8005496:	4d07      	ldr	r5, [pc, #28]	; (80054b4 <_write_r+0x20>)
 8005498:	4604      	mov	r4, r0
 800549a:	4608      	mov	r0, r1
 800549c:	4611      	mov	r1, r2
 800549e:	2200      	movs	r2, #0
 80054a0:	602a      	str	r2, [r5, #0]
 80054a2:	461a      	mov	r2, r3
 80054a4:	f7ff f9e9 	bl	800487a <_write>
 80054a8:	1c43      	adds	r3, r0, #1
 80054aa:	d102      	bne.n	80054b2 <_write_r+0x1e>
 80054ac:	682b      	ldr	r3, [r5, #0]
 80054ae:	b103      	cbz	r3, 80054b2 <_write_r+0x1e>
 80054b0:	6023      	str	r3, [r4, #0]
 80054b2:	bd38      	pop	{r3, r4, r5, pc}
 80054b4:	200007a4 	.word	0x200007a4

080054b8 <__swsetup_r>:
 80054b8:	4b32      	ldr	r3, [pc, #200]	; (8005584 <__swsetup_r+0xcc>)
 80054ba:	b570      	push	{r4, r5, r6, lr}
 80054bc:	681d      	ldr	r5, [r3, #0]
 80054be:	4606      	mov	r6, r0
 80054c0:	460c      	mov	r4, r1
 80054c2:	b125      	cbz	r5, 80054ce <__swsetup_r+0x16>
 80054c4:	69ab      	ldr	r3, [r5, #24]
 80054c6:	b913      	cbnz	r3, 80054ce <__swsetup_r+0x16>
 80054c8:	4628      	mov	r0, r5
 80054ca:	f7ff fb55 	bl	8004b78 <__sinit>
 80054ce:	4b2e      	ldr	r3, [pc, #184]	; (8005588 <__swsetup_r+0xd0>)
 80054d0:	429c      	cmp	r4, r3
 80054d2:	d10f      	bne.n	80054f4 <__swsetup_r+0x3c>
 80054d4:	686c      	ldr	r4, [r5, #4]
 80054d6:	89a3      	ldrh	r3, [r4, #12]
 80054d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80054dc:	0719      	lsls	r1, r3, #28
 80054de:	d42c      	bmi.n	800553a <__swsetup_r+0x82>
 80054e0:	06dd      	lsls	r5, r3, #27
 80054e2:	d411      	bmi.n	8005508 <__swsetup_r+0x50>
 80054e4:	2309      	movs	r3, #9
 80054e6:	6033      	str	r3, [r6, #0]
 80054e8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80054ec:	81a3      	strh	r3, [r4, #12]
 80054ee:	f04f 30ff 	mov.w	r0, #4294967295
 80054f2:	e03e      	b.n	8005572 <__swsetup_r+0xba>
 80054f4:	4b25      	ldr	r3, [pc, #148]	; (800558c <__swsetup_r+0xd4>)
 80054f6:	429c      	cmp	r4, r3
 80054f8:	d101      	bne.n	80054fe <__swsetup_r+0x46>
 80054fa:	68ac      	ldr	r4, [r5, #8]
 80054fc:	e7eb      	b.n	80054d6 <__swsetup_r+0x1e>
 80054fe:	4b24      	ldr	r3, [pc, #144]	; (8005590 <__swsetup_r+0xd8>)
 8005500:	429c      	cmp	r4, r3
 8005502:	bf08      	it	eq
 8005504:	68ec      	ldreq	r4, [r5, #12]
 8005506:	e7e6      	b.n	80054d6 <__swsetup_r+0x1e>
 8005508:	0758      	lsls	r0, r3, #29
 800550a:	d512      	bpl.n	8005532 <__swsetup_r+0x7a>
 800550c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800550e:	b141      	cbz	r1, 8005522 <__swsetup_r+0x6a>
 8005510:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005514:	4299      	cmp	r1, r3
 8005516:	d002      	beq.n	800551e <__swsetup_r+0x66>
 8005518:	4630      	mov	r0, r6
 800551a:	f000 f98f 	bl	800583c <_free_r>
 800551e:	2300      	movs	r3, #0
 8005520:	6363      	str	r3, [r4, #52]	; 0x34
 8005522:	89a3      	ldrh	r3, [r4, #12]
 8005524:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005528:	81a3      	strh	r3, [r4, #12]
 800552a:	2300      	movs	r3, #0
 800552c:	6063      	str	r3, [r4, #4]
 800552e:	6923      	ldr	r3, [r4, #16]
 8005530:	6023      	str	r3, [r4, #0]
 8005532:	89a3      	ldrh	r3, [r4, #12]
 8005534:	f043 0308 	orr.w	r3, r3, #8
 8005538:	81a3      	strh	r3, [r4, #12]
 800553a:	6923      	ldr	r3, [r4, #16]
 800553c:	b94b      	cbnz	r3, 8005552 <__swsetup_r+0x9a>
 800553e:	89a3      	ldrh	r3, [r4, #12]
 8005540:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005544:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005548:	d003      	beq.n	8005552 <__swsetup_r+0x9a>
 800554a:	4621      	mov	r1, r4
 800554c:	4630      	mov	r0, r6
 800554e:	f000 f929 	bl	80057a4 <__smakebuf_r>
 8005552:	89a0      	ldrh	r0, [r4, #12]
 8005554:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005558:	f010 0301 	ands.w	r3, r0, #1
 800555c:	d00a      	beq.n	8005574 <__swsetup_r+0xbc>
 800555e:	2300      	movs	r3, #0
 8005560:	60a3      	str	r3, [r4, #8]
 8005562:	6963      	ldr	r3, [r4, #20]
 8005564:	425b      	negs	r3, r3
 8005566:	61a3      	str	r3, [r4, #24]
 8005568:	6923      	ldr	r3, [r4, #16]
 800556a:	b943      	cbnz	r3, 800557e <__swsetup_r+0xc6>
 800556c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005570:	d1ba      	bne.n	80054e8 <__swsetup_r+0x30>
 8005572:	bd70      	pop	{r4, r5, r6, pc}
 8005574:	0781      	lsls	r1, r0, #30
 8005576:	bf58      	it	pl
 8005578:	6963      	ldrpl	r3, [r4, #20]
 800557a:	60a3      	str	r3, [r4, #8]
 800557c:	e7f4      	b.n	8005568 <__swsetup_r+0xb0>
 800557e:	2000      	movs	r0, #0
 8005580:	e7f7      	b.n	8005572 <__swsetup_r+0xba>
 8005582:	bf00      	nop
 8005584:	2000000c 	.word	0x2000000c
 8005588:	08005a4c 	.word	0x08005a4c
 800558c:	08005a6c 	.word	0x08005a6c
 8005590:	08005a2c 	.word	0x08005a2c

08005594 <_close_r>:
 8005594:	b538      	push	{r3, r4, r5, lr}
 8005596:	4d06      	ldr	r5, [pc, #24]	; (80055b0 <_close_r+0x1c>)
 8005598:	2300      	movs	r3, #0
 800559a:	4604      	mov	r4, r0
 800559c:	4608      	mov	r0, r1
 800559e:	602b      	str	r3, [r5, #0]
 80055a0:	f7ff f987 	bl	80048b2 <_close>
 80055a4:	1c43      	adds	r3, r0, #1
 80055a6:	d102      	bne.n	80055ae <_close_r+0x1a>
 80055a8:	682b      	ldr	r3, [r5, #0]
 80055aa:	b103      	cbz	r3, 80055ae <_close_r+0x1a>
 80055ac:	6023      	str	r3, [r4, #0]
 80055ae:	bd38      	pop	{r3, r4, r5, pc}
 80055b0:	200007a4 	.word	0x200007a4

080055b4 <__sflush_r>:
 80055b4:	898a      	ldrh	r2, [r1, #12]
 80055b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055ba:	4605      	mov	r5, r0
 80055bc:	0710      	lsls	r0, r2, #28
 80055be:	460c      	mov	r4, r1
 80055c0:	d458      	bmi.n	8005674 <__sflush_r+0xc0>
 80055c2:	684b      	ldr	r3, [r1, #4]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	dc05      	bgt.n	80055d4 <__sflush_r+0x20>
 80055c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	dc02      	bgt.n	80055d4 <__sflush_r+0x20>
 80055ce:	2000      	movs	r0, #0
 80055d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80055d6:	2e00      	cmp	r6, #0
 80055d8:	d0f9      	beq.n	80055ce <__sflush_r+0x1a>
 80055da:	2300      	movs	r3, #0
 80055dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80055e0:	682f      	ldr	r7, [r5, #0]
 80055e2:	602b      	str	r3, [r5, #0]
 80055e4:	d032      	beq.n	800564c <__sflush_r+0x98>
 80055e6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80055e8:	89a3      	ldrh	r3, [r4, #12]
 80055ea:	075a      	lsls	r2, r3, #29
 80055ec:	d505      	bpl.n	80055fa <__sflush_r+0x46>
 80055ee:	6863      	ldr	r3, [r4, #4]
 80055f0:	1ac0      	subs	r0, r0, r3
 80055f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80055f4:	b10b      	cbz	r3, 80055fa <__sflush_r+0x46>
 80055f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80055f8:	1ac0      	subs	r0, r0, r3
 80055fa:	2300      	movs	r3, #0
 80055fc:	4602      	mov	r2, r0
 80055fe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005600:	6a21      	ldr	r1, [r4, #32]
 8005602:	4628      	mov	r0, r5
 8005604:	47b0      	blx	r6
 8005606:	1c43      	adds	r3, r0, #1
 8005608:	89a3      	ldrh	r3, [r4, #12]
 800560a:	d106      	bne.n	800561a <__sflush_r+0x66>
 800560c:	6829      	ldr	r1, [r5, #0]
 800560e:	291d      	cmp	r1, #29
 8005610:	d82c      	bhi.n	800566c <__sflush_r+0xb8>
 8005612:	4a2a      	ldr	r2, [pc, #168]	; (80056bc <__sflush_r+0x108>)
 8005614:	40ca      	lsrs	r2, r1
 8005616:	07d6      	lsls	r6, r2, #31
 8005618:	d528      	bpl.n	800566c <__sflush_r+0xb8>
 800561a:	2200      	movs	r2, #0
 800561c:	6062      	str	r2, [r4, #4]
 800561e:	04d9      	lsls	r1, r3, #19
 8005620:	6922      	ldr	r2, [r4, #16]
 8005622:	6022      	str	r2, [r4, #0]
 8005624:	d504      	bpl.n	8005630 <__sflush_r+0x7c>
 8005626:	1c42      	adds	r2, r0, #1
 8005628:	d101      	bne.n	800562e <__sflush_r+0x7a>
 800562a:	682b      	ldr	r3, [r5, #0]
 800562c:	b903      	cbnz	r3, 8005630 <__sflush_r+0x7c>
 800562e:	6560      	str	r0, [r4, #84]	; 0x54
 8005630:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005632:	602f      	str	r7, [r5, #0]
 8005634:	2900      	cmp	r1, #0
 8005636:	d0ca      	beq.n	80055ce <__sflush_r+0x1a>
 8005638:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800563c:	4299      	cmp	r1, r3
 800563e:	d002      	beq.n	8005646 <__sflush_r+0x92>
 8005640:	4628      	mov	r0, r5
 8005642:	f000 f8fb 	bl	800583c <_free_r>
 8005646:	2000      	movs	r0, #0
 8005648:	6360      	str	r0, [r4, #52]	; 0x34
 800564a:	e7c1      	b.n	80055d0 <__sflush_r+0x1c>
 800564c:	6a21      	ldr	r1, [r4, #32]
 800564e:	2301      	movs	r3, #1
 8005650:	4628      	mov	r0, r5
 8005652:	47b0      	blx	r6
 8005654:	1c41      	adds	r1, r0, #1
 8005656:	d1c7      	bne.n	80055e8 <__sflush_r+0x34>
 8005658:	682b      	ldr	r3, [r5, #0]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d0c4      	beq.n	80055e8 <__sflush_r+0x34>
 800565e:	2b1d      	cmp	r3, #29
 8005660:	d001      	beq.n	8005666 <__sflush_r+0xb2>
 8005662:	2b16      	cmp	r3, #22
 8005664:	d101      	bne.n	800566a <__sflush_r+0xb6>
 8005666:	602f      	str	r7, [r5, #0]
 8005668:	e7b1      	b.n	80055ce <__sflush_r+0x1a>
 800566a:	89a3      	ldrh	r3, [r4, #12]
 800566c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005670:	81a3      	strh	r3, [r4, #12]
 8005672:	e7ad      	b.n	80055d0 <__sflush_r+0x1c>
 8005674:	690f      	ldr	r7, [r1, #16]
 8005676:	2f00      	cmp	r7, #0
 8005678:	d0a9      	beq.n	80055ce <__sflush_r+0x1a>
 800567a:	0793      	lsls	r3, r2, #30
 800567c:	680e      	ldr	r6, [r1, #0]
 800567e:	bf08      	it	eq
 8005680:	694b      	ldreq	r3, [r1, #20]
 8005682:	600f      	str	r7, [r1, #0]
 8005684:	bf18      	it	ne
 8005686:	2300      	movne	r3, #0
 8005688:	eba6 0807 	sub.w	r8, r6, r7
 800568c:	608b      	str	r3, [r1, #8]
 800568e:	f1b8 0f00 	cmp.w	r8, #0
 8005692:	dd9c      	ble.n	80055ce <__sflush_r+0x1a>
 8005694:	6a21      	ldr	r1, [r4, #32]
 8005696:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005698:	4643      	mov	r3, r8
 800569a:	463a      	mov	r2, r7
 800569c:	4628      	mov	r0, r5
 800569e:	47b0      	blx	r6
 80056a0:	2800      	cmp	r0, #0
 80056a2:	dc06      	bgt.n	80056b2 <__sflush_r+0xfe>
 80056a4:	89a3      	ldrh	r3, [r4, #12]
 80056a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056aa:	81a3      	strh	r3, [r4, #12]
 80056ac:	f04f 30ff 	mov.w	r0, #4294967295
 80056b0:	e78e      	b.n	80055d0 <__sflush_r+0x1c>
 80056b2:	4407      	add	r7, r0
 80056b4:	eba8 0800 	sub.w	r8, r8, r0
 80056b8:	e7e9      	b.n	800568e <__sflush_r+0xda>
 80056ba:	bf00      	nop
 80056bc:	20400001 	.word	0x20400001

080056c0 <_fflush_r>:
 80056c0:	b538      	push	{r3, r4, r5, lr}
 80056c2:	690b      	ldr	r3, [r1, #16]
 80056c4:	4605      	mov	r5, r0
 80056c6:	460c      	mov	r4, r1
 80056c8:	b913      	cbnz	r3, 80056d0 <_fflush_r+0x10>
 80056ca:	2500      	movs	r5, #0
 80056cc:	4628      	mov	r0, r5
 80056ce:	bd38      	pop	{r3, r4, r5, pc}
 80056d0:	b118      	cbz	r0, 80056da <_fflush_r+0x1a>
 80056d2:	6983      	ldr	r3, [r0, #24]
 80056d4:	b90b      	cbnz	r3, 80056da <_fflush_r+0x1a>
 80056d6:	f7ff fa4f 	bl	8004b78 <__sinit>
 80056da:	4b14      	ldr	r3, [pc, #80]	; (800572c <_fflush_r+0x6c>)
 80056dc:	429c      	cmp	r4, r3
 80056de:	d11b      	bne.n	8005718 <_fflush_r+0x58>
 80056e0:	686c      	ldr	r4, [r5, #4]
 80056e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d0ef      	beq.n	80056ca <_fflush_r+0xa>
 80056ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80056ec:	07d0      	lsls	r0, r2, #31
 80056ee:	d404      	bmi.n	80056fa <_fflush_r+0x3a>
 80056f0:	0599      	lsls	r1, r3, #22
 80056f2:	d402      	bmi.n	80056fa <_fflush_r+0x3a>
 80056f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80056f6:	f7ff fadd 	bl	8004cb4 <__retarget_lock_acquire_recursive>
 80056fa:	4628      	mov	r0, r5
 80056fc:	4621      	mov	r1, r4
 80056fe:	f7ff ff59 	bl	80055b4 <__sflush_r>
 8005702:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005704:	07da      	lsls	r2, r3, #31
 8005706:	4605      	mov	r5, r0
 8005708:	d4e0      	bmi.n	80056cc <_fflush_r+0xc>
 800570a:	89a3      	ldrh	r3, [r4, #12]
 800570c:	059b      	lsls	r3, r3, #22
 800570e:	d4dd      	bmi.n	80056cc <_fflush_r+0xc>
 8005710:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005712:	f7ff fad0 	bl	8004cb6 <__retarget_lock_release_recursive>
 8005716:	e7d9      	b.n	80056cc <_fflush_r+0xc>
 8005718:	4b05      	ldr	r3, [pc, #20]	; (8005730 <_fflush_r+0x70>)
 800571a:	429c      	cmp	r4, r3
 800571c:	d101      	bne.n	8005722 <_fflush_r+0x62>
 800571e:	68ac      	ldr	r4, [r5, #8]
 8005720:	e7df      	b.n	80056e2 <_fflush_r+0x22>
 8005722:	4b04      	ldr	r3, [pc, #16]	; (8005734 <_fflush_r+0x74>)
 8005724:	429c      	cmp	r4, r3
 8005726:	bf08      	it	eq
 8005728:	68ec      	ldreq	r4, [r5, #12]
 800572a:	e7da      	b.n	80056e2 <_fflush_r+0x22>
 800572c:	08005a4c 	.word	0x08005a4c
 8005730:	08005a6c 	.word	0x08005a6c
 8005734:	08005a2c 	.word	0x08005a2c

08005738 <_lseek_r>:
 8005738:	b538      	push	{r3, r4, r5, lr}
 800573a:	4d07      	ldr	r5, [pc, #28]	; (8005758 <_lseek_r+0x20>)
 800573c:	4604      	mov	r4, r0
 800573e:	4608      	mov	r0, r1
 8005740:	4611      	mov	r1, r2
 8005742:	2200      	movs	r2, #0
 8005744:	602a      	str	r2, [r5, #0]
 8005746:	461a      	mov	r2, r3
 8005748:	f7ff f8da 	bl	8004900 <_lseek>
 800574c:	1c43      	adds	r3, r0, #1
 800574e:	d102      	bne.n	8005756 <_lseek_r+0x1e>
 8005750:	682b      	ldr	r3, [r5, #0]
 8005752:	b103      	cbz	r3, 8005756 <_lseek_r+0x1e>
 8005754:	6023      	str	r3, [r4, #0]
 8005756:	bd38      	pop	{r3, r4, r5, pc}
 8005758:	200007a4 	.word	0x200007a4

0800575c <__swhatbuf_r>:
 800575c:	b570      	push	{r4, r5, r6, lr}
 800575e:	460e      	mov	r6, r1
 8005760:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005764:	2900      	cmp	r1, #0
 8005766:	b096      	sub	sp, #88	; 0x58
 8005768:	4614      	mov	r4, r2
 800576a:	461d      	mov	r5, r3
 800576c:	da07      	bge.n	800577e <__swhatbuf_r+0x22>
 800576e:	2300      	movs	r3, #0
 8005770:	602b      	str	r3, [r5, #0]
 8005772:	89b3      	ldrh	r3, [r6, #12]
 8005774:	061a      	lsls	r2, r3, #24
 8005776:	d410      	bmi.n	800579a <__swhatbuf_r+0x3e>
 8005778:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800577c:	e00e      	b.n	800579c <__swhatbuf_r+0x40>
 800577e:	466a      	mov	r2, sp
 8005780:	f000 f8be 	bl	8005900 <_fstat_r>
 8005784:	2800      	cmp	r0, #0
 8005786:	dbf2      	blt.n	800576e <__swhatbuf_r+0x12>
 8005788:	9a01      	ldr	r2, [sp, #4]
 800578a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800578e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005792:	425a      	negs	r2, r3
 8005794:	415a      	adcs	r2, r3
 8005796:	602a      	str	r2, [r5, #0]
 8005798:	e7ee      	b.n	8005778 <__swhatbuf_r+0x1c>
 800579a:	2340      	movs	r3, #64	; 0x40
 800579c:	2000      	movs	r0, #0
 800579e:	6023      	str	r3, [r4, #0]
 80057a0:	b016      	add	sp, #88	; 0x58
 80057a2:	bd70      	pop	{r4, r5, r6, pc}

080057a4 <__smakebuf_r>:
 80057a4:	898b      	ldrh	r3, [r1, #12]
 80057a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80057a8:	079d      	lsls	r5, r3, #30
 80057aa:	4606      	mov	r6, r0
 80057ac:	460c      	mov	r4, r1
 80057ae:	d507      	bpl.n	80057c0 <__smakebuf_r+0x1c>
 80057b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80057b4:	6023      	str	r3, [r4, #0]
 80057b6:	6123      	str	r3, [r4, #16]
 80057b8:	2301      	movs	r3, #1
 80057ba:	6163      	str	r3, [r4, #20]
 80057bc:	b002      	add	sp, #8
 80057be:	bd70      	pop	{r4, r5, r6, pc}
 80057c0:	ab01      	add	r3, sp, #4
 80057c2:	466a      	mov	r2, sp
 80057c4:	f7ff ffca 	bl	800575c <__swhatbuf_r>
 80057c8:	9900      	ldr	r1, [sp, #0]
 80057ca:	4605      	mov	r5, r0
 80057cc:	4630      	mov	r0, r6
 80057ce:	f7ff fa73 	bl	8004cb8 <_malloc_r>
 80057d2:	b948      	cbnz	r0, 80057e8 <__smakebuf_r+0x44>
 80057d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80057d8:	059a      	lsls	r2, r3, #22
 80057da:	d4ef      	bmi.n	80057bc <__smakebuf_r+0x18>
 80057dc:	f023 0303 	bic.w	r3, r3, #3
 80057e0:	f043 0302 	orr.w	r3, r3, #2
 80057e4:	81a3      	strh	r3, [r4, #12]
 80057e6:	e7e3      	b.n	80057b0 <__smakebuf_r+0xc>
 80057e8:	4b0d      	ldr	r3, [pc, #52]	; (8005820 <__smakebuf_r+0x7c>)
 80057ea:	62b3      	str	r3, [r6, #40]	; 0x28
 80057ec:	89a3      	ldrh	r3, [r4, #12]
 80057ee:	6020      	str	r0, [r4, #0]
 80057f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057f4:	81a3      	strh	r3, [r4, #12]
 80057f6:	9b00      	ldr	r3, [sp, #0]
 80057f8:	6163      	str	r3, [r4, #20]
 80057fa:	9b01      	ldr	r3, [sp, #4]
 80057fc:	6120      	str	r0, [r4, #16]
 80057fe:	b15b      	cbz	r3, 8005818 <__smakebuf_r+0x74>
 8005800:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005804:	4630      	mov	r0, r6
 8005806:	f000 f88d 	bl	8005924 <_isatty_r>
 800580a:	b128      	cbz	r0, 8005818 <__smakebuf_r+0x74>
 800580c:	89a3      	ldrh	r3, [r4, #12]
 800580e:	f023 0303 	bic.w	r3, r3, #3
 8005812:	f043 0301 	orr.w	r3, r3, #1
 8005816:	81a3      	strh	r3, [r4, #12]
 8005818:	89a0      	ldrh	r0, [r4, #12]
 800581a:	4305      	orrs	r5, r0
 800581c:	81a5      	strh	r5, [r4, #12]
 800581e:	e7cd      	b.n	80057bc <__smakebuf_r+0x18>
 8005820:	08004b11 	.word	0x08004b11

08005824 <__malloc_lock>:
 8005824:	4801      	ldr	r0, [pc, #4]	; (800582c <__malloc_lock+0x8>)
 8005826:	f7ff ba45 	b.w	8004cb4 <__retarget_lock_acquire_recursive>
 800582a:	bf00      	nop
 800582c:	2000079c 	.word	0x2000079c

08005830 <__malloc_unlock>:
 8005830:	4801      	ldr	r0, [pc, #4]	; (8005838 <__malloc_unlock+0x8>)
 8005832:	f7ff ba40 	b.w	8004cb6 <__retarget_lock_release_recursive>
 8005836:	bf00      	nop
 8005838:	2000079c 	.word	0x2000079c

0800583c <_free_r>:
 800583c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800583e:	2900      	cmp	r1, #0
 8005840:	d048      	beq.n	80058d4 <_free_r+0x98>
 8005842:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005846:	9001      	str	r0, [sp, #4]
 8005848:	2b00      	cmp	r3, #0
 800584a:	f1a1 0404 	sub.w	r4, r1, #4
 800584e:	bfb8      	it	lt
 8005850:	18e4      	addlt	r4, r4, r3
 8005852:	f7ff ffe7 	bl	8005824 <__malloc_lock>
 8005856:	4a20      	ldr	r2, [pc, #128]	; (80058d8 <_free_r+0x9c>)
 8005858:	9801      	ldr	r0, [sp, #4]
 800585a:	6813      	ldr	r3, [r2, #0]
 800585c:	4615      	mov	r5, r2
 800585e:	b933      	cbnz	r3, 800586e <_free_r+0x32>
 8005860:	6063      	str	r3, [r4, #4]
 8005862:	6014      	str	r4, [r2, #0]
 8005864:	b003      	add	sp, #12
 8005866:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800586a:	f7ff bfe1 	b.w	8005830 <__malloc_unlock>
 800586e:	42a3      	cmp	r3, r4
 8005870:	d90b      	bls.n	800588a <_free_r+0x4e>
 8005872:	6821      	ldr	r1, [r4, #0]
 8005874:	1862      	adds	r2, r4, r1
 8005876:	4293      	cmp	r3, r2
 8005878:	bf04      	itt	eq
 800587a:	681a      	ldreq	r2, [r3, #0]
 800587c:	685b      	ldreq	r3, [r3, #4]
 800587e:	6063      	str	r3, [r4, #4]
 8005880:	bf04      	itt	eq
 8005882:	1852      	addeq	r2, r2, r1
 8005884:	6022      	streq	r2, [r4, #0]
 8005886:	602c      	str	r4, [r5, #0]
 8005888:	e7ec      	b.n	8005864 <_free_r+0x28>
 800588a:	461a      	mov	r2, r3
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	b10b      	cbz	r3, 8005894 <_free_r+0x58>
 8005890:	42a3      	cmp	r3, r4
 8005892:	d9fa      	bls.n	800588a <_free_r+0x4e>
 8005894:	6811      	ldr	r1, [r2, #0]
 8005896:	1855      	adds	r5, r2, r1
 8005898:	42a5      	cmp	r5, r4
 800589a:	d10b      	bne.n	80058b4 <_free_r+0x78>
 800589c:	6824      	ldr	r4, [r4, #0]
 800589e:	4421      	add	r1, r4
 80058a0:	1854      	adds	r4, r2, r1
 80058a2:	42a3      	cmp	r3, r4
 80058a4:	6011      	str	r1, [r2, #0]
 80058a6:	d1dd      	bne.n	8005864 <_free_r+0x28>
 80058a8:	681c      	ldr	r4, [r3, #0]
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	6053      	str	r3, [r2, #4]
 80058ae:	4421      	add	r1, r4
 80058b0:	6011      	str	r1, [r2, #0]
 80058b2:	e7d7      	b.n	8005864 <_free_r+0x28>
 80058b4:	d902      	bls.n	80058bc <_free_r+0x80>
 80058b6:	230c      	movs	r3, #12
 80058b8:	6003      	str	r3, [r0, #0]
 80058ba:	e7d3      	b.n	8005864 <_free_r+0x28>
 80058bc:	6825      	ldr	r5, [r4, #0]
 80058be:	1961      	adds	r1, r4, r5
 80058c0:	428b      	cmp	r3, r1
 80058c2:	bf04      	itt	eq
 80058c4:	6819      	ldreq	r1, [r3, #0]
 80058c6:	685b      	ldreq	r3, [r3, #4]
 80058c8:	6063      	str	r3, [r4, #4]
 80058ca:	bf04      	itt	eq
 80058cc:	1949      	addeq	r1, r1, r5
 80058ce:	6021      	streq	r1, [r4, #0]
 80058d0:	6054      	str	r4, [r2, #4]
 80058d2:	e7c7      	b.n	8005864 <_free_r+0x28>
 80058d4:	b003      	add	sp, #12
 80058d6:	bd30      	pop	{r4, r5, pc}
 80058d8:	20000094 	.word	0x20000094

080058dc <_read_r>:
 80058dc:	b538      	push	{r3, r4, r5, lr}
 80058de:	4d07      	ldr	r5, [pc, #28]	; (80058fc <_read_r+0x20>)
 80058e0:	4604      	mov	r4, r0
 80058e2:	4608      	mov	r0, r1
 80058e4:	4611      	mov	r1, r2
 80058e6:	2200      	movs	r2, #0
 80058e8:	602a      	str	r2, [r5, #0]
 80058ea:	461a      	mov	r2, r3
 80058ec:	f7fe ffa8 	bl	8004840 <_read>
 80058f0:	1c43      	adds	r3, r0, #1
 80058f2:	d102      	bne.n	80058fa <_read_r+0x1e>
 80058f4:	682b      	ldr	r3, [r5, #0]
 80058f6:	b103      	cbz	r3, 80058fa <_read_r+0x1e>
 80058f8:	6023      	str	r3, [r4, #0]
 80058fa:	bd38      	pop	{r3, r4, r5, pc}
 80058fc:	200007a4 	.word	0x200007a4

08005900 <_fstat_r>:
 8005900:	b538      	push	{r3, r4, r5, lr}
 8005902:	4d07      	ldr	r5, [pc, #28]	; (8005920 <_fstat_r+0x20>)
 8005904:	2300      	movs	r3, #0
 8005906:	4604      	mov	r4, r0
 8005908:	4608      	mov	r0, r1
 800590a:	4611      	mov	r1, r2
 800590c:	602b      	str	r3, [r5, #0]
 800590e:	f7fe ffdc 	bl	80048ca <_fstat>
 8005912:	1c43      	adds	r3, r0, #1
 8005914:	d102      	bne.n	800591c <_fstat_r+0x1c>
 8005916:	682b      	ldr	r3, [r5, #0]
 8005918:	b103      	cbz	r3, 800591c <_fstat_r+0x1c>
 800591a:	6023      	str	r3, [r4, #0]
 800591c:	bd38      	pop	{r3, r4, r5, pc}
 800591e:	bf00      	nop
 8005920:	200007a4 	.word	0x200007a4

08005924 <_isatty_r>:
 8005924:	b538      	push	{r3, r4, r5, lr}
 8005926:	4d06      	ldr	r5, [pc, #24]	; (8005940 <_isatty_r+0x1c>)
 8005928:	2300      	movs	r3, #0
 800592a:	4604      	mov	r4, r0
 800592c:	4608      	mov	r0, r1
 800592e:	602b      	str	r3, [r5, #0]
 8005930:	f7fe ffdb 	bl	80048ea <_isatty>
 8005934:	1c43      	adds	r3, r0, #1
 8005936:	d102      	bne.n	800593e <_isatty_r+0x1a>
 8005938:	682b      	ldr	r3, [r5, #0]
 800593a:	b103      	cbz	r3, 800593e <_isatty_r+0x1a>
 800593c:	6023      	str	r3, [r4, #0]
 800593e:	bd38      	pop	{r3, r4, r5, pc}
 8005940:	200007a4 	.word	0x200007a4

08005944 <_init>:
 8005944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005946:	bf00      	nop
 8005948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800594a:	bc08      	pop	{r3}
 800594c:	469e      	mov	lr, r3
 800594e:	4770      	bx	lr

08005950 <_fini>:
 8005950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005952:	bf00      	nop
 8005954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005956:	bc08      	pop	{r3}
 8005958:	469e      	mov	lr, r3
 800595a:	4770      	bx	lr
