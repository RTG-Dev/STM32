
I2C1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004fa4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08005174  08005174  00015174  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051e8  080051e8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080051e8  080051e8  000151e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080051f0  080051f0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051f0  080051f0  000151f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080051f4  080051f4  000151f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080051f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b4  20000070  08005268  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000224  08005268  00020224  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000de41  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f95  00000000  00000000  0002dee1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b00  00000000  00000000  0002fe78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a38  00000000  00000000  00030978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025841  00000000  00000000  000313b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d3c7  00000000  00000000  00056bf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ee09f  00000000  00000000  00063fb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00152057  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003088  00000000  00000000  001520ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800515c 	.word	0x0800515c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	0800515c 	.word	0x0800515c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96e 	b.w	80005b4 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468c      	mov	ip, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8083 	bne.w	8000406 <__udivmoddi4+0x116>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d947      	bls.n	8000396 <__udivmoddi4+0xa6>
 8000306:	fab2 f282 	clz	r2, r2
 800030a:	b142      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030c:	f1c2 0020 	rsb	r0, r2, #32
 8000310:	fa24 f000 	lsr.w	r0, r4, r0
 8000314:	4091      	lsls	r1, r2
 8000316:	4097      	lsls	r7, r2
 8000318:	ea40 0c01 	orr.w	ip, r0, r1
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbbc f6f8 	udiv	r6, ip, r8
 8000328:	fa1f fe87 	uxth.w	lr, r7
 800032c:	fb08 c116 	mls	r1, r8, r6, ip
 8000330:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000334:	fb06 f10e 	mul.w	r1, r6, lr
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000342:	f080 8119 	bcs.w	8000578 <__udivmoddi4+0x288>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8116 	bls.w	8000578 <__udivmoddi4+0x288>
 800034c:	3e02      	subs	r6, #2
 800034e:	443b      	add	r3, r7
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0f8 	udiv	r0, r3, r8
 8000358:	fb08 3310 	mls	r3, r8, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fe0e 	mul.w	lr, r0, lr
 8000364:	45a6      	cmp	lr, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	193c      	adds	r4, r7, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8105 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f240 8102 	bls.w	800057c <__udivmoddi4+0x28c>
 8000378:	3802      	subs	r0, #2
 800037a:	443c      	add	r4, r7
 800037c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000380:	eba4 040e 	sub.w	r4, r4, lr
 8000384:	2600      	movs	r6, #0
 8000386:	b11d      	cbz	r5, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c5 4300 	strd	r4, r3, [r5]
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	b902      	cbnz	r2, 800039a <__udivmoddi4+0xaa>
 8000398:	deff      	udf	#255	; 0xff
 800039a:	fab2 f282 	clz	r2, r2
 800039e:	2a00      	cmp	r2, #0
 80003a0:	d150      	bne.n	8000444 <__udivmoddi4+0x154>
 80003a2:	1bcb      	subs	r3, r1, r7
 80003a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a8:	fa1f f887 	uxth.w	r8, r7
 80003ac:	2601      	movs	r6, #1
 80003ae:	fbb3 fcfe 	udiv	ip, r3, lr
 80003b2:	0c21      	lsrs	r1, r4, #16
 80003b4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb08 f30c 	mul.w	r3, r8, ip
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0xe4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0xe2>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	f200 80e9 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1ac9      	subs	r1, r1, r3
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x10c>
 80003ec:	193c      	adds	r4, r7, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x10a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80d9 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e7bf      	b.n	8000386 <__udivmoddi4+0x96>
 8000406:	428b      	cmp	r3, r1
 8000408:	d909      	bls.n	800041e <__udivmoddi4+0x12e>
 800040a:	2d00      	cmp	r5, #0
 800040c:	f000 80b1 	beq.w	8000572 <__udivmoddi4+0x282>
 8000410:	2600      	movs	r6, #0
 8000412:	e9c5 0100 	strd	r0, r1, [r5]
 8000416:	4630      	mov	r0, r6
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	fab3 f683 	clz	r6, r3
 8000422:	2e00      	cmp	r6, #0
 8000424:	d14a      	bne.n	80004bc <__udivmoddi4+0x1cc>
 8000426:	428b      	cmp	r3, r1
 8000428:	d302      	bcc.n	8000430 <__udivmoddi4+0x140>
 800042a:	4282      	cmp	r2, r0
 800042c:	f200 80b8 	bhi.w	80005a0 <__udivmoddi4+0x2b0>
 8000430:	1a84      	subs	r4, r0, r2
 8000432:	eb61 0103 	sbc.w	r1, r1, r3
 8000436:	2001      	movs	r0, #1
 8000438:	468c      	mov	ip, r1
 800043a:	2d00      	cmp	r5, #0
 800043c:	d0a8      	beq.n	8000390 <__udivmoddi4+0xa0>
 800043e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000442:	e7a5      	b.n	8000390 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f603 	lsr.w	r6, r0, r3
 800044c:	4097      	lsls	r7, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000456:	40d9      	lsrs	r1, r3
 8000458:	4330      	orrs	r0, r6
 800045a:	0c03      	lsrs	r3, r0, #16
 800045c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000460:	fa1f f887 	uxth.w	r8, r7
 8000464:	fb0e 1116 	mls	r1, lr, r6, r1
 8000468:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046c:	fb06 f108 	mul.w	r1, r6, r8
 8000470:	4299      	cmp	r1, r3
 8000472:	fa04 f402 	lsl.w	r4, r4, r2
 8000476:	d909      	bls.n	800048c <__udivmoddi4+0x19c>
 8000478:	18fb      	adds	r3, r7, r3
 800047a:	f106 3cff 	add.w	ip, r6, #4294967295
 800047e:	f080 808d 	bcs.w	800059c <__udivmoddi4+0x2ac>
 8000482:	4299      	cmp	r1, r3
 8000484:	f240 808a 	bls.w	800059c <__udivmoddi4+0x2ac>
 8000488:	3e02      	subs	r6, #2
 800048a:	443b      	add	r3, r7
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b281      	uxth	r1, r0
 8000490:	fbb3 f0fe 	udiv	r0, r3, lr
 8000494:	fb0e 3310 	mls	r3, lr, r0, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb00 f308 	mul.w	r3, r0, r8
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d907      	bls.n	80004b4 <__udivmoddi4+0x1c4>
 80004a4:	1879      	adds	r1, r7, r1
 80004a6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004aa:	d273      	bcs.n	8000594 <__udivmoddi4+0x2a4>
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d971      	bls.n	8000594 <__udivmoddi4+0x2a4>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4439      	add	r1, r7
 80004b4:	1acb      	subs	r3, r1, r3
 80004b6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ba:	e778      	b.n	80003ae <__udivmoddi4+0xbe>
 80004bc:	f1c6 0c20 	rsb	ip, r6, #32
 80004c0:	fa03 f406 	lsl.w	r4, r3, r6
 80004c4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004c8:	431c      	orrs	r4, r3
 80004ca:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ce:	fa01 f306 	lsl.w	r3, r1, r6
 80004d2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004d6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004da:	431f      	orrs	r7, r3
 80004dc:	0c3b      	lsrs	r3, r7, #16
 80004de:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e2:	fa1f f884 	uxth.w	r8, r4
 80004e6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ee:	fb09 fa08 	mul.w	sl, r9, r8
 80004f2:	458a      	cmp	sl, r1
 80004f4:	fa02 f206 	lsl.w	r2, r2, r6
 80004f8:	fa00 f306 	lsl.w	r3, r0, r6
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x220>
 80004fe:	1861      	adds	r1, r4, r1
 8000500:	f109 30ff 	add.w	r0, r9, #4294967295
 8000504:	d248      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 8000506:	458a      	cmp	sl, r1
 8000508:	d946      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800050a:	f1a9 0902 	sub.w	r9, r9, #2
 800050e:	4421      	add	r1, r4
 8000510:	eba1 010a 	sub.w	r1, r1, sl
 8000514:	b2bf      	uxth	r7, r7
 8000516:	fbb1 f0fe 	udiv	r0, r1, lr
 800051a:	fb0e 1110 	mls	r1, lr, r0, r1
 800051e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000522:	fb00 f808 	mul.w	r8, r0, r8
 8000526:	45b8      	cmp	r8, r7
 8000528:	d907      	bls.n	800053a <__udivmoddi4+0x24a>
 800052a:	19e7      	adds	r7, r4, r7
 800052c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000530:	d22e      	bcs.n	8000590 <__udivmoddi4+0x2a0>
 8000532:	45b8      	cmp	r8, r7
 8000534:	d92c      	bls.n	8000590 <__udivmoddi4+0x2a0>
 8000536:	3802      	subs	r0, #2
 8000538:	4427      	add	r7, r4
 800053a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800053e:	eba7 0708 	sub.w	r7, r7, r8
 8000542:	fba0 8902 	umull	r8, r9, r0, r2
 8000546:	454f      	cmp	r7, r9
 8000548:	46c6      	mov	lr, r8
 800054a:	4649      	mov	r1, r9
 800054c:	d31a      	bcc.n	8000584 <__udivmoddi4+0x294>
 800054e:	d017      	beq.n	8000580 <__udivmoddi4+0x290>
 8000550:	b15d      	cbz	r5, 800056a <__udivmoddi4+0x27a>
 8000552:	ebb3 020e 	subs.w	r2, r3, lr
 8000556:	eb67 0701 	sbc.w	r7, r7, r1
 800055a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800055e:	40f2      	lsrs	r2, r6
 8000560:	ea4c 0202 	orr.w	r2, ip, r2
 8000564:	40f7      	lsrs	r7, r6
 8000566:	e9c5 2700 	strd	r2, r7, [r5]
 800056a:	2600      	movs	r6, #0
 800056c:	4631      	mov	r1, r6
 800056e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e70b      	b.n	8000390 <__udivmoddi4+0xa0>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0x60>
 800057c:	4618      	mov	r0, r3
 800057e:	e6fd      	b.n	800037c <__udivmoddi4+0x8c>
 8000580:	4543      	cmp	r3, r8
 8000582:	d2e5      	bcs.n	8000550 <__udivmoddi4+0x260>
 8000584:	ebb8 0e02 	subs.w	lr, r8, r2
 8000588:	eb69 0104 	sbc.w	r1, r9, r4
 800058c:	3801      	subs	r0, #1
 800058e:	e7df      	b.n	8000550 <__udivmoddi4+0x260>
 8000590:	4608      	mov	r0, r1
 8000592:	e7d2      	b.n	800053a <__udivmoddi4+0x24a>
 8000594:	4660      	mov	r0, ip
 8000596:	e78d      	b.n	80004b4 <__udivmoddi4+0x1c4>
 8000598:	4681      	mov	r9, r0
 800059a:	e7b9      	b.n	8000510 <__udivmoddi4+0x220>
 800059c:	4666      	mov	r6, ip
 800059e:	e775      	b.n	800048c <__udivmoddi4+0x19c>
 80005a0:	4630      	mov	r0, r6
 80005a2:	e74a      	b.n	800043a <__udivmoddi4+0x14a>
 80005a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a8:	4439      	add	r1, r7
 80005aa:	e713      	b.n	80003d4 <__udivmoddi4+0xe4>
 80005ac:	3802      	subs	r0, #2
 80005ae:	443c      	add	r4, r7
 80005b0:	e724      	b.n	80003fc <__udivmoddi4+0x10c>
 80005b2:	bf00      	nop

080005b4 <__aeabi_idiv0>:
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop

080005b8 <HAL_I2C_SlaveRxCpltCallback>:
 *
 */
uint8_t data_rsv1[20];

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
	 HAL_I2C_Slave_Receive_IT(&hi2c2, data_rsv1, 4);
 80005c0:	2204      	movs	r2, #4
 80005c2:	4904      	ldr	r1, [pc, #16]	; (80005d4 <HAL_I2C_SlaveRxCpltCallback+0x1c>)
 80005c4:	4804      	ldr	r0, [pc, #16]	; (80005d8 <HAL_I2C_SlaveRxCpltCallback+0x20>)
 80005c6:	f001 f96b 	bl	80018a0 <HAL_I2C_Slave_Receive_IT>
}
 80005ca:	bf00      	nop
 80005cc:	3708      	adds	r7, #8
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	200001b4 	.word	0x200001b4
 80005d8:	20000168 	.word	0x20000168

080005dc <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80005dc:	b480      	push	{r7}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80005e4:	bf00      	nop
 80005e6:	370c      	adds	r7, #12
 80005e8:	46bd      	mov	sp, r7
 80005ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ee:	4770      	bx	lr

080005f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b0ba      	sub	sp, #232	; 0xe8
 80005f4:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	  uint8_t data_tr[20]="12345678",buf[200];
 80005f6:	4a3c      	ldr	r2, [pc, #240]	; (80006e8 <main+0xf8>)
 80005f8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80005fc:	ca07      	ldmia	r2, {r0, r1, r2}
 80005fe:	c303      	stmia	r3!, {r0, r1}
 8000600:	701a      	strb	r2, [r3, #0]
 8000602:	f107 03d5 	add.w	r3, r7, #213	; 0xd5
 8000606:	2200      	movs	r2, #0
 8000608:	601a      	str	r2, [r3, #0]
 800060a:	605a      	str	r2, [r3, #4]
 800060c:	f8c3 2007 	str.w	r2, [r3, #7]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000610:	f000 fc1f 	bl	8000e52 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000614:	f000 f878 	bl	8000708 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000618:	f000 f9b6 	bl	8000988 <MX_GPIO_Init>
//  MX_ETH_Init();
  MX_I2C1_Init();
 800061c:	f000 f904 	bl	8000828 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000620:	f000 f942 	bl	80008a8 <MX_I2C2_Init>
  MX_USART3_UART_Init();
 8000624:	f000 f980 	bl	8000928 <MX_USART3_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_I2C_Slave_Receive_IT(&hi2c2, data_rsv1, 4);
 8000628:	2204      	movs	r2, #4
 800062a:	4930      	ldr	r1, [pc, #192]	; (80006ec <main+0xfc>)
 800062c:	4830      	ldr	r0, [pc, #192]	; (80006f0 <main+0x100>)
 800062e:	f001 f937 	bl	80018a0 <HAL_I2C_Slave_Receive_IT>
  while (1)
  {
		  data_tr[0]++;
 8000632:	f897 30cc 	ldrb.w	r3, [r7, #204]	; 0xcc
 8000636:	3301      	adds	r3, #1
 8000638:	b2db      	uxtb	r3, r3
 800063a:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
	  //data_tr %=255;
	  if( HAL_I2C_Master_Transmit(&hi2c1, 42, data_tr, 4, 100) != HAL_OK )
 800063e:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 8000642:	2364      	movs	r3, #100	; 0x64
 8000644:	9300      	str	r3, [sp, #0]
 8000646:	2304      	movs	r3, #4
 8000648:	212a      	movs	r1, #42	; 0x2a
 800064a:	482a      	ldr	r0, [pc, #168]	; (80006f4 <main+0x104>)
 800064c:	f001 f834 	bl	80016b8 <HAL_I2C_Master_Transmit>
	//	  HAL_I2C_DeInit (&hi2c2);
	//	  MX_I2C2_Init();
	//	  HAL_I2C_Slave_Receive_IT(&hi2c2, data_rsv1, 4);
	  }

	  if(data_rsv1[0]%3==0)
 8000650:	4b26      	ldr	r3, [pc, #152]	; (80006ec <main+0xfc>)
 8000652:	781a      	ldrb	r2, [r3, #0]
 8000654:	4b28      	ldr	r3, [pc, #160]	; (80006f8 <main+0x108>)
 8000656:	fba3 1302 	umull	r1, r3, r3, r2
 800065a:	0859      	lsrs	r1, r3, #1
 800065c:	460b      	mov	r3, r1
 800065e:	005b      	lsls	r3, r3, #1
 8000660:	440b      	add	r3, r1
 8000662:	1ad3      	subs	r3, r2, r3
 8000664:	b2db      	uxtb	r3, r3
 8000666:	2b00      	cmp	r3, #0
 8000668:	d104      	bne.n	8000674 <main+0x84>
		  HAL_GPIO_TogglePin(LD1_GPIO_Port,LD1_Pin);
 800066a:	2101      	movs	r1, #1
 800066c:	4823      	ldr	r0, [pc, #140]	; (80006fc <main+0x10c>)
 800066e:	f000 ff78 	bl	8001562 <HAL_GPIO_TogglePin>
 8000672:	e023      	b.n	80006bc <main+0xcc>
	  else if(data_rsv1[0]%3==1)
 8000674:	4b1d      	ldr	r3, [pc, #116]	; (80006ec <main+0xfc>)
 8000676:	781a      	ldrb	r2, [r3, #0]
 8000678:	4b1f      	ldr	r3, [pc, #124]	; (80006f8 <main+0x108>)
 800067a:	fba3 1302 	umull	r1, r3, r3, r2
 800067e:	0859      	lsrs	r1, r3, #1
 8000680:	460b      	mov	r3, r1
 8000682:	005b      	lsls	r3, r3, #1
 8000684:	440b      	add	r3, r1
 8000686:	1ad3      	subs	r3, r2, r3
 8000688:	b2db      	uxtb	r3, r3
 800068a:	2b01      	cmp	r3, #1
 800068c:	d104      	bne.n	8000698 <main+0xa8>
		  HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 800068e:	2180      	movs	r1, #128	; 0x80
 8000690:	481a      	ldr	r0, [pc, #104]	; (80006fc <main+0x10c>)
 8000692:	f000 ff66 	bl	8001562 <HAL_GPIO_TogglePin>
 8000696:	e011      	b.n	80006bc <main+0xcc>
	  else if(data_rsv1[0]%3==2)
 8000698:	4b14      	ldr	r3, [pc, #80]	; (80006ec <main+0xfc>)
 800069a:	781a      	ldrb	r2, [r3, #0]
 800069c:	4b16      	ldr	r3, [pc, #88]	; (80006f8 <main+0x108>)
 800069e:	fba3 1302 	umull	r1, r3, r3, r2
 80006a2:	0859      	lsrs	r1, r3, #1
 80006a4:	460b      	mov	r3, r1
 80006a6:	005b      	lsls	r3, r3, #1
 80006a8:	440b      	add	r3, r1
 80006aa:	1ad3      	subs	r3, r2, r3
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	2b02      	cmp	r3, #2
 80006b0:	d104      	bne.n	80006bc <main+0xcc>
		  HAL_GPIO_TogglePin(LD3_GPIO_Port,LD3_Pin);
 80006b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006b6:	4811      	ldr	r0, [pc, #68]	; (80006fc <main+0x10c>)
 80006b8:	f000 ff53 	bl	8001562 <HAL_GPIO_TogglePin>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  sprintf((char*)buf,"get value %s  \n\r", data_rsv1);
 80006bc:	1d3b      	adds	r3, r7, #4
 80006be:	4a0b      	ldr	r2, [pc, #44]	; (80006ec <main+0xfc>)
 80006c0:	490f      	ldr	r1, [pc, #60]	; (8000700 <main+0x110>)
 80006c2:	4618      	mov	r0, r3
 80006c4:	f004 f91c 	bl	8004900 <siprintf>
	  HAL_UART_Transmit(&huart3, buf, strlen((char*)buf), 100);
 80006c8:	1d3b      	adds	r3, r7, #4
 80006ca:	4618      	mov	r0, r3
 80006cc:	f7ff fda0 	bl	8000210 <strlen>
 80006d0:	4603      	mov	r3, r0
 80006d2:	b29a      	uxth	r2, r3
 80006d4:	1d39      	adds	r1, r7, #4
 80006d6:	2364      	movs	r3, #100	; 0x64
 80006d8:	480a      	ldr	r0, [pc, #40]	; (8000704 <main+0x114>)
 80006da:	f003 fc97 	bl	800400c <HAL_UART_Transmit>
	  HAL_Delay(1000);
 80006de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006e2:	f000 fc13 	bl	8000f0c <HAL_Delay>
  {
 80006e6:	e7a4      	b.n	8000632 <main+0x42>
 80006e8:	08005188 	.word	0x08005188
 80006ec:	200001b4 	.word	0x200001b4
 80006f0:	20000168 	.word	0x20000168
 80006f4:	2000011c 	.word	0x2000011c
 80006f8:	aaaaaaab 	.word	0xaaaaaaab
 80006fc:	40020400 	.word	0x40020400
 8000700:	08005174 	.word	0x08005174
 8000704:	20000098 	.word	0x20000098

08000708 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b0b4      	sub	sp, #208	; 0xd0
 800070c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800070e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000712:	2230      	movs	r2, #48	; 0x30
 8000714:	2100      	movs	r1, #0
 8000716:	4618      	mov	r0, r3
 8000718:	f004 f8ea 	bl	80048f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800071c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
 8000724:	605a      	str	r2, [r3, #4]
 8000726:	609a      	str	r2, [r3, #8]
 8000728:	60da      	str	r2, [r3, #12]
 800072a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800072c:	f107 0308 	add.w	r3, r7, #8
 8000730:	2284      	movs	r2, #132	; 0x84
 8000732:	2100      	movs	r1, #0
 8000734:	4618      	mov	r0, r3
 8000736:	f004 f8db 	bl	80048f0 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800073a:	f002 fb73 	bl	8002e24 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800073e:	4b38      	ldr	r3, [pc, #224]	; (8000820 <SystemClock_Config+0x118>)
 8000740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000742:	4a37      	ldr	r2, [pc, #220]	; (8000820 <SystemClock_Config+0x118>)
 8000744:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000748:	6413      	str	r3, [r2, #64]	; 0x40
 800074a:	4b35      	ldr	r3, [pc, #212]	; (8000820 <SystemClock_Config+0x118>)
 800074c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800074e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000752:	607b      	str	r3, [r7, #4]
 8000754:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000756:	4b33      	ldr	r3, [pc, #204]	; (8000824 <SystemClock_Config+0x11c>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800075e:	4a31      	ldr	r2, [pc, #196]	; (8000824 <SystemClock_Config+0x11c>)
 8000760:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000764:	6013      	str	r3, [r2, #0]
 8000766:	4b2f      	ldr	r3, [pc, #188]	; (8000824 <SystemClock_Config+0x11c>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800076e:	603b      	str	r3, [r7, #0]
 8000770:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000772:	2301      	movs	r3, #1
 8000774:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000778:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800077c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000780:	2302      	movs	r3, #2
 8000782:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000786:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800078a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 800078e:	2304      	movs	r3, #4
 8000790:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000794:	2348      	movs	r3, #72	; 0x48
 8000796:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800079a:	2302      	movs	r3, #2
 800079c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80007a0:	2303      	movs	r3, #3
 80007a2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80007aa:	4618      	mov	r0, r3
 80007ac:	f002 fb4a 	bl	8002e44 <HAL_RCC_OscConfig>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80007b6:	f000 f9a9 	bl	8000b0c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ba:	230f      	movs	r3, #15
 80007bc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007c0:	2302      	movs	r3, #2
 80007c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007c6:	2300      	movs	r3, #0
 80007c8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007d4:	2300      	movs	r3, #0
 80007d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007da:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80007de:	2102      	movs	r1, #2
 80007e0:	4618      	mov	r0, r3
 80007e2:	f002 fdd3 	bl	800338c <HAL_RCC_ClockConfig>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 80007ec:	f000 f98e 	bl	8000b0c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1
 80007f0:	f44f 4341 	mov.w	r3, #49408	; 0xc100
 80007f4:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_I2C2;
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80007f6:	2300      	movs	r3, #0
 80007f8:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80007fa:	2300      	movs	r3, #0
 80007fc:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80007fe:	2300      	movs	r3, #0
 8000800:	673b      	str	r3, [r7, #112]	; 0x70
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000802:	f107 0308 	add.w	r3, r7, #8
 8000806:	4618      	mov	r0, r3
 8000808:	f002 ffc2 	bl	8003790 <HAL_RCCEx_PeriphCLKConfig>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <SystemClock_Config+0x10e>
  {
    Error_Handler();
 8000812:	f000 f97b 	bl	8000b0c <Error_Handler>
  }
}
 8000816:	bf00      	nop
 8000818:	37d0      	adds	r7, #208	; 0xd0
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	40023800 	.word	0x40023800
 8000824:	40007000 	.word	0x40007000

08000828 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800082c:	4b1b      	ldr	r3, [pc, #108]	; (800089c <MX_I2C1_Init+0x74>)
 800082e:	4a1c      	ldr	r2, [pc, #112]	; (80008a0 <MX_I2C1_Init+0x78>)
 8000830:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 8000832:	4b1a      	ldr	r3, [pc, #104]	; (800089c <MX_I2C1_Init+0x74>)
 8000834:	4a1b      	ldr	r2, [pc, #108]	; (80008a4 <MX_I2C1_Init+0x7c>)
 8000836:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 2;
 8000838:	4b18      	ldr	r3, [pc, #96]	; (800089c <MX_I2C1_Init+0x74>)
 800083a:	2202      	movs	r2, #2
 800083c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800083e:	4b17      	ldr	r3, [pc, #92]	; (800089c <MX_I2C1_Init+0x74>)
 8000840:	2201      	movs	r2, #1
 8000842:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000844:	4b15      	ldr	r3, [pc, #84]	; (800089c <MX_I2C1_Init+0x74>)
 8000846:	2200      	movs	r2, #0
 8000848:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800084a:	4b14      	ldr	r3, [pc, #80]	; (800089c <MX_I2C1_Init+0x74>)
 800084c:	2200      	movs	r2, #0
 800084e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000850:	4b12      	ldr	r3, [pc, #72]	; (800089c <MX_I2C1_Init+0x74>)
 8000852:	2200      	movs	r2, #0
 8000854:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000856:	4b11      	ldr	r3, [pc, #68]	; (800089c <MX_I2C1_Init+0x74>)
 8000858:	2200      	movs	r2, #0
 800085a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800085c:	4b0f      	ldr	r3, [pc, #60]	; (800089c <MX_I2C1_Init+0x74>)
 800085e:	2200      	movs	r2, #0
 8000860:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000862:	480e      	ldr	r0, [pc, #56]	; (800089c <MX_I2C1_Init+0x74>)
 8000864:	f000 fe98 	bl	8001598 <HAL_I2C_Init>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800086e:	f000 f94d 	bl	8000b0c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000872:	2100      	movs	r1, #0
 8000874:	4809      	ldr	r0, [pc, #36]	; (800089c <MX_I2C1_Init+0x74>)
 8000876:	f002 fa3d 	bl	8002cf4 <HAL_I2CEx_ConfigAnalogFilter>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000880:	f000 f944 	bl	8000b0c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000884:	2100      	movs	r1, #0
 8000886:	4805      	ldr	r0, [pc, #20]	; (800089c <MX_I2C1_Init+0x74>)
 8000888:	f002 fa7f 	bl	8002d8a <HAL_I2CEx_ConfigDigitalFilter>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000892:	f000 f93b 	bl	8000b0c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000896:	bf00      	nop
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	2000011c 	.word	0x2000011c
 80008a0:	40005400 	.word	0x40005400
 80008a4:	00808cd2 	.word	0x00808cd2

080008a8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80008ac:	4b1b      	ldr	r3, [pc, #108]	; (800091c <MX_I2C2_Init+0x74>)
 80008ae:	4a1c      	ldr	r2, [pc, #112]	; (8000920 <MX_I2C2_Init+0x78>)
 80008b0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00808CD2;
 80008b2:	4b1a      	ldr	r3, [pc, #104]	; (800091c <MX_I2C2_Init+0x74>)
 80008b4:	4a1b      	ldr	r2, [pc, #108]	; (8000924 <MX_I2C2_Init+0x7c>)
 80008b6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 42;
 80008b8:	4b18      	ldr	r3, [pc, #96]	; (800091c <MX_I2C2_Init+0x74>)
 80008ba:	222a      	movs	r2, #42	; 0x2a
 80008bc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008be:	4b17      	ldr	r3, [pc, #92]	; (800091c <MX_I2C2_Init+0x74>)
 80008c0:	2201      	movs	r2, #1
 80008c2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008c4:	4b15      	ldr	r3, [pc, #84]	; (800091c <MX_I2C2_Init+0x74>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80008ca:	4b14      	ldr	r3, [pc, #80]	; (800091c <MX_I2C2_Init+0x74>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008d0:	4b12      	ldr	r3, [pc, #72]	; (800091c <MX_I2C2_Init+0x74>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008d6:	4b11      	ldr	r3, [pc, #68]	; (800091c <MX_I2C2_Init+0x74>)
 80008d8:	2200      	movs	r2, #0
 80008da:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008dc:	4b0f      	ldr	r3, [pc, #60]	; (800091c <MX_I2C2_Init+0x74>)
 80008de:	2200      	movs	r2, #0
 80008e0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80008e2:	480e      	ldr	r0, [pc, #56]	; (800091c <MX_I2C2_Init+0x74>)
 80008e4:	f000 fe58 	bl	8001598 <HAL_I2C_Init>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80008ee:	f000 f90d 	bl	8000b0c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008f2:	2100      	movs	r1, #0
 80008f4:	4809      	ldr	r0, [pc, #36]	; (800091c <MX_I2C2_Init+0x74>)
 80008f6:	f002 f9fd 	bl	8002cf4 <HAL_I2CEx_ConfigAnalogFilter>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000900:	f000 f904 	bl	8000b0c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000904:	2100      	movs	r1, #0
 8000906:	4805      	ldr	r0, [pc, #20]	; (800091c <MX_I2C2_Init+0x74>)
 8000908:	f002 fa3f 	bl	8002d8a <HAL_I2CEx_ConfigDigitalFilter>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000912:	f000 f8fb 	bl	8000b0c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000916:	bf00      	nop
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	20000168 	.word	0x20000168
 8000920:	40005800 	.word	0x40005800
 8000924:	00808cd2 	.word	0x00808cd2

08000928 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800092c:	4b14      	ldr	r3, [pc, #80]	; (8000980 <MX_USART3_UART_Init+0x58>)
 800092e:	4a15      	ldr	r2, [pc, #84]	; (8000984 <MX_USART3_UART_Init+0x5c>)
 8000930:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000932:	4b13      	ldr	r3, [pc, #76]	; (8000980 <MX_USART3_UART_Init+0x58>)
 8000934:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000938:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800093a:	4b11      	ldr	r3, [pc, #68]	; (8000980 <MX_USART3_UART_Init+0x58>)
 800093c:	2200      	movs	r2, #0
 800093e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000940:	4b0f      	ldr	r3, [pc, #60]	; (8000980 <MX_USART3_UART_Init+0x58>)
 8000942:	2200      	movs	r2, #0
 8000944:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000946:	4b0e      	ldr	r3, [pc, #56]	; (8000980 <MX_USART3_UART_Init+0x58>)
 8000948:	2200      	movs	r2, #0
 800094a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800094c:	4b0c      	ldr	r3, [pc, #48]	; (8000980 <MX_USART3_UART_Init+0x58>)
 800094e:	220c      	movs	r2, #12
 8000950:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000952:	4b0b      	ldr	r3, [pc, #44]	; (8000980 <MX_USART3_UART_Init+0x58>)
 8000954:	2200      	movs	r2, #0
 8000956:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000958:	4b09      	ldr	r3, [pc, #36]	; (8000980 <MX_USART3_UART_Init+0x58>)
 800095a:	2200      	movs	r2, #0
 800095c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800095e:	4b08      	ldr	r3, [pc, #32]	; (8000980 <MX_USART3_UART_Init+0x58>)
 8000960:	2200      	movs	r2, #0
 8000962:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000964:	4b06      	ldr	r3, [pc, #24]	; (8000980 <MX_USART3_UART_Init+0x58>)
 8000966:	2200      	movs	r2, #0
 8000968:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800096a:	4805      	ldr	r0, [pc, #20]	; (8000980 <MX_USART3_UART_Init+0x58>)
 800096c:	f003 fb00 	bl	8003f70 <HAL_UART_Init>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000976:	f000 f8c9 	bl	8000b0c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	20000098 	.word	0x20000098
 8000984:	40004800 	.word	0x40004800

08000988 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b08c      	sub	sp, #48	; 0x30
 800098c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800098e:	f107 031c 	add.w	r3, r7, #28
 8000992:	2200      	movs	r2, #0
 8000994:	601a      	str	r2, [r3, #0]
 8000996:	605a      	str	r2, [r3, #4]
 8000998:	609a      	str	r2, [r3, #8]
 800099a:	60da      	str	r2, [r3, #12]
 800099c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800099e:	4b55      	ldr	r3, [pc, #340]	; (8000af4 <MX_GPIO_Init+0x16c>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	4a54      	ldr	r2, [pc, #336]	; (8000af4 <MX_GPIO_Init+0x16c>)
 80009a4:	f043 0304 	orr.w	r3, r3, #4
 80009a8:	6313      	str	r3, [r2, #48]	; 0x30
 80009aa:	4b52      	ldr	r3, [pc, #328]	; (8000af4 <MX_GPIO_Init+0x16c>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	f003 0304 	and.w	r3, r3, #4
 80009b2:	61bb      	str	r3, [r7, #24]
 80009b4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009b6:	4b4f      	ldr	r3, [pc, #316]	; (8000af4 <MX_GPIO_Init+0x16c>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	4a4e      	ldr	r2, [pc, #312]	; (8000af4 <MX_GPIO_Init+0x16c>)
 80009bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009c0:	6313      	str	r3, [r2, #48]	; 0x30
 80009c2:	4b4c      	ldr	r3, [pc, #304]	; (8000af4 <MX_GPIO_Init+0x16c>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009ca:	617b      	str	r3, [r7, #20]
 80009cc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ce:	4b49      	ldr	r3, [pc, #292]	; (8000af4 <MX_GPIO_Init+0x16c>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	4a48      	ldr	r2, [pc, #288]	; (8000af4 <MX_GPIO_Init+0x16c>)
 80009d4:	f043 0301 	orr.w	r3, r3, #1
 80009d8:	6313      	str	r3, [r2, #48]	; 0x30
 80009da:	4b46      	ldr	r3, [pc, #280]	; (8000af4 <MX_GPIO_Init+0x16c>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	f003 0301 	and.w	r3, r3, #1
 80009e2:	613b      	str	r3, [r7, #16]
 80009e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009e6:	4b43      	ldr	r3, [pc, #268]	; (8000af4 <MX_GPIO_Init+0x16c>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	4a42      	ldr	r2, [pc, #264]	; (8000af4 <MX_GPIO_Init+0x16c>)
 80009ec:	f043 0302 	orr.w	r3, r3, #2
 80009f0:	6313      	str	r3, [r2, #48]	; 0x30
 80009f2:	4b40      	ldr	r3, [pc, #256]	; (8000af4 <MX_GPIO_Init+0x16c>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	f003 0302 	and.w	r3, r3, #2
 80009fa:	60fb      	str	r3, [r7, #12]
 80009fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009fe:	4b3d      	ldr	r3, [pc, #244]	; (8000af4 <MX_GPIO_Init+0x16c>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	4a3c      	ldr	r2, [pc, #240]	; (8000af4 <MX_GPIO_Init+0x16c>)
 8000a04:	f043 0308 	orr.w	r3, r3, #8
 8000a08:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0a:	4b3a      	ldr	r3, [pc, #232]	; (8000af4 <MX_GPIO_Init+0x16c>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	f003 0308 	and.w	r3, r3, #8
 8000a12:	60bb      	str	r3, [r7, #8]
 8000a14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a16:	4b37      	ldr	r3, [pc, #220]	; (8000af4 <MX_GPIO_Init+0x16c>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	4a36      	ldr	r2, [pc, #216]	; (8000af4 <MX_GPIO_Init+0x16c>)
 8000a1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a20:	6313      	str	r3, [r2, #48]	; 0x30
 8000a22:	4b34      	ldr	r3, [pc, #208]	; (8000af4 <MX_GPIO_Init+0x16c>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a2a:	607b      	str	r3, [r7, #4]
 8000a2c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a2e:	2200      	movs	r2, #0
 8000a30:	f244 0181 	movw	r1, #16513	; 0x4081
 8000a34:	4830      	ldr	r0, [pc, #192]	; (8000af8 <MX_GPIO_Init+0x170>)
 8000a36:	f000 fd7b 	bl	8001530 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	2140      	movs	r1, #64	; 0x40
 8000a3e:	482f      	ldr	r0, [pc, #188]	; (8000afc <MX_GPIO_Init+0x174>)
 8000a40:	f000 fd76 	bl	8001530 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000a44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a4a:	4b2d      	ldr	r3, [pc, #180]	; (8000b00 <MX_GPIO_Init+0x178>)
 8000a4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000a52:	f107 031c 	add.w	r3, r7, #28
 8000a56:	4619      	mov	r1, r3
 8000a58:	482a      	ldr	r0, [pc, #168]	; (8000b04 <MX_GPIO_Init+0x17c>)
 8000a5a:	f000 fbbd 	bl	80011d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000a5e:	f244 0381 	movw	r3, #16513	; 0x4081
 8000a62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a64:	2301      	movs	r3, #1
 8000a66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a70:	f107 031c 	add.w	r3, r7, #28
 8000a74:	4619      	mov	r1, r3
 8000a76:	4820      	ldr	r0, [pc, #128]	; (8000af8 <MX_GPIO_Init+0x170>)
 8000a78:	f000 fbae 	bl	80011d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a7c:	2340      	movs	r3, #64	; 0x40
 8000a7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a80:	2301      	movs	r3, #1
 8000a82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a84:	2300      	movs	r3, #0
 8000a86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a8c:	f107 031c 	add.w	r3, r7, #28
 8000a90:	4619      	mov	r1, r3
 8000a92:	481a      	ldr	r0, [pc, #104]	; (8000afc <MX_GPIO_Init+0x174>)
 8000a94:	f000 fba0 	bl	80011d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a98:	2380      	movs	r3, #128	; 0x80
 8000a9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000aa4:	f107 031c 	add.w	r3, r7, #28
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4814      	ldr	r0, [pc, #80]	; (8000afc <MX_GPIO_Init+0x174>)
 8000aac:	f000 fb94 	bl	80011d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000ab0:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000ab4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aba:	2300      	movs	r3, #0
 8000abc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000abe:	2303      	movs	r3, #3
 8000ac0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000ac2:	230a      	movs	r3, #10
 8000ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac6:	f107 031c 	add.w	r3, r7, #28
 8000aca:	4619      	mov	r1, r3
 8000acc:	480e      	ldr	r0, [pc, #56]	; (8000b08 <MX_GPIO_Init+0x180>)
 8000ace:	f000 fb83 	bl	80011d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000ad2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ad6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000adc:	2300      	movs	r3, #0
 8000ade:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000ae0:	f107 031c 	add.w	r3, r7, #28
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4808      	ldr	r0, [pc, #32]	; (8000b08 <MX_GPIO_Init+0x180>)
 8000ae8:	f000 fb76 	bl	80011d8 <HAL_GPIO_Init>

}
 8000aec:	bf00      	nop
 8000aee:	3730      	adds	r7, #48	; 0x30
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	40023800 	.word	0x40023800
 8000af8:	40020400 	.word	0x40020400
 8000afc:	40021800 	.word	0x40021800
 8000b00:	10110000 	.word	0x10110000
 8000b04:	40020800 	.word	0x40020800
 8000b08:	40020000 	.word	0x40020000

08000b0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b10:	b672      	cpsid	i
}
 8000b12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b14:	e7fe      	b.n	8000b14 <Error_Handler+0x8>
	...

08000b18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b083      	sub	sp, #12
 8000b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b1e:	4b0f      	ldr	r3, [pc, #60]	; (8000b5c <HAL_MspInit+0x44>)
 8000b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b22:	4a0e      	ldr	r2, [pc, #56]	; (8000b5c <HAL_MspInit+0x44>)
 8000b24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b28:	6413      	str	r3, [r2, #64]	; 0x40
 8000b2a:	4b0c      	ldr	r3, [pc, #48]	; (8000b5c <HAL_MspInit+0x44>)
 8000b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b32:	607b      	str	r3, [r7, #4]
 8000b34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b36:	4b09      	ldr	r3, [pc, #36]	; (8000b5c <HAL_MspInit+0x44>)
 8000b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b3a:	4a08      	ldr	r2, [pc, #32]	; (8000b5c <HAL_MspInit+0x44>)
 8000b3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b40:	6453      	str	r3, [r2, #68]	; 0x44
 8000b42:	4b06      	ldr	r3, [pc, #24]	; (8000b5c <HAL_MspInit+0x44>)
 8000b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b4a:	603b      	str	r3, [r7, #0]
 8000b4c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b4e:	bf00      	nop
 8000b50:	370c      	adds	r7, #12
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	40023800 	.word	0x40023800

08000b60 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b08c      	sub	sp, #48	; 0x30
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b68:	f107 031c 	add.w	r3, r7, #28
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	605a      	str	r2, [r3, #4]
 8000b72:	609a      	str	r2, [r3, #8]
 8000b74:	60da      	str	r2, [r3, #12]
 8000b76:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a37      	ldr	r2, [pc, #220]	; (8000c5c <HAL_I2C_MspInit+0xfc>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d131      	bne.n	8000be6 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b82:	4b37      	ldr	r3, [pc, #220]	; (8000c60 <HAL_I2C_MspInit+0x100>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	4a36      	ldr	r2, [pc, #216]	; (8000c60 <HAL_I2C_MspInit+0x100>)
 8000b88:	f043 0302 	orr.w	r3, r3, #2
 8000b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8e:	4b34      	ldr	r3, [pc, #208]	; (8000c60 <HAL_I2C_MspInit+0x100>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	f003 0302 	and.w	r3, r3, #2
 8000b96:	61bb      	str	r3, [r7, #24]
 8000b98:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8000b9a:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000b9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ba0:	2312      	movs	r3, #18
 8000ba2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ba8:	2303      	movs	r3, #3
 8000baa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bac:	2304      	movs	r3, #4
 8000bae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bb0:	f107 031c 	add.w	r3, r7, #28
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	482b      	ldr	r0, [pc, #172]	; (8000c64 <HAL_I2C_MspInit+0x104>)
 8000bb8:	f000 fb0e 	bl	80011d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bbc:	4b28      	ldr	r3, [pc, #160]	; (8000c60 <HAL_I2C_MspInit+0x100>)
 8000bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc0:	4a27      	ldr	r2, [pc, #156]	; (8000c60 <HAL_I2C_MspInit+0x100>)
 8000bc2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bc6:	6413      	str	r3, [r2, #64]	; 0x40
 8000bc8:	4b25      	ldr	r3, [pc, #148]	; (8000c60 <HAL_I2C_MspInit+0x100>)
 8000bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bd0:	617b      	str	r3, [r7, #20]
 8000bd2:	697b      	ldr	r3, [r7, #20]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	201f      	movs	r0, #31
 8000bda:	f000 fa96 	bl	800110a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000bde:	201f      	movs	r0, #31
 8000be0:	f000 faaf 	bl	8001142 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000be4:	e035      	b.n	8000c52 <HAL_I2C_MspInit+0xf2>
  else if(hi2c->Instance==I2C2)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4a1f      	ldr	r2, [pc, #124]	; (8000c68 <HAL_I2C_MspInit+0x108>)
 8000bec:	4293      	cmp	r3, r2
 8000bee:	d130      	bne.n	8000c52 <HAL_I2C_MspInit+0xf2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bf0:	4b1b      	ldr	r3, [pc, #108]	; (8000c60 <HAL_I2C_MspInit+0x100>)
 8000bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf4:	4a1a      	ldr	r2, [pc, #104]	; (8000c60 <HAL_I2C_MspInit+0x100>)
 8000bf6:	f043 0302 	orr.w	r3, r3, #2
 8000bfa:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfc:	4b18      	ldr	r3, [pc, #96]	; (8000c60 <HAL_I2C_MspInit+0x100>)
 8000bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c00:	f003 0302 	and.w	r3, r3, #2
 8000c04:	613b      	str	r3, [r7, #16]
 8000c06:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000c08:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000c0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c0e:	2312      	movs	r3, #18
 8000c10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c12:	2301      	movs	r3, #1
 8000c14:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c16:	2303      	movs	r3, #3
 8000c18:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000c1a:	2304      	movs	r3, #4
 8000c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c1e:	f107 031c 	add.w	r3, r7, #28
 8000c22:	4619      	mov	r1, r3
 8000c24:	480f      	ldr	r0, [pc, #60]	; (8000c64 <HAL_I2C_MspInit+0x104>)
 8000c26:	f000 fad7 	bl	80011d8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000c2a:	4b0d      	ldr	r3, [pc, #52]	; (8000c60 <HAL_I2C_MspInit+0x100>)
 8000c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2e:	4a0c      	ldr	r2, [pc, #48]	; (8000c60 <HAL_I2C_MspInit+0x100>)
 8000c30:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c34:	6413      	str	r3, [r2, #64]	; 0x40
 8000c36:	4b0a      	ldr	r3, [pc, #40]	; (8000c60 <HAL_I2C_MspInit+0x100>)
 8000c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8000c42:	2200      	movs	r2, #0
 8000c44:	2100      	movs	r1, #0
 8000c46:	2021      	movs	r0, #33	; 0x21
 8000c48:	f000 fa5f 	bl	800110a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8000c4c:	2021      	movs	r0, #33	; 0x21
 8000c4e:	f000 fa78 	bl	8001142 <HAL_NVIC_EnableIRQ>
}
 8000c52:	bf00      	nop
 8000c54:	3730      	adds	r7, #48	; 0x30
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	40005400 	.word	0x40005400
 8000c60:	40023800 	.word	0x40023800
 8000c64:	40020400 	.word	0x40020400
 8000c68:	40005800 	.word	0x40005800

08000c6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b08a      	sub	sp, #40	; 0x28
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c74:	f107 0314 	add.w	r3, r7, #20
 8000c78:	2200      	movs	r2, #0
 8000c7a:	601a      	str	r2, [r3, #0]
 8000c7c:	605a      	str	r2, [r3, #4]
 8000c7e:	609a      	str	r2, [r3, #8]
 8000c80:	60da      	str	r2, [r3, #12]
 8000c82:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a17      	ldr	r2, [pc, #92]	; (8000ce8 <HAL_UART_MspInit+0x7c>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d128      	bne.n	8000ce0 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c8e:	4b17      	ldr	r3, [pc, #92]	; (8000cec <HAL_UART_MspInit+0x80>)
 8000c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c92:	4a16      	ldr	r2, [pc, #88]	; (8000cec <HAL_UART_MspInit+0x80>)
 8000c94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c98:	6413      	str	r3, [r2, #64]	; 0x40
 8000c9a:	4b14      	ldr	r3, [pc, #80]	; (8000cec <HAL_UART_MspInit+0x80>)
 8000c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ca2:	613b      	str	r3, [r7, #16]
 8000ca4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ca6:	4b11      	ldr	r3, [pc, #68]	; (8000cec <HAL_UART_MspInit+0x80>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	4a10      	ldr	r2, [pc, #64]	; (8000cec <HAL_UART_MspInit+0x80>)
 8000cac:	f043 0308 	orr.w	r3, r3, #8
 8000cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb2:	4b0e      	ldr	r3, [pc, #56]	; (8000cec <HAL_UART_MspInit+0x80>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	f003 0308 	and.w	r3, r3, #8
 8000cba:	60fb      	str	r3, [r7, #12]
 8000cbc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000cbe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000cc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ccc:	2303      	movs	r3, #3
 8000cce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000cd0:	2307      	movs	r3, #7
 8000cd2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cd4:	f107 0314 	add.w	r3, r7, #20
 8000cd8:	4619      	mov	r1, r3
 8000cda:	4805      	ldr	r0, [pc, #20]	; (8000cf0 <HAL_UART_MspInit+0x84>)
 8000cdc:	f000 fa7c 	bl	80011d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000ce0:	bf00      	nop
 8000ce2:	3728      	adds	r7, #40	; 0x28
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	40004800 	.word	0x40004800
 8000cec:	40023800 	.word	0x40023800
 8000cf0:	40020c00 	.word	0x40020c00

08000cf4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cf8:	e7fe      	b.n	8000cf8 <NMI_Handler+0x4>

08000cfa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cfe:	e7fe      	b.n	8000cfe <HardFault_Handler+0x4>

08000d00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d04:	e7fe      	b.n	8000d04 <MemManage_Handler+0x4>

08000d06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d06:	b480      	push	{r7}
 8000d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d0a:	e7fe      	b.n	8000d0a <BusFault_Handler+0x4>

08000d0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d10:	e7fe      	b.n	8000d10 <UsageFault_Handler+0x4>

08000d12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d12:	b480      	push	{r7}
 8000d14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d16:	bf00      	nop
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr

08000d20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d24:	bf00      	nop
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr

08000d2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d2e:	b480      	push	{r7}
 8000d30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d32:	bf00      	nop
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr

08000d3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d40:	f000 f8c4 	bl	8000ecc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d44:	bf00      	nop
 8000d46:	bd80      	pop	{r7, pc}

08000d48 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000d4c:	4802      	ldr	r0, [pc, #8]	; (8000d58 <I2C1_EV_IRQHandler+0x10>)
 8000d4e:	f000 fdf7 	bl	8001940 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000d52:	bf00      	nop
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	2000011c 	.word	0x2000011c

08000d5c <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8000d60:	4802      	ldr	r0, [pc, #8]	; (8000d6c <I2C2_EV_IRQHandler+0x10>)
 8000d62:	f000 fded 	bl	8001940 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8000d66:	bf00      	nop
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	20000168 	.word	0x20000168

08000d70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b086      	sub	sp, #24
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d78:	4a14      	ldr	r2, [pc, #80]	; (8000dcc <_sbrk+0x5c>)
 8000d7a:	4b15      	ldr	r3, [pc, #84]	; (8000dd0 <_sbrk+0x60>)
 8000d7c:	1ad3      	subs	r3, r2, r3
 8000d7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d84:	4b13      	ldr	r3, [pc, #76]	; (8000dd4 <_sbrk+0x64>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d102      	bne.n	8000d92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d8c:	4b11      	ldr	r3, [pc, #68]	; (8000dd4 <_sbrk+0x64>)
 8000d8e:	4a12      	ldr	r2, [pc, #72]	; (8000dd8 <_sbrk+0x68>)
 8000d90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d92:	4b10      	ldr	r3, [pc, #64]	; (8000dd4 <_sbrk+0x64>)
 8000d94:	681a      	ldr	r2, [r3, #0]
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	4413      	add	r3, r2
 8000d9a:	693a      	ldr	r2, [r7, #16]
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	d207      	bcs.n	8000db0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000da0:	f003 fd7c 	bl	800489c <__errno>
 8000da4:	4603      	mov	r3, r0
 8000da6:	220c      	movs	r2, #12
 8000da8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000daa:	f04f 33ff 	mov.w	r3, #4294967295
 8000dae:	e009      	b.n	8000dc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000db0:	4b08      	ldr	r3, [pc, #32]	; (8000dd4 <_sbrk+0x64>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000db6:	4b07      	ldr	r3, [pc, #28]	; (8000dd4 <_sbrk+0x64>)
 8000db8:	681a      	ldr	r2, [r3, #0]
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	4413      	add	r3, r2
 8000dbe:	4a05      	ldr	r2, [pc, #20]	; (8000dd4 <_sbrk+0x64>)
 8000dc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dc2:	68fb      	ldr	r3, [r7, #12]
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	3718      	adds	r7, #24
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	20050000 	.word	0x20050000
 8000dd0:	00000400 	.word	0x00000400
 8000dd4:	2000008c 	.word	0x2000008c
 8000dd8:	20000228 	.word	0x20000228

08000ddc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000de0:	4b06      	ldr	r3, [pc, #24]	; (8000dfc <SystemInit+0x20>)
 8000de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000de6:	4a05      	ldr	r2, [pc, #20]	; (8000dfc <SystemInit+0x20>)
 8000de8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000df0:	bf00      	nop
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	e000ed00 	.word	0xe000ed00

08000e00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e38 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e04:	480d      	ldr	r0, [pc, #52]	; (8000e3c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e06:	490e      	ldr	r1, [pc, #56]	; (8000e40 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e08:	4a0e      	ldr	r2, [pc, #56]	; (8000e44 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e0c:	e002      	b.n	8000e14 <LoopCopyDataInit>

08000e0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e12:	3304      	adds	r3, #4

08000e14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e18:	d3f9      	bcc.n	8000e0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e1a:	4a0b      	ldr	r2, [pc, #44]	; (8000e48 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e1c:	4c0b      	ldr	r4, [pc, #44]	; (8000e4c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e20:	e001      	b.n	8000e26 <LoopFillZerobss>

08000e22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e24:	3204      	adds	r2, #4

08000e26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e28:	d3fb      	bcc.n	8000e22 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e2a:	f7ff ffd7 	bl	8000ddc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e2e:	f003 fd3b 	bl	80048a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e32:	f7ff fbdd 	bl	80005f0 <main>
  bx  lr    
 8000e36:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e38:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000e3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e40:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000e44:	080051f8 	.word	0x080051f8
  ldr r2, =_sbss
 8000e48:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000e4c:	20000224 	.word	0x20000224

08000e50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e50:	e7fe      	b.n	8000e50 <ADC_IRQHandler>

08000e52 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e52:	b580      	push	{r7, lr}
 8000e54:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e56:	2003      	movs	r0, #3
 8000e58:	f000 f94c 	bl	80010f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e5c:	2000      	movs	r0, #0
 8000e5e:	f000 f805 	bl	8000e6c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000e62:	f7ff fe59 	bl	8000b18 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000e66:	2300      	movs	r3, #0
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	bd80      	pop	{r7, pc}

08000e6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e74:	4b12      	ldr	r3, [pc, #72]	; (8000ec0 <HAL_InitTick+0x54>)
 8000e76:	681a      	ldr	r2, [r3, #0]
 8000e78:	4b12      	ldr	r3, [pc, #72]	; (8000ec4 <HAL_InitTick+0x58>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e82:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e86:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f000 f967 	bl	800115e <HAL_SYSTICK_Config>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e96:	2301      	movs	r3, #1
 8000e98:	e00e      	b.n	8000eb8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	2b0f      	cmp	r3, #15
 8000e9e:	d80a      	bhi.n	8000eb6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	6879      	ldr	r1, [r7, #4]
 8000ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ea8:	f000 f92f 	bl	800110a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000eac:	4a06      	ldr	r2, [pc, #24]	; (8000ec8 <HAL_InitTick+0x5c>)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	e000      	b.n	8000eb8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000eb6:	2301      	movs	r3, #1
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	3708      	adds	r7, #8
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	20000000 	.word	0x20000000
 8000ec4:	20000008 	.word	0x20000008
 8000ec8:	20000004 	.word	0x20000004

08000ecc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ed0:	4b06      	ldr	r3, [pc, #24]	; (8000eec <HAL_IncTick+0x20>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	461a      	mov	r2, r3
 8000ed6:	4b06      	ldr	r3, [pc, #24]	; (8000ef0 <HAL_IncTick+0x24>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4413      	add	r3, r2
 8000edc:	4a04      	ldr	r2, [pc, #16]	; (8000ef0 <HAL_IncTick+0x24>)
 8000ede:	6013      	str	r3, [r2, #0]
}
 8000ee0:	bf00      	nop
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	20000008 	.word	0x20000008
 8000ef0:	20000210 	.word	0x20000210

08000ef4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ef8:	4b03      	ldr	r3, [pc, #12]	; (8000f08 <HAL_GetTick+0x14>)
 8000efa:	681b      	ldr	r3, [r3, #0]
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	20000210 	.word	0x20000210

08000f0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b084      	sub	sp, #16
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f14:	f7ff ffee 	bl	8000ef4 <HAL_GetTick>
 8000f18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f24:	d005      	beq.n	8000f32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f26:	4b0a      	ldr	r3, [pc, #40]	; (8000f50 <HAL_Delay+0x44>)
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	461a      	mov	r2, r3
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	4413      	add	r3, r2
 8000f30:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f32:	bf00      	nop
 8000f34:	f7ff ffde 	bl	8000ef4 <HAL_GetTick>
 8000f38:	4602      	mov	r2, r0
 8000f3a:	68bb      	ldr	r3, [r7, #8]
 8000f3c:	1ad3      	subs	r3, r2, r3
 8000f3e:	68fa      	ldr	r2, [r7, #12]
 8000f40:	429a      	cmp	r2, r3
 8000f42:	d8f7      	bhi.n	8000f34 <HAL_Delay+0x28>
  {
  }
}
 8000f44:	bf00      	nop
 8000f46:	bf00      	nop
 8000f48:	3710      	adds	r7, #16
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	20000008 	.word	0x20000008

08000f54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b085      	sub	sp, #20
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	f003 0307 	and.w	r3, r3, #7
 8000f62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f64:	4b0b      	ldr	r3, [pc, #44]	; (8000f94 <__NVIC_SetPriorityGrouping+0x40>)
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f6a:	68ba      	ldr	r2, [r7, #8]
 8000f6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f70:	4013      	ands	r3, r2
 8000f72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000f7c:	4b06      	ldr	r3, [pc, #24]	; (8000f98 <__NVIC_SetPriorityGrouping+0x44>)
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f82:	4a04      	ldr	r2, [pc, #16]	; (8000f94 <__NVIC_SetPriorityGrouping+0x40>)
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	60d3      	str	r3, [r2, #12]
}
 8000f88:	bf00      	nop
 8000f8a:	3714      	adds	r7, #20
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr
 8000f94:	e000ed00 	.word	0xe000ed00
 8000f98:	05fa0000 	.word	0x05fa0000

08000f9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fa0:	4b04      	ldr	r3, [pc, #16]	; (8000fb4 <__NVIC_GetPriorityGrouping+0x18>)
 8000fa2:	68db      	ldr	r3, [r3, #12]
 8000fa4:	0a1b      	lsrs	r3, r3, #8
 8000fa6:	f003 0307 	and.w	r3, r3, #7
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr
 8000fb4:	e000ed00 	.word	0xe000ed00

08000fb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	db0b      	blt.n	8000fe2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fca:	79fb      	ldrb	r3, [r7, #7]
 8000fcc:	f003 021f 	and.w	r2, r3, #31
 8000fd0:	4907      	ldr	r1, [pc, #28]	; (8000ff0 <__NVIC_EnableIRQ+0x38>)
 8000fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd6:	095b      	lsrs	r3, r3, #5
 8000fd8:	2001      	movs	r0, #1
 8000fda:	fa00 f202 	lsl.w	r2, r0, r2
 8000fde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fe2:	bf00      	nop
 8000fe4:	370c      	adds	r7, #12
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	e000e100 	.word	0xe000e100

08000ff4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	6039      	str	r1, [r7, #0]
 8000ffe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001000:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001004:	2b00      	cmp	r3, #0
 8001006:	db0a      	blt.n	800101e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	b2da      	uxtb	r2, r3
 800100c:	490c      	ldr	r1, [pc, #48]	; (8001040 <__NVIC_SetPriority+0x4c>)
 800100e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001012:	0112      	lsls	r2, r2, #4
 8001014:	b2d2      	uxtb	r2, r2
 8001016:	440b      	add	r3, r1
 8001018:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800101c:	e00a      	b.n	8001034 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	b2da      	uxtb	r2, r3
 8001022:	4908      	ldr	r1, [pc, #32]	; (8001044 <__NVIC_SetPriority+0x50>)
 8001024:	79fb      	ldrb	r3, [r7, #7]
 8001026:	f003 030f 	and.w	r3, r3, #15
 800102a:	3b04      	subs	r3, #4
 800102c:	0112      	lsls	r2, r2, #4
 800102e:	b2d2      	uxtb	r2, r2
 8001030:	440b      	add	r3, r1
 8001032:	761a      	strb	r2, [r3, #24]
}
 8001034:	bf00      	nop
 8001036:	370c      	adds	r7, #12
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr
 8001040:	e000e100 	.word	0xe000e100
 8001044:	e000ed00 	.word	0xe000ed00

08001048 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001048:	b480      	push	{r7}
 800104a:	b089      	sub	sp, #36	; 0x24
 800104c:	af00      	add	r7, sp, #0
 800104e:	60f8      	str	r0, [r7, #12]
 8001050:	60b9      	str	r1, [r7, #8]
 8001052:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	f003 0307 	and.w	r3, r3, #7
 800105a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	f1c3 0307 	rsb	r3, r3, #7
 8001062:	2b04      	cmp	r3, #4
 8001064:	bf28      	it	cs
 8001066:	2304      	movcs	r3, #4
 8001068:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	3304      	adds	r3, #4
 800106e:	2b06      	cmp	r3, #6
 8001070:	d902      	bls.n	8001078 <NVIC_EncodePriority+0x30>
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	3b03      	subs	r3, #3
 8001076:	e000      	b.n	800107a <NVIC_EncodePriority+0x32>
 8001078:	2300      	movs	r3, #0
 800107a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800107c:	f04f 32ff 	mov.w	r2, #4294967295
 8001080:	69bb      	ldr	r3, [r7, #24]
 8001082:	fa02 f303 	lsl.w	r3, r2, r3
 8001086:	43da      	mvns	r2, r3
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	401a      	ands	r2, r3
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001090:	f04f 31ff 	mov.w	r1, #4294967295
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	fa01 f303 	lsl.w	r3, r1, r3
 800109a:	43d9      	mvns	r1, r3
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a0:	4313      	orrs	r3, r2
         );
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3724      	adds	r7, #36	; 0x24
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
	...

080010b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	3b01      	subs	r3, #1
 80010bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010c0:	d301      	bcc.n	80010c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010c2:	2301      	movs	r3, #1
 80010c4:	e00f      	b.n	80010e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010c6:	4a0a      	ldr	r2, [pc, #40]	; (80010f0 <SysTick_Config+0x40>)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	3b01      	subs	r3, #1
 80010cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010ce:	210f      	movs	r1, #15
 80010d0:	f04f 30ff 	mov.w	r0, #4294967295
 80010d4:	f7ff ff8e 	bl	8000ff4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010d8:	4b05      	ldr	r3, [pc, #20]	; (80010f0 <SysTick_Config+0x40>)
 80010da:	2200      	movs	r2, #0
 80010dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010de:	4b04      	ldr	r3, [pc, #16]	; (80010f0 <SysTick_Config+0x40>)
 80010e0:	2207      	movs	r2, #7
 80010e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010e4:	2300      	movs	r3, #0
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	e000e010 	.word	0xe000e010

080010f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010fc:	6878      	ldr	r0, [r7, #4]
 80010fe:	f7ff ff29 	bl	8000f54 <__NVIC_SetPriorityGrouping>
}
 8001102:	bf00      	nop
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}

0800110a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800110a:	b580      	push	{r7, lr}
 800110c:	b086      	sub	sp, #24
 800110e:	af00      	add	r7, sp, #0
 8001110:	4603      	mov	r3, r0
 8001112:	60b9      	str	r1, [r7, #8]
 8001114:	607a      	str	r2, [r7, #4]
 8001116:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001118:	2300      	movs	r3, #0
 800111a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800111c:	f7ff ff3e 	bl	8000f9c <__NVIC_GetPriorityGrouping>
 8001120:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001122:	687a      	ldr	r2, [r7, #4]
 8001124:	68b9      	ldr	r1, [r7, #8]
 8001126:	6978      	ldr	r0, [r7, #20]
 8001128:	f7ff ff8e 	bl	8001048 <NVIC_EncodePriority>
 800112c:	4602      	mov	r2, r0
 800112e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001132:	4611      	mov	r1, r2
 8001134:	4618      	mov	r0, r3
 8001136:	f7ff ff5d 	bl	8000ff4 <__NVIC_SetPriority>
}
 800113a:	bf00      	nop
 800113c:	3718      	adds	r7, #24
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}

08001142 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001142:	b580      	push	{r7, lr}
 8001144:	b082      	sub	sp, #8
 8001146:	af00      	add	r7, sp, #0
 8001148:	4603      	mov	r3, r0
 800114a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800114c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff ff31 	bl	8000fb8 <__NVIC_EnableIRQ>
}
 8001156:	bf00      	nop
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}

0800115e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800115e:	b580      	push	{r7, lr}
 8001160:	b082      	sub	sp, #8
 8001162:	af00      	add	r7, sp, #0
 8001164:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001166:	6878      	ldr	r0, [r7, #4]
 8001168:	f7ff ffa2 	bl	80010b0 <SysTick_Config>
 800116c:	4603      	mov	r3, r0
}
 800116e:	4618      	mov	r0, r3
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}

08001176 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001176:	b480      	push	{r7}
 8001178:	b083      	sub	sp, #12
 800117a:	af00      	add	r7, sp, #0
 800117c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001184:	b2db      	uxtb	r3, r3
 8001186:	2b02      	cmp	r3, #2
 8001188:	d004      	beq.n	8001194 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2280      	movs	r2, #128	; 0x80
 800118e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001190:	2301      	movs	r3, #1
 8001192:	e00c      	b.n	80011ae <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2205      	movs	r2, #5
 8001198:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f022 0201 	bic.w	r2, r2, #1
 80011aa:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80011ac:	2300      	movs	r3, #0
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	370c      	adds	r7, #12
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr

080011ba <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80011ba:	b480      	push	{r7}
 80011bc:	b083      	sub	sp, #12
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80011c8:	b2db      	uxtb	r3, r3
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	370c      	adds	r7, #12
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
	...

080011d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011d8:	b480      	push	{r7}
 80011da:	b089      	sub	sp, #36	; 0x24
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80011e2:	2300      	movs	r3, #0
 80011e4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80011e6:	2300      	movs	r3, #0
 80011e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80011ea:	2300      	movs	r3, #0
 80011ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80011ee:	2300      	movs	r3, #0
 80011f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80011f2:	2300      	movs	r3, #0
 80011f4:	61fb      	str	r3, [r7, #28]
 80011f6:	e175      	b.n	80014e4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80011f8:	2201      	movs	r2, #1
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	697a      	ldr	r2, [r7, #20]
 8001208:	4013      	ands	r3, r2
 800120a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800120c:	693a      	ldr	r2, [r7, #16]
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	429a      	cmp	r2, r3
 8001212:	f040 8164 	bne.w	80014de <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	2b01      	cmp	r3, #1
 800121c:	d00b      	beq.n	8001236 <HAL_GPIO_Init+0x5e>
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	2b02      	cmp	r3, #2
 8001224:	d007      	beq.n	8001236 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800122a:	2b11      	cmp	r3, #17
 800122c:	d003      	beq.n	8001236 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	2b12      	cmp	r3, #18
 8001234:	d130      	bne.n	8001298 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	689b      	ldr	r3, [r3, #8]
 800123a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800123c:	69fb      	ldr	r3, [r7, #28]
 800123e:	005b      	lsls	r3, r3, #1
 8001240:	2203      	movs	r2, #3
 8001242:	fa02 f303 	lsl.w	r3, r2, r3
 8001246:	43db      	mvns	r3, r3
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	4013      	ands	r3, r2
 800124c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	68da      	ldr	r2, [r3, #12]
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	fa02 f303 	lsl.w	r3, r2, r3
 800125a:	69ba      	ldr	r2, [r7, #24]
 800125c:	4313      	orrs	r3, r2
 800125e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	69ba      	ldr	r2, [r7, #24]
 8001264:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800126c:	2201      	movs	r2, #1
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	fa02 f303 	lsl.w	r3, r2, r3
 8001274:	43db      	mvns	r3, r3
 8001276:	69ba      	ldr	r2, [r7, #24]
 8001278:	4013      	ands	r3, r2
 800127a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	091b      	lsrs	r3, r3, #4
 8001282:	f003 0201 	and.w	r2, r3, #1
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	fa02 f303 	lsl.w	r3, r2, r3
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	4313      	orrs	r3, r2
 8001290:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	005b      	lsls	r3, r3, #1
 80012a2:	2203      	movs	r2, #3
 80012a4:	fa02 f303 	lsl.w	r3, r2, r3
 80012a8:	43db      	mvns	r3, r3
 80012aa:	69ba      	ldr	r2, [r7, #24]
 80012ac:	4013      	ands	r3, r2
 80012ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	689a      	ldr	r2, [r3, #8]
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	005b      	lsls	r3, r3, #1
 80012b8:	fa02 f303 	lsl.w	r3, r2, r3
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	4313      	orrs	r3, r2
 80012c0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	69ba      	ldr	r2, [r7, #24]
 80012c6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	2b02      	cmp	r3, #2
 80012ce:	d003      	beq.n	80012d8 <HAL_GPIO_Init+0x100>
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	2b12      	cmp	r3, #18
 80012d6:	d123      	bne.n	8001320 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80012d8:	69fb      	ldr	r3, [r7, #28]
 80012da:	08da      	lsrs	r2, r3, #3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	3208      	adds	r2, #8
 80012e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	f003 0307 	and.w	r3, r3, #7
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	220f      	movs	r2, #15
 80012f0:	fa02 f303 	lsl.w	r3, r2, r3
 80012f4:	43db      	mvns	r3, r3
 80012f6:	69ba      	ldr	r2, [r7, #24]
 80012f8:	4013      	ands	r3, r2
 80012fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	691a      	ldr	r2, [r3, #16]
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	f003 0307 	and.w	r3, r3, #7
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	fa02 f303 	lsl.w	r3, r2, r3
 800130c:	69ba      	ldr	r2, [r7, #24]
 800130e:	4313      	orrs	r3, r2
 8001310:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	08da      	lsrs	r2, r3, #3
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	3208      	adds	r2, #8
 800131a:	69b9      	ldr	r1, [r7, #24]
 800131c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	005b      	lsls	r3, r3, #1
 800132a:	2203      	movs	r2, #3
 800132c:	fa02 f303 	lsl.w	r3, r2, r3
 8001330:	43db      	mvns	r3, r3
 8001332:	69ba      	ldr	r2, [r7, #24]
 8001334:	4013      	ands	r3, r2
 8001336:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f003 0203 	and.w	r2, r3, #3
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	005b      	lsls	r3, r3, #1
 8001344:	fa02 f303 	lsl.w	r3, r2, r3
 8001348:	69ba      	ldr	r2, [r7, #24]
 800134a:	4313      	orrs	r3, r2
 800134c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800135c:	2b00      	cmp	r3, #0
 800135e:	f000 80be 	beq.w	80014de <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001362:	4b66      	ldr	r3, [pc, #408]	; (80014fc <HAL_GPIO_Init+0x324>)
 8001364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001366:	4a65      	ldr	r2, [pc, #404]	; (80014fc <HAL_GPIO_Init+0x324>)
 8001368:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800136c:	6453      	str	r3, [r2, #68]	; 0x44
 800136e:	4b63      	ldr	r3, [pc, #396]	; (80014fc <HAL_GPIO_Init+0x324>)
 8001370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001372:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001376:	60fb      	str	r3, [r7, #12]
 8001378:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800137a:	4a61      	ldr	r2, [pc, #388]	; (8001500 <HAL_GPIO_Init+0x328>)
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	089b      	lsrs	r3, r3, #2
 8001380:	3302      	adds	r3, #2
 8001382:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001386:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	f003 0303 	and.w	r3, r3, #3
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	220f      	movs	r2, #15
 8001392:	fa02 f303 	lsl.w	r3, r2, r3
 8001396:	43db      	mvns	r3, r3
 8001398:	69ba      	ldr	r2, [r7, #24]
 800139a:	4013      	ands	r3, r2
 800139c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4a58      	ldr	r2, [pc, #352]	; (8001504 <HAL_GPIO_Init+0x32c>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d037      	beq.n	8001416 <HAL_GPIO_Init+0x23e>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4a57      	ldr	r2, [pc, #348]	; (8001508 <HAL_GPIO_Init+0x330>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d031      	beq.n	8001412 <HAL_GPIO_Init+0x23a>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4a56      	ldr	r2, [pc, #344]	; (800150c <HAL_GPIO_Init+0x334>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d02b      	beq.n	800140e <HAL_GPIO_Init+0x236>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4a55      	ldr	r2, [pc, #340]	; (8001510 <HAL_GPIO_Init+0x338>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d025      	beq.n	800140a <HAL_GPIO_Init+0x232>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4a54      	ldr	r2, [pc, #336]	; (8001514 <HAL_GPIO_Init+0x33c>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d01f      	beq.n	8001406 <HAL_GPIO_Init+0x22e>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4a53      	ldr	r2, [pc, #332]	; (8001518 <HAL_GPIO_Init+0x340>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d019      	beq.n	8001402 <HAL_GPIO_Init+0x22a>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4a52      	ldr	r2, [pc, #328]	; (800151c <HAL_GPIO_Init+0x344>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d013      	beq.n	80013fe <HAL_GPIO_Init+0x226>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4a51      	ldr	r2, [pc, #324]	; (8001520 <HAL_GPIO_Init+0x348>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d00d      	beq.n	80013fa <HAL_GPIO_Init+0x222>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4a50      	ldr	r2, [pc, #320]	; (8001524 <HAL_GPIO_Init+0x34c>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d007      	beq.n	80013f6 <HAL_GPIO_Init+0x21e>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4a4f      	ldr	r2, [pc, #316]	; (8001528 <HAL_GPIO_Init+0x350>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d101      	bne.n	80013f2 <HAL_GPIO_Init+0x21a>
 80013ee:	2309      	movs	r3, #9
 80013f0:	e012      	b.n	8001418 <HAL_GPIO_Init+0x240>
 80013f2:	230a      	movs	r3, #10
 80013f4:	e010      	b.n	8001418 <HAL_GPIO_Init+0x240>
 80013f6:	2308      	movs	r3, #8
 80013f8:	e00e      	b.n	8001418 <HAL_GPIO_Init+0x240>
 80013fa:	2307      	movs	r3, #7
 80013fc:	e00c      	b.n	8001418 <HAL_GPIO_Init+0x240>
 80013fe:	2306      	movs	r3, #6
 8001400:	e00a      	b.n	8001418 <HAL_GPIO_Init+0x240>
 8001402:	2305      	movs	r3, #5
 8001404:	e008      	b.n	8001418 <HAL_GPIO_Init+0x240>
 8001406:	2304      	movs	r3, #4
 8001408:	e006      	b.n	8001418 <HAL_GPIO_Init+0x240>
 800140a:	2303      	movs	r3, #3
 800140c:	e004      	b.n	8001418 <HAL_GPIO_Init+0x240>
 800140e:	2302      	movs	r3, #2
 8001410:	e002      	b.n	8001418 <HAL_GPIO_Init+0x240>
 8001412:	2301      	movs	r3, #1
 8001414:	e000      	b.n	8001418 <HAL_GPIO_Init+0x240>
 8001416:	2300      	movs	r3, #0
 8001418:	69fa      	ldr	r2, [r7, #28]
 800141a:	f002 0203 	and.w	r2, r2, #3
 800141e:	0092      	lsls	r2, r2, #2
 8001420:	4093      	lsls	r3, r2
 8001422:	69ba      	ldr	r2, [r7, #24]
 8001424:	4313      	orrs	r3, r2
 8001426:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001428:	4935      	ldr	r1, [pc, #212]	; (8001500 <HAL_GPIO_Init+0x328>)
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	089b      	lsrs	r3, r3, #2
 800142e:	3302      	adds	r3, #2
 8001430:	69ba      	ldr	r2, [r7, #24]
 8001432:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001436:	4b3d      	ldr	r3, [pc, #244]	; (800152c <HAL_GPIO_Init+0x354>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	43db      	mvns	r3, r3
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	4013      	ands	r3, r2
 8001444:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800144e:	2b00      	cmp	r3, #0
 8001450:	d003      	beq.n	800145a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001452:	69ba      	ldr	r2, [r7, #24]
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	4313      	orrs	r3, r2
 8001458:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800145a:	4a34      	ldr	r2, [pc, #208]	; (800152c <HAL_GPIO_Init+0x354>)
 800145c:	69bb      	ldr	r3, [r7, #24]
 800145e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001460:	4b32      	ldr	r3, [pc, #200]	; (800152c <HAL_GPIO_Init+0x354>)
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	43db      	mvns	r3, r3
 800146a:	69ba      	ldr	r2, [r7, #24]
 800146c:	4013      	ands	r3, r2
 800146e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001478:	2b00      	cmp	r3, #0
 800147a:	d003      	beq.n	8001484 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	4313      	orrs	r3, r2
 8001482:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001484:	4a29      	ldr	r2, [pc, #164]	; (800152c <HAL_GPIO_Init+0x354>)
 8001486:	69bb      	ldr	r3, [r7, #24]
 8001488:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800148a:	4b28      	ldr	r3, [pc, #160]	; (800152c <HAL_GPIO_Init+0x354>)
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	43db      	mvns	r3, r3
 8001494:	69ba      	ldr	r2, [r7, #24]
 8001496:	4013      	ands	r3, r2
 8001498:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d003      	beq.n	80014ae <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80014a6:	69ba      	ldr	r2, [r7, #24]
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	4313      	orrs	r3, r2
 80014ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014ae:	4a1f      	ldr	r2, [pc, #124]	; (800152c <HAL_GPIO_Init+0x354>)
 80014b0:	69bb      	ldr	r3, [r7, #24]
 80014b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014b4:	4b1d      	ldr	r3, [pc, #116]	; (800152c <HAL_GPIO_Init+0x354>)
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	43db      	mvns	r3, r3
 80014be:	69ba      	ldr	r2, [r7, #24]
 80014c0:	4013      	ands	r3, r2
 80014c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d003      	beq.n	80014d8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80014d0:	69ba      	ldr	r2, [r7, #24]
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	4313      	orrs	r3, r2
 80014d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014d8:	4a14      	ldr	r2, [pc, #80]	; (800152c <HAL_GPIO_Init+0x354>)
 80014da:	69bb      	ldr	r3, [r7, #24]
 80014dc:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	3301      	adds	r3, #1
 80014e2:	61fb      	str	r3, [r7, #28]
 80014e4:	69fb      	ldr	r3, [r7, #28]
 80014e6:	2b0f      	cmp	r3, #15
 80014e8:	f67f ae86 	bls.w	80011f8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80014ec:	bf00      	nop
 80014ee:	bf00      	nop
 80014f0:	3724      	adds	r7, #36	; 0x24
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	40023800 	.word	0x40023800
 8001500:	40013800 	.word	0x40013800
 8001504:	40020000 	.word	0x40020000
 8001508:	40020400 	.word	0x40020400
 800150c:	40020800 	.word	0x40020800
 8001510:	40020c00 	.word	0x40020c00
 8001514:	40021000 	.word	0x40021000
 8001518:	40021400 	.word	0x40021400
 800151c:	40021800 	.word	0x40021800
 8001520:	40021c00 	.word	0x40021c00
 8001524:	40022000 	.word	0x40022000
 8001528:	40022400 	.word	0x40022400
 800152c:	40013c00 	.word	0x40013c00

08001530 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001530:	b480      	push	{r7}
 8001532:	b083      	sub	sp, #12
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	460b      	mov	r3, r1
 800153a:	807b      	strh	r3, [r7, #2]
 800153c:	4613      	mov	r3, r2
 800153e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001540:	787b      	ldrb	r3, [r7, #1]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d003      	beq.n	800154e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001546:	887a      	ldrh	r2, [r7, #2]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800154c:	e003      	b.n	8001556 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800154e:	887b      	ldrh	r3, [r7, #2]
 8001550:	041a      	lsls	r2, r3, #16
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	619a      	str	r2, [r3, #24]
}
 8001556:	bf00      	nop
 8001558:	370c      	adds	r7, #12
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr

08001562 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001562:	b480      	push	{r7}
 8001564:	b085      	sub	sp, #20
 8001566:	af00      	add	r7, sp, #0
 8001568:	6078      	str	r0, [r7, #4]
 800156a:	460b      	mov	r3, r1
 800156c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	695b      	ldr	r3, [r3, #20]
 8001572:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001574:	887a      	ldrh	r2, [r7, #2]
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	4013      	ands	r3, r2
 800157a:	041a      	lsls	r2, r3, #16
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	43d9      	mvns	r1, r3
 8001580:	887b      	ldrh	r3, [r7, #2]
 8001582:	400b      	ands	r3, r1
 8001584:	431a      	orrs	r2, r3
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	619a      	str	r2, [r3, #24]
}
 800158a:	bf00      	nop
 800158c:	3714      	adds	r7, #20
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
	...

08001598 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d101      	bne.n	80015aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e07f      	b.n	80016aa <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d106      	bne.n	80015c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2200      	movs	r2, #0
 80015ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80015be:	6878      	ldr	r0, [r7, #4]
 80015c0:	f7ff face 	bl	8000b60 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2224      	movs	r2, #36	; 0x24
 80015c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f022 0201 	bic.w	r2, r2, #1
 80015da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	685a      	ldr	r2, [r3, #4]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80015e8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	689a      	ldr	r2, [r3, #8]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80015f8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	68db      	ldr	r3, [r3, #12]
 80015fe:	2b01      	cmp	r3, #1
 8001600:	d107      	bne.n	8001612 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	689a      	ldr	r2, [r3, #8]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800160e:	609a      	str	r2, [r3, #8]
 8001610:	e006      	b.n	8001620 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	689a      	ldr	r2, [r3, #8]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800161e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	2b02      	cmp	r3, #2
 8001626:	d104      	bne.n	8001632 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001630:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	6859      	ldr	r1, [r3, #4]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	4b1d      	ldr	r3, [pc, #116]	; (80016b4 <HAL_I2C_Init+0x11c>)
 800163e:	430b      	orrs	r3, r1
 8001640:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	68da      	ldr	r2, [r3, #12]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001650:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	691a      	ldr	r2, [r3, #16]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	695b      	ldr	r3, [r3, #20]
 800165a:	ea42 0103 	orr.w	r1, r2, r3
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	699b      	ldr	r3, [r3, #24]
 8001662:	021a      	lsls	r2, r3, #8
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	430a      	orrs	r2, r1
 800166a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	69d9      	ldr	r1, [r3, #28]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6a1a      	ldr	r2, [r3, #32]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	430a      	orrs	r2, r1
 800167a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f042 0201 	orr.w	r2, r2, #1
 800168a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2200      	movs	r2, #0
 8001690:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2220      	movs	r2, #32
 8001696:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2200      	movs	r2, #0
 800169e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2200      	movs	r2, #0
 80016a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80016a8:	2300      	movs	r3, #0
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3708      	adds	r7, #8
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	02008000 	.word	0x02008000

080016b8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b088      	sub	sp, #32
 80016bc:	af02      	add	r7, sp, #8
 80016be:	60f8      	str	r0, [r7, #12]
 80016c0:	607a      	str	r2, [r7, #4]
 80016c2:	461a      	mov	r2, r3
 80016c4:	460b      	mov	r3, r1
 80016c6:	817b      	strh	r3, [r7, #10]
 80016c8:	4613      	mov	r3, r2
 80016ca:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80016d2:	b2db      	uxtb	r3, r3
 80016d4:	2b20      	cmp	r3, #32
 80016d6:	f040 80da 	bne.w	800188e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d101      	bne.n	80016e8 <HAL_I2C_Master_Transmit+0x30>
 80016e4:	2302      	movs	r3, #2
 80016e6:	e0d3      	b.n	8001890 <HAL_I2C_Master_Transmit+0x1d8>
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	2201      	movs	r2, #1
 80016ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80016f0:	f7ff fc00 	bl	8000ef4 <HAL_GetTick>
 80016f4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	9300      	str	r3, [sp, #0]
 80016fa:	2319      	movs	r3, #25
 80016fc:	2201      	movs	r2, #1
 80016fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001702:	68f8      	ldr	r0, [r7, #12]
 8001704:	f001 f8e3 	bl	80028ce <I2C_WaitOnFlagUntilTimeout>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e0be      	b.n	8001890 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	2221      	movs	r2, #33	; 0x21
 8001716:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	2210      	movs	r2, #16
 800171e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	2200      	movs	r2, #0
 8001726:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	687a      	ldr	r2, [r7, #4]
 800172c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	893a      	ldrh	r2, [r7, #8]
 8001732:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	2200      	movs	r2, #0
 8001738:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800173e:	b29b      	uxth	r3, r3
 8001740:	2bff      	cmp	r3, #255	; 0xff
 8001742:	d90e      	bls.n	8001762 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	22ff      	movs	r2, #255	; 0xff
 8001748:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800174e:	b2da      	uxtb	r2, r3
 8001750:	8979      	ldrh	r1, [r7, #10]
 8001752:	4b51      	ldr	r3, [pc, #324]	; (8001898 <HAL_I2C_Master_Transmit+0x1e0>)
 8001754:	9300      	str	r3, [sp, #0]
 8001756:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800175a:	68f8      	ldr	r0, [r7, #12]
 800175c:	f001 f9da 	bl	8002b14 <I2C_TransferConfig>
 8001760:	e06c      	b.n	800183c <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001766:	b29a      	uxth	r2, r3
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001770:	b2da      	uxtb	r2, r3
 8001772:	8979      	ldrh	r1, [r7, #10]
 8001774:	4b48      	ldr	r3, [pc, #288]	; (8001898 <HAL_I2C_Master_Transmit+0x1e0>)
 8001776:	9300      	str	r3, [sp, #0]
 8001778:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800177c:	68f8      	ldr	r0, [r7, #12]
 800177e:	f001 f9c9 	bl	8002b14 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8001782:	e05b      	b.n	800183c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001784:	697a      	ldr	r2, [r7, #20]
 8001786:	6a39      	ldr	r1, [r7, #32]
 8001788:	68f8      	ldr	r0, [r7, #12]
 800178a:	f001 f8e0 	bl	800294e <I2C_WaitOnTXISFlagUntilTimeout>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001794:	2301      	movs	r3, #1
 8001796:	e07b      	b.n	8001890 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800179c:	781a      	ldrb	r2, [r3, #0]
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a8:	1c5a      	adds	r2, r3, #1
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017b2:	b29b      	uxth	r3, r3
 80017b4:	3b01      	subs	r3, #1
 80017b6:	b29a      	uxth	r2, r3
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017c0:	3b01      	subs	r3, #1
 80017c2:	b29a      	uxth	r2, r3
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017cc:	b29b      	uxth	r3, r3
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d034      	beq.n	800183c <HAL_I2C_Master_Transmit+0x184>
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d130      	bne.n	800183c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	9300      	str	r3, [sp, #0]
 80017de:	6a3b      	ldr	r3, [r7, #32]
 80017e0:	2200      	movs	r2, #0
 80017e2:	2180      	movs	r1, #128	; 0x80
 80017e4:	68f8      	ldr	r0, [r7, #12]
 80017e6:	f001 f872 	bl	80028ce <I2C_WaitOnFlagUntilTimeout>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e04d      	b.n	8001890 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017f8:	b29b      	uxth	r3, r3
 80017fa:	2bff      	cmp	r3, #255	; 0xff
 80017fc:	d90e      	bls.n	800181c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	22ff      	movs	r2, #255	; 0xff
 8001802:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001808:	b2da      	uxtb	r2, r3
 800180a:	8979      	ldrh	r1, [r7, #10]
 800180c:	2300      	movs	r3, #0
 800180e:	9300      	str	r3, [sp, #0]
 8001810:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001814:	68f8      	ldr	r0, [r7, #12]
 8001816:	f001 f97d 	bl	8002b14 <I2C_TransferConfig>
 800181a:	e00f      	b.n	800183c <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001820:	b29a      	uxth	r2, r3
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800182a:	b2da      	uxtb	r2, r3
 800182c:	8979      	ldrh	r1, [r7, #10]
 800182e:	2300      	movs	r3, #0
 8001830:	9300      	str	r3, [sp, #0]
 8001832:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001836:	68f8      	ldr	r0, [r7, #12]
 8001838:	f001 f96c 	bl	8002b14 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001840:	b29b      	uxth	r3, r3
 8001842:	2b00      	cmp	r3, #0
 8001844:	d19e      	bne.n	8001784 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001846:	697a      	ldr	r2, [r7, #20]
 8001848:	6a39      	ldr	r1, [r7, #32]
 800184a:	68f8      	ldr	r0, [r7, #12]
 800184c:	f001 f8bf 	bl	80029ce <I2C_WaitOnSTOPFlagUntilTimeout>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e01a      	b.n	8001890 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	2220      	movs	r2, #32
 8001860:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	6859      	ldr	r1, [r3, #4]
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	4b0b      	ldr	r3, [pc, #44]	; (800189c <HAL_I2C_Master_Transmit+0x1e4>)
 800186e:	400b      	ands	r3, r1
 8001870:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	2220      	movs	r2, #32
 8001876:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	2200      	movs	r2, #0
 800187e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	2200      	movs	r2, #0
 8001886:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800188a:	2300      	movs	r3, #0
 800188c:	e000      	b.n	8001890 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800188e:	2302      	movs	r3, #2
  }
}
 8001890:	4618      	mov	r0, r3
 8001892:	3718      	adds	r7, #24
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	80002000 	.word	0x80002000
 800189c:	fe00e800 	.word	0xfe00e800

080018a0 <HAL_I2C_Slave_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b084      	sub	sp, #16
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	60f8      	str	r0, [r7, #12]
 80018a8:	60b9      	str	r1, [r7, #8]
 80018aa:	4613      	mov	r3, r2
 80018ac:	80fb      	strh	r3, [r7, #6]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	2b20      	cmp	r3, #32
 80018b8:	d139      	bne.n	800192e <HAL_I2C_Slave_Receive_IT+0x8e>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d101      	bne.n	80018c8 <HAL_I2C_Slave_Receive_IT+0x28>
 80018c4:	2302      	movs	r3, #2
 80018c6:	e033      	b.n	8001930 <HAL_I2C_Slave_Receive_IT+0x90>
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	2201      	movs	r2, #1
 80018cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	2222      	movs	r2, #34	; 0x22
 80018d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	2220      	movs	r2, #32
 80018dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	2200      	movs	r2, #0
 80018e4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	685a      	ldr	r2, [r3, #4]
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80018f4:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	68ba      	ldr	r2, [r7, #8]
 80018fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	88fa      	ldrh	r2, [r7, #6]
 8001900:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001906:	b29a      	uxth	r2, r3
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	4a0a      	ldr	r2, [pc, #40]	; (8001938 <HAL_I2C_Slave_Receive_IT+0x98>)
 8001910:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	4a09      	ldr	r2, [pc, #36]	; (800193c <HAL_I2C_Slave_Receive_IT+0x9c>)
 8001916:	635a      	str	r2, [r3, #52]	; 0x34

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	2200      	movs	r2, #0
 800191c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              process unlock */

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI| I2C_IT_STOPI| I2C_IT_NACKI | I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
 8001920:	f248 0102 	movw	r1, #32770	; 0x8002
 8001924:	68f8      	ldr	r0, [r7, #12]
 8001926:	f001 f923 	bl	8002b70 <I2C_Enable_IRQ>

    return HAL_OK;
 800192a:	2300      	movs	r3, #0
 800192c:	e000      	b.n	8001930 <HAL_I2C_Slave_Receive_IT+0x90>
  }
  else
  {
    return HAL_BUSY;
 800192e:	2302      	movs	r3, #2
  }
}
 8001930:	4618      	mov	r0, r3
 8001932:	3710      	adds	r7, #16
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	ffff0000 	.word	0xffff0000
 800193c:	08001a1d 	.word	0x08001a1d

08001940 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	699b      	ldr	r3, [r3, #24]
 800194e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800195c:	2b00      	cmp	r3, #0
 800195e:	d005      	beq.n	800196c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001964:	68ba      	ldr	r2, [r7, #8]
 8001966:	68f9      	ldr	r1, [r7, #12]
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	4798      	blx	r3
  }
}
 800196c:	bf00      	nop
 800196e:	3710      	adds	r7, #16
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}

08001974 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800197c:	bf00      	nop
 800197e:	370c      	adds	r7, #12
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr

08001988 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001990:	bf00      	nop
 8001992:	370c      	adds	r7, #12
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr

0800199c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80019a4:	bf00      	nop
 80019a6:	370c      	adds	r7, #12
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr

080019b0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	460b      	mov	r3, r1
 80019ba:	70fb      	strb	r3, [r7, #3]
 80019bc:	4613      	mov	r3, r2
 80019be:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80019c0:	bf00      	nop
 80019c2:	370c      	adds	r7, #12
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr

080019cc <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80019d4:	bf00      	nop
 80019d6:	370c      	adds	r7, #12
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr

080019e0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80019e8:	bf00      	nop
 80019ea:	370c      	adds	r7, #12
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr

080019f4 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80019fc:	bf00      	nop
 80019fe:	370c      	adds	r7, #12
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr

08001a08 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001a10:	bf00      	nop
 8001a12:	370c      	adds	r7, #12
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr

08001a1c <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b086      	sub	sp, #24
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	60f8      	str	r0, [r7, #12]
 8001a24:	60b9      	str	r1, [r7, #8]
 8001a26:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a2c:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d101      	bne.n	8001a40 <I2C_Slave_ISR_IT+0x24>
 8001a3c:	2302      	movs	r3, #2
 8001a3e:	e0ec      	b.n	8001c1a <I2C_Slave_ISR_IT+0x1fe>
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	2201      	movs	r2, #1
 8001a44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	095b      	lsrs	r3, r3, #5
 8001a4c:	f003 0301 	and.w	r3, r3, #1
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d009      	beq.n	8001a68 <I2C_Slave_ISR_IT+0x4c>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	095b      	lsrs	r3, r3, #5
 8001a58:	f003 0301 	and.w	r3, r3, #1
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d003      	beq.n	8001a68 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8001a60:	6939      	ldr	r1, [r7, #16]
 8001a62:	68f8      	ldr	r0, [r7, #12]
 8001a64:	f000 fc9a 	bl	800239c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	091b      	lsrs	r3, r3, #4
 8001a6c:	f003 0301 	and.w	r3, r3, #1
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d04d      	beq.n	8001b10 <I2C_Slave_ISR_IT+0xf4>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	091b      	lsrs	r3, r3, #4
 8001a78:	f003 0301 	and.w	r3, r3, #1
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d047      	beq.n	8001b10 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a84:	b29b      	uxth	r3, r3
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d128      	bne.n	8001adc <I2C_Slave_ISR_IT+0xc0>
    {
      /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	2b28      	cmp	r3, #40	; 0x28
 8001a94:	d108      	bne.n	8001aa8 <I2C_Slave_ISR_IT+0x8c>
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001a9c:	d104      	bne.n	8001aa8 <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8001a9e:	6939      	ldr	r1, [r7, #16]
 8001aa0:	68f8      	ldr	r0, [r7, #12]
 8001aa2:	f000 fd85 	bl	80025b0 <I2C_ITListenCplt>
 8001aa6:	e032      	b.n	8001b0e <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001aae:	b2db      	uxtb	r3, r3
 8001ab0:	2b29      	cmp	r3, #41	; 0x29
 8001ab2:	d10e      	bne.n	8001ad2 <I2C_Slave_ISR_IT+0xb6>
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001aba:	d00a      	beq.n	8001ad2 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	2210      	movs	r2, #16
 8001ac2:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8001ac4:	68f8      	ldr	r0, [r7, #12]
 8001ac6:	f000 fec0 	bl	800284a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001aca:	68f8      	ldr	r0, [r7, #12]
 8001acc:	f000 fb3d 	bl	800214a <I2C_ITSlaveSeqCplt>
 8001ad0:	e01d      	b.n	8001b0e <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	2210      	movs	r2, #16
 8001ad8:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8001ada:	e096      	b.n	8001c0a <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	2210      	movs	r2, #16
 8001ae2:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ae8:	f043 0204 	orr.w	r2, r3, #4
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d004      	beq.n	8001b00 <I2C_Slave_ISR_IT+0xe4>
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001afc:	f040 8085 	bne.w	8001c0a <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b04:	4619      	mov	r1, r3
 8001b06:	68f8      	ldr	r0, [r7, #12]
 8001b08:	f000 fda8 	bl	800265c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001b0c:	e07d      	b.n	8001c0a <I2C_Slave_ISR_IT+0x1ee>
 8001b0e:	e07c      	b.n	8001c0a <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	089b      	lsrs	r3, r3, #2
 8001b14:	f003 0301 	and.w	r3, r3, #1
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d030      	beq.n	8001b7e <I2C_Slave_ISR_IT+0x162>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	089b      	lsrs	r3, r3, #2
 8001b20:	f003 0301 	and.w	r3, r3, #1
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d02a      	beq.n	8001b7e <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b2c:	b29b      	uxth	r3, r3
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d018      	beq.n	8001b64 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b3c:	b2d2      	uxtb	r2, r2
 8001b3e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b44:	1c5a      	adds	r2, r3, #1
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b4e:	3b01      	subs	r3, #1
 8001b50:	b29a      	uxth	r2, r3
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b5a:	b29b      	uxth	r3, r3
 8001b5c:	3b01      	subs	r3, #1
 8001b5e:	b29a      	uxth	r2, r3
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b68:	b29b      	uxth	r3, r3
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d14f      	bne.n	8001c0e <I2C_Slave_ISR_IT+0x1f2>
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001b74:	d04b      	beq.n	8001c0e <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8001b76:	68f8      	ldr	r0, [r7, #12]
 8001b78:	f000 fae7 	bl	800214a <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8001b7c:	e047      	b.n	8001c0e <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	08db      	lsrs	r3, r3, #3
 8001b82:	f003 0301 	and.w	r3, r3, #1
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d00a      	beq.n	8001ba0 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	08db      	lsrs	r3, r3, #3
 8001b8e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d004      	beq.n	8001ba0 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8001b96:	6939      	ldr	r1, [r7, #16]
 8001b98:	68f8      	ldr	r0, [r7, #12]
 8001b9a:	f000 fa15 	bl	8001fc8 <I2C_ITAddrCplt>
 8001b9e:	e037      	b.n	8001c10 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	085b      	lsrs	r3, r3, #1
 8001ba4:	f003 0301 	and.w	r3, r3, #1
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d031      	beq.n	8001c10 <I2C_Slave_ISR_IT+0x1f4>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	085b      	lsrs	r3, r3, #1
 8001bb0:	f003 0301 	and.w	r3, r3, #1
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d02b      	beq.n	8001c10 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bbc:	b29b      	uxth	r3, r3
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d018      	beq.n	8001bf4 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc6:	781a      	ldrb	r2, [r3, #0]
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd2:	1c5a      	adds	r2, r3, #1
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bdc:	b29b      	uxth	r3, r3
 8001bde:	3b01      	subs	r3, #1
 8001be0:	b29a      	uxth	r2, r3
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bea:	3b01      	subs	r3, #1
 8001bec:	b29a      	uxth	r2, r3
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	851a      	strh	r2, [r3, #40]	; 0x28
 8001bf2:	e00d      	b.n	8001c10 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bfa:	d002      	beq.n	8001c02 <I2C_Slave_ISR_IT+0x1e6>
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d106      	bne.n	8001c10 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001c02:	68f8      	ldr	r0, [r7, #12]
 8001c04:	f000 faa1 	bl	800214a <I2C_ITSlaveSeqCplt>
 8001c08:	e002      	b.n	8001c10 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8001c0a:	bf00      	nop
 8001c0c:	e000      	b.n	8001c10 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8001c0e:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	2200      	movs	r2, #0
 8001c14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3718      	adds	r7, #24
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}

08001c22 <I2C_Master_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8001c22:	b580      	push	{r7, lr}
 8001c24:	b088      	sub	sp, #32
 8001c26:	af02      	add	r7, sp, #8
 8001c28:	60f8      	str	r0, [r7, #12]
 8001c2a:	60b9      	str	r1, [r7, #8]
 8001c2c:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d101      	bne.n	8001c3c <I2C_Master_ISR_DMA+0x1a>
 8001c38:	2302      	movs	r3, #2
 8001c3a:	e0e1      	b.n	8001e00 <I2C_Master_ISR_DMA+0x1de>
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	091b      	lsrs	r3, r3, #4
 8001c48:	f003 0301 	and.w	r3, r3, #1
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d017      	beq.n	8001c80 <I2C_Master_ISR_DMA+0x5e>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	091b      	lsrs	r3, r3, #4
 8001c54:	f003 0301 	and.w	r3, r3, #1
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d011      	beq.n	8001c80 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	2210      	movs	r2, #16
 8001c62:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c68:	f043 0204 	orr.w	r2, r3, #4
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8001c70:	2120      	movs	r1, #32
 8001c72:	68f8      	ldr	r0, [r7, #12]
 8001c74:	f000 ff7c 	bl	8002b70 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001c78:	68f8      	ldr	r0, [r7, #12]
 8001c7a:	f000 fde6 	bl	800284a <I2C_Flush_TXDR>
 8001c7e:	e0ba      	b.n	8001df6 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	09db      	lsrs	r3, r3, #7
 8001c84:	f003 0301 	and.w	r3, r3, #1
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d072      	beq.n	8001d72 <I2C_Master_ISR_DMA+0x150>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	099b      	lsrs	r3, r3, #6
 8001c90:	f003 0301 	and.w	r3, r3, #1
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d06c      	beq.n	8001d72 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ca6:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cac:	b29b      	uxth	r3, r3
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d04e      	beq.n	8001d50 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	b29b      	uxth	r3, r3
 8001cba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001cbe:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cc4:	b29b      	uxth	r3, r3
 8001cc6:	2bff      	cmp	r3, #255	; 0xff
 8001cc8:	d906      	bls.n	8001cd8 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	22ff      	movs	r2, #255	; 0xff
 8001cce:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8001cd0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001cd4:	617b      	str	r3, [r7, #20]
 8001cd6:	e010      	b.n	8001cfa <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cdc:	b29a      	uxth	r2, r3
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001cea:	d003      	beq.n	8001cf4 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cf0:	617b      	str	r3, [r7, #20]
 8001cf2:	e002      	b.n	8001cfa <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8001cf4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001cf8:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cfe:	b2da      	uxtb	r2, r3
 8001d00:	8a79      	ldrh	r1, [r7, #18]
 8001d02:	2300      	movs	r3, #0
 8001d04:	9300      	str	r3, [sp, #0]
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	68f8      	ldr	r0, [r7, #12]
 8001d0a:	f000 ff03 	bl	8002b14 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d12:	b29a      	uxth	r2, r3
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	b29a      	uxth	r2, r3
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	2b22      	cmp	r3, #34	; 0x22
 8001d2a:	d108      	bne.n	8001d3e <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d3a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8001d3c:	e05b      	b.n	8001df6 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001d4c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8001d4e:	e052      	b.n	8001df6 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d5a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001d5e:	d003      	beq.n	8001d68 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8001d60:	68f8      	ldr	r0, [r7, #12]
 8001d62:	f000 f9b5 	bl	80020d0 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8001d66:	e046      	b.n	8001df6 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001d68:	2140      	movs	r1, #64	; 0x40
 8001d6a:	68f8      	ldr	r0, [r7, #12]
 8001d6c:	f000 fc76 	bl	800265c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8001d70:	e041      	b.n	8001df6 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	099b      	lsrs	r3, r3, #6
 8001d76:	f003 0301 	and.w	r3, r3, #1
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d029      	beq.n	8001dd2 <I2C_Master_ISR_DMA+0x1b0>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	099b      	lsrs	r3, r3, #6
 8001d82:	f003 0301 	and.w	r3, r3, #1
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d023      	beq.n	8001dd2 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d8e:	b29b      	uxth	r3, r3
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d119      	bne.n	8001dc8 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d9e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001da2:	d027      	beq.n	8001df4 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001da8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001dac:	d108      	bne.n	8001dc0 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	685a      	ldr	r2, [r3, #4]
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001dbc:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8001dbe:	e019      	b.n	8001df4 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8001dc0:	68f8      	ldr	r0, [r7, #12]
 8001dc2:	f000 f985 	bl	80020d0 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8001dc6:	e015      	b.n	8001df4 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001dc8:	2140      	movs	r1, #64	; 0x40
 8001dca:	68f8      	ldr	r0, [r7, #12]
 8001dcc:	f000 fc46 	bl	800265c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001dd0:	e010      	b.n	8001df4 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	095b      	lsrs	r3, r3, #5
 8001dd6:	f003 0301 	and.w	r3, r3, #1
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d00b      	beq.n	8001df6 <I2C_Master_ISR_DMA+0x1d4>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	095b      	lsrs	r3, r3, #5
 8001de2:	f003 0301 	and.w	r3, r3, #1
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d005      	beq.n	8001df6 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8001dea:	68b9      	ldr	r1, [r7, #8]
 8001dec:	68f8      	ldr	r0, [r7, #12]
 8001dee:	f000 fa0b 	bl	8002208 <I2C_ITMasterCplt>
 8001df2:	e000      	b.n	8001df6 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8001df4:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8001dfe:	2300      	movs	r3, #0
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3718      	adds	r7, #24
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}

08001e08 <I2C_Slave_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b088      	sub	sp, #32
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	60f8      	str	r0, [r7, #12]
 8001e10:	60b9      	str	r1, [r7, #8]
 8001e12:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e18:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d101      	bne.n	8001e2c <I2C_Slave_ISR_DMA+0x24>
 8001e28:	2302      	movs	r3, #2
 8001e2a:	e0c9      	b.n	8001fc0 <I2C_Slave_ISR_DMA+0x1b8>
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	2201      	movs	r2, #1
 8001e30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	095b      	lsrs	r3, r3, #5
 8001e38:	f003 0301 	and.w	r3, r3, #1
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d009      	beq.n	8001e54 <I2C_Slave_ISR_DMA+0x4c>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	095b      	lsrs	r3, r3, #5
 8001e44:	f003 0301 	and.w	r3, r3, #1
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d003      	beq.n	8001e54 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8001e4c:	68b9      	ldr	r1, [r7, #8]
 8001e4e:	68f8      	ldr	r0, [r7, #12]
 8001e50:	f000 faa4 	bl	800239c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	091b      	lsrs	r3, r3, #4
 8001e58:	f003 0301 	and.w	r3, r3, #1
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	f000 809a 	beq.w	8001f96 <I2C_Slave_ISR_DMA+0x18e>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	091b      	lsrs	r3, r3, #4
 8001e66:	f003 0301 	and.w	r3, r3, #1
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	f000 8093 	beq.w	8001f96 <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	0b9b      	lsrs	r3, r3, #14
 8001e74:	f003 0301 	and.w	r3, r3, #1
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d105      	bne.n	8001e88 <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	0bdb      	lsrs	r3, r3, #15
 8001e80:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d07f      	beq.n	8001f88 <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d00d      	beq.n	8001eac <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	0bdb      	lsrs	r3, r3, #15
 8001e94:	f003 0301 	and.w	r3, r3, #1
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d007      	beq.n	8001eac <I2C_Slave_ISR_DMA+0xa4>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d101      	bne.n	8001eac <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d00d      	beq.n	8001ed0 <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	0b9b      	lsrs	r3, r3, #14
 8001eb8:	f003 0301 	and.w	r3, r3, #1
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d007      	beq.n	8001ed0 <I2C_Slave_ISR_DMA+0xc8>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d101      	bne.n	8001ed0 <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d128      	bne.n	8001f28 <I2C_Slave_ISR_DMA+0x120>
      {
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	2b28      	cmp	r3, #40	; 0x28
 8001ee0:	d108      	bne.n	8001ef4 <I2C_Slave_ISR_DMA+0xec>
 8001ee2:	69bb      	ldr	r3, [r7, #24]
 8001ee4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001ee8:	d104      	bne.n	8001ef4 <I2C_Slave_ISR_DMA+0xec>
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8001eea:	68b9      	ldr	r1, [r7, #8]
 8001eec:	68f8      	ldr	r0, [r7, #12]
 8001eee:	f000 fb5f 	bl	80025b0 <I2C_ITListenCplt>
 8001ef2:	e048      	b.n	8001f86 <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	2b29      	cmp	r3, #41	; 0x29
 8001efe:	d10e      	bne.n	8001f1e <I2C_Slave_ISR_DMA+0x116>
 8001f00:	69bb      	ldr	r3, [r7, #24]
 8001f02:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001f06:	d00a      	beq.n	8001f1e <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	2210      	movs	r2, #16
 8001f0e:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8001f10:	68f8      	ldr	r0, [r7, #12]
 8001f12:	f000 fc9a 	bl	800284a <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8001f16:	68f8      	ldr	r0, [r7, #12]
 8001f18:	f000 f917 	bl	800214a <I2C_ITSlaveSeqCplt>
 8001f1c:	e033      	b.n	8001f86 <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	2210      	movs	r2, #16
 8001f24:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8001f26:	e034      	b.n	8001f92 <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	2210      	movs	r2, #16
 8001f2e:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f34:	f043 0204 	orr.w	r2, r3, #4
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f42:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001f44:	69bb      	ldr	r3, [r7, #24]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d003      	beq.n	8001f52 <I2C_Slave_ISR_DMA+0x14a>
 8001f4a:	69bb      	ldr	r3, [r7, #24]
 8001f4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f50:	d11f      	bne.n	8001f92 <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001f52:	7dfb      	ldrb	r3, [r7, #23]
 8001f54:	2b21      	cmp	r3, #33	; 0x21
 8001f56:	d002      	beq.n	8001f5e <I2C_Slave_ISR_DMA+0x156>
 8001f58:	7dfb      	ldrb	r3, [r7, #23]
 8001f5a:	2b29      	cmp	r3, #41	; 0x29
 8001f5c:	d103      	bne.n	8001f66 <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	2221      	movs	r2, #33	; 0x21
 8001f62:	631a      	str	r2, [r3, #48]	; 0x30
 8001f64:	e008      	b.n	8001f78 <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001f66:	7dfb      	ldrb	r3, [r7, #23]
 8001f68:	2b22      	cmp	r3, #34	; 0x22
 8001f6a:	d002      	beq.n	8001f72 <I2C_Slave_ISR_DMA+0x16a>
 8001f6c:	7dfb      	ldrb	r3, [r7, #23]
 8001f6e:	2b2a      	cmp	r3, #42	; 0x2a
 8001f70:	d102      	bne.n	8001f78 <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	2222      	movs	r2, #34	; 0x22
 8001f76:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	68f8      	ldr	r0, [r7, #12]
 8001f80:	f000 fb6c 	bl	800265c <I2C_ITError>
      if (treatdmanack == 1U)
 8001f84:	e005      	b.n	8001f92 <I2C_Slave_ISR_DMA+0x18a>
 8001f86:	e004      	b.n	8001f92 <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	2210      	movs	r2, #16
 8001f8e:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8001f90:	e011      	b.n	8001fb6 <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 8001f92:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8001f94:	e00f      	b.n	8001fb6 <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	08db      	lsrs	r3, r3, #3
 8001f9a:	f003 0301 	and.w	r3, r3, #1
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d009      	beq.n	8001fb6 <I2C_Slave_ISR_DMA+0x1ae>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	08db      	lsrs	r3, r3, #3
 8001fa6:	f003 0301 	and.w	r3, r3, #1
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d003      	beq.n	8001fb6 <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8001fae:	68b9      	ldr	r1, [r7, #8]
 8001fb0:	68f8      	ldr	r0, [r7, #12]
 8001fb2:	f000 f809 	bl	8001fc8 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8001fbe:	2300      	movs	r3, #0
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3720      	adds	r7, #32
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}

08001fc8 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b084      	sub	sp, #16
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001fde:	2b28      	cmp	r3, #40	; 0x28
 8001fe0:	d16a      	bne.n	80020b8 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	699b      	ldr	r3, [r3, #24]
 8001fe8:	0c1b      	lsrs	r3, r3, #16
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	f003 0301 	and.w	r3, r3, #1
 8001ff0:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	699b      	ldr	r3, [r3, #24]
 8001ff8:	0c1b      	lsrs	r3, r3, #16
 8001ffa:	b29b      	uxth	r3, r3
 8001ffc:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002000:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	b29b      	uxth	r3, r3
 800200a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800200e:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	68db      	ldr	r3, [r3, #12]
 8002016:	b29b      	uxth	r3, r3
 8002018:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800201c:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	68db      	ldr	r3, [r3, #12]
 8002022:	2b02      	cmp	r3, #2
 8002024:	d138      	bne.n	8002098 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8002026:	897b      	ldrh	r3, [r7, #10]
 8002028:	09db      	lsrs	r3, r3, #7
 800202a:	b29a      	uxth	r2, r3
 800202c:	89bb      	ldrh	r3, [r7, #12]
 800202e:	4053      	eors	r3, r2
 8002030:	b29b      	uxth	r3, r3
 8002032:	f003 0306 	and.w	r3, r3, #6
 8002036:	2b00      	cmp	r3, #0
 8002038:	d11c      	bne.n	8002074 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800203a:	897b      	ldrh	r3, [r7, #10]
 800203c:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002042:	1c5a      	adds	r2, r3, #1
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800204c:	2b02      	cmp	r3, #2
 800204e:	d13b      	bne.n	80020c8 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2200      	movs	r2, #0
 8002054:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	2208      	movs	r2, #8
 800205c:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2200      	movs	r2, #0
 8002062:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002066:	89ba      	ldrh	r2, [r7, #12]
 8002068:	7bfb      	ldrb	r3, [r7, #15]
 800206a:	4619      	mov	r1, r3
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	f7ff fc9f 	bl	80019b0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002072:	e029      	b.n	80020c8 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8002074:	893b      	ldrh	r3, [r7, #8]
 8002076:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002078:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	f000 fddb 	bl	8002c38 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2200      	movs	r2, #0
 8002086:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800208a:	89ba      	ldrh	r2, [r7, #12]
 800208c:	7bfb      	ldrb	r3, [r7, #15]
 800208e:	4619      	mov	r1, r3
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f7ff fc8d 	bl	80019b0 <HAL_I2C_AddrCallback>
}
 8002096:	e017      	b.n	80020c8 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002098:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f000 fdcb 	bl	8002c38 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2200      	movs	r2, #0
 80020a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80020aa:	89ba      	ldrh	r2, [r7, #12]
 80020ac:	7bfb      	ldrb	r3, [r7, #15]
 80020ae:	4619      	mov	r1, r3
 80020b0:	6878      	ldr	r0, [r7, #4]
 80020b2:	f7ff fc7d 	bl	80019b0 <HAL_I2C_AddrCallback>
}
 80020b6:	e007      	b.n	80020c8 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	2208      	movs	r2, #8
 80020be:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2200      	movs	r2, #0
 80020c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80020c8:	bf00      	nop
 80020ca:	3710      	adds	r7, #16
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2200      	movs	r2, #0
 80020dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	2b21      	cmp	r3, #33	; 0x21
 80020ea:	d115      	bne.n	8002118 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2220      	movs	r2, #32
 80020f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2211      	movs	r2, #17
 80020f8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2200      	movs	r2, #0
 80020fe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002100:	2101      	movs	r1, #1
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f000 fd98 	bl	8002c38 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2200      	movs	r2, #0
 800210c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f7ff fc2f 	bl	8001974 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002116:	e014      	b.n	8002142 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2220      	movs	r2, #32
 800211c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2212      	movs	r2, #18
 8002124:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2200      	movs	r2, #0
 800212a:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800212c:	2102      	movs	r1, #2
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f000 fd82 	bl	8002c38 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2200      	movs	r2, #0
 8002138:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	f7ff fc23 	bl	8001988 <HAL_I2C_MasterRxCpltCallback>
}
 8002142:	bf00      	nop
 8002144:	3708      	adds	r7, #8
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}

0800214a <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800214a:	b580      	push	{r7, lr}
 800214c:	b084      	sub	sp, #16
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2200      	movs	r2, #0
 800215e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	0b9b      	lsrs	r3, r3, #14
 8002166:	f003 0301 	and.w	r3, r3, #1
 800216a:	2b00      	cmp	r3, #0
 800216c:	d008      	beq.n	8002180 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800217c:	601a      	str	r2, [r3, #0]
 800217e:	e00d      	b.n	800219c <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	0bdb      	lsrs	r3, r3, #15
 8002184:	f003 0301 	and.w	r3, r3, #1
 8002188:	2b00      	cmp	r3, #0
 800218a:	d007      	beq.n	800219c <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800219a:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	2b29      	cmp	r3, #41	; 0x29
 80021a6:	d112      	bne.n	80021ce <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2228      	movs	r2, #40	; 0x28
 80021ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2221      	movs	r2, #33	; 0x21
 80021b4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80021b6:	2101      	movs	r1, #1
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	f000 fd3d 	bl	8002c38 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2200      	movs	r2, #0
 80021c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f7ff fbe8 	bl	800199c <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80021cc:	e017      	b.n	80021fe <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	2b2a      	cmp	r3, #42	; 0x2a
 80021d8:	d111      	bne.n	80021fe <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2228      	movs	r2, #40	; 0x28
 80021de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2222      	movs	r2, #34	; 0x22
 80021e6:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80021e8:	2102      	movs	r1, #2
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f000 fd24 	bl	8002c38 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2200      	movs	r2, #0
 80021f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f7fe f9dd 	bl	80005b8 <HAL_I2C_SlaveRxCpltCallback>
}
 80021fe:	bf00      	nop
 8002200:	3710      	adds	r7, #16
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
	...

08002208 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b086      	sub	sp, #24
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	2220      	movs	r2, #32
 800221c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002224:	b2db      	uxtb	r3, r3
 8002226:	2b21      	cmp	r3, #33	; 0x21
 8002228:	d107      	bne.n	800223a <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800222a:	2101      	movs	r1, #1
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	f000 fd03 	bl	8002c38 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2211      	movs	r2, #17
 8002236:	631a      	str	r2, [r3, #48]	; 0x30
 8002238:	e00c      	b.n	8002254 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002240:	b2db      	uxtb	r3, r3
 8002242:	2b22      	cmp	r3, #34	; 0x22
 8002244:	d106      	bne.n	8002254 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002246:	2102      	movs	r1, #2
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	f000 fcf5 	bl	8002c38 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2212      	movs	r2, #18
 8002252:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	6859      	ldr	r1, [r3, #4]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	4b4d      	ldr	r3, [pc, #308]	; (8002394 <I2C_ITMasterCplt+0x18c>)
 8002260:	400b      	ands	r3, r1
 8002262:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2200      	movs	r2, #0
 8002268:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a4a      	ldr	r2, [pc, #296]	; (8002398 <I2C_ITMasterCplt+0x190>)
 800226e:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	091b      	lsrs	r3, r3, #4
 8002274:	f003 0301 	and.w	r3, r3, #1
 8002278:	2b00      	cmp	r3, #0
 800227a:	d009      	beq.n	8002290 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2210      	movs	r2, #16
 8002282:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002288:	f043 0204 	orr.w	r2, r3, #4
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002296:	b2db      	uxtb	r3, r3
 8002298:	2b60      	cmp	r3, #96	; 0x60
 800229a:	d10b      	bne.n	80022b4 <I2C_ITMasterCplt+0xac>
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	089b      	lsrs	r3, r3, #2
 80022a0:	f003 0301 	and.w	r3, r3, #1
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d005      	beq.n	80022b4 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 80022b2:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	f000 fac8 	bl	800284a <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022be:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	2b60      	cmp	r3, #96	; 0x60
 80022ca:	d002      	beq.n	80022d2 <I2C_ITMasterCplt+0xca>
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d006      	beq.n	80022e0 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022d6:	4619      	mov	r1, r3
 80022d8:	6878      	ldr	r0, [r7, #4]
 80022da:	f000 f9bf 	bl	800265c <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80022de:	e054      	b.n	800238a <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	2b21      	cmp	r3, #33	; 0x21
 80022ea:	d124      	bne.n	8002336 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2220      	movs	r2, #32
 80022f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2200      	movs	r2, #0
 80022f8:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002300:	b2db      	uxtb	r3, r3
 8002302:	2b40      	cmp	r3, #64	; 0x40
 8002304:	d10b      	bne.n	800231e <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2200      	movs	r2, #0
 800230a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2200      	movs	r2, #0
 8002312:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f7ff fb62 	bl	80019e0 <HAL_I2C_MemTxCpltCallback>
}
 800231c:	e035      	b.n	800238a <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2200      	movs	r2, #0
 8002322:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2200      	movs	r2, #0
 800232a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f7ff fb20 	bl	8001974 <HAL_I2C_MasterTxCpltCallback>
}
 8002334:	e029      	b.n	800238a <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800233c:	b2db      	uxtb	r3, r3
 800233e:	2b22      	cmp	r3, #34	; 0x22
 8002340:	d123      	bne.n	800238a <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2220      	movs	r2, #32
 8002346:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2200      	movs	r2, #0
 800234e:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002356:	b2db      	uxtb	r3, r3
 8002358:	2b40      	cmp	r3, #64	; 0x40
 800235a:	d10b      	bne.n	8002374 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2200      	movs	r2, #0
 8002360:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2200      	movs	r2, #0
 8002368:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f7ff fb41 	bl	80019f4 <HAL_I2C_MemRxCpltCallback>
}
 8002372:	e00a      	b.n	800238a <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2200      	movs	r2, #0
 8002378:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2200      	movs	r2, #0
 8002380:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002384:	6878      	ldr	r0, [r7, #4]
 8002386:	f7ff faff 	bl	8001988 <HAL_I2C_MasterRxCpltCallback>
}
 800238a:	bf00      	nop
 800238c:	3718      	adds	r7, #24
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	fe00e800 	.word	0xfe00e800
 8002398:	ffff0000 	.word	0xffff0000

0800239c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b086      	sub	sp, #24
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023b8:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	2220      	movs	r2, #32
 80023c0:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80023c2:	7bfb      	ldrb	r3, [r7, #15]
 80023c4:	2b21      	cmp	r3, #33	; 0x21
 80023c6:	d002      	beq.n	80023ce <I2C_ITSlaveCplt+0x32>
 80023c8:	7bfb      	ldrb	r3, [r7, #15]
 80023ca:	2b29      	cmp	r3, #41	; 0x29
 80023cc:	d108      	bne.n	80023e0 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80023ce:	f248 0101 	movw	r1, #32769	; 0x8001
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f000 fc30 	bl	8002c38 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2221      	movs	r2, #33	; 0x21
 80023dc:	631a      	str	r2, [r3, #48]	; 0x30
 80023de:	e00d      	b.n	80023fc <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80023e0:	7bfb      	ldrb	r3, [r7, #15]
 80023e2:	2b22      	cmp	r3, #34	; 0x22
 80023e4:	d002      	beq.n	80023ec <I2C_ITSlaveCplt+0x50>
 80023e6:	7bfb      	ldrb	r3, [r7, #15]
 80023e8:	2b2a      	cmp	r3, #42	; 0x2a
 80023ea:	d107      	bne.n	80023fc <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80023ec:	f248 0102 	movw	r1, #32770	; 0x8002
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	f000 fc21 	bl	8002c38 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2222      	movs	r2, #34	; 0x22
 80023fa:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	685a      	ldr	r2, [r3, #4]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800240a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	6859      	ldr	r1, [r3, #4]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	4b64      	ldr	r3, [pc, #400]	; (80025a8 <I2C_ITSlaveCplt+0x20c>)
 8002418:	400b      	ands	r3, r1
 800241a:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f000 fa14 	bl	800284a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	0b9b      	lsrs	r3, r3, #14
 8002426:	f003 0301 	and.w	r3, r3, #1
 800242a:	2b00      	cmp	r3, #0
 800242c:	d013      	beq.n	8002456 <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800243c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002442:	2b00      	cmp	r3, #0
 8002444:	d020      	beq.n	8002488 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	b29a      	uxth	r2, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002454:	e018      	b.n	8002488 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	0bdb      	lsrs	r3, r3, #15
 800245a:	f003 0301 	and.w	r3, r3, #1
 800245e:	2b00      	cmp	r3, #0
 8002460:	d012      	beq.n	8002488 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002470:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002476:	2b00      	cmp	r3, #0
 8002478:	d006      	beq.n	8002488 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	b29a      	uxth	r2, r3
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	089b      	lsrs	r3, r3, #2
 800248c:	f003 0301 	and.w	r3, r3, #1
 8002490:	2b00      	cmp	r3, #0
 8002492:	d020      	beq.n	80024d6 <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	f023 0304 	bic.w	r3, r3, #4
 800249a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a6:	b2d2      	uxtb	r2, r2
 80024a8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ae:	1c5a      	adds	r2, r3, #1
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d00c      	beq.n	80024d6 <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024c0:	3b01      	subs	r3, #1
 80024c2:	b29a      	uxth	r2, r3
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024cc:	b29b      	uxth	r3, r3
 80024ce:	3b01      	subs	r3, #1
 80024d0:	b29a      	uxth	r2, r3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024da:	b29b      	uxth	r3, r3
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d005      	beq.n	80024ec <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024e4:	f043 0204 	orr.w	r2, r3, #4
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2200      	movs	r2, #0
 80024f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2200      	movs	r2, #0
 80024f8:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d010      	beq.n	8002524 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002506:	4619      	mov	r1, r3
 8002508:	6878      	ldr	r0, [r7, #4]
 800250a:	f000 f8a7 	bl	800265c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002514:	b2db      	uxtb	r3, r3
 8002516:	2b28      	cmp	r3, #40	; 0x28
 8002518:	d141      	bne.n	800259e <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800251a:	6979      	ldr	r1, [r7, #20]
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f000 f847 	bl	80025b0 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002522:	e03c      	b.n	800259e <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002528:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800252c:	d014      	beq.n	8002558 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f7ff fe0b 	bl	800214a <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	4a1d      	ldr	r2, [pc, #116]	; (80025ac <I2C_ITSlaveCplt+0x210>)
 8002538:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2220      	movs	r2, #32
 800253e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2200      	movs	r2, #0
 8002546:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2200      	movs	r2, #0
 800254c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	f7ff fa3b 	bl	80019cc <HAL_I2C_ListenCpltCallback>
}
 8002556:	e022      	b.n	800259e <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800255e:	b2db      	uxtb	r3, r3
 8002560:	2b22      	cmp	r3, #34	; 0x22
 8002562:	d10e      	bne.n	8002582 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2220      	movs	r2, #32
 8002568:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2200      	movs	r2, #0
 8002570:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2200      	movs	r2, #0
 8002576:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f7fe f81c 	bl	80005b8 <HAL_I2C_SlaveRxCpltCallback>
}
 8002580:	e00d      	b.n	800259e <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2220      	movs	r2, #32
 8002586:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2200      	movs	r2, #0
 800258e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2200      	movs	r2, #0
 8002594:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002598:	6878      	ldr	r0, [r7, #4]
 800259a:	f7ff f9ff 	bl	800199c <HAL_I2C_SlaveTxCpltCallback>
}
 800259e:	bf00      	nop
 80025a0:	3718      	adds	r7, #24
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	fe00e800 	.word	0xfe00e800
 80025ac:	ffff0000 	.word	0xffff0000

080025b0 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4a26      	ldr	r2, [pc, #152]	; (8002658 <I2C_ITListenCplt+0xa8>)
 80025be:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2200      	movs	r2, #0
 80025c4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2220      	movs	r2, #32
 80025ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2200      	movs	r2, #0
 80025d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2200      	movs	r2, #0
 80025da:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	089b      	lsrs	r3, r3, #2
 80025e0:	f003 0301 	and.w	r3, r3, #1
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d022      	beq.n	800262e <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f2:	b2d2      	uxtb	r2, r2
 80025f4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fa:	1c5a      	adds	r2, r3, #1
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002604:	2b00      	cmp	r3, #0
 8002606:	d012      	beq.n	800262e <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800260c:	3b01      	subs	r3, #1
 800260e:	b29a      	uxth	r2, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002618:	b29b      	uxth	r3, r3
 800261a:	3b01      	subs	r3, #1
 800261c:	b29a      	uxth	r2, r3
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002626:	f043 0204 	orr.w	r2, r3, #4
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800262e:	f248 0103 	movw	r1, #32771	; 0x8003
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f000 fb00 	bl	8002c38 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	2210      	movs	r2, #16
 800263e:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2200      	movs	r2, #0
 8002644:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	f7ff f9bf 	bl	80019cc <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800264e:	bf00      	nop
 8002650:	3708      	adds	r7, #8
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	ffff0000 	.word	0xffff0000

0800265c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b084      	sub	sp, #16
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
 8002664:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800266c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2200      	movs	r2, #0
 8002672:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a5d      	ldr	r2, [pc, #372]	; (80027f0 <I2C_ITError+0x194>)
 800267a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2200      	movs	r2, #0
 8002680:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	431a      	orrs	r2, r3
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800268e:	7bfb      	ldrb	r3, [r7, #15]
 8002690:	2b28      	cmp	r3, #40	; 0x28
 8002692:	d005      	beq.n	80026a0 <I2C_ITError+0x44>
 8002694:	7bfb      	ldrb	r3, [r7, #15]
 8002696:	2b29      	cmp	r3, #41	; 0x29
 8002698:	d002      	beq.n	80026a0 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800269a:	7bfb      	ldrb	r3, [r7, #15]
 800269c:	2b2a      	cmp	r3, #42	; 0x2a
 800269e:	d10b      	bne.n	80026b8 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80026a0:	2103      	movs	r1, #3
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f000 fac8 	bl	8002c38 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2228      	movs	r2, #40	; 0x28
 80026ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	4a50      	ldr	r2, [pc, #320]	; (80027f4 <I2C_ITError+0x198>)
 80026b4:	635a      	str	r2, [r3, #52]	; 0x34
 80026b6:	e011      	b.n	80026dc <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80026b8:	f248 0103 	movw	r1, #32771	; 0x8003
 80026bc:	6878      	ldr	r0, [r7, #4]
 80026be:	f000 fabb 	bl	8002c38 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	2b60      	cmp	r3, #96	; 0x60
 80026cc:	d003      	beq.n	80026d6 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2220      	movs	r2, #32
 80026d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2200      	movs	r2, #0
 80026da:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e0:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d039      	beq.n	800275e <I2C_ITError+0x102>
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	2b11      	cmp	r3, #17
 80026ee:	d002      	beq.n	80026f6 <I2C_ITError+0x9a>
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	2b21      	cmp	r3, #33	; 0x21
 80026f4:	d133      	bne.n	800275e <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002700:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002704:	d107      	bne.n	8002716 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002714:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800271a:	4618      	mov	r0, r3
 800271c:	f7fe fd4d 	bl	80011ba <HAL_DMA_GetState>
 8002720:	4603      	mov	r3, r0
 8002722:	2b01      	cmp	r3, #1
 8002724:	d017      	beq.n	8002756 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800272a:	4a33      	ldr	r2, [pc, #204]	; (80027f8 <I2C_ITError+0x19c>)
 800272c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2200      	movs	r2, #0
 8002732:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800273a:	4618      	mov	r0, r3
 800273c:	f7fe fd1b 	bl	8001176 <HAL_DMA_Abort_IT>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d04d      	beq.n	80027e2 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800274a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800274c:	687a      	ldr	r2, [r7, #4]
 800274e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002750:	4610      	mov	r0, r2
 8002752:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002754:	e045      	b.n	80027e2 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	f000 f850 	bl	80027fc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800275c:	e041      	b.n	80027e2 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002762:	2b00      	cmp	r3, #0
 8002764:	d039      	beq.n	80027da <I2C_ITError+0x17e>
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	2b12      	cmp	r3, #18
 800276a:	d002      	beq.n	8002772 <I2C_ITError+0x116>
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	2b22      	cmp	r3, #34	; 0x22
 8002770:	d133      	bne.n	80027da <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800277c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002780:	d107      	bne.n	8002792 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002790:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002796:	4618      	mov	r0, r3
 8002798:	f7fe fd0f 	bl	80011ba <HAL_DMA_GetState>
 800279c:	4603      	mov	r3, r0
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d017      	beq.n	80027d2 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027a6:	4a14      	ldr	r2, [pc, #80]	; (80027f8 <I2C_ITError+0x19c>)
 80027a8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2200      	movs	r2, #0
 80027ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027b6:	4618      	mov	r0, r3
 80027b8:	f7fe fcdd 	bl	8001176 <HAL_DMA_Abort_IT>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d011      	beq.n	80027e6 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80027cc:	4610      	mov	r0, r2
 80027ce:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80027d0:	e009      	b.n	80027e6 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f000 f812 	bl	80027fc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80027d8:	e005      	b.n	80027e6 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f000 f80e 	bl	80027fc <I2C_TreatErrorCallback>
  }
}
 80027e0:	e002      	b.n	80027e8 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80027e2:	bf00      	nop
 80027e4:	e000      	b.n	80027e8 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80027e6:	bf00      	nop
}
 80027e8:	bf00      	nop
 80027ea:	3710      	adds	r7, #16
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	ffff0000 	.word	0xffff0000
 80027f4:	08001a1d 	.word	0x08001a1d
 80027f8:	08002893 	.word	0x08002893

080027fc <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b082      	sub	sp, #8
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800280a:	b2db      	uxtb	r3, r3
 800280c:	2b60      	cmp	r3, #96	; 0x60
 800280e:	d10e      	bne.n	800282e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2220      	movs	r2, #32
 8002814:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2200      	movs	r2, #0
 800281c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2200      	movs	r2, #0
 8002822:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f7ff f8ee 	bl	8001a08 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800282c:	e009      	b.n	8002842 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2200      	movs	r2, #0
 8002832:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2200      	movs	r2, #0
 8002838:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800283c:	6878      	ldr	r0, [r7, #4]
 800283e:	f7fd fecd 	bl	80005dc <HAL_I2C_ErrorCallback>
}
 8002842:	bf00      	nop
 8002844:	3708      	adds	r7, #8
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}

0800284a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800284a:	b480      	push	{r7}
 800284c:	b083      	sub	sp, #12
 800284e:	af00      	add	r7, sp, #0
 8002850:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	699b      	ldr	r3, [r3, #24]
 8002858:	f003 0302 	and.w	r3, r3, #2
 800285c:	2b02      	cmp	r3, #2
 800285e:	d103      	bne.n	8002868 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	2200      	movs	r2, #0
 8002866:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	699b      	ldr	r3, [r3, #24]
 800286e:	f003 0301 	and.w	r3, r3, #1
 8002872:	2b01      	cmp	r3, #1
 8002874:	d007      	beq.n	8002886 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	699a      	ldr	r2, [r3, #24]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f042 0201 	orr.w	r2, r2, #1
 8002884:	619a      	str	r2, [r3, #24]
  }
}
 8002886:	bf00      	nop
 8002888:	370c      	adds	r7, #12
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr

08002892 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002892:	b580      	push	{r7, lr}
 8002894:	b084      	sub	sp, #16
 8002896:	af00      	add	r7, sp, #0
 8002898:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800289e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d003      	beq.n	80028b0 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ac:	2200      	movs	r2, #0
 80028ae:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d003      	beq.n	80028c0 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028bc:	2200      	movs	r2, #0
 80028be:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 80028c0:	68f8      	ldr	r0, [r7, #12]
 80028c2:	f7ff ff9b 	bl	80027fc <I2C_TreatErrorCallback>
}
 80028c6:	bf00      	nop
 80028c8:	3710      	adds	r7, #16
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}

080028ce <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80028ce:	b580      	push	{r7, lr}
 80028d0:	b084      	sub	sp, #16
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	60f8      	str	r0, [r7, #12]
 80028d6:	60b9      	str	r1, [r7, #8]
 80028d8:	603b      	str	r3, [r7, #0]
 80028da:	4613      	mov	r3, r2
 80028dc:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028de:	e022      	b.n	8002926 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028e6:	d01e      	beq.n	8002926 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028e8:	f7fe fb04 	bl	8000ef4 <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	69bb      	ldr	r3, [r7, #24]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	683a      	ldr	r2, [r7, #0]
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d302      	bcc.n	80028fe <I2C_WaitOnFlagUntilTimeout+0x30>
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d113      	bne.n	8002926 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002902:	f043 0220 	orr.w	r2, r3, #32
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2220      	movs	r2, #32
 800290e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2200      	movs	r2, #0
 8002916:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2200      	movs	r2, #0
 800291e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e00f      	b.n	8002946 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	699a      	ldr	r2, [r3, #24]
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	4013      	ands	r3, r2
 8002930:	68ba      	ldr	r2, [r7, #8]
 8002932:	429a      	cmp	r2, r3
 8002934:	bf0c      	ite	eq
 8002936:	2301      	moveq	r3, #1
 8002938:	2300      	movne	r3, #0
 800293a:	b2db      	uxtb	r3, r3
 800293c:	461a      	mov	r2, r3
 800293e:	79fb      	ldrb	r3, [r7, #7]
 8002940:	429a      	cmp	r2, r3
 8002942:	d0cd      	beq.n	80028e0 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002944:	2300      	movs	r3, #0
}
 8002946:	4618      	mov	r0, r3
 8002948:	3710      	adds	r7, #16
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}

0800294e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800294e:	b580      	push	{r7, lr}
 8002950:	b084      	sub	sp, #16
 8002952:	af00      	add	r7, sp, #0
 8002954:	60f8      	str	r0, [r7, #12]
 8002956:	60b9      	str	r1, [r7, #8]
 8002958:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800295a:	e02c      	b.n	80029b6 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	68b9      	ldr	r1, [r7, #8]
 8002960:	68f8      	ldr	r0, [r7, #12]
 8002962:	f000 f871 	bl	8002a48 <I2C_IsAcknowledgeFailed>
 8002966:	4603      	mov	r3, r0
 8002968:	2b00      	cmp	r3, #0
 800296a:	d001      	beq.n	8002970 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e02a      	b.n	80029c6 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002976:	d01e      	beq.n	80029b6 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002978:	f7fe fabc 	bl	8000ef4 <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	68ba      	ldr	r2, [r7, #8]
 8002984:	429a      	cmp	r2, r3
 8002986:	d302      	bcc.n	800298e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d113      	bne.n	80029b6 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002992:	f043 0220 	orr.w	r2, r3, #32
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2220      	movs	r2, #32
 800299e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2200      	movs	r2, #0
 80029a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2200      	movs	r2, #0
 80029ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e007      	b.n	80029c6 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	699b      	ldr	r3, [r3, #24]
 80029bc:	f003 0302 	and.w	r3, r3, #2
 80029c0:	2b02      	cmp	r3, #2
 80029c2:	d1cb      	bne.n	800295c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80029c4:	2300      	movs	r3, #0
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3710      	adds	r7, #16
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}

080029ce <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80029ce:	b580      	push	{r7, lr}
 80029d0:	b084      	sub	sp, #16
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	60f8      	str	r0, [r7, #12]
 80029d6:	60b9      	str	r1, [r7, #8]
 80029d8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80029da:	e028      	b.n	8002a2e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80029dc:	687a      	ldr	r2, [r7, #4]
 80029de:	68b9      	ldr	r1, [r7, #8]
 80029e0:	68f8      	ldr	r0, [r7, #12]
 80029e2:	f000 f831 	bl	8002a48 <I2C_IsAcknowledgeFailed>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d001      	beq.n	80029f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e026      	b.n	8002a3e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029f0:	f7fe fa80 	bl	8000ef4 <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	68ba      	ldr	r2, [r7, #8]
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d302      	bcc.n	8002a06 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d113      	bne.n	8002a2e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a0a:	f043 0220 	orr.w	r2, r3, #32
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2220      	movs	r2, #32
 8002a16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2200      	movs	r2, #0
 8002a26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e007      	b.n	8002a3e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	699b      	ldr	r3, [r3, #24]
 8002a34:	f003 0320 	and.w	r3, r3, #32
 8002a38:	2b20      	cmp	r3, #32
 8002a3a:	d1cf      	bne.n	80029dc <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002a3c:	2300      	movs	r3, #0
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3710      	adds	r7, #16
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
	...

08002a48 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	60f8      	str	r0, [r7, #12]
 8002a50:	60b9      	str	r1, [r7, #8]
 8002a52:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	699b      	ldr	r3, [r3, #24]
 8002a5a:	f003 0310 	and.w	r3, r3, #16
 8002a5e:	2b10      	cmp	r3, #16
 8002a60:	d151      	bne.n	8002b06 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a62:	e022      	b.n	8002aaa <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a6a:	d01e      	beq.n	8002aaa <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a6c:	f7fe fa42 	bl	8000ef4 <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	68ba      	ldr	r2, [r7, #8]
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d302      	bcc.n	8002a82 <I2C_IsAcknowledgeFailed+0x3a>
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d113      	bne.n	8002aaa <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a86:	f043 0220 	orr.w	r2, r3, #32
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2220      	movs	r2, #32
 8002a92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e02e      	b.n	8002b08 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	699b      	ldr	r3, [r3, #24]
 8002ab0:	f003 0320 	and.w	r3, r3, #32
 8002ab4:	2b20      	cmp	r3, #32
 8002ab6:	d1d5      	bne.n	8002a64 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	2210      	movs	r2, #16
 8002abe:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2220      	movs	r2, #32
 8002ac6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002ac8:	68f8      	ldr	r0, [r7, #12]
 8002aca:	f7ff febe 	bl	800284a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	6859      	ldr	r1, [r3, #4]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	4b0d      	ldr	r3, [pc, #52]	; (8002b10 <I2C_IsAcknowledgeFailed+0xc8>)
 8002ada:	400b      	ands	r3, r1
 8002adc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ae2:	f043 0204 	orr.w	r2, r3, #4
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2220      	movs	r2, #32
 8002aee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2200      	movs	r2, #0
 8002af6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2200      	movs	r2, #0
 8002afe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e000      	b.n	8002b08 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8002b06:	2300      	movs	r3, #0
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	3710      	adds	r7, #16
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	fe00e800 	.word	0xfe00e800

08002b14 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b085      	sub	sp, #20
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	60f8      	str	r0, [r7, #12]
 8002b1c:	607b      	str	r3, [r7, #4]
 8002b1e:	460b      	mov	r3, r1
 8002b20:	817b      	strh	r3, [r7, #10]
 8002b22:	4613      	mov	r3, r2
 8002b24:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	685a      	ldr	r2, [r3, #4]
 8002b2c:	69bb      	ldr	r3, [r7, #24]
 8002b2e:	0d5b      	lsrs	r3, r3, #21
 8002b30:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002b34:	4b0d      	ldr	r3, [pc, #52]	; (8002b6c <I2C_TransferConfig+0x58>)
 8002b36:	430b      	orrs	r3, r1
 8002b38:	43db      	mvns	r3, r3
 8002b3a:	ea02 0103 	and.w	r1, r2, r3
 8002b3e:	897b      	ldrh	r3, [r7, #10]
 8002b40:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002b44:	7a7b      	ldrb	r3, [r7, #9]
 8002b46:	041b      	lsls	r3, r3, #16
 8002b48:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002b4c:	431a      	orrs	r2, r3
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	431a      	orrs	r2, r3
 8002b52:	69bb      	ldr	r3, [r7, #24]
 8002b54:	431a      	orrs	r2, r3
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	430a      	orrs	r2, r1
 8002b5c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002b5e:	bf00      	nop
 8002b60:	3714      	adds	r7, #20
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr
 8002b6a:	bf00      	nop
 8002b6c:	03ff63ff 	.word	0x03ff63ff

08002b70 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b085      	sub	sp, #20
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	460b      	mov	r3, r1
 8002b7a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b84:	4a2a      	ldr	r2, [pc, #168]	; (8002c30 <I2C_Enable_IRQ+0xc0>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d004      	beq.n	8002b94 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8002b8e:	4a29      	ldr	r2, [pc, #164]	; (8002c34 <I2C_Enable_IRQ+0xc4>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d11d      	bne.n	8002bd0 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002b94:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	da03      	bge.n	8002ba4 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8002ba2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002ba4:	887b      	ldrh	r3, [r7, #2]
 8002ba6:	2b10      	cmp	r3, #16
 8002ba8:	d103      	bne.n	8002bb2 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8002bb0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002bb2:	887b      	ldrh	r3, [r7, #2]
 8002bb4:	2b20      	cmp	r3, #32
 8002bb6:	d103      	bne.n	8002bc0 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002bbe:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8002bc0:	887b      	ldrh	r3, [r7, #2]
 8002bc2:	2b40      	cmp	r3, #64	; 0x40
 8002bc4:	d125      	bne.n	8002c12 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002bcc:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8002bce:	e020      	b.n	8002c12 <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002bd0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	da03      	bge.n	8002be0 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8002bde:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002be0:	887b      	ldrh	r3, [r7, #2]
 8002be2:	f003 0301 	and.w	r3, r3, #1
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d003      	beq.n	8002bf2 <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8002bf0:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002bf2:	887b      	ldrh	r3, [r7, #2]
 8002bf4:	f003 0302 	and.w	r3, r3, #2
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d003      	beq.n	8002c04 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8002c02:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002c04:	887b      	ldrh	r3, [r7, #2]
 8002c06:	2b20      	cmp	r3, #32
 8002c08:	d103      	bne.n	8002c12 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	f043 0320 	orr.w	r3, r3, #32
 8002c10:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	6819      	ldr	r1, [r3, #0]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	68fa      	ldr	r2, [r7, #12]
 8002c1e:	430a      	orrs	r2, r1
 8002c20:	601a      	str	r2, [r3, #0]
}
 8002c22:	bf00      	nop
 8002c24:	3714      	adds	r7, #20
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr
 8002c2e:	bf00      	nop
 8002c30:	08001c23 	.word	0x08001c23
 8002c34:	08001e09 	.word	0x08001e09

08002c38 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b085      	sub	sp, #20
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	460b      	mov	r3, r1
 8002c42:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8002c44:	2300      	movs	r3, #0
 8002c46:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002c48:	887b      	ldrh	r3, [r7, #2]
 8002c4a:	f003 0301 	and.w	r3, r3, #1
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d00f      	beq.n	8002c72 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8002c58:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002c66:	2b28      	cmp	r3, #40	; 0x28
 8002c68:	d003      	beq.n	8002c72 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8002c70:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002c72:	887b      	ldrh	r3, [r7, #2]
 8002c74:	f003 0302 	and.w	r3, r3, #2
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d00f      	beq.n	8002c9c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8002c82:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002c90:	2b28      	cmp	r3, #40	; 0x28
 8002c92:	d003      	beq.n	8002c9c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8002c9a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002c9c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	da03      	bge.n	8002cac <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8002caa:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002cac:	887b      	ldrh	r3, [r7, #2]
 8002cae:	2b10      	cmp	r3, #16
 8002cb0:	d103      	bne.n	8002cba <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8002cb8:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002cba:	887b      	ldrh	r3, [r7, #2]
 8002cbc:	2b20      	cmp	r3, #32
 8002cbe:	d103      	bne.n	8002cc8 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f043 0320 	orr.w	r3, r3, #32
 8002cc6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8002cc8:	887b      	ldrh	r3, [r7, #2]
 8002cca:	2b40      	cmp	r3, #64	; 0x40
 8002ccc:	d103      	bne.n	8002cd6 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002cd4:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	6819      	ldr	r1, [r3, #0]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	43da      	mvns	r2, r3
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	400a      	ands	r2, r1
 8002ce6:	601a      	str	r2, [r3, #0]
}
 8002ce8:	bf00      	nop
 8002cea:	3714      	adds	r7, #20
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr

08002cf4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	2b20      	cmp	r3, #32
 8002d08:	d138      	bne.n	8002d7c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d101      	bne.n	8002d18 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002d14:	2302      	movs	r3, #2
 8002d16:	e032      	b.n	8002d7e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2224      	movs	r2, #36	; 0x24
 8002d24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f022 0201 	bic.w	r2, r2, #1
 8002d36:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002d46:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	6819      	ldr	r1, [r3, #0]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	683a      	ldr	r2, [r7, #0]
 8002d54:	430a      	orrs	r2, r1
 8002d56:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f042 0201 	orr.w	r2, r2, #1
 8002d66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2220      	movs	r2, #32
 8002d6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	e000      	b.n	8002d7e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002d7c:	2302      	movs	r3, #2
  }
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	370c      	adds	r7, #12
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr

08002d8a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002d8a:	b480      	push	{r7}
 8002d8c:	b085      	sub	sp, #20
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	6078      	str	r0, [r7, #4]
 8002d92:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	2b20      	cmp	r3, #32
 8002d9e:	d139      	bne.n	8002e14 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d101      	bne.n	8002dae <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002daa:	2302      	movs	r3, #2
 8002dac:	e033      	b.n	8002e16 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2201      	movs	r2, #1
 8002db2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2224      	movs	r2, #36	; 0x24
 8002dba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f022 0201 	bic.w	r2, r2, #1
 8002dcc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002ddc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	021b      	lsls	r3, r3, #8
 8002de2:	68fa      	ldr	r2, [r7, #12]
 8002de4:	4313      	orrs	r3, r2
 8002de6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	68fa      	ldr	r2, [r7, #12]
 8002dee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f042 0201 	orr.w	r2, r2, #1
 8002dfe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2220      	movs	r2, #32
 8002e04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002e10:	2300      	movs	r3, #0
 8002e12:	e000      	b.n	8002e16 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002e14:	2302      	movs	r3, #2
  }
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3714      	adds	r7, #20
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr
	...

08002e24 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002e24:	b480      	push	{r7}
 8002e26:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e28:	4b05      	ldr	r3, [pc, #20]	; (8002e40 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a04      	ldr	r2, [pc, #16]	; (8002e40 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002e2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e32:	6013      	str	r3, [r2, #0]
}
 8002e34:	bf00      	nop
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr
 8002e3e:	bf00      	nop
 8002e40:	40007000 	.word	0x40007000

08002e44 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b086      	sub	sp, #24
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d101      	bne.n	8002e5a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e291      	b.n	800337e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 0301 	and.w	r3, r3, #1
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	f000 8087 	beq.w	8002f76 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e68:	4b96      	ldr	r3, [pc, #600]	; (80030c4 <HAL_RCC_OscConfig+0x280>)
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	f003 030c 	and.w	r3, r3, #12
 8002e70:	2b04      	cmp	r3, #4
 8002e72:	d00c      	beq.n	8002e8e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e74:	4b93      	ldr	r3, [pc, #588]	; (80030c4 <HAL_RCC_OscConfig+0x280>)
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	f003 030c 	and.w	r3, r3, #12
 8002e7c:	2b08      	cmp	r3, #8
 8002e7e:	d112      	bne.n	8002ea6 <HAL_RCC_OscConfig+0x62>
 8002e80:	4b90      	ldr	r3, [pc, #576]	; (80030c4 <HAL_RCC_OscConfig+0x280>)
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e8c:	d10b      	bne.n	8002ea6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e8e:	4b8d      	ldr	r3, [pc, #564]	; (80030c4 <HAL_RCC_OscConfig+0x280>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d06c      	beq.n	8002f74 <HAL_RCC_OscConfig+0x130>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d168      	bne.n	8002f74 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e26b      	b.n	800337e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002eae:	d106      	bne.n	8002ebe <HAL_RCC_OscConfig+0x7a>
 8002eb0:	4b84      	ldr	r3, [pc, #528]	; (80030c4 <HAL_RCC_OscConfig+0x280>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a83      	ldr	r2, [pc, #524]	; (80030c4 <HAL_RCC_OscConfig+0x280>)
 8002eb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eba:	6013      	str	r3, [r2, #0]
 8002ebc:	e02e      	b.n	8002f1c <HAL_RCC_OscConfig+0xd8>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d10c      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x9c>
 8002ec6:	4b7f      	ldr	r3, [pc, #508]	; (80030c4 <HAL_RCC_OscConfig+0x280>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a7e      	ldr	r2, [pc, #504]	; (80030c4 <HAL_RCC_OscConfig+0x280>)
 8002ecc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ed0:	6013      	str	r3, [r2, #0]
 8002ed2:	4b7c      	ldr	r3, [pc, #496]	; (80030c4 <HAL_RCC_OscConfig+0x280>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a7b      	ldr	r2, [pc, #492]	; (80030c4 <HAL_RCC_OscConfig+0x280>)
 8002ed8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002edc:	6013      	str	r3, [r2, #0]
 8002ede:	e01d      	b.n	8002f1c <HAL_RCC_OscConfig+0xd8>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ee8:	d10c      	bne.n	8002f04 <HAL_RCC_OscConfig+0xc0>
 8002eea:	4b76      	ldr	r3, [pc, #472]	; (80030c4 <HAL_RCC_OscConfig+0x280>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a75      	ldr	r2, [pc, #468]	; (80030c4 <HAL_RCC_OscConfig+0x280>)
 8002ef0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ef4:	6013      	str	r3, [r2, #0]
 8002ef6:	4b73      	ldr	r3, [pc, #460]	; (80030c4 <HAL_RCC_OscConfig+0x280>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a72      	ldr	r2, [pc, #456]	; (80030c4 <HAL_RCC_OscConfig+0x280>)
 8002efc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f00:	6013      	str	r3, [r2, #0]
 8002f02:	e00b      	b.n	8002f1c <HAL_RCC_OscConfig+0xd8>
 8002f04:	4b6f      	ldr	r3, [pc, #444]	; (80030c4 <HAL_RCC_OscConfig+0x280>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a6e      	ldr	r2, [pc, #440]	; (80030c4 <HAL_RCC_OscConfig+0x280>)
 8002f0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f0e:	6013      	str	r3, [r2, #0]
 8002f10:	4b6c      	ldr	r3, [pc, #432]	; (80030c4 <HAL_RCC_OscConfig+0x280>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a6b      	ldr	r2, [pc, #428]	; (80030c4 <HAL_RCC_OscConfig+0x280>)
 8002f16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d013      	beq.n	8002f4c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f24:	f7fd ffe6 	bl	8000ef4 <HAL_GetTick>
 8002f28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f2a:	e008      	b.n	8002f3e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f2c:	f7fd ffe2 	bl	8000ef4 <HAL_GetTick>
 8002f30:	4602      	mov	r2, r0
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	2b64      	cmp	r3, #100	; 0x64
 8002f38:	d901      	bls.n	8002f3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e21f      	b.n	800337e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f3e:	4b61      	ldr	r3, [pc, #388]	; (80030c4 <HAL_RCC_OscConfig+0x280>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d0f0      	beq.n	8002f2c <HAL_RCC_OscConfig+0xe8>
 8002f4a:	e014      	b.n	8002f76 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f4c:	f7fd ffd2 	bl	8000ef4 <HAL_GetTick>
 8002f50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f52:	e008      	b.n	8002f66 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f54:	f7fd ffce 	bl	8000ef4 <HAL_GetTick>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	2b64      	cmp	r3, #100	; 0x64
 8002f60:	d901      	bls.n	8002f66 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	e20b      	b.n	800337e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f66:	4b57      	ldr	r3, [pc, #348]	; (80030c4 <HAL_RCC_OscConfig+0x280>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d1f0      	bne.n	8002f54 <HAL_RCC_OscConfig+0x110>
 8002f72:	e000      	b.n	8002f76 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 0302 	and.w	r3, r3, #2
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d069      	beq.n	8003056 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f82:	4b50      	ldr	r3, [pc, #320]	; (80030c4 <HAL_RCC_OscConfig+0x280>)
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	f003 030c 	and.w	r3, r3, #12
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d00b      	beq.n	8002fa6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f8e:	4b4d      	ldr	r3, [pc, #308]	; (80030c4 <HAL_RCC_OscConfig+0x280>)
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	f003 030c 	and.w	r3, r3, #12
 8002f96:	2b08      	cmp	r3, #8
 8002f98:	d11c      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x190>
 8002f9a:	4b4a      	ldr	r3, [pc, #296]	; (80030c4 <HAL_RCC_OscConfig+0x280>)
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d116      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fa6:	4b47      	ldr	r3, [pc, #284]	; (80030c4 <HAL_RCC_OscConfig+0x280>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0302 	and.w	r3, r3, #2
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d005      	beq.n	8002fbe <HAL_RCC_OscConfig+0x17a>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	68db      	ldr	r3, [r3, #12]
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d001      	beq.n	8002fbe <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e1df      	b.n	800337e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fbe:	4b41      	ldr	r3, [pc, #260]	; (80030c4 <HAL_RCC_OscConfig+0x280>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	691b      	ldr	r3, [r3, #16]
 8002fca:	00db      	lsls	r3, r3, #3
 8002fcc:	493d      	ldr	r1, [pc, #244]	; (80030c4 <HAL_RCC_OscConfig+0x280>)
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fd2:	e040      	b.n	8003056 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d023      	beq.n	8003024 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fdc:	4b39      	ldr	r3, [pc, #228]	; (80030c4 <HAL_RCC_OscConfig+0x280>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a38      	ldr	r2, [pc, #224]	; (80030c4 <HAL_RCC_OscConfig+0x280>)
 8002fe2:	f043 0301 	orr.w	r3, r3, #1
 8002fe6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fe8:	f7fd ff84 	bl	8000ef4 <HAL_GetTick>
 8002fec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fee:	e008      	b.n	8003002 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ff0:	f7fd ff80 	bl	8000ef4 <HAL_GetTick>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	d901      	bls.n	8003002 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	e1bd      	b.n	800337e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003002:	4b30      	ldr	r3, [pc, #192]	; (80030c4 <HAL_RCC_OscConfig+0x280>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0302 	and.w	r3, r3, #2
 800300a:	2b00      	cmp	r3, #0
 800300c:	d0f0      	beq.n	8002ff0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800300e:	4b2d      	ldr	r3, [pc, #180]	; (80030c4 <HAL_RCC_OscConfig+0x280>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	691b      	ldr	r3, [r3, #16]
 800301a:	00db      	lsls	r3, r3, #3
 800301c:	4929      	ldr	r1, [pc, #164]	; (80030c4 <HAL_RCC_OscConfig+0x280>)
 800301e:	4313      	orrs	r3, r2
 8003020:	600b      	str	r3, [r1, #0]
 8003022:	e018      	b.n	8003056 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003024:	4b27      	ldr	r3, [pc, #156]	; (80030c4 <HAL_RCC_OscConfig+0x280>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a26      	ldr	r2, [pc, #152]	; (80030c4 <HAL_RCC_OscConfig+0x280>)
 800302a:	f023 0301 	bic.w	r3, r3, #1
 800302e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003030:	f7fd ff60 	bl	8000ef4 <HAL_GetTick>
 8003034:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003036:	e008      	b.n	800304a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003038:	f7fd ff5c 	bl	8000ef4 <HAL_GetTick>
 800303c:	4602      	mov	r2, r0
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	2b02      	cmp	r3, #2
 8003044:	d901      	bls.n	800304a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003046:	2303      	movs	r3, #3
 8003048:	e199      	b.n	800337e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800304a:	4b1e      	ldr	r3, [pc, #120]	; (80030c4 <HAL_RCC_OscConfig+0x280>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0302 	and.w	r3, r3, #2
 8003052:	2b00      	cmp	r3, #0
 8003054:	d1f0      	bne.n	8003038 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 0308 	and.w	r3, r3, #8
 800305e:	2b00      	cmp	r3, #0
 8003060:	d038      	beq.n	80030d4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	695b      	ldr	r3, [r3, #20]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d019      	beq.n	800309e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800306a:	4b16      	ldr	r3, [pc, #88]	; (80030c4 <HAL_RCC_OscConfig+0x280>)
 800306c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800306e:	4a15      	ldr	r2, [pc, #84]	; (80030c4 <HAL_RCC_OscConfig+0x280>)
 8003070:	f043 0301 	orr.w	r3, r3, #1
 8003074:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003076:	f7fd ff3d 	bl	8000ef4 <HAL_GetTick>
 800307a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800307c:	e008      	b.n	8003090 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800307e:	f7fd ff39 	bl	8000ef4 <HAL_GetTick>
 8003082:	4602      	mov	r2, r0
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	1ad3      	subs	r3, r2, r3
 8003088:	2b02      	cmp	r3, #2
 800308a:	d901      	bls.n	8003090 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800308c:	2303      	movs	r3, #3
 800308e:	e176      	b.n	800337e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003090:	4b0c      	ldr	r3, [pc, #48]	; (80030c4 <HAL_RCC_OscConfig+0x280>)
 8003092:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003094:	f003 0302 	and.w	r3, r3, #2
 8003098:	2b00      	cmp	r3, #0
 800309a:	d0f0      	beq.n	800307e <HAL_RCC_OscConfig+0x23a>
 800309c:	e01a      	b.n	80030d4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800309e:	4b09      	ldr	r3, [pc, #36]	; (80030c4 <HAL_RCC_OscConfig+0x280>)
 80030a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030a2:	4a08      	ldr	r2, [pc, #32]	; (80030c4 <HAL_RCC_OscConfig+0x280>)
 80030a4:	f023 0301 	bic.w	r3, r3, #1
 80030a8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030aa:	f7fd ff23 	bl	8000ef4 <HAL_GetTick>
 80030ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030b0:	e00a      	b.n	80030c8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030b2:	f7fd ff1f 	bl	8000ef4 <HAL_GetTick>
 80030b6:	4602      	mov	r2, r0
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	1ad3      	subs	r3, r2, r3
 80030bc:	2b02      	cmp	r3, #2
 80030be:	d903      	bls.n	80030c8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80030c0:	2303      	movs	r3, #3
 80030c2:	e15c      	b.n	800337e <HAL_RCC_OscConfig+0x53a>
 80030c4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030c8:	4b91      	ldr	r3, [pc, #580]	; (8003310 <HAL_RCC_OscConfig+0x4cc>)
 80030ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030cc:	f003 0302 	and.w	r3, r3, #2
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d1ee      	bne.n	80030b2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0304 	and.w	r3, r3, #4
 80030dc:	2b00      	cmp	r3, #0
 80030de:	f000 80a4 	beq.w	800322a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030e2:	4b8b      	ldr	r3, [pc, #556]	; (8003310 <HAL_RCC_OscConfig+0x4cc>)
 80030e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d10d      	bne.n	800310a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80030ee:	4b88      	ldr	r3, [pc, #544]	; (8003310 <HAL_RCC_OscConfig+0x4cc>)
 80030f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f2:	4a87      	ldr	r2, [pc, #540]	; (8003310 <HAL_RCC_OscConfig+0x4cc>)
 80030f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030f8:	6413      	str	r3, [r2, #64]	; 0x40
 80030fa:	4b85      	ldr	r3, [pc, #532]	; (8003310 <HAL_RCC_OscConfig+0x4cc>)
 80030fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003102:	60bb      	str	r3, [r7, #8]
 8003104:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003106:	2301      	movs	r3, #1
 8003108:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800310a:	4b82      	ldr	r3, [pc, #520]	; (8003314 <HAL_RCC_OscConfig+0x4d0>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003112:	2b00      	cmp	r3, #0
 8003114:	d118      	bne.n	8003148 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003116:	4b7f      	ldr	r3, [pc, #508]	; (8003314 <HAL_RCC_OscConfig+0x4d0>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a7e      	ldr	r2, [pc, #504]	; (8003314 <HAL_RCC_OscConfig+0x4d0>)
 800311c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003120:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003122:	f7fd fee7 	bl	8000ef4 <HAL_GetTick>
 8003126:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003128:	e008      	b.n	800313c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800312a:	f7fd fee3 	bl	8000ef4 <HAL_GetTick>
 800312e:	4602      	mov	r2, r0
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	1ad3      	subs	r3, r2, r3
 8003134:	2b64      	cmp	r3, #100	; 0x64
 8003136:	d901      	bls.n	800313c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003138:	2303      	movs	r3, #3
 800313a:	e120      	b.n	800337e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800313c:	4b75      	ldr	r3, [pc, #468]	; (8003314 <HAL_RCC_OscConfig+0x4d0>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003144:	2b00      	cmp	r3, #0
 8003146:	d0f0      	beq.n	800312a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	2b01      	cmp	r3, #1
 800314e:	d106      	bne.n	800315e <HAL_RCC_OscConfig+0x31a>
 8003150:	4b6f      	ldr	r3, [pc, #444]	; (8003310 <HAL_RCC_OscConfig+0x4cc>)
 8003152:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003154:	4a6e      	ldr	r2, [pc, #440]	; (8003310 <HAL_RCC_OscConfig+0x4cc>)
 8003156:	f043 0301 	orr.w	r3, r3, #1
 800315a:	6713      	str	r3, [r2, #112]	; 0x70
 800315c:	e02d      	b.n	80031ba <HAL_RCC_OscConfig+0x376>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d10c      	bne.n	8003180 <HAL_RCC_OscConfig+0x33c>
 8003166:	4b6a      	ldr	r3, [pc, #424]	; (8003310 <HAL_RCC_OscConfig+0x4cc>)
 8003168:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800316a:	4a69      	ldr	r2, [pc, #420]	; (8003310 <HAL_RCC_OscConfig+0x4cc>)
 800316c:	f023 0301 	bic.w	r3, r3, #1
 8003170:	6713      	str	r3, [r2, #112]	; 0x70
 8003172:	4b67      	ldr	r3, [pc, #412]	; (8003310 <HAL_RCC_OscConfig+0x4cc>)
 8003174:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003176:	4a66      	ldr	r2, [pc, #408]	; (8003310 <HAL_RCC_OscConfig+0x4cc>)
 8003178:	f023 0304 	bic.w	r3, r3, #4
 800317c:	6713      	str	r3, [r2, #112]	; 0x70
 800317e:	e01c      	b.n	80031ba <HAL_RCC_OscConfig+0x376>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	2b05      	cmp	r3, #5
 8003186:	d10c      	bne.n	80031a2 <HAL_RCC_OscConfig+0x35e>
 8003188:	4b61      	ldr	r3, [pc, #388]	; (8003310 <HAL_RCC_OscConfig+0x4cc>)
 800318a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800318c:	4a60      	ldr	r2, [pc, #384]	; (8003310 <HAL_RCC_OscConfig+0x4cc>)
 800318e:	f043 0304 	orr.w	r3, r3, #4
 8003192:	6713      	str	r3, [r2, #112]	; 0x70
 8003194:	4b5e      	ldr	r3, [pc, #376]	; (8003310 <HAL_RCC_OscConfig+0x4cc>)
 8003196:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003198:	4a5d      	ldr	r2, [pc, #372]	; (8003310 <HAL_RCC_OscConfig+0x4cc>)
 800319a:	f043 0301 	orr.w	r3, r3, #1
 800319e:	6713      	str	r3, [r2, #112]	; 0x70
 80031a0:	e00b      	b.n	80031ba <HAL_RCC_OscConfig+0x376>
 80031a2:	4b5b      	ldr	r3, [pc, #364]	; (8003310 <HAL_RCC_OscConfig+0x4cc>)
 80031a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031a6:	4a5a      	ldr	r2, [pc, #360]	; (8003310 <HAL_RCC_OscConfig+0x4cc>)
 80031a8:	f023 0301 	bic.w	r3, r3, #1
 80031ac:	6713      	str	r3, [r2, #112]	; 0x70
 80031ae:	4b58      	ldr	r3, [pc, #352]	; (8003310 <HAL_RCC_OscConfig+0x4cc>)
 80031b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031b2:	4a57      	ldr	r2, [pc, #348]	; (8003310 <HAL_RCC_OscConfig+0x4cc>)
 80031b4:	f023 0304 	bic.w	r3, r3, #4
 80031b8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d015      	beq.n	80031ee <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031c2:	f7fd fe97 	bl	8000ef4 <HAL_GetTick>
 80031c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031c8:	e00a      	b.n	80031e0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031ca:	f7fd fe93 	bl	8000ef4 <HAL_GetTick>
 80031ce:	4602      	mov	r2, r0
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	1ad3      	subs	r3, r2, r3
 80031d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80031d8:	4293      	cmp	r3, r2
 80031da:	d901      	bls.n	80031e0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80031dc:	2303      	movs	r3, #3
 80031de:	e0ce      	b.n	800337e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031e0:	4b4b      	ldr	r3, [pc, #300]	; (8003310 <HAL_RCC_OscConfig+0x4cc>)
 80031e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031e4:	f003 0302 	and.w	r3, r3, #2
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d0ee      	beq.n	80031ca <HAL_RCC_OscConfig+0x386>
 80031ec:	e014      	b.n	8003218 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031ee:	f7fd fe81 	bl	8000ef4 <HAL_GetTick>
 80031f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031f4:	e00a      	b.n	800320c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031f6:	f7fd fe7d 	bl	8000ef4 <HAL_GetTick>
 80031fa:	4602      	mov	r2, r0
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	f241 3288 	movw	r2, #5000	; 0x1388
 8003204:	4293      	cmp	r3, r2
 8003206:	d901      	bls.n	800320c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003208:	2303      	movs	r3, #3
 800320a:	e0b8      	b.n	800337e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800320c:	4b40      	ldr	r3, [pc, #256]	; (8003310 <HAL_RCC_OscConfig+0x4cc>)
 800320e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003210:	f003 0302 	and.w	r3, r3, #2
 8003214:	2b00      	cmp	r3, #0
 8003216:	d1ee      	bne.n	80031f6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003218:	7dfb      	ldrb	r3, [r7, #23]
 800321a:	2b01      	cmp	r3, #1
 800321c:	d105      	bne.n	800322a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800321e:	4b3c      	ldr	r3, [pc, #240]	; (8003310 <HAL_RCC_OscConfig+0x4cc>)
 8003220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003222:	4a3b      	ldr	r2, [pc, #236]	; (8003310 <HAL_RCC_OscConfig+0x4cc>)
 8003224:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003228:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	699b      	ldr	r3, [r3, #24]
 800322e:	2b00      	cmp	r3, #0
 8003230:	f000 80a4 	beq.w	800337c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003234:	4b36      	ldr	r3, [pc, #216]	; (8003310 <HAL_RCC_OscConfig+0x4cc>)
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	f003 030c 	and.w	r3, r3, #12
 800323c:	2b08      	cmp	r3, #8
 800323e:	d06b      	beq.n	8003318 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	699b      	ldr	r3, [r3, #24]
 8003244:	2b02      	cmp	r3, #2
 8003246:	d149      	bne.n	80032dc <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003248:	4b31      	ldr	r3, [pc, #196]	; (8003310 <HAL_RCC_OscConfig+0x4cc>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a30      	ldr	r2, [pc, #192]	; (8003310 <HAL_RCC_OscConfig+0x4cc>)
 800324e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003252:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003254:	f7fd fe4e 	bl	8000ef4 <HAL_GetTick>
 8003258:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800325a:	e008      	b.n	800326e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800325c:	f7fd fe4a 	bl	8000ef4 <HAL_GetTick>
 8003260:	4602      	mov	r2, r0
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	2b02      	cmp	r3, #2
 8003268:	d901      	bls.n	800326e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800326a:	2303      	movs	r3, #3
 800326c:	e087      	b.n	800337e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800326e:	4b28      	ldr	r3, [pc, #160]	; (8003310 <HAL_RCC_OscConfig+0x4cc>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003276:	2b00      	cmp	r3, #0
 8003278:	d1f0      	bne.n	800325c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	69da      	ldr	r2, [r3, #28]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6a1b      	ldr	r3, [r3, #32]
 8003282:	431a      	orrs	r2, r3
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003288:	019b      	lsls	r3, r3, #6
 800328a:	431a      	orrs	r2, r3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003290:	085b      	lsrs	r3, r3, #1
 8003292:	3b01      	subs	r3, #1
 8003294:	041b      	lsls	r3, r3, #16
 8003296:	431a      	orrs	r2, r3
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800329c:	061b      	lsls	r3, r3, #24
 800329e:	4313      	orrs	r3, r2
 80032a0:	4a1b      	ldr	r2, [pc, #108]	; (8003310 <HAL_RCC_OscConfig+0x4cc>)
 80032a2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80032a6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032a8:	4b19      	ldr	r3, [pc, #100]	; (8003310 <HAL_RCC_OscConfig+0x4cc>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a18      	ldr	r2, [pc, #96]	; (8003310 <HAL_RCC_OscConfig+0x4cc>)
 80032ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032b4:	f7fd fe1e 	bl	8000ef4 <HAL_GetTick>
 80032b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032ba:	e008      	b.n	80032ce <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032bc:	f7fd fe1a 	bl	8000ef4 <HAL_GetTick>
 80032c0:	4602      	mov	r2, r0
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	1ad3      	subs	r3, r2, r3
 80032c6:	2b02      	cmp	r3, #2
 80032c8:	d901      	bls.n	80032ce <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80032ca:	2303      	movs	r3, #3
 80032cc:	e057      	b.n	800337e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032ce:	4b10      	ldr	r3, [pc, #64]	; (8003310 <HAL_RCC_OscConfig+0x4cc>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d0f0      	beq.n	80032bc <HAL_RCC_OscConfig+0x478>
 80032da:	e04f      	b.n	800337c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032dc:	4b0c      	ldr	r3, [pc, #48]	; (8003310 <HAL_RCC_OscConfig+0x4cc>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a0b      	ldr	r2, [pc, #44]	; (8003310 <HAL_RCC_OscConfig+0x4cc>)
 80032e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032e8:	f7fd fe04 	bl	8000ef4 <HAL_GetTick>
 80032ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032ee:	e008      	b.n	8003302 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032f0:	f7fd fe00 	bl	8000ef4 <HAL_GetTick>
 80032f4:	4602      	mov	r2, r0
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	2b02      	cmp	r3, #2
 80032fc:	d901      	bls.n	8003302 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80032fe:	2303      	movs	r3, #3
 8003300:	e03d      	b.n	800337e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003302:	4b03      	ldr	r3, [pc, #12]	; (8003310 <HAL_RCC_OscConfig+0x4cc>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800330a:	2b00      	cmp	r3, #0
 800330c:	d1f0      	bne.n	80032f0 <HAL_RCC_OscConfig+0x4ac>
 800330e:	e035      	b.n	800337c <HAL_RCC_OscConfig+0x538>
 8003310:	40023800 	.word	0x40023800
 8003314:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003318:	4b1b      	ldr	r3, [pc, #108]	; (8003388 <HAL_RCC_OscConfig+0x544>)
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	699b      	ldr	r3, [r3, #24]
 8003322:	2b01      	cmp	r3, #1
 8003324:	d028      	beq.n	8003378 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003330:	429a      	cmp	r2, r3
 8003332:	d121      	bne.n	8003378 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800333e:	429a      	cmp	r2, r3
 8003340:	d11a      	bne.n	8003378 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003342:	68fa      	ldr	r2, [r7, #12]
 8003344:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003348:	4013      	ands	r3, r2
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800334e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003350:	4293      	cmp	r3, r2
 8003352:	d111      	bne.n	8003378 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800335e:	085b      	lsrs	r3, r3, #1
 8003360:	3b01      	subs	r3, #1
 8003362:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003364:	429a      	cmp	r2, r3
 8003366:	d107      	bne.n	8003378 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003372:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003374:	429a      	cmp	r2, r3
 8003376:	d001      	beq.n	800337c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	e000      	b.n	800337e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800337c:	2300      	movs	r3, #0
}
 800337e:	4618      	mov	r0, r3
 8003380:	3718      	adds	r7, #24
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	40023800 	.word	0x40023800

0800338c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b084      	sub	sp, #16
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003396:	2300      	movs	r3, #0
 8003398:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d101      	bne.n	80033a4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e0d0      	b.n	8003546 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80033a4:	4b6a      	ldr	r3, [pc, #424]	; (8003550 <HAL_RCC_ClockConfig+0x1c4>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 030f 	and.w	r3, r3, #15
 80033ac:	683a      	ldr	r2, [r7, #0]
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d910      	bls.n	80033d4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033b2:	4b67      	ldr	r3, [pc, #412]	; (8003550 <HAL_RCC_ClockConfig+0x1c4>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f023 020f 	bic.w	r2, r3, #15
 80033ba:	4965      	ldr	r1, [pc, #404]	; (8003550 <HAL_RCC_ClockConfig+0x1c4>)
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	4313      	orrs	r3, r2
 80033c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033c2:	4b63      	ldr	r3, [pc, #396]	; (8003550 <HAL_RCC_ClockConfig+0x1c4>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 030f 	and.w	r3, r3, #15
 80033ca:	683a      	ldr	r2, [r7, #0]
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d001      	beq.n	80033d4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e0b8      	b.n	8003546 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 0302 	and.w	r3, r3, #2
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d020      	beq.n	8003422 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 0304 	and.w	r3, r3, #4
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d005      	beq.n	80033f8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033ec:	4b59      	ldr	r3, [pc, #356]	; (8003554 <HAL_RCC_ClockConfig+0x1c8>)
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	4a58      	ldr	r2, [pc, #352]	; (8003554 <HAL_RCC_ClockConfig+0x1c8>)
 80033f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80033f6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 0308 	and.w	r3, r3, #8
 8003400:	2b00      	cmp	r3, #0
 8003402:	d005      	beq.n	8003410 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003404:	4b53      	ldr	r3, [pc, #332]	; (8003554 <HAL_RCC_ClockConfig+0x1c8>)
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	4a52      	ldr	r2, [pc, #328]	; (8003554 <HAL_RCC_ClockConfig+0x1c8>)
 800340a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800340e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003410:	4b50      	ldr	r3, [pc, #320]	; (8003554 <HAL_RCC_ClockConfig+0x1c8>)
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	494d      	ldr	r1, [pc, #308]	; (8003554 <HAL_RCC_ClockConfig+0x1c8>)
 800341e:	4313      	orrs	r3, r2
 8003420:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 0301 	and.w	r3, r3, #1
 800342a:	2b00      	cmp	r3, #0
 800342c:	d040      	beq.n	80034b0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	2b01      	cmp	r3, #1
 8003434:	d107      	bne.n	8003446 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003436:	4b47      	ldr	r3, [pc, #284]	; (8003554 <HAL_RCC_ClockConfig+0x1c8>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d115      	bne.n	800346e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e07f      	b.n	8003546 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	2b02      	cmp	r3, #2
 800344c:	d107      	bne.n	800345e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800344e:	4b41      	ldr	r3, [pc, #260]	; (8003554 <HAL_RCC_ClockConfig+0x1c8>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d109      	bne.n	800346e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e073      	b.n	8003546 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800345e:	4b3d      	ldr	r3, [pc, #244]	; (8003554 <HAL_RCC_ClockConfig+0x1c8>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 0302 	and.w	r3, r3, #2
 8003466:	2b00      	cmp	r3, #0
 8003468:	d101      	bne.n	800346e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e06b      	b.n	8003546 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800346e:	4b39      	ldr	r3, [pc, #228]	; (8003554 <HAL_RCC_ClockConfig+0x1c8>)
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	f023 0203 	bic.w	r2, r3, #3
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	4936      	ldr	r1, [pc, #216]	; (8003554 <HAL_RCC_ClockConfig+0x1c8>)
 800347c:	4313      	orrs	r3, r2
 800347e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003480:	f7fd fd38 	bl	8000ef4 <HAL_GetTick>
 8003484:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003486:	e00a      	b.n	800349e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003488:	f7fd fd34 	bl	8000ef4 <HAL_GetTick>
 800348c:	4602      	mov	r2, r0
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	1ad3      	subs	r3, r2, r3
 8003492:	f241 3288 	movw	r2, #5000	; 0x1388
 8003496:	4293      	cmp	r3, r2
 8003498:	d901      	bls.n	800349e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	e053      	b.n	8003546 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800349e:	4b2d      	ldr	r3, [pc, #180]	; (8003554 <HAL_RCC_ClockConfig+0x1c8>)
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	f003 020c 	and.w	r2, r3, #12
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d1eb      	bne.n	8003488 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034b0:	4b27      	ldr	r3, [pc, #156]	; (8003550 <HAL_RCC_ClockConfig+0x1c4>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 030f 	and.w	r3, r3, #15
 80034b8:	683a      	ldr	r2, [r7, #0]
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d210      	bcs.n	80034e0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034be:	4b24      	ldr	r3, [pc, #144]	; (8003550 <HAL_RCC_ClockConfig+0x1c4>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f023 020f 	bic.w	r2, r3, #15
 80034c6:	4922      	ldr	r1, [pc, #136]	; (8003550 <HAL_RCC_ClockConfig+0x1c4>)
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034ce:	4b20      	ldr	r3, [pc, #128]	; (8003550 <HAL_RCC_ClockConfig+0x1c4>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 030f 	and.w	r3, r3, #15
 80034d6:	683a      	ldr	r2, [r7, #0]
 80034d8:	429a      	cmp	r2, r3
 80034da:	d001      	beq.n	80034e0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	e032      	b.n	8003546 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 0304 	and.w	r3, r3, #4
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d008      	beq.n	80034fe <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034ec:	4b19      	ldr	r3, [pc, #100]	; (8003554 <HAL_RCC_ClockConfig+0x1c8>)
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	4916      	ldr	r1, [pc, #88]	; (8003554 <HAL_RCC_ClockConfig+0x1c8>)
 80034fa:	4313      	orrs	r3, r2
 80034fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0308 	and.w	r3, r3, #8
 8003506:	2b00      	cmp	r3, #0
 8003508:	d009      	beq.n	800351e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800350a:	4b12      	ldr	r3, [pc, #72]	; (8003554 <HAL_RCC_ClockConfig+0x1c8>)
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	691b      	ldr	r3, [r3, #16]
 8003516:	00db      	lsls	r3, r3, #3
 8003518:	490e      	ldr	r1, [pc, #56]	; (8003554 <HAL_RCC_ClockConfig+0x1c8>)
 800351a:	4313      	orrs	r3, r2
 800351c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800351e:	f000 f821 	bl	8003564 <HAL_RCC_GetSysClockFreq>
 8003522:	4602      	mov	r2, r0
 8003524:	4b0b      	ldr	r3, [pc, #44]	; (8003554 <HAL_RCC_ClockConfig+0x1c8>)
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	091b      	lsrs	r3, r3, #4
 800352a:	f003 030f 	and.w	r3, r3, #15
 800352e:	490a      	ldr	r1, [pc, #40]	; (8003558 <HAL_RCC_ClockConfig+0x1cc>)
 8003530:	5ccb      	ldrb	r3, [r1, r3]
 8003532:	fa22 f303 	lsr.w	r3, r2, r3
 8003536:	4a09      	ldr	r2, [pc, #36]	; (800355c <HAL_RCC_ClockConfig+0x1d0>)
 8003538:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800353a:	4b09      	ldr	r3, [pc, #36]	; (8003560 <HAL_RCC_ClockConfig+0x1d4>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4618      	mov	r0, r3
 8003540:	f7fd fc94 	bl	8000e6c <HAL_InitTick>

  return HAL_OK;
 8003544:	2300      	movs	r3, #0
}
 8003546:	4618      	mov	r0, r3
 8003548:	3710      	adds	r7, #16
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop
 8003550:	40023c00 	.word	0x40023c00
 8003554:	40023800 	.word	0x40023800
 8003558:	0800519c 	.word	0x0800519c
 800355c:	20000000 	.word	0x20000000
 8003560:	20000004 	.word	0x20000004

08003564 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003564:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003568:	b084      	sub	sp, #16
 800356a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800356c:	2300      	movs	r3, #0
 800356e:	607b      	str	r3, [r7, #4]
 8003570:	2300      	movs	r3, #0
 8003572:	60fb      	str	r3, [r7, #12]
 8003574:	2300      	movs	r3, #0
 8003576:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003578:	2300      	movs	r3, #0
 800357a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800357c:	4b67      	ldr	r3, [pc, #412]	; (800371c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	f003 030c 	and.w	r3, r3, #12
 8003584:	2b08      	cmp	r3, #8
 8003586:	d00d      	beq.n	80035a4 <HAL_RCC_GetSysClockFreq+0x40>
 8003588:	2b08      	cmp	r3, #8
 800358a:	f200 80bd 	bhi.w	8003708 <HAL_RCC_GetSysClockFreq+0x1a4>
 800358e:	2b00      	cmp	r3, #0
 8003590:	d002      	beq.n	8003598 <HAL_RCC_GetSysClockFreq+0x34>
 8003592:	2b04      	cmp	r3, #4
 8003594:	d003      	beq.n	800359e <HAL_RCC_GetSysClockFreq+0x3a>
 8003596:	e0b7      	b.n	8003708 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003598:	4b61      	ldr	r3, [pc, #388]	; (8003720 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800359a:	60bb      	str	r3, [r7, #8]
      break;
 800359c:	e0b7      	b.n	800370e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800359e:	4b61      	ldr	r3, [pc, #388]	; (8003724 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80035a0:	60bb      	str	r3, [r7, #8]
      break;
 80035a2:	e0b4      	b.n	800370e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035a4:	4b5d      	ldr	r3, [pc, #372]	; (800371c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035ac:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80035ae:	4b5b      	ldr	r3, [pc, #364]	; (800371c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d04d      	beq.n	8003656 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035ba:	4b58      	ldr	r3, [pc, #352]	; (800371c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	099b      	lsrs	r3, r3, #6
 80035c0:	461a      	mov	r2, r3
 80035c2:	f04f 0300 	mov.w	r3, #0
 80035c6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80035ca:	f04f 0100 	mov.w	r1, #0
 80035ce:	ea02 0800 	and.w	r8, r2, r0
 80035d2:	ea03 0901 	and.w	r9, r3, r1
 80035d6:	4640      	mov	r0, r8
 80035d8:	4649      	mov	r1, r9
 80035da:	f04f 0200 	mov.w	r2, #0
 80035de:	f04f 0300 	mov.w	r3, #0
 80035e2:	014b      	lsls	r3, r1, #5
 80035e4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80035e8:	0142      	lsls	r2, r0, #5
 80035ea:	4610      	mov	r0, r2
 80035ec:	4619      	mov	r1, r3
 80035ee:	ebb0 0008 	subs.w	r0, r0, r8
 80035f2:	eb61 0109 	sbc.w	r1, r1, r9
 80035f6:	f04f 0200 	mov.w	r2, #0
 80035fa:	f04f 0300 	mov.w	r3, #0
 80035fe:	018b      	lsls	r3, r1, #6
 8003600:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003604:	0182      	lsls	r2, r0, #6
 8003606:	1a12      	subs	r2, r2, r0
 8003608:	eb63 0301 	sbc.w	r3, r3, r1
 800360c:	f04f 0000 	mov.w	r0, #0
 8003610:	f04f 0100 	mov.w	r1, #0
 8003614:	00d9      	lsls	r1, r3, #3
 8003616:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800361a:	00d0      	lsls	r0, r2, #3
 800361c:	4602      	mov	r2, r0
 800361e:	460b      	mov	r3, r1
 8003620:	eb12 0208 	adds.w	r2, r2, r8
 8003624:	eb43 0309 	adc.w	r3, r3, r9
 8003628:	f04f 0000 	mov.w	r0, #0
 800362c:	f04f 0100 	mov.w	r1, #0
 8003630:	0259      	lsls	r1, r3, #9
 8003632:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003636:	0250      	lsls	r0, r2, #9
 8003638:	4602      	mov	r2, r0
 800363a:	460b      	mov	r3, r1
 800363c:	4610      	mov	r0, r2
 800363e:	4619      	mov	r1, r3
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	461a      	mov	r2, r3
 8003644:	f04f 0300 	mov.w	r3, #0
 8003648:	f7fc fe3a 	bl	80002c0 <__aeabi_uldivmod>
 800364c:	4602      	mov	r2, r0
 800364e:	460b      	mov	r3, r1
 8003650:	4613      	mov	r3, r2
 8003652:	60fb      	str	r3, [r7, #12]
 8003654:	e04a      	b.n	80036ec <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003656:	4b31      	ldr	r3, [pc, #196]	; (800371c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	099b      	lsrs	r3, r3, #6
 800365c:	461a      	mov	r2, r3
 800365e:	f04f 0300 	mov.w	r3, #0
 8003662:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003666:	f04f 0100 	mov.w	r1, #0
 800366a:	ea02 0400 	and.w	r4, r2, r0
 800366e:	ea03 0501 	and.w	r5, r3, r1
 8003672:	4620      	mov	r0, r4
 8003674:	4629      	mov	r1, r5
 8003676:	f04f 0200 	mov.w	r2, #0
 800367a:	f04f 0300 	mov.w	r3, #0
 800367e:	014b      	lsls	r3, r1, #5
 8003680:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003684:	0142      	lsls	r2, r0, #5
 8003686:	4610      	mov	r0, r2
 8003688:	4619      	mov	r1, r3
 800368a:	1b00      	subs	r0, r0, r4
 800368c:	eb61 0105 	sbc.w	r1, r1, r5
 8003690:	f04f 0200 	mov.w	r2, #0
 8003694:	f04f 0300 	mov.w	r3, #0
 8003698:	018b      	lsls	r3, r1, #6
 800369a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800369e:	0182      	lsls	r2, r0, #6
 80036a0:	1a12      	subs	r2, r2, r0
 80036a2:	eb63 0301 	sbc.w	r3, r3, r1
 80036a6:	f04f 0000 	mov.w	r0, #0
 80036aa:	f04f 0100 	mov.w	r1, #0
 80036ae:	00d9      	lsls	r1, r3, #3
 80036b0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80036b4:	00d0      	lsls	r0, r2, #3
 80036b6:	4602      	mov	r2, r0
 80036b8:	460b      	mov	r3, r1
 80036ba:	1912      	adds	r2, r2, r4
 80036bc:	eb45 0303 	adc.w	r3, r5, r3
 80036c0:	f04f 0000 	mov.w	r0, #0
 80036c4:	f04f 0100 	mov.w	r1, #0
 80036c8:	0299      	lsls	r1, r3, #10
 80036ca:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80036ce:	0290      	lsls	r0, r2, #10
 80036d0:	4602      	mov	r2, r0
 80036d2:	460b      	mov	r3, r1
 80036d4:	4610      	mov	r0, r2
 80036d6:	4619      	mov	r1, r3
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	461a      	mov	r2, r3
 80036dc:	f04f 0300 	mov.w	r3, #0
 80036e0:	f7fc fdee 	bl	80002c0 <__aeabi_uldivmod>
 80036e4:	4602      	mov	r2, r0
 80036e6:	460b      	mov	r3, r1
 80036e8:	4613      	mov	r3, r2
 80036ea:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80036ec:	4b0b      	ldr	r3, [pc, #44]	; (800371c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	0c1b      	lsrs	r3, r3, #16
 80036f2:	f003 0303 	and.w	r3, r3, #3
 80036f6:	3301      	adds	r3, #1
 80036f8:	005b      	lsls	r3, r3, #1
 80036fa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80036fc:	68fa      	ldr	r2, [r7, #12]
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	fbb2 f3f3 	udiv	r3, r2, r3
 8003704:	60bb      	str	r3, [r7, #8]
      break;
 8003706:	e002      	b.n	800370e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003708:	4b05      	ldr	r3, [pc, #20]	; (8003720 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800370a:	60bb      	str	r3, [r7, #8]
      break;
 800370c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800370e:	68bb      	ldr	r3, [r7, #8]
}
 8003710:	4618      	mov	r0, r3
 8003712:	3710      	adds	r7, #16
 8003714:	46bd      	mov	sp, r7
 8003716:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800371a:	bf00      	nop
 800371c:	40023800 	.word	0x40023800
 8003720:	00f42400 	.word	0x00f42400
 8003724:	007a1200 	.word	0x007a1200

08003728 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003728:	b480      	push	{r7}
 800372a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800372c:	4b03      	ldr	r3, [pc, #12]	; (800373c <HAL_RCC_GetHCLKFreq+0x14>)
 800372e:	681b      	ldr	r3, [r3, #0]
}
 8003730:	4618      	mov	r0, r3
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr
 800373a:	bf00      	nop
 800373c:	20000000 	.word	0x20000000

08003740 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003744:	f7ff fff0 	bl	8003728 <HAL_RCC_GetHCLKFreq>
 8003748:	4602      	mov	r2, r0
 800374a:	4b05      	ldr	r3, [pc, #20]	; (8003760 <HAL_RCC_GetPCLK1Freq+0x20>)
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	0a9b      	lsrs	r3, r3, #10
 8003750:	f003 0307 	and.w	r3, r3, #7
 8003754:	4903      	ldr	r1, [pc, #12]	; (8003764 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003756:	5ccb      	ldrb	r3, [r1, r3]
 8003758:	fa22 f303 	lsr.w	r3, r2, r3
}
 800375c:	4618      	mov	r0, r3
 800375e:	bd80      	pop	{r7, pc}
 8003760:	40023800 	.word	0x40023800
 8003764:	080051ac 	.word	0x080051ac

08003768 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800376c:	f7ff ffdc 	bl	8003728 <HAL_RCC_GetHCLKFreq>
 8003770:	4602      	mov	r2, r0
 8003772:	4b05      	ldr	r3, [pc, #20]	; (8003788 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	0b5b      	lsrs	r3, r3, #13
 8003778:	f003 0307 	and.w	r3, r3, #7
 800377c:	4903      	ldr	r1, [pc, #12]	; (800378c <HAL_RCC_GetPCLK2Freq+0x24>)
 800377e:	5ccb      	ldrb	r3, [r1, r3]
 8003780:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003784:	4618      	mov	r0, r3
 8003786:	bd80      	pop	{r7, pc}
 8003788:	40023800 	.word	0x40023800
 800378c:	080051ac 	.word	0x080051ac

08003790 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b088      	sub	sp, #32
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003798:	2300      	movs	r3, #0
 800379a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800379c:	2300      	movs	r3, #0
 800379e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80037a0:	2300      	movs	r3, #0
 80037a2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80037a4:	2300      	movs	r3, #0
 80037a6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80037a8:	2300      	movs	r3, #0
 80037aa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 0301 	and.w	r3, r3, #1
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d012      	beq.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80037b8:	4b69      	ldr	r3, [pc, #420]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	4a68      	ldr	r2, [pc, #416]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037be:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80037c2:	6093      	str	r3, [r2, #8]
 80037c4:	4b66      	ldr	r3, [pc, #408]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037c6:	689a      	ldr	r2, [r3, #8]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037cc:	4964      	ldr	r1, [pc, #400]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037ce:	4313      	orrs	r3, r2
 80037d0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d101      	bne.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80037da:	2301      	movs	r3, #1
 80037dc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d017      	beq.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80037ea:	4b5d      	ldr	r3, [pc, #372]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037f8:	4959      	ldr	r1, [pc, #356]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037fa:	4313      	orrs	r3, r2
 80037fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003804:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003808:	d101      	bne.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800380a:	2301      	movs	r3, #1
 800380c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003812:	2b00      	cmp	r3, #0
 8003814:	d101      	bne.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003816:	2301      	movs	r3, #1
 8003818:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d017      	beq.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003826:	4b4e      	ldr	r3, [pc, #312]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003828:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800382c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003834:	494a      	ldr	r1, [pc, #296]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003836:	4313      	orrs	r3, r2
 8003838:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003840:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003844:	d101      	bne.n	800384a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003846:	2301      	movs	r3, #1
 8003848:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384e:	2b00      	cmp	r3, #0
 8003850:	d101      	bne.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003852:	2301      	movs	r3, #1
 8003854:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d001      	beq.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003862:	2301      	movs	r3, #1
 8003864:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 0320 	and.w	r3, r3, #32
 800386e:	2b00      	cmp	r3, #0
 8003870:	f000 808b 	beq.w	800398a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003874:	4b3a      	ldr	r3, [pc, #232]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003878:	4a39      	ldr	r2, [pc, #228]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800387a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800387e:	6413      	str	r3, [r2, #64]	; 0x40
 8003880:	4b37      	ldr	r3, [pc, #220]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003884:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003888:	60bb      	str	r3, [r7, #8]
 800388a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800388c:	4b35      	ldr	r3, [pc, #212]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a34      	ldr	r2, [pc, #208]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003892:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003896:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003898:	f7fd fb2c 	bl	8000ef4 <HAL_GetTick>
 800389c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800389e:	e008      	b.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038a0:	f7fd fb28 	bl	8000ef4 <HAL_GetTick>
 80038a4:	4602      	mov	r2, r0
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	1ad3      	subs	r3, r2, r3
 80038aa:	2b64      	cmp	r3, #100	; 0x64
 80038ac:	d901      	bls.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80038ae:	2303      	movs	r3, #3
 80038b0:	e357      	b.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80038b2:	4b2c      	ldr	r3, [pc, #176]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d0f0      	beq.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80038be:	4b28      	ldr	r3, [pc, #160]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038c6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d035      	beq.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038d6:	693a      	ldr	r2, [r7, #16]
 80038d8:	429a      	cmp	r2, r3
 80038da:	d02e      	beq.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80038dc:	4b20      	ldr	r3, [pc, #128]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038e4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80038e6:	4b1e      	ldr	r3, [pc, #120]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ea:	4a1d      	ldr	r2, [pc, #116]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038f0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80038f2:	4b1b      	ldr	r3, [pc, #108]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038f6:	4a1a      	ldr	r2, [pc, #104]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038fc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80038fe:	4a18      	ldr	r2, [pc, #96]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003904:	4b16      	ldr	r3, [pc, #88]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003908:	f003 0301 	and.w	r3, r3, #1
 800390c:	2b01      	cmp	r3, #1
 800390e:	d114      	bne.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003910:	f7fd faf0 	bl	8000ef4 <HAL_GetTick>
 8003914:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003916:	e00a      	b.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003918:	f7fd faec 	bl	8000ef4 <HAL_GetTick>
 800391c:	4602      	mov	r2, r0
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	f241 3288 	movw	r2, #5000	; 0x1388
 8003926:	4293      	cmp	r3, r2
 8003928:	d901      	bls.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800392a:	2303      	movs	r3, #3
 800392c:	e319      	b.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800392e:	4b0c      	ldr	r3, [pc, #48]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003932:	f003 0302 	and.w	r3, r3, #2
 8003936:	2b00      	cmp	r3, #0
 8003938:	d0ee      	beq.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800393e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003942:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003946:	d111      	bne.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003948:	4b05      	ldr	r3, [pc, #20]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003954:	4b04      	ldr	r3, [pc, #16]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003956:	400b      	ands	r3, r1
 8003958:	4901      	ldr	r1, [pc, #4]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800395a:	4313      	orrs	r3, r2
 800395c:	608b      	str	r3, [r1, #8]
 800395e:	e00b      	b.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003960:	40023800 	.word	0x40023800
 8003964:	40007000 	.word	0x40007000
 8003968:	0ffffcff 	.word	0x0ffffcff
 800396c:	4bb1      	ldr	r3, [pc, #708]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	4ab0      	ldr	r2, [pc, #704]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003972:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003976:	6093      	str	r3, [r2, #8]
 8003978:	4bae      	ldr	r3, [pc, #696]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800397a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003980:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003984:	49ab      	ldr	r1, [pc, #684]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003986:	4313      	orrs	r3, r2
 8003988:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 0310 	and.w	r3, r3, #16
 8003992:	2b00      	cmp	r3, #0
 8003994:	d010      	beq.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003996:	4ba7      	ldr	r3, [pc, #668]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003998:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800399c:	4aa5      	ldr	r2, [pc, #660]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800399e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039a2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80039a6:	4ba3      	ldr	r3, [pc, #652]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80039a8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039b0:	49a0      	ldr	r1, [pc, #640]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80039b2:	4313      	orrs	r3, r2
 80039b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d00a      	beq.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80039c4:	4b9b      	ldr	r3, [pc, #620]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80039c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039ca:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039d2:	4998      	ldr	r1, [pc, #608]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80039d4:	4313      	orrs	r3, r2
 80039d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d00a      	beq.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80039e6:	4b93      	ldr	r3, [pc, #588]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80039e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039ec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80039f4:	498f      	ldr	r1, [pc, #572]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80039f6:	4313      	orrs	r3, r2
 80039f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d00a      	beq.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003a08:	4b8a      	ldr	r3, [pc, #552]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a0e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a16:	4987      	ldr	r1, [pc, #540]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d00a      	beq.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003a2a:	4b82      	ldr	r3, [pc, #520]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003a2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a30:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a38:	497e      	ldr	r1, [pc, #504]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d00a      	beq.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a4c:	4b79      	ldr	r3, [pc, #484]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003a4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a52:	f023 0203 	bic.w	r2, r3, #3
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a5a:	4976      	ldr	r1, [pc, #472]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d00a      	beq.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003a6e:	4b71      	ldr	r3, [pc, #452]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003a70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a74:	f023 020c 	bic.w	r2, r3, #12
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a7c:	496d      	ldr	r1, [pc, #436]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d00a      	beq.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003a90:	4b68      	ldr	r3, [pc, #416]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003a92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a96:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a9e:	4965      	ldr	r1, [pc, #404]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d00a      	beq.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003ab2:	4b60      	ldr	r3, [pc, #384]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003ab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ab8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ac0:	495c      	ldr	r1, [pc, #368]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d00a      	beq.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003ad4:	4b57      	ldr	r3, [pc, #348]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ada:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ae2:	4954      	ldr	r1, [pc, #336]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d00a      	beq.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003af6:	4b4f      	ldr	r3, [pc, #316]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003af8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003afc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b04:	494b      	ldr	r1, [pc, #300]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003b06:	4313      	orrs	r3, r2
 8003b08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d00a      	beq.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003b18:	4b46      	ldr	r3, [pc, #280]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003b1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b1e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b26:	4943      	ldr	r1, [pc, #268]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d00a      	beq.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003b3a:	4b3e      	ldr	r3, [pc, #248]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003b3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b40:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b48:	493a      	ldr	r1, [pc, #232]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d00a      	beq.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003b5c:	4b35      	ldr	r3, [pc, #212]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b62:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b6a:	4932      	ldr	r1, [pc, #200]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d011      	beq.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003b7e:	4b2d      	ldr	r3, [pc, #180]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003b80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b84:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b8c:	4929      	ldr	r1, [pc, #164]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b98:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b9c:	d101      	bne.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 0308 	and.w	r3, r3, #8
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d001      	beq.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d00a      	beq.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003bbe:	4b1d      	ldr	r3, [pc, #116]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003bc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bc4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bcc:	4919      	ldr	r1, [pc, #100]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d00b      	beq.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003be0:	4b14      	ldr	r3, [pc, #80]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003be6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003bf0:	4910      	ldr	r1, [pc, #64]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003bf8:	69fb      	ldr	r3, [r7, #28]
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d006      	beq.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	f000 80d9 	beq.w	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003c0c:	4b09      	ldr	r3, [pc, #36]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a08      	ldr	r2, [pc, #32]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003c12:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003c16:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c18:	f7fd f96c 	bl	8000ef4 <HAL_GetTick>
 8003c1c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003c1e:	e00b      	b.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003c20:	f7fd f968 	bl	8000ef4 <HAL_GetTick>
 8003c24:	4602      	mov	r2, r0
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	2b64      	cmp	r3, #100	; 0x64
 8003c2c:	d904      	bls.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c2e:	2303      	movs	r3, #3
 8003c30:	e197      	b.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003c32:	bf00      	nop
 8003c34:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003c38:	4b6c      	ldr	r3, [pc, #432]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d1ed      	bne.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f003 0301 	and.w	r3, r3, #1
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d021      	beq.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d11d      	bne.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003c58:	4b64      	ldr	r3, [pc, #400]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c5e:	0c1b      	lsrs	r3, r3, #16
 8003c60:	f003 0303 	and.w	r3, r3, #3
 8003c64:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003c66:	4b61      	ldr	r3, [pc, #388]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c6c:	0e1b      	lsrs	r3, r3, #24
 8003c6e:	f003 030f 	and.w	r3, r3, #15
 8003c72:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	019a      	lsls	r2, r3, #6
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	041b      	lsls	r3, r3, #16
 8003c7e:	431a      	orrs	r2, r3
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	061b      	lsls	r3, r3, #24
 8003c84:	431a      	orrs	r2, r3
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	071b      	lsls	r3, r3, #28
 8003c8c:	4957      	ldr	r1, [pc, #348]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d004      	beq.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ca4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ca8:	d00a      	beq.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d02e      	beq.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003cbe:	d129      	bne.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003cc0:	4b4a      	ldr	r3, [pc, #296]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003cc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cc6:	0c1b      	lsrs	r3, r3, #16
 8003cc8:	f003 0303 	and.w	r3, r3, #3
 8003ccc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003cce:	4b47      	ldr	r3, [pc, #284]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003cd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cd4:	0f1b      	lsrs	r3, r3, #28
 8003cd6:	f003 0307 	and.w	r3, r3, #7
 8003cda:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	019a      	lsls	r2, r3, #6
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	041b      	lsls	r3, r3, #16
 8003ce6:	431a      	orrs	r2, r3
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	061b      	lsls	r3, r3, #24
 8003cee:	431a      	orrs	r2, r3
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	071b      	lsls	r3, r3, #28
 8003cf4:	493d      	ldr	r1, [pc, #244]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003cfc:	4b3b      	ldr	r3, [pc, #236]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003cfe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d02:	f023 021f 	bic.w	r2, r3, #31
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0a:	3b01      	subs	r3, #1
 8003d0c:	4937      	ldr	r1, [pc, #220]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d01d      	beq.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003d20:	4b32      	ldr	r3, [pc, #200]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d26:	0e1b      	lsrs	r3, r3, #24
 8003d28:	f003 030f 	and.w	r3, r3, #15
 8003d2c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003d2e:	4b2f      	ldr	r3, [pc, #188]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d34:	0f1b      	lsrs	r3, r3, #28
 8003d36:	f003 0307 	and.w	r3, r3, #7
 8003d3a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	019a      	lsls	r2, r3, #6
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	691b      	ldr	r3, [r3, #16]
 8003d46:	041b      	lsls	r3, r3, #16
 8003d48:	431a      	orrs	r2, r3
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	061b      	lsls	r3, r3, #24
 8003d4e:	431a      	orrs	r2, r3
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	071b      	lsls	r3, r3, #28
 8003d54:	4925      	ldr	r1, [pc, #148]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d56:	4313      	orrs	r3, r2
 8003d58:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d011      	beq.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	019a      	lsls	r2, r3, #6
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	691b      	ldr	r3, [r3, #16]
 8003d72:	041b      	lsls	r3, r3, #16
 8003d74:	431a      	orrs	r2, r3
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	68db      	ldr	r3, [r3, #12]
 8003d7a:	061b      	lsls	r3, r3, #24
 8003d7c:	431a      	orrs	r2, r3
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	071b      	lsls	r3, r3, #28
 8003d84:	4919      	ldr	r1, [pc, #100]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d86:	4313      	orrs	r3, r2
 8003d88:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003d8c:	4b17      	ldr	r3, [pc, #92]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a16      	ldr	r2, [pc, #88]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d92:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003d96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d98:	f7fd f8ac 	bl	8000ef4 <HAL_GetTick>
 8003d9c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003d9e:	e008      	b.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003da0:	f7fd f8a8 	bl	8000ef4 <HAL_GetTick>
 8003da4:	4602      	mov	r2, r0
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	1ad3      	subs	r3, r2, r3
 8003daa:	2b64      	cmp	r3, #100	; 0x64
 8003dac:	d901      	bls.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003dae:	2303      	movs	r3, #3
 8003db0:	e0d7      	b.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003db2:	4b0e      	ldr	r3, [pc, #56]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d0f0      	beq.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003dbe:	69bb      	ldr	r3, [r7, #24]
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	f040 80cd 	bne.w	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003dc6:	4b09      	ldr	r3, [pc, #36]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a08      	ldr	r2, [pc, #32]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003dcc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003dd0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dd2:	f7fd f88f 	bl	8000ef4 <HAL_GetTick>
 8003dd6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003dd8:	e00a      	b.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003dda:	f7fd f88b 	bl	8000ef4 <HAL_GetTick>
 8003dde:	4602      	mov	r2, r0
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	1ad3      	subs	r3, r2, r3
 8003de4:	2b64      	cmp	r3, #100	; 0x64
 8003de6:	d903      	bls.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003de8:	2303      	movs	r3, #3
 8003dea:	e0ba      	b.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003dec:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003df0:	4b5e      	ldr	r3, [pc, #376]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003df8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003dfc:	d0ed      	beq.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d003      	beq.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d009      	beq.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d02e      	beq.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d12a      	bne.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003e26:	4b51      	ldr	r3, [pc, #324]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003e28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e2c:	0c1b      	lsrs	r3, r3, #16
 8003e2e:	f003 0303 	and.w	r3, r3, #3
 8003e32:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003e34:	4b4d      	ldr	r3, [pc, #308]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e3a:	0f1b      	lsrs	r3, r3, #28
 8003e3c:	f003 0307 	and.w	r3, r3, #7
 8003e40:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	695b      	ldr	r3, [r3, #20]
 8003e46:	019a      	lsls	r2, r3, #6
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	041b      	lsls	r3, r3, #16
 8003e4c:	431a      	orrs	r2, r3
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	699b      	ldr	r3, [r3, #24]
 8003e52:	061b      	lsls	r3, r3, #24
 8003e54:	431a      	orrs	r2, r3
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	071b      	lsls	r3, r3, #28
 8003e5a:	4944      	ldr	r1, [pc, #272]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003e62:	4b42      	ldr	r3, [pc, #264]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003e64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e68:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e70:	3b01      	subs	r3, #1
 8003e72:	021b      	lsls	r3, r3, #8
 8003e74:	493d      	ldr	r1, [pc, #244]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003e76:	4313      	orrs	r3, r2
 8003e78:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d022      	beq.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e8c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e90:	d11d      	bne.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003e92:	4b36      	ldr	r3, [pc, #216]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003e94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e98:	0e1b      	lsrs	r3, r3, #24
 8003e9a:	f003 030f 	and.w	r3, r3, #15
 8003e9e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003ea0:	4b32      	ldr	r3, [pc, #200]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ea6:	0f1b      	lsrs	r3, r3, #28
 8003ea8:	f003 0307 	and.w	r3, r3, #7
 8003eac:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	695b      	ldr	r3, [r3, #20]
 8003eb2:	019a      	lsls	r2, r3, #6
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6a1b      	ldr	r3, [r3, #32]
 8003eb8:	041b      	lsls	r3, r3, #16
 8003eba:	431a      	orrs	r2, r3
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	061b      	lsls	r3, r3, #24
 8003ec0:	431a      	orrs	r2, r3
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	071b      	lsls	r3, r3, #28
 8003ec6:	4929      	ldr	r1, [pc, #164]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0308 	and.w	r3, r3, #8
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d028      	beq.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003eda:	4b24      	ldr	r3, [pc, #144]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003edc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ee0:	0e1b      	lsrs	r3, r3, #24
 8003ee2:	f003 030f 	and.w	r3, r3, #15
 8003ee6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003ee8:	4b20      	ldr	r3, [pc, #128]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eee:	0c1b      	lsrs	r3, r3, #16
 8003ef0:	f003 0303 	and.w	r3, r3, #3
 8003ef4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	695b      	ldr	r3, [r3, #20]
 8003efa:	019a      	lsls	r2, r3, #6
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	041b      	lsls	r3, r3, #16
 8003f00:	431a      	orrs	r2, r3
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	061b      	lsls	r3, r3, #24
 8003f06:	431a      	orrs	r2, r3
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	69db      	ldr	r3, [r3, #28]
 8003f0c:	071b      	lsls	r3, r3, #28
 8003f0e:	4917      	ldr	r1, [pc, #92]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f10:	4313      	orrs	r3, r2
 8003f12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003f16:	4b15      	ldr	r3, [pc, #84]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f1c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f24:	4911      	ldr	r1, [pc, #68]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f26:	4313      	orrs	r3, r2
 8003f28:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003f2c:	4b0f      	ldr	r3, [pc, #60]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a0e      	ldr	r2, [pc, #56]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f36:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f38:	f7fc ffdc 	bl	8000ef4 <HAL_GetTick>
 8003f3c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003f3e:	e008      	b.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003f40:	f7fc ffd8 	bl	8000ef4 <HAL_GetTick>
 8003f44:	4602      	mov	r2, r0
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	2b64      	cmp	r3, #100	; 0x64
 8003f4c:	d901      	bls.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f4e:	2303      	movs	r3, #3
 8003f50:	e007      	b.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003f52:	4b06      	ldr	r3, [pc, #24]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f5e:	d1ef      	bne.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003f60:	2300      	movs	r3, #0
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3720      	adds	r7, #32
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}
 8003f6a:	bf00      	nop
 8003f6c:	40023800 	.word	0x40023800

08003f70 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b082      	sub	sp, #8
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d101      	bne.n	8003f82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e040      	b.n	8004004 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d106      	bne.n	8003f98 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f7fc fe6a 	bl	8000c6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2224      	movs	r2, #36	; 0x24
 8003f9c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f022 0201 	bic.w	r2, r2, #1
 8003fac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f000 f8c0 	bl	8004134 <UART_SetConfig>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d101      	bne.n	8003fbe <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e022      	b.n	8004004 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d002      	beq.n	8003fcc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f000 fb16 	bl	80045f8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	685a      	ldr	r2, [r3, #4]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003fda:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	689a      	ldr	r2, [r3, #8]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003fea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f042 0201 	orr.w	r2, r2, #1
 8003ffa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	f000 fb9d 	bl	800473c <UART_CheckIdleState>
 8004002:	4603      	mov	r3, r0
}
 8004004:	4618      	mov	r0, r3
 8004006:	3708      	adds	r7, #8
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}

0800400c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b08a      	sub	sp, #40	; 0x28
 8004010:	af02      	add	r7, sp, #8
 8004012:	60f8      	str	r0, [r7, #12]
 8004014:	60b9      	str	r1, [r7, #8]
 8004016:	603b      	str	r3, [r7, #0]
 8004018:	4613      	mov	r3, r2
 800401a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004020:	2b20      	cmp	r3, #32
 8004022:	f040 8081 	bne.w	8004128 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d002      	beq.n	8004032 <HAL_UART_Transmit+0x26>
 800402c:	88fb      	ldrh	r3, [r7, #6]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d101      	bne.n	8004036 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	e079      	b.n	800412a <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800403c:	2b01      	cmp	r3, #1
 800403e:	d101      	bne.n	8004044 <HAL_UART_Transmit+0x38>
 8004040:	2302      	movs	r3, #2
 8004042:	e072      	b.n	800412a <HAL_UART_Transmit+0x11e>
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2201      	movs	r2, #1
 8004048:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2200      	movs	r2, #0
 8004050:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2221      	movs	r2, #33	; 0x21
 8004058:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800405a:	f7fc ff4b 	bl	8000ef4 <HAL_GetTick>
 800405e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	88fa      	ldrh	r2, [r7, #6]
 8004064:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	88fa      	ldrh	r2, [r7, #6]
 800406c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004078:	d108      	bne.n	800408c <HAL_UART_Transmit+0x80>
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	691b      	ldr	r3, [r3, #16]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d104      	bne.n	800408c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004082:	2300      	movs	r3, #0
 8004084:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	61bb      	str	r3, [r7, #24]
 800408a:	e003      	b.n	8004094 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004090:	2300      	movs	r3, #0
 8004092:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2200      	movs	r2, #0
 8004098:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800409c:	e02c      	b.n	80040f8 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	9300      	str	r3, [sp, #0]
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	2200      	movs	r2, #0
 80040a6:	2180      	movs	r1, #128	; 0x80
 80040a8:	68f8      	ldr	r0, [r7, #12]
 80040aa:	f000 fb7a 	bl	80047a2 <UART_WaitOnFlagUntilTimeout>
 80040ae:	4603      	mov	r3, r0
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d001      	beq.n	80040b8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80040b4:	2303      	movs	r3, #3
 80040b6:	e038      	b.n	800412a <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80040b8:	69fb      	ldr	r3, [r7, #28]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d10b      	bne.n	80040d6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80040be:	69bb      	ldr	r3, [r7, #24]
 80040c0:	881b      	ldrh	r3, [r3, #0]
 80040c2:	461a      	mov	r2, r3
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040cc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80040ce:	69bb      	ldr	r3, [r7, #24]
 80040d0:	3302      	adds	r3, #2
 80040d2:	61bb      	str	r3, [r7, #24]
 80040d4:	e007      	b.n	80040e6 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80040d6:	69fb      	ldr	r3, [r7, #28]
 80040d8:	781a      	ldrb	r2, [r3, #0]
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80040e0:	69fb      	ldr	r3, [r7, #28]
 80040e2:	3301      	adds	r3, #1
 80040e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80040ec:	b29b      	uxth	r3, r3
 80040ee:	3b01      	subs	r3, #1
 80040f0:	b29a      	uxth	r2, r3
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80040fe:	b29b      	uxth	r3, r3
 8004100:	2b00      	cmp	r3, #0
 8004102:	d1cc      	bne.n	800409e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	9300      	str	r3, [sp, #0]
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	2200      	movs	r2, #0
 800410c:	2140      	movs	r1, #64	; 0x40
 800410e:	68f8      	ldr	r0, [r7, #12]
 8004110:	f000 fb47 	bl	80047a2 <UART_WaitOnFlagUntilTimeout>
 8004114:	4603      	mov	r3, r0
 8004116:	2b00      	cmp	r3, #0
 8004118:	d001      	beq.n	800411e <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800411a:	2303      	movs	r3, #3
 800411c:	e005      	b.n	800412a <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2220      	movs	r2, #32
 8004122:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004124:	2300      	movs	r3, #0
 8004126:	e000      	b.n	800412a <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8004128:	2302      	movs	r3, #2
  }
}
 800412a:	4618      	mov	r0, r3
 800412c:	3720      	adds	r7, #32
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}
	...

08004134 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b088      	sub	sp, #32
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800413c:	2300      	movs	r3, #0
 800413e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	689a      	ldr	r2, [r3, #8]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	691b      	ldr	r3, [r3, #16]
 8004148:	431a      	orrs	r2, r3
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	695b      	ldr	r3, [r3, #20]
 800414e:	431a      	orrs	r2, r3
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	69db      	ldr	r3, [r3, #28]
 8004154:	4313      	orrs	r3, r2
 8004156:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	4ba7      	ldr	r3, [pc, #668]	; (80043fc <UART_SetConfig+0x2c8>)
 8004160:	4013      	ands	r3, r2
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	6812      	ldr	r2, [r2, #0]
 8004166:	6979      	ldr	r1, [r7, #20]
 8004168:	430b      	orrs	r3, r1
 800416a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	68da      	ldr	r2, [r3, #12]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	430a      	orrs	r2, r1
 8004180:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	699b      	ldr	r3, [r3, #24]
 8004186:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6a1b      	ldr	r3, [r3, #32]
 800418c:	697a      	ldr	r2, [r7, #20]
 800418e:	4313      	orrs	r3, r2
 8004190:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	697a      	ldr	r2, [r7, #20]
 80041a2:	430a      	orrs	r2, r1
 80041a4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a95      	ldr	r2, [pc, #596]	; (8004400 <UART_SetConfig+0x2cc>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d120      	bne.n	80041f2 <UART_SetConfig+0xbe>
 80041b0:	4b94      	ldr	r3, [pc, #592]	; (8004404 <UART_SetConfig+0x2d0>)
 80041b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041b6:	f003 0303 	and.w	r3, r3, #3
 80041ba:	2b03      	cmp	r3, #3
 80041bc:	d816      	bhi.n	80041ec <UART_SetConfig+0xb8>
 80041be:	a201      	add	r2, pc, #4	; (adr r2, 80041c4 <UART_SetConfig+0x90>)
 80041c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041c4:	080041d5 	.word	0x080041d5
 80041c8:	080041e1 	.word	0x080041e1
 80041cc:	080041db 	.word	0x080041db
 80041d0:	080041e7 	.word	0x080041e7
 80041d4:	2301      	movs	r3, #1
 80041d6:	77fb      	strb	r3, [r7, #31]
 80041d8:	e14f      	b.n	800447a <UART_SetConfig+0x346>
 80041da:	2302      	movs	r3, #2
 80041dc:	77fb      	strb	r3, [r7, #31]
 80041de:	e14c      	b.n	800447a <UART_SetConfig+0x346>
 80041e0:	2304      	movs	r3, #4
 80041e2:	77fb      	strb	r3, [r7, #31]
 80041e4:	e149      	b.n	800447a <UART_SetConfig+0x346>
 80041e6:	2308      	movs	r3, #8
 80041e8:	77fb      	strb	r3, [r7, #31]
 80041ea:	e146      	b.n	800447a <UART_SetConfig+0x346>
 80041ec:	2310      	movs	r3, #16
 80041ee:	77fb      	strb	r3, [r7, #31]
 80041f0:	e143      	b.n	800447a <UART_SetConfig+0x346>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a84      	ldr	r2, [pc, #528]	; (8004408 <UART_SetConfig+0x2d4>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d132      	bne.n	8004262 <UART_SetConfig+0x12e>
 80041fc:	4b81      	ldr	r3, [pc, #516]	; (8004404 <UART_SetConfig+0x2d0>)
 80041fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004202:	f003 030c 	and.w	r3, r3, #12
 8004206:	2b0c      	cmp	r3, #12
 8004208:	d828      	bhi.n	800425c <UART_SetConfig+0x128>
 800420a:	a201      	add	r2, pc, #4	; (adr r2, 8004210 <UART_SetConfig+0xdc>)
 800420c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004210:	08004245 	.word	0x08004245
 8004214:	0800425d 	.word	0x0800425d
 8004218:	0800425d 	.word	0x0800425d
 800421c:	0800425d 	.word	0x0800425d
 8004220:	08004251 	.word	0x08004251
 8004224:	0800425d 	.word	0x0800425d
 8004228:	0800425d 	.word	0x0800425d
 800422c:	0800425d 	.word	0x0800425d
 8004230:	0800424b 	.word	0x0800424b
 8004234:	0800425d 	.word	0x0800425d
 8004238:	0800425d 	.word	0x0800425d
 800423c:	0800425d 	.word	0x0800425d
 8004240:	08004257 	.word	0x08004257
 8004244:	2300      	movs	r3, #0
 8004246:	77fb      	strb	r3, [r7, #31]
 8004248:	e117      	b.n	800447a <UART_SetConfig+0x346>
 800424a:	2302      	movs	r3, #2
 800424c:	77fb      	strb	r3, [r7, #31]
 800424e:	e114      	b.n	800447a <UART_SetConfig+0x346>
 8004250:	2304      	movs	r3, #4
 8004252:	77fb      	strb	r3, [r7, #31]
 8004254:	e111      	b.n	800447a <UART_SetConfig+0x346>
 8004256:	2308      	movs	r3, #8
 8004258:	77fb      	strb	r3, [r7, #31]
 800425a:	e10e      	b.n	800447a <UART_SetConfig+0x346>
 800425c:	2310      	movs	r3, #16
 800425e:	77fb      	strb	r3, [r7, #31]
 8004260:	e10b      	b.n	800447a <UART_SetConfig+0x346>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a69      	ldr	r2, [pc, #420]	; (800440c <UART_SetConfig+0x2d8>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d120      	bne.n	80042ae <UART_SetConfig+0x17a>
 800426c:	4b65      	ldr	r3, [pc, #404]	; (8004404 <UART_SetConfig+0x2d0>)
 800426e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004272:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004276:	2b30      	cmp	r3, #48	; 0x30
 8004278:	d013      	beq.n	80042a2 <UART_SetConfig+0x16e>
 800427a:	2b30      	cmp	r3, #48	; 0x30
 800427c:	d814      	bhi.n	80042a8 <UART_SetConfig+0x174>
 800427e:	2b20      	cmp	r3, #32
 8004280:	d009      	beq.n	8004296 <UART_SetConfig+0x162>
 8004282:	2b20      	cmp	r3, #32
 8004284:	d810      	bhi.n	80042a8 <UART_SetConfig+0x174>
 8004286:	2b00      	cmp	r3, #0
 8004288:	d002      	beq.n	8004290 <UART_SetConfig+0x15c>
 800428a:	2b10      	cmp	r3, #16
 800428c:	d006      	beq.n	800429c <UART_SetConfig+0x168>
 800428e:	e00b      	b.n	80042a8 <UART_SetConfig+0x174>
 8004290:	2300      	movs	r3, #0
 8004292:	77fb      	strb	r3, [r7, #31]
 8004294:	e0f1      	b.n	800447a <UART_SetConfig+0x346>
 8004296:	2302      	movs	r3, #2
 8004298:	77fb      	strb	r3, [r7, #31]
 800429a:	e0ee      	b.n	800447a <UART_SetConfig+0x346>
 800429c:	2304      	movs	r3, #4
 800429e:	77fb      	strb	r3, [r7, #31]
 80042a0:	e0eb      	b.n	800447a <UART_SetConfig+0x346>
 80042a2:	2308      	movs	r3, #8
 80042a4:	77fb      	strb	r3, [r7, #31]
 80042a6:	e0e8      	b.n	800447a <UART_SetConfig+0x346>
 80042a8:	2310      	movs	r3, #16
 80042aa:	77fb      	strb	r3, [r7, #31]
 80042ac:	e0e5      	b.n	800447a <UART_SetConfig+0x346>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a57      	ldr	r2, [pc, #348]	; (8004410 <UART_SetConfig+0x2dc>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d120      	bne.n	80042fa <UART_SetConfig+0x1c6>
 80042b8:	4b52      	ldr	r3, [pc, #328]	; (8004404 <UART_SetConfig+0x2d0>)
 80042ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042be:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80042c2:	2bc0      	cmp	r3, #192	; 0xc0
 80042c4:	d013      	beq.n	80042ee <UART_SetConfig+0x1ba>
 80042c6:	2bc0      	cmp	r3, #192	; 0xc0
 80042c8:	d814      	bhi.n	80042f4 <UART_SetConfig+0x1c0>
 80042ca:	2b80      	cmp	r3, #128	; 0x80
 80042cc:	d009      	beq.n	80042e2 <UART_SetConfig+0x1ae>
 80042ce:	2b80      	cmp	r3, #128	; 0x80
 80042d0:	d810      	bhi.n	80042f4 <UART_SetConfig+0x1c0>
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d002      	beq.n	80042dc <UART_SetConfig+0x1a8>
 80042d6:	2b40      	cmp	r3, #64	; 0x40
 80042d8:	d006      	beq.n	80042e8 <UART_SetConfig+0x1b4>
 80042da:	e00b      	b.n	80042f4 <UART_SetConfig+0x1c0>
 80042dc:	2300      	movs	r3, #0
 80042de:	77fb      	strb	r3, [r7, #31]
 80042e0:	e0cb      	b.n	800447a <UART_SetConfig+0x346>
 80042e2:	2302      	movs	r3, #2
 80042e4:	77fb      	strb	r3, [r7, #31]
 80042e6:	e0c8      	b.n	800447a <UART_SetConfig+0x346>
 80042e8:	2304      	movs	r3, #4
 80042ea:	77fb      	strb	r3, [r7, #31]
 80042ec:	e0c5      	b.n	800447a <UART_SetConfig+0x346>
 80042ee:	2308      	movs	r3, #8
 80042f0:	77fb      	strb	r3, [r7, #31]
 80042f2:	e0c2      	b.n	800447a <UART_SetConfig+0x346>
 80042f4:	2310      	movs	r3, #16
 80042f6:	77fb      	strb	r3, [r7, #31]
 80042f8:	e0bf      	b.n	800447a <UART_SetConfig+0x346>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a45      	ldr	r2, [pc, #276]	; (8004414 <UART_SetConfig+0x2e0>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d125      	bne.n	8004350 <UART_SetConfig+0x21c>
 8004304:	4b3f      	ldr	r3, [pc, #252]	; (8004404 <UART_SetConfig+0x2d0>)
 8004306:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800430a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800430e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004312:	d017      	beq.n	8004344 <UART_SetConfig+0x210>
 8004314:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004318:	d817      	bhi.n	800434a <UART_SetConfig+0x216>
 800431a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800431e:	d00b      	beq.n	8004338 <UART_SetConfig+0x204>
 8004320:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004324:	d811      	bhi.n	800434a <UART_SetConfig+0x216>
 8004326:	2b00      	cmp	r3, #0
 8004328:	d003      	beq.n	8004332 <UART_SetConfig+0x1fe>
 800432a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800432e:	d006      	beq.n	800433e <UART_SetConfig+0x20a>
 8004330:	e00b      	b.n	800434a <UART_SetConfig+0x216>
 8004332:	2300      	movs	r3, #0
 8004334:	77fb      	strb	r3, [r7, #31]
 8004336:	e0a0      	b.n	800447a <UART_SetConfig+0x346>
 8004338:	2302      	movs	r3, #2
 800433a:	77fb      	strb	r3, [r7, #31]
 800433c:	e09d      	b.n	800447a <UART_SetConfig+0x346>
 800433e:	2304      	movs	r3, #4
 8004340:	77fb      	strb	r3, [r7, #31]
 8004342:	e09a      	b.n	800447a <UART_SetConfig+0x346>
 8004344:	2308      	movs	r3, #8
 8004346:	77fb      	strb	r3, [r7, #31]
 8004348:	e097      	b.n	800447a <UART_SetConfig+0x346>
 800434a:	2310      	movs	r3, #16
 800434c:	77fb      	strb	r3, [r7, #31]
 800434e:	e094      	b.n	800447a <UART_SetConfig+0x346>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a30      	ldr	r2, [pc, #192]	; (8004418 <UART_SetConfig+0x2e4>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d125      	bne.n	80043a6 <UART_SetConfig+0x272>
 800435a:	4b2a      	ldr	r3, [pc, #168]	; (8004404 <UART_SetConfig+0x2d0>)
 800435c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004360:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004364:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004368:	d017      	beq.n	800439a <UART_SetConfig+0x266>
 800436a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800436e:	d817      	bhi.n	80043a0 <UART_SetConfig+0x26c>
 8004370:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004374:	d00b      	beq.n	800438e <UART_SetConfig+0x25a>
 8004376:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800437a:	d811      	bhi.n	80043a0 <UART_SetConfig+0x26c>
 800437c:	2b00      	cmp	r3, #0
 800437e:	d003      	beq.n	8004388 <UART_SetConfig+0x254>
 8004380:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004384:	d006      	beq.n	8004394 <UART_SetConfig+0x260>
 8004386:	e00b      	b.n	80043a0 <UART_SetConfig+0x26c>
 8004388:	2301      	movs	r3, #1
 800438a:	77fb      	strb	r3, [r7, #31]
 800438c:	e075      	b.n	800447a <UART_SetConfig+0x346>
 800438e:	2302      	movs	r3, #2
 8004390:	77fb      	strb	r3, [r7, #31]
 8004392:	e072      	b.n	800447a <UART_SetConfig+0x346>
 8004394:	2304      	movs	r3, #4
 8004396:	77fb      	strb	r3, [r7, #31]
 8004398:	e06f      	b.n	800447a <UART_SetConfig+0x346>
 800439a:	2308      	movs	r3, #8
 800439c:	77fb      	strb	r3, [r7, #31]
 800439e:	e06c      	b.n	800447a <UART_SetConfig+0x346>
 80043a0:	2310      	movs	r3, #16
 80043a2:	77fb      	strb	r3, [r7, #31]
 80043a4:	e069      	b.n	800447a <UART_SetConfig+0x346>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a1c      	ldr	r2, [pc, #112]	; (800441c <UART_SetConfig+0x2e8>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d137      	bne.n	8004420 <UART_SetConfig+0x2ec>
 80043b0:	4b14      	ldr	r3, [pc, #80]	; (8004404 <UART_SetConfig+0x2d0>)
 80043b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043b6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80043ba:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80043be:	d017      	beq.n	80043f0 <UART_SetConfig+0x2bc>
 80043c0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80043c4:	d817      	bhi.n	80043f6 <UART_SetConfig+0x2c2>
 80043c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043ca:	d00b      	beq.n	80043e4 <UART_SetConfig+0x2b0>
 80043cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043d0:	d811      	bhi.n	80043f6 <UART_SetConfig+0x2c2>
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d003      	beq.n	80043de <UART_SetConfig+0x2aa>
 80043d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043da:	d006      	beq.n	80043ea <UART_SetConfig+0x2b6>
 80043dc:	e00b      	b.n	80043f6 <UART_SetConfig+0x2c2>
 80043de:	2300      	movs	r3, #0
 80043e0:	77fb      	strb	r3, [r7, #31]
 80043e2:	e04a      	b.n	800447a <UART_SetConfig+0x346>
 80043e4:	2302      	movs	r3, #2
 80043e6:	77fb      	strb	r3, [r7, #31]
 80043e8:	e047      	b.n	800447a <UART_SetConfig+0x346>
 80043ea:	2304      	movs	r3, #4
 80043ec:	77fb      	strb	r3, [r7, #31]
 80043ee:	e044      	b.n	800447a <UART_SetConfig+0x346>
 80043f0:	2308      	movs	r3, #8
 80043f2:	77fb      	strb	r3, [r7, #31]
 80043f4:	e041      	b.n	800447a <UART_SetConfig+0x346>
 80043f6:	2310      	movs	r3, #16
 80043f8:	77fb      	strb	r3, [r7, #31]
 80043fa:	e03e      	b.n	800447a <UART_SetConfig+0x346>
 80043fc:	efff69f3 	.word	0xefff69f3
 8004400:	40011000 	.word	0x40011000
 8004404:	40023800 	.word	0x40023800
 8004408:	40004400 	.word	0x40004400
 800440c:	40004800 	.word	0x40004800
 8004410:	40004c00 	.word	0x40004c00
 8004414:	40005000 	.word	0x40005000
 8004418:	40011400 	.word	0x40011400
 800441c:	40007800 	.word	0x40007800
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a71      	ldr	r2, [pc, #452]	; (80045ec <UART_SetConfig+0x4b8>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d125      	bne.n	8004476 <UART_SetConfig+0x342>
 800442a:	4b71      	ldr	r3, [pc, #452]	; (80045f0 <UART_SetConfig+0x4bc>)
 800442c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004430:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004434:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004438:	d017      	beq.n	800446a <UART_SetConfig+0x336>
 800443a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800443e:	d817      	bhi.n	8004470 <UART_SetConfig+0x33c>
 8004440:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004444:	d00b      	beq.n	800445e <UART_SetConfig+0x32a>
 8004446:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800444a:	d811      	bhi.n	8004470 <UART_SetConfig+0x33c>
 800444c:	2b00      	cmp	r3, #0
 800444e:	d003      	beq.n	8004458 <UART_SetConfig+0x324>
 8004450:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004454:	d006      	beq.n	8004464 <UART_SetConfig+0x330>
 8004456:	e00b      	b.n	8004470 <UART_SetConfig+0x33c>
 8004458:	2300      	movs	r3, #0
 800445a:	77fb      	strb	r3, [r7, #31]
 800445c:	e00d      	b.n	800447a <UART_SetConfig+0x346>
 800445e:	2302      	movs	r3, #2
 8004460:	77fb      	strb	r3, [r7, #31]
 8004462:	e00a      	b.n	800447a <UART_SetConfig+0x346>
 8004464:	2304      	movs	r3, #4
 8004466:	77fb      	strb	r3, [r7, #31]
 8004468:	e007      	b.n	800447a <UART_SetConfig+0x346>
 800446a:	2308      	movs	r3, #8
 800446c:	77fb      	strb	r3, [r7, #31]
 800446e:	e004      	b.n	800447a <UART_SetConfig+0x346>
 8004470:	2310      	movs	r3, #16
 8004472:	77fb      	strb	r3, [r7, #31]
 8004474:	e001      	b.n	800447a <UART_SetConfig+0x346>
 8004476:	2310      	movs	r3, #16
 8004478:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	69db      	ldr	r3, [r3, #28]
 800447e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004482:	d15b      	bne.n	800453c <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8004484:	7ffb      	ldrb	r3, [r7, #31]
 8004486:	2b08      	cmp	r3, #8
 8004488:	d827      	bhi.n	80044da <UART_SetConfig+0x3a6>
 800448a:	a201      	add	r2, pc, #4	; (adr r2, 8004490 <UART_SetConfig+0x35c>)
 800448c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004490:	080044b5 	.word	0x080044b5
 8004494:	080044bd 	.word	0x080044bd
 8004498:	080044c5 	.word	0x080044c5
 800449c:	080044db 	.word	0x080044db
 80044a0:	080044cb 	.word	0x080044cb
 80044a4:	080044db 	.word	0x080044db
 80044a8:	080044db 	.word	0x080044db
 80044ac:	080044db 	.word	0x080044db
 80044b0:	080044d3 	.word	0x080044d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044b4:	f7ff f944 	bl	8003740 <HAL_RCC_GetPCLK1Freq>
 80044b8:	61b8      	str	r0, [r7, #24]
        break;
 80044ba:	e013      	b.n	80044e4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80044bc:	f7ff f954 	bl	8003768 <HAL_RCC_GetPCLK2Freq>
 80044c0:	61b8      	str	r0, [r7, #24]
        break;
 80044c2:	e00f      	b.n	80044e4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044c4:	4b4b      	ldr	r3, [pc, #300]	; (80045f4 <UART_SetConfig+0x4c0>)
 80044c6:	61bb      	str	r3, [r7, #24]
        break;
 80044c8:	e00c      	b.n	80044e4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044ca:	f7ff f84b 	bl	8003564 <HAL_RCC_GetSysClockFreq>
 80044ce:	61b8      	str	r0, [r7, #24]
        break;
 80044d0:	e008      	b.n	80044e4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044d6:	61bb      	str	r3, [r7, #24]
        break;
 80044d8:	e004      	b.n	80044e4 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 80044da:	2300      	movs	r3, #0
 80044dc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	77bb      	strb	r3, [r7, #30]
        break;
 80044e2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80044e4:	69bb      	ldr	r3, [r7, #24]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d074      	beq.n	80045d4 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80044ea:	69bb      	ldr	r3, [r7, #24]
 80044ec:	005a      	lsls	r2, r3, #1
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	085b      	lsrs	r3, r3, #1
 80044f4:	441a      	add	r2, r3
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80044fe:	b29b      	uxth	r3, r3
 8004500:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	2b0f      	cmp	r3, #15
 8004506:	d916      	bls.n	8004536 <UART_SetConfig+0x402>
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800450e:	d212      	bcs.n	8004536 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	b29b      	uxth	r3, r3
 8004514:	f023 030f 	bic.w	r3, r3, #15
 8004518:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	085b      	lsrs	r3, r3, #1
 800451e:	b29b      	uxth	r3, r3
 8004520:	f003 0307 	and.w	r3, r3, #7
 8004524:	b29a      	uxth	r2, r3
 8004526:	89fb      	ldrh	r3, [r7, #14]
 8004528:	4313      	orrs	r3, r2
 800452a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	89fa      	ldrh	r2, [r7, #14]
 8004532:	60da      	str	r2, [r3, #12]
 8004534:	e04e      	b.n	80045d4 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	77bb      	strb	r3, [r7, #30]
 800453a:	e04b      	b.n	80045d4 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800453c:	7ffb      	ldrb	r3, [r7, #31]
 800453e:	2b08      	cmp	r3, #8
 8004540:	d827      	bhi.n	8004592 <UART_SetConfig+0x45e>
 8004542:	a201      	add	r2, pc, #4	; (adr r2, 8004548 <UART_SetConfig+0x414>)
 8004544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004548:	0800456d 	.word	0x0800456d
 800454c:	08004575 	.word	0x08004575
 8004550:	0800457d 	.word	0x0800457d
 8004554:	08004593 	.word	0x08004593
 8004558:	08004583 	.word	0x08004583
 800455c:	08004593 	.word	0x08004593
 8004560:	08004593 	.word	0x08004593
 8004564:	08004593 	.word	0x08004593
 8004568:	0800458b 	.word	0x0800458b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800456c:	f7ff f8e8 	bl	8003740 <HAL_RCC_GetPCLK1Freq>
 8004570:	61b8      	str	r0, [r7, #24]
        break;
 8004572:	e013      	b.n	800459c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004574:	f7ff f8f8 	bl	8003768 <HAL_RCC_GetPCLK2Freq>
 8004578:	61b8      	str	r0, [r7, #24]
        break;
 800457a:	e00f      	b.n	800459c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800457c:	4b1d      	ldr	r3, [pc, #116]	; (80045f4 <UART_SetConfig+0x4c0>)
 800457e:	61bb      	str	r3, [r7, #24]
        break;
 8004580:	e00c      	b.n	800459c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004582:	f7fe ffef 	bl	8003564 <HAL_RCC_GetSysClockFreq>
 8004586:	61b8      	str	r0, [r7, #24]
        break;
 8004588:	e008      	b.n	800459c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800458a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800458e:	61bb      	str	r3, [r7, #24]
        break;
 8004590:	e004      	b.n	800459c <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8004592:	2300      	movs	r3, #0
 8004594:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	77bb      	strb	r3, [r7, #30]
        break;
 800459a:	bf00      	nop
    }

    if (pclk != 0U)
 800459c:	69bb      	ldr	r3, [r7, #24]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d018      	beq.n	80045d4 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	085a      	lsrs	r2, r3, #1
 80045a8:	69bb      	ldr	r3, [r7, #24]
 80045aa:	441a      	add	r2, r3
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	2b0f      	cmp	r3, #15
 80045bc:	d908      	bls.n	80045d0 <UART_SetConfig+0x49c>
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045c4:	d204      	bcs.n	80045d0 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	693a      	ldr	r2, [r7, #16]
 80045cc:	60da      	str	r2, [r3, #12]
 80045ce:	e001      	b.n	80045d4 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2200      	movs	r2, #0
 80045d8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2200      	movs	r2, #0
 80045de:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80045e0:	7fbb      	ldrb	r3, [r7, #30]
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3720      	adds	r7, #32
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}
 80045ea:	bf00      	nop
 80045ec:	40007c00 	.word	0x40007c00
 80045f0:	40023800 	.word	0x40023800
 80045f4:	00f42400 	.word	0x00f42400

080045f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b083      	sub	sp, #12
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004604:	f003 0301 	and.w	r3, r3, #1
 8004608:	2b00      	cmp	r3, #0
 800460a:	d00a      	beq.n	8004622 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	430a      	orrs	r2, r1
 8004620:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004626:	f003 0302 	and.w	r3, r3, #2
 800462a:	2b00      	cmp	r3, #0
 800462c:	d00a      	beq.n	8004644 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	430a      	orrs	r2, r1
 8004642:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004648:	f003 0304 	and.w	r3, r3, #4
 800464c:	2b00      	cmp	r3, #0
 800464e:	d00a      	beq.n	8004666 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	430a      	orrs	r2, r1
 8004664:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800466a:	f003 0308 	and.w	r3, r3, #8
 800466e:	2b00      	cmp	r3, #0
 8004670:	d00a      	beq.n	8004688 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	430a      	orrs	r2, r1
 8004686:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468c:	f003 0310 	and.w	r3, r3, #16
 8004690:	2b00      	cmp	r3, #0
 8004692:	d00a      	beq.n	80046aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	430a      	orrs	r2, r1
 80046a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ae:	f003 0320 	and.w	r3, r3, #32
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d00a      	beq.n	80046cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	430a      	orrs	r2, r1
 80046ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d01a      	beq.n	800470e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	430a      	orrs	r2, r1
 80046ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046f6:	d10a      	bne.n	800470e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	430a      	orrs	r2, r1
 800470c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004712:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004716:	2b00      	cmp	r3, #0
 8004718:	d00a      	beq.n	8004730 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	430a      	orrs	r2, r1
 800472e:	605a      	str	r2, [r3, #4]
  }
}
 8004730:	bf00      	nop
 8004732:	370c      	adds	r7, #12
 8004734:	46bd      	mov	sp, r7
 8004736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473a:	4770      	bx	lr

0800473c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b086      	sub	sp, #24
 8004740:	af02      	add	r7, sp, #8
 8004742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2200      	movs	r2, #0
 8004748:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800474c:	f7fc fbd2 	bl	8000ef4 <HAL_GetTick>
 8004750:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f003 0308 	and.w	r3, r3, #8
 800475c:	2b08      	cmp	r3, #8
 800475e:	d10e      	bne.n	800477e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004760:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004764:	9300      	str	r3, [sp, #0]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2200      	movs	r2, #0
 800476a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f000 f817 	bl	80047a2 <UART_WaitOnFlagUntilTimeout>
 8004774:	4603      	mov	r3, r0
 8004776:	2b00      	cmp	r3, #0
 8004778:	d001      	beq.n	800477e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800477a:	2303      	movs	r3, #3
 800477c:	e00d      	b.n	800479a <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2220      	movs	r2, #32
 8004782:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2220      	movs	r2, #32
 8004788:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2200      	movs	r2, #0
 800478e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2200      	movs	r2, #0
 8004794:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004798:	2300      	movs	r3, #0
}
 800479a:	4618      	mov	r0, r3
 800479c:	3710      	adds	r7, #16
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}

080047a2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80047a2:	b580      	push	{r7, lr}
 80047a4:	b084      	sub	sp, #16
 80047a6:	af00      	add	r7, sp, #0
 80047a8:	60f8      	str	r0, [r7, #12]
 80047aa:	60b9      	str	r1, [r7, #8]
 80047ac:	603b      	str	r3, [r7, #0]
 80047ae:	4613      	mov	r3, r2
 80047b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047b2:	e05e      	b.n	8004872 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047b4:	69bb      	ldr	r3, [r7, #24]
 80047b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047ba:	d05a      	beq.n	8004872 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047bc:	f7fc fb9a 	bl	8000ef4 <HAL_GetTick>
 80047c0:	4602      	mov	r2, r0
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	1ad3      	subs	r3, r2, r3
 80047c6:	69ba      	ldr	r2, [r7, #24]
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d302      	bcc.n	80047d2 <UART_WaitOnFlagUntilTimeout+0x30>
 80047cc:	69bb      	ldr	r3, [r7, #24]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d11b      	bne.n	800480a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80047e0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	689a      	ldr	r2, [r3, #8]
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f022 0201 	bic.w	r2, r2, #1
 80047f0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2220      	movs	r2, #32
 80047f6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2220      	movs	r2, #32
 80047fc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2200      	movs	r2, #0
 8004802:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004806:	2303      	movs	r3, #3
 8004808:	e043      	b.n	8004892 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f003 0304 	and.w	r3, r3, #4
 8004814:	2b00      	cmp	r3, #0
 8004816:	d02c      	beq.n	8004872 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	69db      	ldr	r3, [r3, #28]
 800481e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004822:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004826:	d124      	bne.n	8004872 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004830:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004840:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	689a      	ldr	r2, [r3, #8]
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f022 0201 	bic.w	r2, r2, #1
 8004850:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2220      	movs	r2, #32
 8004856:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2220      	movs	r2, #32
 800485c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2220      	movs	r2, #32
 8004862:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2200      	movs	r2, #0
 800486a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800486e:	2303      	movs	r3, #3
 8004870:	e00f      	b.n	8004892 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	69da      	ldr	r2, [r3, #28]
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	4013      	ands	r3, r2
 800487c:	68ba      	ldr	r2, [r7, #8]
 800487e:	429a      	cmp	r2, r3
 8004880:	bf0c      	ite	eq
 8004882:	2301      	moveq	r3, #1
 8004884:	2300      	movne	r3, #0
 8004886:	b2db      	uxtb	r3, r3
 8004888:	461a      	mov	r2, r3
 800488a:	79fb      	ldrb	r3, [r7, #7]
 800488c:	429a      	cmp	r2, r3
 800488e:	d091      	beq.n	80047b4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004890:	2300      	movs	r3, #0
}
 8004892:	4618      	mov	r0, r3
 8004894:	3710      	adds	r7, #16
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}
	...

0800489c <__errno>:
 800489c:	4b01      	ldr	r3, [pc, #4]	; (80048a4 <__errno+0x8>)
 800489e:	6818      	ldr	r0, [r3, #0]
 80048a0:	4770      	bx	lr
 80048a2:	bf00      	nop
 80048a4:	2000000c 	.word	0x2000000c

080048a8 <__libc_init_array>:
 80048a8:	b570      	push	{r4, r5, r6, lr}
 80048aa:	4d0d      	ldr	r5, [pc, #52]	; (80048e0 <__libc_init_array+0x38>)
 80048ac:	4c0d      	ldr	r4, [pc, #52]	; (80048e4 <__libc_init_array+0x3c>)
 80048ae:	1b64      	subs	r4, r4, r5
 80048b0:	10a4      	asrs	r4, r4, #2
 80048b2:	2600      	movs	r6, #0
 80048b4:	42a6      	cmp	r6, r4
 80048b6:	d109      	bne.n	80048cc <__libc_init_array+0x24>
 80048b8:	4d0b      	ldr	r5, [pc, #44]	; (80048e8 <__libc_init_array+0x40>)
 80048ba:	4c0c      	ldr	r4, [pc, #48]	; (80048ec <__libc_init_array+0x44>)
 80048bc:	f000 fc4e 	bl	800515c <_init>
 80048c0:	1b64      	subs	r4, r4, r5
 80048c2:	10a4      	asrs	r4, r4, #2
 80048c4:	2600      	movs	r6, #0
 80048c6:	42a6      	cmp	r6, r4
 80048c8:	d105      	bne.n	80048d6 <__libc_init_array+0x2e>
 80048ca:	bd70      	pop	{r4, r5, r6, pc}
 80048cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80048d0:	4798      	blx	r3
 80048d2:	3601      	adds	r6, #1
 80048d4:	e7ee      	b.n	80048b4 <__libc_init_array+0xc>
 80048d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80048da:	4798      	blx	r3
 80048dc:	3601      	adds	r6, #1
 80048de:	e7f2      	b.n	80048c6 <__libc_init_array+0x1e>
 80048e0:	080051f0 	.word	0x080051f0
 80048e4:	080051f0 	.word	0x080051f0
 80048e8:	080051f0 	.word	0x080051f0
 80048ec:	080051f4 	.word	0x080051f4

080048f0 <memset>:
 80048f0:	4402      	add	r2, r0
 80048f2:	4603      	mov	r3, r0
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d100      	bne.n	80048fa <memset+0xa>
 80048f8:	4770      	bx	lr
 80048fa:	f803 1b01 	strb.w	r1, [r3], #1
 80048fe:	e7f9      	b.n	80048f4 <memset+0x4>

08004900 <siprintf>:
 8004900:	b40e      	push	{r1, r2, r3}
 8004902:	b500      	push	{lr}
 8004904:	b09c      	sub	sp, #112	; 0x70
 8004906:	ab1d      	add	r3, sp, #116	; 0x74
 8004908:	9002      	str	r0, [sp, #8]
 800490a:	9006      	str	r0, [sp, #24]
 800490c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004910:	4809      	ldr	r0, [pc, #36]	; (8004938 <siprintf+0x38>)
 8004912:	9107      	str	r1, [sp, #28]
 8004914:	9104      	str	r1, [sp, #16]
 8004916:	4909      	ldr	r1, [pc, #36]	; (800493c <siprintf+0x3c>)
 8004918:	f853 2b04 	ldr.w	r2, [r3], #4
 800491c:	9105      	str	r1, [sp, #20]
 800491e:	6800      	ldr	r0, [r0, #0]
 8004920:	9301      	str	r3, [sp, #4]
 8004922:	a902      	add	r1, sp, #8
 8004924:	f000 f868 	bl	80049f8 <_svfiprintf_r>
 8004928:	9b02      	ldr	r3, [sp, #8]
 800492a:	2200      	movs	r2, #0
 800492c:	701a      	strb	r2, [r3, #0]
 800492e:	b01c      	add	sp, #112	; 0x70
 8004930:	f85d eb04 	ldr.w	lr, [sp], #4
 8004934:	b003      	add	sp, #12
 8004936:	4770      	bx	lr
 8004938:	2000000c 	.word	0x2000000c
 800493c:	ffff0208 	.word	0xffff0208

08004940 <__ssputs_r>:
 8004940:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004944:	688e      	ldr	r6, [r1, #8]
 8004946:	429e      	cmp	r6, r3
 8004948:	4682      	mov	sl, r0
 800494a:	460c      	mov	r4, r1
 800494c:	4690      	mov	r8, r2
 800494e:	461f      	mov	r7, r3
 8004950:	d838      	bhi.n	80049c4 <__ssputs_r+0x84>
 8004952:	898a      	ldrh	r2, [r1, #12]
 8004954:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004958:	d032      	beq.n	80049c0 <__ssputs_r+0x80>
 800495a:	6825      	ldr	r5, [r4, #0]
 800495c:	6909      	ldr	r1, [r1, #16]
 800495e:	eba5 0901 	sub.w	r9, r5, r1
 8004962:	6965      	ldr	r5, [r4, #20]
 8004964:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004968:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800496c:	3301      	adds	r3, #1
 800496e:	444b      	add	r3, r9
 8004970:	106d      	asrs	r5, r5, #1
 8004972:	429d      	cmp	r5, r3
 8004974:	bf38      	it	cc
 8004976:	461d      	movcc	r5, r3
 8004978:	0553      	lsls	r3, r2, #21
 800497a:	d531      	bpl.n	80049e0 <__ssputs_r+0xa0>
 800497c:	4629      	mov	r1, r5
 800497e:	f000 fb47 	bl	8005010 <_malloc_r>
 8004982:	4606      	mov	r6, r0
 8004984:	b950      	cbnz	r0, 800499c <__ssputs_r+0x5c>
 8004986:	230c      	movs	r3, #12
 8004988:	f8ca 3000 	str.w	r3, [sl]
 800498c:	89a3      	ldrh	r3, [r4, #12]
 800498e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004992:	81a3      	strh	r3, [r4, #12]
 8004994:	f04f 30ff 	mov.w	r0, #4294967295
 8004998:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800499c:	6921      	ldr	r1, [r4, #16]
 800499e:	464a      	mov	r2, r9
 80049a0:	f000 fabe 	bl	8004f20 <memcpy>
 80049a4:	89a3      	ldrh	r3, [r4, #12]
 80049a6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80049aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049ae:	81a3      	strh	r3, [r4, #12]
 80049b0:	6126      	str	r6, [r4, #16]
 80049b2:	6165      	str	r5, [r4, #20]
 80049b4:	444e      	add	r6, r9
 80049b6:	eba5 0509 	sub.w	r5, r5, r9
 80049ba:	6026      	str	r6, [r4, #0]
 80049bc:	60a5      	str	r5, [r4, #8]
 80049be:	463e      	mov	r6, r7
 80049c0:	42be      	cmp	r6, r7
 80049c2:	d900      	bls.n	80049c6 <__ssputs_r+0x86>
 80049c4:	463e      	mov	r6, r7
 80049c6:	4632      	mov	r2, r6
 80049c8:	6820      	ldr	r0, [r4, #0]
 80049ca:	4641      	mov	r1, r8
 80049cc:	f000 fab6 	bl	8004f3c <memmove>
 80049d0:	68a3      	ldr	r3, [r4, #8]
 80049d2:	6822      	ldr	r2, [r4, #0]
 80049d4:	1b9b      	subs	r3, r3, r6
 80049d6:	4432      	add	r2, r6
 80049d8:	60a3      	str	r3, [r4, #8]
 80049da:	6022      	str	r2, [r4, #0]
 80049dc:	2000      	movs	r0, #0
 80049de:	e7db      	b.n	8004998 <__ssputs_r+0x58>
 80049e0:	462a      	mov	r2, r5
 80049e2:	f000 fb6f 	bl	80050c4 <_realloc_r>
 80049e6:	4606      	mov	r6, r0
 80049e8:	2800      	cmp	r0, #0
 80049ea:	d1e1      	bne.n	80049b0 <__ssputs_r+0x70>
 80049ec:	6921      	ldr	r1, [r4, #16]
 80049ee:	4650      	mov	r0, sl
 80049f0:	f000 fabe 	bl	8004f70 <_free_r>
 80049f4:	e7c7      	b.n	8004986 <__ssputs_r+0x46>
	...

080049f8 <_svfiprintf_r>:
 80049f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049fc:	4698      	mov	r8, r3
 80049fe:	898b      	ldrh	r3, [r1, #12]
 8004a00:	061b      	lsls	r3, r3, #24
 8004a02:	b09d      	sub	sp, #116	; 0x74
 8004a04:	4607      	mov	r7, r0
 8004a06:	460d      	mov	r5, r1
 8004a08:	4614      	mov	r4, r2
 8004a0a:	d50e      	bpl.n	8004a2a <_svfiprintf_r+0x32>
 8004a0c:	690b      	ldr	r3, [r1, #16]
 8004a0e:	b963      	cbnz	r3, 8004a2a <_svfiprintf_r+0x32>
 8004a10:	2140      	movs	r1, #64	; 0x40
 8004a12:	f000 fafd 	bl	8005010 <_malloc_r>
 8004a16:	6028      	str	r0, [r5, #0]
 8004a18:	6128      	str	r0, [r5, #16]
 8004a1a:	b920      	cbnz	r0, 8004a26 <_svfiprintf_r+0x2e>
 8004a1c:	230c      	movs	r3, #12
 8004a1e:	603b      	str	r3, [r7, #0]
 8004a20:	f04f 30ff 	mov.w	r0, #4294967295
 8004a24:	e0d1      	b.n	8004bca <_svfiprintf_r+0x1d2>
 8004a26:	2340      	movs	r3, #64	; 0x40
 8004a28:	616b      	str	r3, [r5, #20]
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	9309      	str	r3, [sp, #36]	; 0x24
 8004a2e:	2320      	movs	r3, #32
 8004a30:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004a34:	f8cd 800c 	str.w	r8, [sp, #12]
 8004a38:	2330      	movs	r3, #48	; 0x30
 8004a3a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004be4 <_svfiprintf_r+0x1ec>
 8004a3e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004a42:	f04f 0901 	mov.w	r9, #1
 8004a46:	4623      	mov	r3, r4
 8004a48:	469a      	mov	sl, r3
 8004a4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004a4e:	b10a      	cbz	r2, 8004a54 <_svfiprintf_r+0x5c>
 8004a50:	2a25      	cmp	r2, #37	; 0x25
 8004a52:	d1f9      	bne.n	8004a48 <_svfiprintf_r+0x50>
 8004a54:	ebba 0b04 	subs.w	fp, sl, r4
 8004a58:	d00b      	beq.n	8004a72 <_svfiprintf_r+0x7a>
 8004a5a:	465b      	mov	r3, fp
 8004a5c:	4622      	mov	r2, r4
 8004a5e:	4629      	mov	r1, r5
 8004a60:	4638      	mov	r0, r7
 8004a62:	f7ff ff6d 	bl	8004940 <__ssputs_r>
 8004a66:	3001      	adds	r0, #1
 8004a68:	f000 80aa 	beq.w	8004bc0 <_svfiprintf_r+0x1c8>
 8004a6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004a6e:	445a      	add	r2, fp
 8004a70:	9209      	str	r2, [sp, #36]	; 0x24
 8004a72:	f89a 3000 	ldrb.w	r3, [sl]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	f000 80a2 	beq.w	8004bc0 <_svfiprintf_r+0x1c8>
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	f04f 32ff 	mov.w	r2, #4294967295
 8004a82:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004a86:	f10a 0a01 	add.w	sl, sl, #1
 8004a8a:	9304      	str	r3, [sp, #16]
 8004a8c:	9307      	str	r3, [sp, #28]
 8004a8e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004a92:	931a      	str	r3, [sp, #104]	; 0x68
 8004a94:	4654      	mov	r4, sl
 8004a96:	2205      	movs	r2, #5
 8004a98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a9c:	4851      	ldr	r0, [pc, #324]	; (8004be4 <_svfiprintf_r+0x1ec>)
 8004a9e:	f7fb fbbf 	bl	8000220 <memchr>
 8004aa2:	9a04      	ldr	r2, [sp, #16]
 8004aa4:	b9d8      	cbnz	r0, 8004ade <_svfiprintf_r+0xe6>
 8004aa6:	06d0      	lsls	r0, r2, #27
 8004aa8:	bf44      	itt	mi
 8004aaa:	2320      	movmi	r3, #32
 8004aac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004ab0:	0711      	lsls	r1, r2, #28
 8004ab2:	bf44      	itt	mi
 8004ab4:	232b      	movmi	r3, #43	; 0x2b
 8004ab6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004aba:	f89a 3000 	ldrb.w	r3, [sl]
 8004abe:	2b2a      	cmp	r3, #42	; 0x2a
 8004ac0:	d015      	beq.n	8004aee <_svfiprintf_r+0xf6>
 8004ac2:	9a07      	ldr	r2, [sp, #28]
 8004ac4:	4654      	mov	r4, sl
 8004ac6:	2000      	movs	r0, #0
 8004ac8:	f04f 0c0a 	mov.w	ip, #10
 8004acc:	4621      	mov	r1, r4
 8004ace:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004ad2:	3b30      	subs	r3, #48	; 0x30
 8004ad4:	2b09      	cmp	r3, #9
 8004ad6:	d94e      	bls.n	8004b76 <_svfiprintf_r+0x17e>
 8004ad8:	b1b0      	cbz	r0, 8004b08 <_svfiprintf_r+0x110>
 8004ada:	9207      	str	r2, [sp, #28]
 8004adc:	e014      	b.n	8004b08 <_svfiprintf_r+0x110>
 8004ade:	eba0 0308 	sub.w	r3, r0, r8
 8004ae2:	fa09 f303 	lsl.w	r3, r9, r3
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	9304      	str	r3, [sp, #16]
 8004aea:	46a2      	mov	sl, r4
 8004aec:	e7d2      	b.n	8004a94 <_svfiprintf_r+0x9c>
 8004aee:	9b03      	ldr	r3, [sp, #12]
 8004af0:	1d19      	adds	r1, r3, #4
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	9103      	str	r1, [sp, #12]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	bfbb      	ittet	lt
 8004afa:	425b      	neglt	r3, r3
 8004afc:	f042 0202 	orrlt.w	r2, r2, #2
 8004b00:	9307      	strge	r3, [sp, #28]
 8004b02:	9307      	strlt	r3, [sp, #28]
 8004b04:	bfb8      	it	lt
 8004b06:	9204      	strlt	r2, [sp, #16]
 8004b08:	7823      	ldrb	r3, [r4, #0]
 8004b0a:	2b2e      	cmp	r3, #46	; 0x2e
 8004b0c:	d10c      	bne.n	8004b28 <_svfiprintf_r+0x130>
 8004b0e:	7863      	ldrb	r3, [r4, #1]
 8004b10:	2b2a      	cmp	r3, #42	; 0x2a
 8004b12:	d135      	bne.n	8004b80 <_svfiprintf_r+0x188>
 8004b14:	9b03      	ldr	r3, [sp, #12]
 8004b16:	1d1a      	adds	r2, r3, #4
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	9203      	str	r2, [sp, #12]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	bfb8      	it	lt
 8004b20:	f04f 33ff 	movlt.w	r3, #4294967295
 8004b24:	3402      	adds	r4, #2
 8004b26:	9305      	str	r3, [sp, #20]
 8004b28:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004bf4 <_svfiprintf_r+0x1fc>
 8004b2c:	7821      	ldrb	r1, [r4, #0]
 8004b2e:	2203      	movs	r2, #3
 8004b30:	4650      	mov	r0, sl
 8004b32:	f7fb fb75 	bl	8000220 <memchr>
 8004b36:	b140      	cbz	r0, 8004b4a <_svfiprintf_r+0x152>
 8004b38:	2340      	movs	r3, #64	; 0x40
 8004b3a:	eba0 000a 	sub.w	r0, r0, sl
 8004b3e:	fa03 f000 	lsl.w	r0, r3, r0
 8004b42:	9b04      	ldr	r3, [sp, #16]
 8004b44:	4303      	orrs	r3, r0
 8004b46:	3401      	adds	r4, #1
 8004b48:	9304      	str	r3, [sp, #16]
 8004b4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b4e:	4826      	ldr	r0, [pc, #152]	; (8004be8 <_svfiprintf_r+0x1f0>)
 8004b50:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004b54:	2206      	movs	r2, #6
 8004b56:	f7fb fb63 	bl	8000220 <memchr>
 8004b5a:	2800      	cmp	r0, #0
 8004b5c:	d038      	beq.n	8004bd0 <_svfiprintf_r+0x1d8>
 8004b5e:	4b23      	ldr	r3, [pc, #140]	; (8004bec <_svfiprintf_r+0x1f4>)
 8004b60:	bb1b      	cbnz	r3, 8004baa <_svfiprintf_r+0x1b2>
 8004b62:	9b03      	ldr	r3, [sp, #12]
 8004b64:	3307      	adds	r3, #7
 8004b66:	f023 0307 	bic.w	r3, r3, #7
 8004b6a:	3308      	adds	r3, #8
 8004b6c:	9303      	str	r3, [sp, #12]
 8004b6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b70:	4433      	add	r3, r6
 8004b72:	9309      	str	r3, [sp, #36]	; 0x24
 8004b74:	e767      	b.n	8004a46 <_svfiprintf_r+0x4e>
 8004b76:	fb0c 3202 	mla	r2, ip, r2, r3
 8004b7a:	460c      	mov	r4, r1
 8004b7c:	2001      	movs	r0, #1
 8004b7e:	e7a5      	b.n	8004acc <_svfiprintf_r+0xd4>
 8004b80:	2300      	movs	r3, #0
 8004b82:	3401      	adds	r4, #1
 8004b84:	9305      	str	r3, [sp, #20]
 8004b86:	4619      	mov	r1, r3
 8004b88:	f04f 0c0a 	mov.w	ip, #10
 8004b8c:	4620      	mov	r0, r4
 8004b8e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004b92:	3a30      	subs	r2, #48	; 0x30
 8004b94:	2a09      	cmp	r2, #9
 8004b96:	d903      	bls.n	8004ba0 <_svfiprintf_r+0x1a8>
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d0c5      	beq.n	8004b28 <_svfiprintf_r+0x130>
 8004b9c:	9105      	str	r1, [sp, #20]
 8004b9e:	e7c3      	b.n	8004b28 <_svfiprintf_r+0x130>
 8004ba0:	fb0c 2101 	mla	r1, ip, r1, r2
 8004ba4:	4604      	mov	r4, r0
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	e7f0      	b.n	8004b8c <_svfiprintf_r+0x194>
 8004baa:	ab03      	add	r3, sp, #12
 8004bac:	9300      	str	r3, [sp, #0]
 8004bae:	462a      	mov	r2, r5
 8004bb0:	4b0f      	ldr	r3, [pc, #60]	; (8004bf0 <_svfiprintf_r+0x1f8>)
 8004bb2:	a904      	add	r1, sp, #16
 8004bb4:	4638      	mov	r0, r7
 8004bb6:	f3af 8000 	nop.w
 8004bba:	1c42      	adds	r2, r0, #1
 8004bbc:	4606      	mov	r6, r0
 8004bbe:	d1d6      	bne.n	8004b6e <_svfiprintf_r+0x176>
 8004bc0:	89ab      	ldrh	r3, [r5, #12]
 8004bc2:	065b      	lsls	r3, r3, #25
 8004bc4:	f53f af2c 	bmi.w	8004a20 <_svfiprintf_r+0x28>
 8004bc8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004bca:	b01d      	add	sp, #116	; 0x74
 8004bcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bd0:	ab03      	add	r3, sp, #12
 8004bd2:	9300      	str	r3, [sp, #0]
 8004bd4:	462a      	mov	r2, r5
 8004bd6:	4b06      	ldr	r3, [pc, #24]	; (8004bf0 <_svfiprintf_r+0x1f8>)
 8004bd8:	a904      	add	r1, sp, #16
 8004bda:	4638      	mov	r0, r7
 8004bdc:	f000 f87a 	bl	8004cd4 <_printf_i>
 8004be0:	e7eb      	b.n	8004bba <_svfiprintf_r+0x1c2>
 8004be2:	bf00      	nop
 8004be4:	080051b4 	.word	0x080051b4
 8004be8:	080051be 	.word	0x080051be
 8004bec:	00000000 	.word	0x00000000
 8004bf0:	08004941 	.word	0x08004941
 8004bf4:	080051ba 	.word	0x080051ba

08004bf8 <_printf_common>:
 8004bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bfc:	4616      	mov	r6, r2
 8004bfe:	4699      	mov	r9, r3
 8004c00:	688a      	ldr	r2, [r1, #8]
 8004c02:	690b      	ldr	r3, [r1, #16]
 8004c04:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	bfb8      	it	lt
 8004c0c:	4613      	movlt	r3, r2
 8004c0e:	6033      	str	r3, [r6, #0]
 8004c10:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004c14:	4607      	mov	r7, r0
 8004c16:	460c      	mov	r4, r1
 8004c18:	b10a      	cbz	r2, 8004c1e <_printf_common+0x26>
 8004c1a:	3301      	adds	r3, #1
 8004c1c:	6033      	str	r3, [r6, #0]
 8004c1e:	6823      	ldr	r3, [r4, #0]
 8004c20:	0699      	lsls	r1, r3, #26
 8004c22:	bf42      	ittt	mi
 8004c24:	6833      	ldrmi	r3, [r6, #0]
 8004c26:	3302      	addmi	r3, #2
 8004c28:	6033      	strmi	r3, [r6, #0]
 8004c2a:	6825      	ldr	r5, [r4, #0]
 8004c2c:	f015 0506 	ands.w	r5, r5, #6
 8004c30:	d106      	bne.n	8004c40 <_printf_common+0x48>
 8004c32:	f104 0a19 	add.w	sl, r4, #25
 8004c36:	68e3      	ldr	r3, [r4, #12]
 8004c38:	6832      	ldr	r2, [r6, #0]
 8004c3a:	1a9b      	subs	r3, r3, r2
 8004c3c:	42ab      	cmp	r3, r5
 8004c3e:	dc26      	bgt.n	8004c8e <_printf_common+0x96>
 8004c40:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004c44:	1e13      	subs	r3, r2, #0
 8004c46:	6822      	ldr	r2, [r4, #0]
 8004c48:	bf18      	it	ne
 8004c4a:	2301      	movne	r3, #1
 8004c4c:	0692      	lsls	r2, r2, #26
 8004c4e:	d42b      	bmi.n	8004ca8 <_printf_common+0xb0>
 8004c50:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004c54:	4649      	mov	r1, r9
 8004c56:	4638      	mov	r0, r7
 8004c58:	47c0      	blx	r8
 8004c5a:	3001      	adds	r0, #1
 8004c5c:	d01e      	beq.n	8004c9c <_printf_common+0xa4>
 8004c5e:	6823      	ldr	r3, [r4, #0]
 8004c60:	68e5      	ldr	r5, [r4, #12]
 8004c62:	6832      	ldr	r2, [r6, #0]
 8004c64:	f003 0306 	and.w	r3, r3, #6
 8004c68:	2b04      	cmp	r3, #4
 8004c6a:	bf08      	it	eq
 8004c6c:	1aad      	subeq	r5, r5, r2
 8004c6e:	68a3      	ldr	r3, [r4, #8]
 8004c70:	6922      	ldr	r2, [r4, #16]
 8004c72:	bf0c      	ite	eq
 8004c74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004c78:	2500      	movne	r5, #0
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	bfc4      	itt	gt
 8004c7e:	1a9b      	subgt	r3, r3, r2
 8004c80:	18ed      	addgt	r5, r5, r3
 8004c82:	2600      	movs	r6, #0
 8004c84:	341a      	adds	r4, #26
 8004c86:	42b5      	cmp	r5, r6
 8004c88:	d11a      	bne.n	8004cc0 <_printf_common+0xc8>
 8004c8a:	2000      	movs	r0, #0
 8004c8c:	e008      	b.n	8004ca0 <_printf_common+0xa8>
 8004c8e:	2301      	movs	r3, #1
 8004c90:	4652      	mov	r2, sl
 8004c92:	4649      	mov	r1, r9
 8004c94:	4638      	mov	r0, r7
 8004c96:	47c0      	blx	r8
 8004c98:	3001      	adds	r0, #1
 8004c9a:	d103      	bne.n	8004ca4 <_printf_common+0xac>
 8004c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8004ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ca4:	3501      	adds	r5, #1
 8004ca6:	e7c6      	b.n	8004c36 <_printf_common+0x3e>
 8004ca8:	18e1      	adds	r1, r4, r3
 8004caa:	1c5a      	adds	r2, r3, #1
 8004cac:	2030      	movs	r0, #48	; 0x30
 8004cae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004cb2:	4422      	add	r2, r4
 8004cb4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004cb8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004cbc:	3302      	adds	r3, #2
 8004cbe:	e7c7      	b.n	8004c50 <_printf_common+0x58>
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	4622      	mov	r2, r4
 8004cc4:	4649      	mov	r1, r9
 8004cc6:	4638      	mov	r0, r7
 8004cc8:	47c0      	blx	r8
 8004cca:	3001      	adds	r0, #1
 8004ccc:	d0e6      	beq.n	8004c9c <_printf_common+0xa4>
 8004cce:	3601      	adds	r6, #1
 8004cd0:	e7d9      	b.n	8004c86 <_printf_common+0x8e>
	...

08004cd4 <_printf_i>:
 8004cd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004cd8:	460c      	mov	r4, r1
 8004cda:	4691      	mov	r9, r2
 8004cdc:	7e27      	ldrb	r7, [r4, #24]
 8004cde:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004ce0:	2f78      	cmp	r7, #120	; 0x78
 8004ce2:	4680      	mov	r8, r0
 8004ce4:	469a      	mov	sl, r3
 8004ce6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004cea:	d807      	bhi.n	8004cfc <_printf_i+0x28>
 8004cec:	2f62      	cmp	r7, #98	; 0x62
 8004cee:	d80a      	bhi.n	8004d06 <_printf_i+0x32>
 8004cf0:	2f00      	cmp	r7, #0
 8004cf2:	f000 80d8 	beq.w	8004ea6 <_printf_i+0x1d2>
 8004cf6:	2f58      	cmp	r7, #88	; 0x58
 8004cf8:	f000 80a3 	beq.w	8004e42 <_printf_i+0x16e>
 8004cfc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004d00:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004d04:	e03a      	b.n	8004d7c <_printf_i+0xa8>
 8004d06:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004d0a:	2b15      	cmp	r3, #21
 8004d0c:	d8f6      	bhi.n	8004cfc <_printf_i+0x28>
 8004d0e:	a001      	add	r0, pc, #4	; (adr r0, 8004d14 <_printf_i+0x40>)
 8004d10:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004d14:	08004d6d 	.word	0x08004d6d
 8004d18:	08004d81 	.word	0x08004d81
 8004d1c:	08004cfd 	.word	0x08004cfd
 8004d20:	08004cfd 	.word	0x08004cfd
 8004d24:	08004cfd 	.word	0x08004cfd
 8004d28:	08004cfd 	.word	0x08004cfd
 8004d2c:	08004d81 	.word	0x08004d81
 8004d30:	08004cfd 	.word	0x08004cfd
 8004d34:	08004cfd 	.word	0x08004cfd
 8004d38:	08004cfd 	.word	0x08004cfd
 8004d3c:	08004cfd 	.word	0x08004cfd
 8004d40:	08004e8d 	.word	0x08004e8d
 8004d44:	08004db1 	.word	0x08004db1
 8004d48:	08004e6f 	.word	0x08004e6f
 8004d4c:	08004cfd 	.word	0x08004cfd
 8004d50:	08004cfd 	.word	0x08004cfd
 8004d54:	08004eaf 	.word	0x08004eaf
 8004d58:	08004cfd 	.word	0x08004cfd
 8004d5c:	08004db1 	.word	0x08004db1
 8004d60:	08004cfd 	.word	0x08004cfd
 8004d64:	08004cfd 	.word	0x08004cfd
 8004d68:	08004e77 	.word	0x08004e77
 8004d6c:	680b      	ldr	r3, [r1, #0]
 8004d6e:	1d1a      	adds	r2, r3, #4
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	600a      	str	r2, [r1, #0]
 8004d74:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004d78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	e0a3      	b.n	8004ec8 <_printf_i+0x1f4>
 8004d80:	6825      	ldr	r5, [r4, #0]
 8004d82:	6808      	ldr	r0, [r1, #0]
 8004d84:	062e      	lsls	r6, r5, #24
 8004d86:	f100 0304 	add.w	r3, r0, #4
 8004d8a:	d50a      	bpl.n	8004da2 <_printf_i+0xce>
 8004d8c:	6805      	ldr	r5, [r0, #0]
 8004d8e:	600b      	str	r3, [r1, #0]
 8004d90:	2d00      	cmp	r5, #0
 8004d92:	da03      	bge.n	8004d9c <_printf_i+0xc8>
 8004d94:	232d      	movs	r3, #45	; 0x2d
 8004d96:	426d      	negs	r5, r5
 8004d98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d9c:	485e      	ldr	r0, [pc, #376]	; (8004f18 <_printf_i+0x244>)
 8004d9e:	230a      	movs	r3, #10
 8004da0:	e019      	b.n	8004dd6 <_printf_i+0x102>
 8004da2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004da6:	6805      	ldr	r5, [r0, #0]
 8004da8:	600b      	str	r3, [r1, #0]
 8004daa:	bf18      	it	ne
 8004dac:	b22d      	sxthne	r5, r5
 8004dae:	e7ef      	b.n	8004d90 <_printf_i+0xbc>
 8004db0:	680b      	ldr	r3, [r1, #0]
 8004db2:	6825      	ldr	r5, [r4, #0]
 8004db4:	1d18      	adds	r0, r3, #4
 8004db6:	6008      	str	r0, [r1, #0]
 8004db8:	0628      	lsls	r0, r5, #24
 8004dba:	d501      	bpl.n	8004dc0 <_printf_i+0xec>
 8004dbc:	681d      	ldr	r5, [r3, #0]
 8004dbe:	e002      	b.n	8004dc6 <_printf_i+0xf2>
 8004dc0:	0669      	lsls	r1, r5, #25
 8004dc2:	d5fb      	bpl.n	8004dbc <_printf_i+0xe8>
 8004dc4:	881d      	ldrh	r5, [r3, #0]
 8004dc6:	4854      	ldr	r0, [pc, #336]	; (8004f18 <_printf_i+0x244>)
 8004dc8:	2f6f      	cmp	r7, #111	; 0x6f
 8004dca:	bf0c      	ite	eq
 8004dcc:	2308      	moveq	r3, #8
 8004dce:	230a      	movne	r3, #10
 8004dd0:	2100      	movs	r1, #0
 8004dd2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004dd6:	6866      	ldr	r6, [r4, #4]
 8004dd8:	60a6      	str	r6, [r4, #8]
 8004dda:	2e00      	cmp	r6, #0
 8004ddc:	bfa2      	ittt	ge
 8004dde:	6821      	ldrge	r1, [r4, #0]
 8004de0:	f021 0104 	bicge.w	r1, r1, #4
 8004de4:	6021      	strge	r1, [r4, #0]
 8004de6:	b90d      	cbnz	r5, 8004dec <_printf_i+0x118>
 8004de8:	2e00      	cmp	r6, #0
 8004dea:	d04d      	beq.n	8004e88 <_printf_i+0x1b4>
 8004dec:	4616      	mov	r6, r2
 8004dee:	fbb5 f1f3 	udiv	r1, r5, r3
 8004df2:	fb03 5711 	mls	r7, r3, r1, r5
 8004df6:	5dc7      	ldrb	r7, [r0, r7]
 8004df8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004dfc:	462f      	mov	r7, r5
 8004dfe:	42bb      	cmp	r3, r7
 8004e00:	460d      	mov	r5, r1
 8004e02:	d9f4      	bls.n	8004dee <_printf_i+0x11a>
 8004e04:	2b08      	cmp	r3, #8
 8004e06:	d10b      	bne.n	8004e20 <_printf_i+0x14c>
 8004e08:	6823      	ldr	r3, [r4, #0]
 8004e0a:	07df      	lsls	r7, r3, #31
 8004e0c:	d508      	bpl.n	8004e20 <_printf_i+0x14c>
 8004e0e:	6923      	ldr	r3, [r4, #16]
 8004e10:	6861      	ldr	r1, [r4, #4]
 8004e12:	4299      	cmp	r1, r3
 8004e14:	bfde      	ittt	le
 8004e16:	2330      	movle	r3, #48	; 0x30
 8004e18:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004e1c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004e20:	1b92      	subs	r2, r2, r6
 8004e22:	6122      	str	r2, [r4, #16]
 8004e24:	f8cd a000 	str.w	sl, [sp]
 8004e28:	464b      	mov	r3, r9
 8004e2a:	aa03      	add	r2, sp, #12
 8004e2c:	4621      	mov	r1, r4
 8004e2e:	4640      	mov	r0, r8
 8004e30:	f7ff fee2 	bl	8004bf8 <_printf_common>
 8004e34:	3001      	adds	r0, #1
 8004e36:	d14c      	bne.n	8004ed2 <_printf_i+0x1fe>
 8004e38:	f04f 30ff 	mov.w	r0, #4294967295
 8004e3c:	b004      	add	sp, #16
 8004e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e42:	4835      	ldr	r0, [pc, #212]	; (8004f18 <_printf_i+0x244>)
 8004e44:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004e48:	6823      	ldr	r3, [r4, #0]
 8004e4a:	680e      	ldr	r6, [r1, #0]
 8004e4c:	061f      	lsls	r7, r3, #24
 8004e4e:	f856 5b04 	ldr.w	r5, [r6], #4
 8004e52:	600e      	str	r6, [r1, #0]
 8004e54:	d514      	bpl.n	8004e80 <_printf_i+0x1ac>
 8004e56:	07d9      	lsls	r1, r3, #31
 8004e58:	bf44      	itt	mi
 8004e5a:	f043 0320 	orrmi.w	r3, r3, #32
 8004e5e:	6023      	strmi	r3, [r4, #0]
 8004e60:	b91d      	cbnz	r5, 8004e6a <_printf_i+0x196>
 8004e62:	6823      	ldr	r3, [r4, #0]
 8004e64:	f023 0320 	bic.w	r3, r3, #32
 8004e68:	6023      	str	r3, [r4, #0]
 8004e6a:	2310      	movs	r3, #16
 8004e6c:	e7b0      	b.n	8004dd0 <_printf_i+0xfc>
 8004e6e:	6823      	ldr	r3, [r4, #0]
 8004e70:	f043 0320 	orr.w	r3, r3, #32
 8004e74:	6023      	str	r3, [r4, #0]
 8004e76:	2378      	movs	r3, #120	; 0x78
 8004e78:	4828      	ldr	r0, [pc, #160]	; (8004f1c <_printf_i+0x248>)
 8004e7a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004e7e:	e7e3      	b.n	8004e48 <_printf_i+0x174>
 8004e80:	065e      	lsls	r6, r3, #25
 8004e82:	bf48      	it	mi
 8004e84:	b2ad      	uxthmi	r5, r5
 8004e86:	e7e6      	b.n	8004e56 <_printf_i+0x182>
 8004e88:	4616      	mov	r6, r2
 8004e8a:	e7bb      	b.n	8004e04 <_printf_i+0x130>
 8004e8c:	680b      	ldr	r3, [r1, #0]
 8004e8e:	6826      	ldr	r6, [r4, #0]
 8004e90:	6960      	ldr	r0, [r4, #20]
 8004e92:	1d1d      	adds	r5, r3, #4
 8004e94:	600d      	str	r5, [r1, #0]
 8004e96:	0635      	lsls	r5, r6, #24
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	d501      	bpl.n	8004ea0 <_printf_i+0x1cc>
 8004e9c:	6018      	str	r0, [r3, #0]
 8004e9e:	e002      	b.n	8004ea6 <_printf_i+0x1d2>
 8004ea0:	0671      	lsls	r1, r6, #25
 8004ea2:	d5fb      	bpl.n	8004e9c <_printf_i+0x1c8>
 8004ea4:	8018      	strh	r0, [r3, #0]
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	6123      	str	r3, [r4, #16]
 8004eaa:	4616      	mov	r6, r2
 8004eac:	e7ba      	b.n	8004e24 <_printf_i+0x150>
 8004eae:	680b      	ldr	r3, [r1, #0]
 8004eb0:	1d1a      	adds	r2, r3, #4
 8004eb2:	600a      	str	r2, [r1, #0]
 8004eb4:	681e      	ldr	r6, [r3, #0]
 8004eb6:	6862      	ldr	r2, [r4, #4]
 8004eb8:	2100      	movs	r1, #0
 8004eba:	4630      	mov	r0, r6
 8004ebc:	f7fb f9b0 	bl	8000220 <memchr>
 8004ec0:	b108      	cbz	r0, 8004ec6 <_printf_i+0x1f2>
 8004ec2:	1b80      	subs	r0, r0, r6
 8004ec4:	6060      	str	r0, [r4, #4]
 8004ec6:	6863      	ldr	r3, [r4, #4]
 8004ec8:	6123      	str	r3, [r4, #16]
 8004eca:	2300      	movs	r3, #0
 8004ecc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ed0:	e7a8      	b.n	8004e24 <_printf_i+0x150>
 8004ed2:	6923      	ldr	r3, [r4, #16]
 8004ed4:	4632      	mov	r2, r6
 8004ed6:	4649      	mov	r1, r9
 8004ed8:	4640      	mov	r0, r8
 8004eda:	47d0      	blx	sl
 8004edc:	3001      	adds	r0, #1
 8004ede:	d0ab      	beq.n	8004e38 <_printf_i+0x164>
 8004ee0:	6823      	ldr	r3, [r4, #0]
 8004ee2:	079b      	lsls	r3, r3, #30
 8004ee4:	d413      	bmi.n	8004f0e <_printf_i+0x23a>
 8004ee6:	68e0      	ldr	r0, [r4, #12]
 8004ee8:	9b03      	ldr	r3, [sp, #12]
 8004eea:	4298      	cmp	r0, r3
 8004eec:	bfb8      	it	lt
 8004eee:	4618      	movlt	r0, r3
 8004ef0:	e7a4      	b.n	8004e3c <_printf_i+0x168>
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	4632      	mov	r2, r6
 8004ef6:	4649      	mov	r1, r9
 8004ef8:	4640      	mov	r0, r8
 8004efa:	47d0      	blx	sl
 8004efc:	3001      	adds	r0, #1
 8004efe:	d09b      	beq.n	8004e38 <_printf_i+0x164>
 8004f00:	3501      	adds	r5, #1
 8004f02:	68e3      	ldr	r3, [r4, #12]
 8004f04:	9903      	ldr	r1, [sp, #12]
 8004f06:	1a5b      	subs	r3, r3, r1
 8004f08:	42ab      	cmp	r3, r5
 8004f0a:	dcf2      	bgt.n	8004ef2 <_printf_i+0x21e>
 8004f0c:	e7eb      	b.n	8004ee6 <_printf_i+0x212>
 8004f0e:	2500      	movs	r5, #0
 8004f10:	f104 0619 	add.w	r6, r4, #25
 8004f14:	e7f5      	b.n	8004f02 <_printf_i+0x22e>
 8004f16:	bf00      	nop
 8004f18:	080051c5 	.word	0x080051c5
 8004f1c:	080051d6 	.word	0x080051d6

08004f20 <memcpy>:
 8004f20:	440a      	add	r2, r1
 8004f22:	4291      	cmp	r1, r2
 8004f24:	f100 33ff 	add.w	r3, r0, #4294967295
 8004f28:	d100      	bne.n	8004f2c <memcpy+0xc>
 8004f2a:	4770      	bx	lr
 8004f2c:	b510      	push	{r4, lr}
 8004f2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f32:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004f36:	4291      	cmp	r1, r2
 8004f38:	d1f9      	bne.n	8004f2e <memcpy+0xe>
 8004f3a:	bd10      	pop	{r4, pc}

08004f3c <memmove>:
 8004f3c:	4288      	cmp	r0, r1
 8004f3e:	b510      	push	{r4, lr}
 8004f40:	eb01 0402 	add.w	r4, r1, r2
 8004f44:	d902      	bls.n	8004f4c <memmove+0x10>
 8004f46:	4284      	cmp	r4, r0
 8004f48:	4623      	mov	r3, r4
 8004f4a:	d807      	bhi.n	8004f5c <memmove+0x20>
 8004f4c:	1e43      	subs	r3, r0, #1
 8004f4e:	42a1      	cmp	r1, r4
 8004f50:	d008      	beq.n	8004f64 <memmove+0x28>
 8004f52:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004f56:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004f5a:	e7f8      	b.n	8004f4e <memmove+0x12>
 8004f5c:	4402      	add	r2, r0
 8004f5e:	4601      	mov	r1, r0
 8004f60:	428a      	cmp	r2, r1
 8004f62:	d100      	bne.n	8004f66 <memmove+0x2a>
 8004f64:	bd10      	pop	{r4, pc}
 8004f66:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004f6a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004f6e:	e7f7      	b.n	8004f60 <memmove+0x24>

08004f70 <_free_r>:
 8004f70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004f72:	2900      	cmp	r1, #0
 8004f74:	d048      	beq.n	8005008 <_free_r+0x98>
 8004f76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f7a:	9001      	str	r0, [sp, #4]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	f1a1 0404 	sub.w	r4, r1, #4
 8004f82:	bfb8      	it	lt
 8004f84:	18e4      	addlt	r4, r4, r3
 8004f86:	f000 f8d3 	bl	8005130 <__malloc_lock>
 8004f8a:	4a20      	ldr	r2, [pc, #128]	; (800500c <_free_r+0x9c>)
 8004f8c:	9801      	ldr	r0, [sp, #4]
 8004f8e:	6813      	ldr	r3, [r2, #0]
 8004f90:	4615      	mov	r5, r2
 8004f92:	b933      	cbnz	r3, 8004fa2 <_free_r+0x32>
 8004f94:	6063      	str	r3, [r4, #4]
 8004f96:	6014      	str	r4, [r2, #0]
 8004f98:	b003      	add	sp, #12
 8004f9a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004f9e:	f000 b8cd 	b.w	800513c <__malloc_unlock>
 8004fa2:	42a3      	cmp	r3, r4
 8004fa4:	d90b      	bls.n	8004fbe <_free_r+0x4e>
 8004fa6:	6821      	ldr	r1, [r4, #0]
 8004fa8:	1862      	adds	r2, r4, r1
 8004faa:	4293      	cmp	r3, r2
 8004fac:	bf04      	itt	eq
 8004fae:	681a      	ldreq	r2, [r3, #0]
 8004fb0:	685b      	ldreq	r3, [r3, #4]
 8004fb2:	6063      	str	r3, [r4, #4]
 8004fb4:	bf04      	itt	eq
 8004fb6:	1852      	addeq	r2, r2, r1
 8004fb8:	6022      	streq	r2, [r4, #0]
 8004fba:	602c      	str	r4, [r5, #0]
 8004fbc:	e7ec      	b.n	8004f98 <_free_r+0x28>
 8004fbe:	461a      	mov	r2, r3
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	b10b      	cbz	r3, 8004fc8 <_free_r+0x58>
 8004fc4:	42a3      	cmp	r3, r4
 8004fc6:	d9fa      	bls.n	8004fbe <_free_r+0x4e>
 8004fc8:	6811      	ldr	r1, [r2, #0]
 8004fca:	1855      	adds	r5, r2, r1
 8004fcc:	42a5      	cmp	r5, r4
 8004fce:	d10b      	bne.n	8004fe8 <_free_r+0x78>
 8004fd0:	6824      	ldr	r4, [r4, #0]
 8004fd2:	4421      	add	r1, r4
 8004fd4:	1854      	adds	r4, r2, r1
 8004fd6:	42a3      	cmp	r3, r4
 8004fd8:	6011      	str	r1, [r2, #0]
 8004fda:	d1dd      	bne.n	8004f98 <_free_r+0x28>
 8004fdc:	681c      	ldr	r4, [r3, #0]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	6053      	str	r3, [r2, #4]
 8004fe2:	4421      	add	r1, r4
 8004fe4:	6011      	str	r1, [r2, #0]
 8004fe6:	e7d7      	b.n	8004f98 <_free_r+0x28>
 8004fe8:	d902      	bls.n	8004ff0 <_free_r+0x80>
 8004fea:	230c      	movs	r3, #12
 8004fec:	6003      	str	r3, [r0, #0]
 8004fee:	e7d3      	b.n	8004f98 <_free_r+0x28>
 8004ff0:	6825      	ldr	r5, [r4, #0]
 8004ff2:	1961      	adds	r1, r4, r5
 8004ff4:	428b      	cmp	r3, r1
 8004ff6:	bf04      	itt	eq
 8004ff8:	6819      	ldreq	r1, [r3, #0]
 8004ffa:	685b      	ldreq	r3, [r3, #4]
 8004ffc:	6063      	str	r3, [r4, #4]
 8004ffe:	bf04      	itt	eq
 8005000:	1949      	addeq	r1, r1, r5
 8005002:	6021      	streq	r1, [r4, #0]
 8005004:	6054      	str	r4, [r2, #4]
 8005006:	e7c7      	b.n	8004f98 <_free_r+0x28>
 8005008:	b003      	add	sp, #12
 800500a:	bd30      	pop	{r4, r5, pc}
 800500c:	20000090 	.word	0x20000090

08005010 <_malloc_r>:
 8005010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005012:	1ccd      	adds	r5, r1, #3
 8005014:	f025 0503 	bic.w	r5, r5, #3
 8005018:	3508      	adds	r5, #8
 800501a:	2d0c      	cmp	r5, #12
 800501c:	bf38      	it	cc
 800501e:	250c      	movcc	r5, #12
 8005020:	2d00      	cmp	r5, #0
 8005022:	4606      	mov	r6, r0
 8005024:	db01      	blt.n	800502a <_malloc_r+0x1a>
 8005026:	42a9      	cmp	r1, r5
 8005028:	d903      	bls.n	8005032 <_malloc_r+0x22>
 800502a:	230c      	movs	r3, #12
 800502c:	6033      	str	r3, [r6, #0]
 800502e:	2000      	movs	r0, #0
 8005030:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005032:	f000 f87d 	bl	8005130 <__malloc_lock>
 8005036:	4921      	ldr	r1, [pc, #132]	; (80050bc <_malloc_r+0xac>)
 8005038:	680a      	ldr	r2, [r1, #0]
 800503a:	4614      	mov	r4, r2
 800503c:	b99c      	cbnz	r4, 8005066 <_malloc_r+0x56>
 800503e:	4f20      	ldr	r7, [pc, #128]	; (80050c0 <_malloc_r+0xb0>)
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	b923      	cbnz	r3, 800504e <_malloc_r+0x3e>
 8005044:	4621      	mov	r1, r4
 8005046:	4630      	mov	r0, r6
 8005048:	f000 f862 	bl	8005110 <_sbrk_r>
 800504c:	6038      	str	r0, [r7, #0]
 800504e:	4629      	mov	r1, r5
 8005050:	4630      	mov	r0, r6
 8005052:	f000 f85d 	bl	8005110 <_sbrk_r>
 8005056:	1c43      	adds	r3, r0, #1
 8005058:	d123      	bne.n	80050a2 <_malloc_r+0x92>
 800505a:	230c      	movs	r3, #12
 800505c:	6033      	str	r3, [r6, #0]
 800505e:	4630      	mov	r0, r6
 8005060:	f000 f86c 	bl	800513c <__malloc_unlock>
 8005064:	e7e3      	b.n	800502e <_malloc_r+0x1e>
 8005066:	6823      	ldr	r3, [r4, #0]
 8005068:	1b5b      	subs	r3, r3, r5
 800506a:	d417      	bmi.n	800509c <_malloc_r+0x8c>
 800506c:	2b0b      	cmp	r3, #11
 800506e:	d903      	bls.n	8005078 <_malloc_r+0x68>
 8005070:	6023      	str	r3, [r4, #0]
 8005072:	441c      	add	r4, r3
 8005074:	6025      	str	r5, [r4, #0]
 8005076:	e004      	b.n	8005082 <_malloc_r+0x72>
 8005078:	6863      	ldr	r3, [r4, #4]
 800507a:	42a2      	cmp	r2, r4
 800507c:	bf0c      	ite	eq
 800507e:	600b      	streq	r3, [r1, #0]
 8005080:	6053      	strne	r3, [r2, #4]
 8005082:	4630      	mov	r0, r6
 8005084:	f000 f85a 	bl	800513c <__malloc_unlock>
 8005088:	f104 000b 	add.w	r0, r4, #11
 800508c:	1d23      	adds	r3, r4, #4
 800508e:	f020 0007 	bic.w	r0, r0, #7
 8005092:	1ac2      	subs	r2, r0, r3
 8005094:	d0cc      	beq.n	8005030 <_malloc_r+0x20>
 8005096:	1a1b      	subs	r3, r3, r0
 8005098:	50a3      	str	r3, [r4, r2]
 800509a:	e7c9      	b.n	8005030 <_malloc_r+0x20>
 800509c:	4622      	mov	r2, r4
 800509e:	6864      	ldr	r4, [r4, #4]
 80050a0:	e7cc      	b.n	800503c <_malloc_r+0x2c>
 80050a2:	1cc4      	adds	r4, r0, #3
 80050a4:	f024 0403 	bic.w	r4, r4, #3
 80050a8:	42a0      	cmp	r0, r4
 80050aa:	d0e3      	beq.n	8005074 <_malloc_r+0x64>
 80050ac:	1a21      	subs	r1, r4, r0
 80050ae:	4630      	mov	r0, r6
 80050b0:	f000 f82e 	bl	8005110 <_sbrk_r>
 80050b4:	3001      	adds	r0, #1
 80050b6:	d1dd      	bne.n	8005074 <_malloc_r+0x64>
 80050b8:	e7cf      	b.n	800505a <_malloc_r+0x4a>
 80050ba:	bf00      	nop
 80050bc:	20000090 	.word	0x20000090
 80050c0:	20000094 	.word	0x20000094

080050c4 <_realloc_r>:
 80050c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050c6:	4607      	mov	r7, r0
 80050c8:	4614      	mov	r4, r2
 80050ca:	460e      	mov	r6, r1
 80050cc:	b921      	cbnz	r1, 80050d8 <_realloc_r+0x14>
 80050ce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80050d2:	4611      	mov	r1, r2
 80050d4:	f7ff bf9c 	b.w	8005010 <_malloc_r>
 80050d8:	b922      	cbnz	r2, 80050e4 <_realloc_r+0x20>
 80050da:	f7ff ff49 	bl	8004f70 <_free_r>
 80050de:	4625      	mov	r5, r4
 80050e0:	4628      	mov	r0, r5
 80050e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80050e4:	f000 f830 	bl	8005148 <_malloc_usable_size_r>
 80050e8:	42a0      	cmp	r0, r4
 80050ea:	d20f      	bcs.n	800510c <_realloc_r+0x48>
 80050ec:	4621      	mov	r1, r4
 80050ee:	4638      	mov	r0, r7
 80050f0:	f7ff ff8e 	bl	8005010 <_malloc_r>
 80050f4:	4605      	mov	r5, r0
 80050f6:	2800      	cmp	r0, #0
 80050f8:	d0f2      	beq.n	80050e0 <_realloc_r+0x1c>
 80050fa:	4631      	mov	r1, r6
 80050fc:	4622      	mov	r2, r4
 80050fe:	f7ff ff0f 	bl	8004f20 <memcpy>
 8005102:	4631      	mov	r1, r6
 8005104:	4638      	mov	r0, r7
 8005106:	f7ff ff33 	bl	8004f70 <_free_r>
 800510a:	e7e9      	b.n	80050e0 <_realloc_r+0x1c>
 800510c:	4635      	mov	r5, r6
 800510e:	e7e7      	b.n	80050e0 <_realloc_r+0x1c>

08005110 <_sbrk_r>:
 8005110:	b538      	push	{r3, r4, r5, lr}
 8005112:	4d06      	ldr	r5, [pc, #24]	; (800512c <_sbrk_r+0x1c>)
 8005114:	2300      	movs	r3, #0
 8005116:	4604      	mov	r4, r0
 8005118:	4608      	mov	r0, r1
 800511a:	602b      	str	r3, [r5, #0]
 800511c:	f7fb fe28 	bl	8000d70 <_sbrk>
 8005120:	1c43      	adds	r3, r0, #1
 8005122:	d102      	bne.n	800512a <_sbrk_r+0x1a>
 8005124:	682b      	ldr	r3, [r5, #0]
 8005126:	b103      	cbz	r3, 800512a <_sbrk_r+0x1a>
 8005128:	6023      	str	r3, [r4, #0]
 800512a:	bd38      	pop	{r3, r4, r5, pc}
 800512c:	20000214 	.word	0x20000214

08005130 <__malloc_lock>:
 8005130:	4801      	ldr	r0, [pc, #4]	; (8005138 <__malloc_lock+0x8>)
 8005132:	f000 b811 	b.w	8005158 <__retarget_lock_acquire_recursive>
 8005136:	bf00      	nop
 8005138:	2000021c 	.word	0x2000021c

0800513c <__malloc_unlock>:
 800513c:	4801      	ldr	r0, [pc, #4]	; (8005144 <__malloc_unlock+0x8>)
 800513e:	f000 b80c 	b.w	800515a <__retarget_lock_release_recursive>
 8005142:	bf00      	nop
 8005144:	2000021c 	.word	0x2000021c

08005148 <_malloc_usable_size_r>:
 8005148:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800514c:	1f18      	subs	r0, r3, #4
 800514e:	2b00      	cmp	r3, #0
 8005150:	bfbc      	itt	lt
 8005152:	580b      	ldrlt	r3, [r1, r0]
 8005154:	18c0      	addlt	r0, r0, r3
 8005156:	4770      	bx	lr

08005158 <__retarget_lock_acquire_recursive>:
 8005158:	4770      	bx	lr

0800515a <__retarget_lock_release_recursive>:
 800515a:	4770      	bx	lr

0800515c <_init>:
 800515c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800515e:	bf00      	nop
 8005160:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005162:	bc08      	pop	{r3}
 8005164:	469e      	mov	lr, r3
 8005166:	4770      	bx	lr

08005168 <_fini>:
 8005168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800516a:	bf00      	nop
 800516c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800516e:	bc08      	pop	{r3}
 8005170:	469e      	mov	lr, r3
 8005172:	4770      	bx	lr
