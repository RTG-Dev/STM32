
F746_printf.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004928  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08004af8  08004af8  00014af8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004bc4  08004bc4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004bc4  08004bc4  00014bc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004bcc  08004bcc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004bcc  08004bcc  00014bcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004bd0  08004bd0  00014bd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004bd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004c0  20000070  08004c44  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000530  08004c44  00020530  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ffc1  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000268f  00000000  00000000  00030061  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bb0  00000000  00000000  000326f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a88  00000000  00000000  000332a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002644b  00000000  00000000  00033d28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dd87  00000000  00000000  0005a173  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e51ab  00000000  00000000  00067efa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014d0a5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036d0  00000000  00000000  0014d0f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004ae0 	.word	0x08004ae0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08004ae0 	.word	0x08004ae0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96e 	b.w	80005a4 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468c      	mov	ip, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8083 	bne.w	80003f6 <__udivmoddi4+0x116>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d947      	bls.n	8000386 <__udivmoddi4+0xa6>
 80002f6:	fab2 f282 	clz	r2, r2
 80002fa:	b142      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fc:	f1c2 0020 	rsb	r0, r2, #32
 8000300:	fa24 f000 	lsr.w	r0, r4, r0
 8000304:	4091      	lsls	r1, r2
 8000306:	4097      	lsls	r7, r2
 8000308:	ea40 0c01 	orr.w	ip, r0, r1
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbbc f6f8 	udiv	r6, ip, r8
 8000318:	fa1f fe87 	uxth.w	lr, r7
 800031c:	fb08 c116 	mls	r1, r8, r6, ip
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb06 f10e 	mul.w	r1, r6, lr
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000332:	f080 8119 	bcs.w	8000568 <__udivmoddi4+0x288>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8116 	bls.w	8000568 <__udivmoddi4+0x288>
 800033c:	3e02      	subs	r6, #2
 800033e:	443b      	add	r3, r7
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0f8 	udiv	r0, r3, r8
 8000348:	fb08 3310 	mls	r3, r8, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fe0e 	mul.w	lr, r0, lr
 8000354:	45a6      	cmp	lr, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	193c      	adds	r4, r7, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8105 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f240 8102 	bls.w	800056c <__udivmoddi4+0x28c>
 8000368:	3802      	subs	r0, #2
 800036a:	443c      	add	r4, r7
 800036c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000370:	eba4 040e 	sub.w	r4, r4, lr
 8000374:	2600      	movs	r6, #0
 8000376:	b11d      	cbz	r5, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c5 4300 	strd	r4, r3, [r5]
 8000380:	4631      	mov	r1, r6
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	b902      	cbnz	r2, 800038a <__udivmoddi4+0xaa>
 8000388:	deff      	udf	#255	; 0xff
 800038a:	fab2 f282 	clz	r2, r2
 800038e:	2a00      	cmp	r2, #0
 8000390:	d150      	bne.n	8000434 <__udivmoddi4+0x154>
 8000392:	1bcb      	subs	r3, r1, r7
 8000394:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000398:	fa1f f887 	uxth.w	r8, r7
 800039c:	2601      	movs	r6, #1
 800039e:	fbb3 fcfe 	udiv	ip, r3, lr
 80003a2:	0c21      	lsrs	r1, r4, #16
 80003a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb08 f30c 	mul.w	r3, r8, ip
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0xe2>
 80003bc:	428b      	cmp	r3, r1
 80003be:	f200 80e9 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1ac9      	subs	r1, r1, r3
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x10c>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x10a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80d9 	bhi.w	800059c <__udivmoddi4+0x2bc>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e7bf      	b.n	8000376 <__udivmoddi4+0x96>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0x12e>
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	f000 80b1 	beq.w	8000562 <__udivmoddi4+0x282>
 8000400:	2600      	movs	r6, #0
 8000402:	e9c5 0100 	strd	r0, r1, [r5]
 8000406:	4630      	mov	r0, r6
 8000408:	4631      	mov	r1, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	fab3 f683 	clz	r6, r3
 8000412:	2e00      	cmp	r6, #0
 8000414:	d14a      	bne.n	80004ac <__udivmoddi4+0x1cc>
 8000416:	428b      	cmp	r3, r1
 8000418:	d302      	bcc.n	8000420 <__udivmoddi4+0x140>
 800041a:	4282      	cmp	r2, r0
 800041c:	f200 80b8 	bhi.w	8000590 <__udivmoddi4+0x2b0>
 8000420:	1a84      	subs	r4, r0, r2
 8000422:	eb61 0103 	sbc.w	r1, r1, r3
 8000426:	2001      	movs	r0, #1
 8000428:	468c      	mov	ip, r1
 800042a:	2d00      	cmp	r5, #0
 800042c:	d0a8      	beq.n	8000380 <__udivmoddi4+0xa0>
 800042e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000432:	e7a5      	b.n	8000380 <__udivmoddi4+0xa0>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f603 	lsr.w	r6, r0, r3
 800043c:	4097      	lsls	r7, r2
 800043e:	fa01 f002 	lsl.w	r0, r1, r2
 8000442:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000446:	40d9      	lsrs	r1, r3
 8000448:	4330      	orrs	r0, r6
 800044a:	0c03      	lsrs	r3, r0, #16
 800044c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000450:	fa1f f887 	uxth.w	r8, r7
 8000454:	fb0e 1116 	mls	r1, lr, r6, r1
 8000458:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045c:	fb06 f108 	mul.w	r1, r6, r8
 8000460:	4299      	cmp	r1, r3
 8000462:	fa04 f402 	lsl.w	r4, r4, r2
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x19c>
 8000468:	18fb      	adds	r3, r7, r3
 800046a:	f106 3cff 	add.w	ip, r6, #4294967295
 800046e:	f080 808d 	bcs.w	800058c <__udivmoddi4+0x2ac>
 8000472:	4299      	cmp	r1, r3
 8000474:	f240 808a 	bls.w	800058c <__udivmoddi4+0x2ac>
 8000478:	3e02      	subs	r6, #2
 800047a:	443b      	add	r3, r7
 800047c:	1a5b      	subs	r3, r3, r1
 800047e:	b281      	uxth	r1, r0
 8000480:	fbb3 f0fe 	udiv	r0, r3, lr
 8000484:	fb0e 3310 	mls	r3, lr, r0, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb00 f308 	mul.w	r3, r0, r8
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0x1c4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f100 3cff 	add.w	ip, r0, #4294967295
 800049a:	d273      	bcs.n	8000584 <__udivmoddi4+0x2a4>
 800049c:	428b      	cmp	r3, r1
 800049e:	d971      	bls.n	8000584 <__udivmoddi4+0x2a4>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4439      	add	r1, r7
 80004a4:	1acb      	subs	r3, r1, r3
 80004a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004aa:	e778      	b.n	800039e <__udivmoddi4+0xbe>
 80004ac:	f1c6 0c20 	rsb	ip, r6, #32
 80004b0:	fa03 f406 	lsl.w	r4, r3, r6
 80004b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004b8:	431c      	orrs	r4, r3
 80004ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80004be:	fa01 f306 	lsl.w	r3, r1, r6
 80004c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ca:	431f      	orrs	r7, r3
 80004cc:	0c3b      	lsrs	r3, r7, #16
 80004ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d2:	fa1f f884 	uxth.w	r8, r4
 80004d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004de:	fb09 fa08 	mul.w	sl, r9, r8
 80004e2:	458a      	cmp	sl, r1
 80004e4:	fa02 f206 	lsl.w	r2, r2, r6
 80004e8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x220>
 80004ee:	1861      	adds	r1, r4, r1
 80004f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f4:	d248      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 80004f6:	458a      	cmp	sl, r1
 80004f8:	d946      	bls.n	8000588 <__udivmoddi4+0x2a8>
 80004fa:	f1a9 0902 	sub.w	r9, r9, #2
 80004fe:	4421      	add	r1, r4
 8000500:	eba1 010a 	sub.w	r1, r1, sl
 8000504:	b2bf      	uxth	r7, r7
 8000506:	fbb1 f0fe 	udiv	r0, r1, lr
 800050a:	fb0e 1110 	mls	r1, lr, r0, r1
 800050e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000512:	fb00 f808 	mul.w	r8, r0, r8
 8000516:	45b8      	cmp	r8, r7
 8000518:	d907      	bls.n	800052a <__udivmoddi4+0x24a>
 800051a:	19e7      	adds	r7, r4, r7
 800051c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000520:	d22e      	bcs.n	8000580 <__udivmoddi4+0x2a0>
 8000522:	45b8      	cmp	r8, r7
 8000524:	d92c      	bls.n	8000580 <__udivmoddi4+0x2a0>
 8000526:	3802      	subs	r0, #2
 8000528:	4427      	add	r7, r4
 800052a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800052e:	eba7 0708 	sub.w	r7, r7, r8
 8000532:	fba0 8902 	umull	r8, r9, r0, r2
 8000536:	454f      	cmp	r7, r9
 8000538:	46c6      	mov	lr, r8
 800053a:	4649      	mov	r1, r9
 800053c:	d31a      	bcc.n	8000574 <__udivmoddi4+0x294>
 800053e:	d017      	beq.n	8000570 <__udivmoddi4+0x290>
 8000540:	b15d      	cbz	r5, 800055a <__udivmoddi4+0x27a>
 8000542:	ebb3 020e 	subs.w	r2, r3, lr
 8000546:	eb67 0701 	sbc.w	r7, r7, r1
 800054a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800054e:	40f2      	lsrs	r2, r6
 8000550:	ea4c 0202 	orr.w	r2, ip, r2
 8000554:	40f7      	lsrs	r7, r6
 8000556:	e9c5 2700 	strd	r2, r7, [r5]
 800055a:	2600      	movs	r6, #0
 800055c:	4631      	mov	r1, r6
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e70b      	b.n	8000380 <__udivmoddi4+0xa0>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0x60>
 800056c:	4618      	mov	r0, r3
 800056e:	e6fd      	b.n	800036c <__udivmoddi4+0x8c>
 8000570:	4543      	cmp	r3, r8
 8000572:	d2e5      	bcs.n	8000540 <__udivmoddi4+0x260>
 8000574:	ebb8 0e02 	subs.w	lr, r8, r2
 8000578:	eb69 0104 	sbc.w	r1, r9, r4
 800057c:	3801      	subs	r0, #1
 800057e:	e7df      	b.n	8000540 <__udivmoddi4+0x260>
 8000580:	4608      	mov	r0, r1
 8000582:	e7d2      	b.n	800052a <__udivmoddi4+0x24a>
 8000584:	4660      	mov	r0, ip
 8000586:	e78d      	b.n	80004a4 <__udivmoddi4+0x1c4>
 8000588:	4681      	mov	r9, r0
 800058a:	e7b9      	b.n	8000500 <__udivmoddi4+0x220>
 800058c:	4666      	mov	r6, ip
 800058e:	e775      	b.n	800047c <__udivmoddi4+0x19c>
 8000590:	4630      	mov	r0, r6
 8000592:	e74a      	b.n	800042a <__udivmoddi4+0x14a>
 8000594:	f1ac 0c02 	sub.w	ip, ip, #2
 8000598:	4439      	add	r1, r7
 800059a:	e713      	b.n	80003c4 <__udivmoddi4+0xe4>
 800059c:	3802      	subs	r0, #2
 800059e:	443c      	add	r4, r7
 80005a0:	e724      	b.n	80003ec <__udivmoddi4+0x10c>
 80005a2:	bf00      	nop

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005ac:	2003      	movs	r0, #3
 80005ae:	f000 f94d 	bl	800084c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005b2:	2000      	movs	r0, #0
 80005b4:	f000 f806 	bl	80005c4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80005b8:	f003 f92a 	bl	8003810 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80005bc:	2300      	movs	r3, #0
}
 80005be:	4618      	mov	r0, r3
 80005c0:	bd80      	pop	{r7, pc}
	...

080005c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005cc:	4b12      	ldr	r3, [pc, #72]	; (8000618 <HAL_InitTick+0x54>)
 80005ce:	681a      	ldr	r2, [r3, #0]
 80005d0:	4b12      	ldr	r3, [pc, #72]	; (800061c <HAL_InitTick+0x58>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	4619      	mov	r1, r3
 80005d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005da:	fbb3 f3f1 	udiv	r3, r3, r1
 80005de:	fbb2 f3f3 	udiv	r3, r2, r3
 80005e2:	4618      	mov	r0, r3
 80005e4:	f000 f967 	bl	80008b6 <HAL_SYSTICK_Config>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005ee:	2301      	movs	r3, #1
 80005f0:	e00e      	b.n	8000610 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	2b0f      	cmp	r3, #15
 80005f6:	d80a      	bhi.n	800060e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005f8:	2200      	movs	r2, #0
 80005fa:	6879      	ldr	r1, [r7, #4]
 80005fc:	f04f 30ff 	mov.w	r0, #4294967295
 8000600:	f000 f92f 	bl	8000862 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000604:	4a06      	ldr	r2, [pc, #24]	; (8000620 <HAL_InitTick+0x5c>)
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800060a:	2300      	movs	r3, #0
 800060c:	e000      	b.n	8000610 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800060e:	2301      	movs	r3, #1
}
 8000610:	4618      	mov	r0, r3
 8000612:	3708      	adds	r7, #8
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	20000008 	.word	0x20000008
 800061c:	20000004 	.word	0x20000004
 8000620:	20000000 	.word	0x20000000

08000624 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000628:	4b06      	ldr	r3, [pc, #24]	; (8000644 <HAL_IncTick+0x20>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	461a      	mov	r2, r3
 800062e:	4b06      	ldr	r3, [pc, #24]	; (8000648 <HAL_IncTick+0x24>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	4413      	add	r3, r2
 8000634:	4a04      	ldr	r2, [pc, #16]	; (8000648 <HAL_IncTick+0x24>)
 8000636:	6013      	str	r3, [r2, #0]
}
 8000638:	bf00      	nop
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop
 8000644:	20000004 	.word	0x20000004
 8000648:	20000098 	.word	0x20000098

0800064c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  return uwTick;
 8000650:	4b03      	ldr	r3, [pc, #12]	; (8000660 <HAL_GetTick+0x14>)
 8000652:	681b      	ldr	r3, [r3, #0]
}
 8000654:	4618      	mov	r0, r3
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop
 8000660:	20000098 	.word	0x20000098

08000664 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b084      	sub	sp, #16
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800066c:	f7ff ffee 	bl	800064c <HAL_GetTick>
 8000670:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000676:	68fb      	ldr	r3, [r7, #12]
 8000678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800067c:	d005      	beq.n	800068a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800067e:	4b0a      	ldr	r3, [pc, #40]	; (80006a8 <HAL_Delay+0x44>)
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	461a      	mov	r2, r3
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	4413      	add	r3, r2
 8000688:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800068a:	bf00      	nop
 800068c:	f7ff ffde 	bl	800064c <HAL_GetTick>
 8000690:	4602      	mov	r2, r0
 8000692:	68bb      	ldr	r3, [r7, #8]
 8000694:	1ad3      	subs	r3, r2, r3
 8000696:	68fa      	ldr	r2, [r7, #12]
 8000698:	429a      	cmp	r2, r3
 800069a:	d8f7      	bhi.n	800068c <HAL_Delay+0x28>
  {
  }
}
 800069c:	bf00      	nop
 800069e:	bf00      	nop
 80006a0:	3710      	adds	r7, #16
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	20000004 	.word	0x20000004

080006ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b085      	sub	sp, #20
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	f003 0307 	and.w	r3, r3, #7
 80006ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006bc:	4b0b      	ldr	r3, [pc, #44]	; (80006ec <__NVIC_SetPriorityGrouping+0x40>)
 80006be:	68db      	ldr	r3, [r3, #12]
 80006c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006c2:	68ba      	ldr	r2, [r7, #8]
 80006c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006c8:	4013      	ands	r3, r2
 80006ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006d0:	68bb      	ldr	r3, [r7, #8]
 80006d2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80006d4:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <__NVIC_SetPriorityGrouping+0x44>)
 80006d6:	4313      	orrs	r3, r2
 80006d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006da:	4a04      	ldr	r2, [pc, #16]	; (80006ec <__NVIC_SetPriorityGrouping+0x40>)
 80006dc:	68bb      	ldr	r3, [r7, #8]
 80006de:	60d3      	str	r3, [r2, #12]
}
 80006e0:	bf00      	nop
 80006e2:	3714      	adds	r7, #20
 80006e4:	46bd      	mov	sp, r7
 80006e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ea:	4770      	bx	lr
 80006ec:	e000ed00 	.word	0xe000ed00
 80006f0:	05fa0000 	.word	0x05fa0000

080006f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006f8:	4b04      	ldr	r3, [pc, #16]	; (800070c <__NVIC_GetPriorityGrouping+0x18>)
 80006fa:	68db      	ldr	r3, [r3, #12]
 80006fc:	0a1b      	lsrs	r3, r3, #8
 80006fe:	f003 0307 	and.w	r3, r3, #7
}
 8000702:	4618      	mov	r0, r3
 8000704:	46bd      	mov	sp, r7
 8000706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070a:	4770      	bx	lr
 800070c:	e000ed00 	.word	0xe000ed00

08000710 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000710:	b480      	push	{r7}
 8000712:	b083      	sub	sp, #12
 8000714:	af00      	add	r7, sp, #0
 8000716:	4603      	mov	r3, r0
 8000718:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800071a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800071e:	2b00      	cmp	r3, #0
 8000720:	db0b      	blt.n	800073a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000722:	79fb      	ldrb	r3, [r7, #7]
 8000724:	f003 021f 	and.w	r2, r3, #31
 8000728:	4907      	ldr	r1, [pc, #28]	; (8000748 <__NVIC_EnableIRQ+0x38>)
 800072a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800072e:	095b      	lsrs	r3, r3, #5
 8000730:	2001      	movs	r0, #1
 8000732:	fa00 f202 	lsl.w	r2, r0, r2
 8000736:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800073a:	bf00      	nop
 800073c:	370c      	adds	r7, #12
 800073e:	46bd      	mov	sp, r7
 8000740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop
 8000748:	e000e100 	.word	0xe000e100

0800074c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800074c:	b480      	push	{r7}
 800074e:	b083      	sub	sp, #12
 8000750:	af00      	add	r7, sp, #0
 8000752:	4603      	mov	r3, r0
 8000754:	6039      	str	r1, [r7, #0]
 8000756:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000758:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800075c:	2b00      	cmp	r3, #0
 800075e:	db0a      	blt.n	8000776 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000760:	683b      	ldr	r3, [r7, #0]
 8000762:	b2da      	uxtb	r2, r3
 8000764:	490c      	ldr	r1, [pc, #48]	; (8000798 <__NVIC_SetPriority+0x4c>)
 8000766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800076a:	0112      	lsls	r2, r2, #4
 800076c:	b2d2      	uxtb	r2, r2
 800076e:	440b      	add	r3, r1
 8000770:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000774:	e00a      	b.n	800078c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000776:	683b      	ldr	r3, [r7, #0]
 8000778:	b2da      	uxtb	r2, r3
 800077a:	4908      	ldr	r1, [pc, #32]	; (800079c <__NVIC_SetPriority+0x50>)
 800077c:	79fb      	ldrb	r3, [r7, #7]
 800077e:	f003 030f 	and.w	r3, r3, #15
 8000782:	3b04      	subs	r3, #4
 8000784:	0112      	lsls	r2, r2, #4
 8000786:	b2d2      	uxtb	r2, r2
 8000788:	440b      	add	r3, r1
 800078a:	761a      	strb	r2, [r3, #24]
}
 800078c:	bf00      	nop
 800078e:	370c      	adds	r7, #12
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr
 8000798:	e000e100 	.word	0xe000e100
 800079c:	e000ed00 	.word	0xe000ed00

080007a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b089      	sub	sp, #36	; 0x24
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	60f8      	str	r0, [r7, #12]
 80007a8:	60b9      	str	r1, [r7, #8]
 80007aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	f003 0307 	and.w	r3, r3, #7
 80007b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007b4:	69fb      	ldr	r3, [r7, #28]
 80007b6:	f1c3 0307 	rsb	r3, r3, #7
 80007ba:	2b04      	cmp	r3, #4
 80007bc:	bf28      	it	cs
 80007be:	2304      	movcs	r3, #4
 80007c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007c2:	69fb      	ldr	r3, [r7, #28]
 80007c4:	3304      	adds	r3, #4
 80007c6:	2b06      	cmp	r3, #6
 80007c8:	d902      	bls.n	80007d0 <NVIC_EncodePriority+0x30>
 80007ca:	69fb      	ldr	r3, [r7, #28]
 80007cc:	3b03      	subs	r3, #3
 80007ce:	e000      	b.n	80007d2 <NVIC_EncodePriority+0x32>
 80007d0:	2300      	movs	r3, #0
 80007d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007d4:	f04f 32ff 	mov.w	r2, #4294967295
 80007d8:	69bb      	ldr	r3, [r7, #24]
 80007da:	fa02 f303 	lsl.w	r3, r2, r3
 80007de:	43da      	mvns	r2, r3
 80007e0:	68bb      	ldr	r3, [r7, #8]
 80007e2:	401a      	ands	r2, r3
 80007e4:	697b      	ldr	r3, [r7, #20]
 80007e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007e8:	f04f 31ff 	mov.w	r1, #4294967295
 80007ec:	697b      	ldr	r3, [r7, #20]
 80007ee:	fa01 f303 	lsl.w	r3, r1, r3
 80007f2:	43d9      	mvns	r1, r3
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007f8:	4313      	orrs	r3, r2
         );
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	3724      	adds	r7, #36	; 0x24
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr
	...

08000808 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	3b01      	subs	r3, #1
 8000814:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000818:	d301      	bcc.n	800081e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800081a:	2301      	movs	r3, #1
 800081c:	e00f      	b.n	800083e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800081e:	4a0a      	ldr	r2, [pc, #40]	; (8000848 <SysTick_Config+0x40>)
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	3b01      	subs	r3, #1
 8000824:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000826:	210f      	movs	r1, #15
 8000828:	f04f 30ff 	mov.w	r0, #4294967295
 800082c:	f7ff ff8e 	bl	800074c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000830:	4b05      	ldr	r3, [pc, #20]	; (8000848 <SysTick_Config+0x40>)
 8000832:	2200      	movs	r2, #0
 8000834:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000836:	4b04      	ldr	r3, [pc, #16]	; (8000848 <SysTick_Config+0x40>)
 8000838:	2207      	movs	r2, #7
 800083a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800083c:	2300      	movs	r3, #0
}
 800083e:	4618      	mov	r0, r3
 8000840:	3708      	adds	r7, #8
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	e000e010 	.word	0xe000e010

0800084c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000854:	6878      	ldr	r0, [r7, #4]
 8000856:	f7ff ff29 	bl	80006ac <__NVIC_SetPriorityGrouping>
}
 800085a:	bf00      	nop
 800085c:	3708      	adds	r7, #8
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}

08000862 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000862:	b580      	push	{r7, lr}
 8000864:	b086      	sub	sp, #24
 8000866:	af00      	add	r7, sp, #0
 8000868:	4603      	mov	r3, r0
 800086a:	60b9      	str	r1, [r7, #8]
 800086c:	607a      	str	r2, [r7, #4]
 800086e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000870:	2300      	movs	r3, #0
 8000872:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000874:	f7ff ff3e 	bl	80006f4 <__NVIC_GetPriorityGrouping>
 8000878:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800087a:	687a      	ldr	r2, [r7, #4]
 800087c:	68b9      	ldr	r1, [r7, #8]
 800087e:	6978      	ldr	r0, [r7, #20]
 8000880:	f7ff ff8e 	bl	80007a0 <NVIC_EncodePriority>
 8000884:	4602      	mov	r2, r0
 8000886:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800088a:	4611      	mov	r1, r2
 800088c:	4618      	mov	r0, r3
 800088e:	f7ff ff5d 	bl	800074c <__NVIC_SetPriority>
}
 8000892:	bf00      	nop
 8000894:	3718      	adds	r7, #24
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}

0800089a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800089a:	b580      	push	{r7, lr}
 800089c:	b082      	sub	sp, #8
 800089e:	af00      	add	r7, sp, #0
 80008a0:	4603      	mov	r3, r0
 80008a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008a8:	4618      	mov	r0, r3
 80008aa:	f7ff ff31 	bl	8000710 <__NVIC_EnableIRQ>
}
 80008ae:	bf00      	nop
 80008b0:	3708      	adds	r7, #8
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}

080008b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008b6:	b580      	push	{r7, lr}
 80008b8:	b082      	sub	sp, #8
 80008ba:	af00      	add	r7, sp, #0
 80008bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008be:	6878      	ldr	r0, [r7, #4]
 80008c0:	f7ff ffa2 	bl	8000808 <SysTick_Config>
 80008c4:	4603      	mov	r3, r0
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	3708      	adds	r7, #8
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}

080008ce <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80008ce:	b480      	push	{r7}
 80008d0:	b083      	sub	sp, #12
 80008d2:	af00      	add	r7, sp, #0
 80008d4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80008dc:	b2db      	uxtb	r3, r3
 80008de:	2b02      	cmp	r3, #2
 80008e0:	d004      	beq.n	80008ec <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	2280      	movs	r2, #128	; 0x80
 80008e6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80008e8:	2301      	movs	r3, #1
 80008ea:	e00c      	b.n	8000906 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	2205      	movs	r2, #5
 80008f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	681a      	ldr	r2, [r3, #0]
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	f022 0201 	bic.w	r2, r2, #1
 8000902:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000904:	2300      	movs	r3, #0
}
 8000906:	4618      	mov	r0, r3
 8000908:	370c      	adds	r7, #12
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr
	...

08000914 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000914:	b480      	push	{r7}
 8000916:	b089      	sub	sp, #36	; 0x24
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
 800091c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800091e:	2300      	movs	r3, #0
 8000920:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000922:	2300      	movs	r3, #0
 8000924:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000926:	2300      	movs	r3, #0
 8000928:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800092a:	2300      	movs	r3, #0
 800092c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800092e:	2300      	movs	r3, #0
 8000930:	61fb      	str	r3, [r7, #28]
 8000932:	e175      	b.n	8000c20 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000934:	2201      	movs	r2, #1
 8000936:	69fb      	ldr	r3, [r7, #28]
 8000938:	fa02 f303 	lsl.w	r3, r2, r3
 800093c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	697a      	ldr	r2, [r7, #20]
 8000944:	4013      	ands	r3, r2
 8000946:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000948:	693a      	ldr	r2, [r7, #16]
 800094a:	697b      	ldr	r3, [r7, #20]
 800094c:	429a      	cmp	r2, r3
 800094e:	f040 8164 	bne.w	8000c1a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000952:	683b      	ldr	r3, [r7, #0]
 8000954:	685b      	ldr	r3, [r3, #4]
 8000956:	2b02      	cmp	r3, #2
 8000958:	d003      	beq.n	8000962 <HAL_GPIO_Init+0x4e>
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	685b      	ldr	r3, [r3, #4]
 800095e:	2b12      	cmp	r3, #18
 8000960:	d123      	bne.n	80009aa <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000962:	69fb      	ldr	r3, [r7, #28]
 8000964:	08da      	lsrs	r2, r3, #3
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	3208      	adds	r2, #8
 800096a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800096e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000970:	69fb      	ldr	r3, [r7, #28]
 8000972:	f003 0307 	and.w	r3, r3, #7
 8000976:	009b      	lsls	r3, r3, #2
 8000978:	220f      	movs	r2, #15
 800097a:	fa02 f303 	lsl.w	r3, r2, r3
 800097e:	43db      	mvns	r3, r3
 8000980:	69ba      	ldr	r2, [r7, #24]
 8000982:	4013      	ands	r3, r2
 8000984:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	691a      	ldr	r2, [r3, #16]
 800098a:	69fb      	ldr	r3, [r7, #28]
 800098c:	f003 0307 	and.w	r3, r3, #7
 8000990:	009b      	lsls	r3, r3, #2
 8000992:	fa02 f303 	lsl.w	r3, r2, r3
 8000996:	69ba      	ldr	r2, [r7, #24]
 8000998:	4313      	orrs	r3, r2
 800099a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800099c:	69fb      	ldr	r3, [r7, #28]
 800099e:	08da      	lsrs	r2, r3, #3
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	3208      	adds	r2, #8
 80009a4:	69b9      	ldr	r1, [r7, #24]
 80009a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80009b0:	69fb      	ldr	r3, [r7, #28]
 80009b2:	005b      	lsls	r3, r3, #1
 80009b4:	2203      	movs	r2, #3
 80009b6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ba:	43db      	mvns	r3, r3
 80009bc:	69ba      	ldr	r2, [r7, #24]
 80009be:	4013      	ands	r3, r2
 80009c0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80009c2:	683b      	ldr	r3, [r7, #0]
 80009c4:	685b      	ldr	r3, [r3, #4]
 80009c6:	f003 0203 	and.w	r2, r3, #3
 80009ca:	69fb      	ldr	r3, [r7, #28]
 80009cc:	005b      	lsls	r3, r3, #1
 80009ce:	fa02 f303 	lsl.w	r3, r2, r3
 80009d2:	69ba      	ldr	r2, [r7, #24]
 80009d4:	4313      	orrs	r3, r2
 80009d6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	69ba      	ldr	r2, [r7, #24]
 80009dc:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	685b      	ldr	r3, [r3, #4]
 80009e2:	2b01      	cmp	r3, #1
 80009e4:	d00b      	beq.n	80009fe <HAL_GPIO_Init+0xea>
 80009e6:	683b      	ldr	r3, [r7, #0]
 80009e8:	685b      	ldr	r3, [r3, #4]
 80009ea:	2b02      	cmp	r3, #2
 80009ec:	d007      	beq.n	80009fe <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009f2:	2b11      	cmp	r3, #17
 80009f4:	d003      	beq.n	80009fe <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	685b      	ldr	r3, [r3, #4]
 80009fa:	2b12      	cmp	r3, #18
 80009fc:	d130      	bne.n	8000a60 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	689b      	ldr	r3, [r3, #8]
 8000a02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000a04:	69fb      	ldr	r3, [r7, #28]
 8000a06:	005b      	lsls	r3, r3, #1
 8000a08:	2203      	movs	r2, #3
 8000a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a0e:	43db      	mvns	r3, r3
 8000a10:	69ba      	ldr	r2, [r7, #24]
 8000a12:	4013      	ands	r3, r2
 8000a14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	68da      	ldr	r2, [r3, #12]
 8000a1a:	69fb      	ldr	r3, [r7, #28]
 8000a1c:	005b      	lsls	r3, r3, #1
 8000a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a22:	69ba      	ldr	r2, [r7, #24]
 8000a24:	4313      	orrs	r3, r2
 8000a26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	69ba      	ldr	r2, [r7, #24]
 8000a2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	685b      	ldr	r3, [r3, #4]
 8000a32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a34:	2201      	movs	r2, #1
 8000a36:	69fb      	ldr	r3, [r7, #28]
 8000a38:	fa02 f303 	lsl.w	r3, r2, r3
 8000a3c:	43db      	mvns	r3, r3
 8000a3e:	69ba      	ldr	r2, [r7, #24]
 8000a40:	4013      	ands	r3, r2
 8000a42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	685b      	ldr	r3, [r3, #4]
 8000a48:	091b      	lsrs	r3, r3, #4
 8000a4a:	f003 0201 	and.w	r2, r3, #1
 8000a4e:	69fb      	ldr	r3, [r7, #28]
 8000a50:	fa02 f303 	lsl.w	r3, r2, r3
 8000a54:	69ba      	ldr	r2, [r7, #24]
 8000a56:	4313      	orrs	r3, r2
 8000a58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	69ba      	ldr	r2, [r7, #24]
 8000a5e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	68db      	ldr	r3, [r3, #12]
 8000a64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000a66:	69fb      	ldr	r3, [r7, #28]
 8000a68:	005b      	lsls	r3, r3, #1
 8000a6a:	2203      	movs	r2, #3
 8000a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a70:	43db      	mvns	r3, r3
 8000a72:	69ba      	ldr	r2, [r7, #24]
 8000a74:	4013      	ands	r3, r2
 8000a76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	689a      	ldr	r2, [r3, #8]
 8000a7c:	69fb      	ldr	r3, [r7, #28]
 8000a7e:	005b      	lsls	r3, r3, #1
 8000a80:	fa02 f303 	lsl.w	r3, r2, r3
 8000a84:	69ba      	ldr	r2, [r7, #24]
 8000a86:	4313      	orrs	r3, r2
 8000a88:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	69ba      	ldr	r2, [r7, #24]
 8000a8e:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	685b      	ldr	r3, [r3, #4]
 8000a94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	f000 80be 	beq.w	8000c1a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a9e:	4b66      	ldr	r3, [pc, #408]	; (8000c38 <HAL_GPIO_Init+0x324>)
 8000aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aa2:	4a65      	ldr	r2, [pc, #404]	; (8000c38 <HAL_GPIO_Init+0x324>)
 8000aa4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aa8:	6453      	str	r3, [r2, #68]	; 0x44
 8000aaa:	4b63      	ldr	r3, [pc, #396]	; (8000c38 <HAL_GPIO_Init+0x324>)
 8000aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ab2:	60fb      	str	r3, [r7, #12]
 8000ab4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000ab6:	4a61      	ldr	r2, [pc, #388]	; (8000c3c <HAL_GPIO_Init+0x328>)
 8000ab8:	69fb      	ldr	r3, [r7, #28]
 8000aba:	089b      	lsrs	r3, r3, #2
 8000abc:	3302      	adds	r3, #2
 8000abe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ac2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000ac4:	69fb      	ldr	r3, [r7, #28]
 8000ac6:	f003 0303 	and.w	r3, r3, #3
 8000aca:	009b      	lsls	r3, r3, #2
 8000acc:	220f      	movs	r2, #15
 8000ace:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad2:	43db      	mvns	r3, r3
 8000ad4:	69ba      	ldr	r2, [r7, #24]
 8000ad6:	4013      	ands	r3, r2
 8000ad8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	4a58      	ldr	r2, [pc, #352]	; (8000c40 <HAL_GPIO_Init+0x32c>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d037      	beq.n	8000b52 <HAL_GPIO_Init+0x23e>
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	4a57      	ldr	r2, [pc, #348]	; (8000c44 <HAL_GPIO_Init+0x330>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d031      	beq.n	8000b4e <HAL_GPIO_Init+0x23a>
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	4a56      	ldr	r2, [pc, #344]	; (8000c48 <HAL_GPIO_Init+0x334>)
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d02b      	beq.n	8000b4a <HAL_GPIO_Init+0x236>
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	4a55      	ldr	r2, [pc, #340]	; (8000c4c <HAL_GPIO_Init+0x338>)
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d025      	beq.n	8000b46 <HAL_GPIO_Init+0x232>
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	4a54      	ldr	r2, [pc, #336]	; (8000c50 <HAL_GPIO_Init+0x33c>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d01f      	beq.n	8000b42 <HAL_GPIO_Init+0x22e>
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	4a53      	ldr	r2, [pc, #332]	; (8000c54 <HAL_GPIO_Init+0x340>)
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d019      	beq.n	8000b3e <HAL_GPIO_Init+0x22a>
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	4a52      	ldr	r2, [pc, #328]	; (8000c58 <HAL_GPIO_Init+0x344>)
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	d013      	beq.n	8000b3a <HAL_GPIO_Init+0x226>
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	4a51      	ldr	r2, [pc, #324]	; (8000c5c <HAL_GPIO_Init+0x348>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d00d      	beq.n	8000b36 <HAL_GPIO_Init+0x222>
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	4a50      	ldr	r2, [pc, #320]	; (8000c60 <HAL_GPIO_Init+0x34c>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d007      	beq.n	8000b32 <HAL_GPIO_Init+0x21e>
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	4a4f      	ldr	r2, [pc, #316]	; (8000c64 <HAL_GPIO_Init+0x350>)
 8000b26:	4293      	cmp	r3, r2
 8000b28:	d101      	bne.n	8000b2e <HAL_GPIO_Init+0x21a>
 8000b2a:	2309      	movs	r3, #9
 8000b2c:	e012      	b.n	8000b54 <HAL_GPIO_Init+0x240>
 8000b2e:	230a      	movs	r3, #10
 8000b30:	e010      	b.n	8000b54 <HAL_GPIO_Init+0x240>
 8000b32:	2308      	movs	r3, #8
 8000b34:	e00e      	b.n	8000b54 <HAL_GPIO_Init+0x240>
 8000b36:	2307      	movs	r3, #7
 8000b38:	e00c      	b.n	8000b54 <HAL_GPIO_Init+0x240>
 8000b3a:	2306      	movs	r3, #6
 8000b3c:	e00a      	b.n	8000b54 <HAL_GPIO_Init+0x240>
 8000b3e:	2305      	movs	r3, #5
 8000b40:	e008      	b.n	8000b54 <HAL_GPIO_Init+0x240>
 8000b42:	2304      	movs	r3, #4
 8000b44:	e006      	b.n	8000b54 <HAL_GPIO_Init+0x240>
 8000b46:	2303      	movs	r3, #3
 8000b48:	e004      	b.n	8000b54 <HAL_GPIO_Init+0x240>
 8000b4a:	2302      	movs	r3, #2
 8000b4c:	e002      	b.n	8000b54 <HAL_GPIO_Init+0x240>
 8000b4e:	2301      	movs	r3, #1
 8000b50:	e000      	b.n	8000b54 <HAL_GPIO_Init+0x240>
 8000b52:	2300      	movs	r3, #0
 8000b54:	69fa      	ldr	r2, [r7, #28]
 8000b56:	f002 0203 	and.w	r2, r2, #3
 8000b5a:	0092      	lsls	r2, r2, #2
 8000b5c:	4093      	lsls	r3, r2
 8000b5e:	69ba      	ldr	r2, [r7, #24]
 8000b60:	4313      	orrs	r3, r2
 8000b62:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000b64:	4935      	ldr	r1, [pc, #212]	; (8000c3c <HAL_GPIO_Init+0x328>)
 8000b66:	69fb      	ldr	r3, [r7, #28]
 8000b68:	089b      	lsrs	r3, r3, #2
 8000b6a:	3302      	adds	r3, #2
 8000b6c:	69ba      	ldr	r2, [r7, #24]
 8000b6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b72:	4b3d      	ldr	r3, [pc, #244]	; (8000c68 <HAL_GPIO_Init+0x354>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b78:	693b      	ldr	r3, [r7, #16]
 8000b7a:	43db      	mvns	r3, r3
 8000b7c:	69ba      	ldr	r2, [r7, #24]
 8000b7e:	4013      	ands	r3, r2
 8000b80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	685b      	ldr	r3, [r3, #4]
 8000b86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d003      	beq.n	8000b96 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000b8e:	69ba      	ldr	r2, [r7, #24]
 8000b90:	693b      	ldr	r3, [r7, #16]
 8000b92:	4313      	orrs	r3, r2
 8000b94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000b96:	4a34      	ldr	r2, [pc, #208]	; (8000c68 <HAL_GPIO_Init+0x354>)
 8000b98:	69bb      	ldr	r3, [r7, #24]
 8000b9a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000b9c:	4b32      	ldr	r3, [pc, #200]	; (8000c68 <HAL_GPIO_Init+0x354>)
 8000b9e:	685b      	ldr	r3, [r3, #4]
 8000ba0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ba2:	693b      	ldr	r3, [r7, #16]
 8000ba4:	43db      	mvns	r3, r3
 8000ba6:	69ba      	ldr	r2, [r7, #24]
 8000ba8:	4013      	ands	r3, r2
 8000baa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	685b      	ldr	r3, [r3, #4]
 8000bb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d003      	beq.n	8000bc0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000bb8:	69ba      	ldr	r2, [r7, #24]
 8000bba:	693b      	ldr	r3, [r7, #16]
 8000bbc:	4313      	orrs	r3, r2
 8000bbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000bc0:	4a29      	ldr	r2, [pc, #164]	; (8000c68 <HAL_GPIO_Init+0x354>)
 8000bc2:	69bb      	ldr	r3, [r7, #24]
 8000bc4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000bc6:	4b28      	ldr	r3, [pc, #160]	; (8000c68 <HAL_GPIO_Init+0x354>)
 8000bc8:	689b      	ldr	r3, [r3, #8]
 8000bca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000bcc:	693b      	ldr	r3, [r7, #16]
 8000bce:	43db      	mvns	r3, r3
 8000bd0:	69ba      	ldr	r2, [r7, #24]
 8000bd2:	4013      	ands	r3, r2
 8000bd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	685b      	ldr	r3, [r3, #4]
 8000bda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d003      	beq.n	8000bea <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000be2:	69ba      	ldr	r2, [r7, #24]
 8000be4:	693b      	ldr	r3, [r7, #16]
 8000be6:	4313      	orrs	r3, r2
 8000be8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000bea:	4a1f      	ldr	r2, [pc, #124]	; (8000c68 <HAL_GPIO_Init+0x354>)
 8000bec:	69bb      	ldr	r3, [r7, #24]
 8000bee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000bf0:	4b1d      	ldr	r3, [pc, #116]	; (8000c68 <HAL_GPIO_Init+0x354>)
 8000bf2:	68db      	ldr	r3, [r3, #12]
 8000bf4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000bf6:	693b      	ldr	r3, [r7, #16]
 8000bf8:	43db      	mvns	r3, r3
 8000bfa:	69ba      	ldr	r2, [r7, #24]
 8000bfc:	4013      	ands	r3, r2
 8000bfe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	685b      	ldr	r3, [r3, #4]
 8000c04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d003      	beq.n	8000c14 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000c0c:	69ba      	ldr	r2, [r7, #24]
 8000c0e:	693b      	ldr	r3, [r7, #16]
 8000c10:	4313      	orrs	r3, r2
 8000c12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000c14:	4a14      	ldr	r2, [pc, #80]	; (8000c68 <HAL_GPIO_Init+0x354>)
 8000c16:	69bb      	ldr	r3, [r7, #24]
 8000c18:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000c1a:	69fb      	ldr	r3, [r7, #28]
 8000c1c:	3301      	adds	r3, #1
 8000c1e:	61fb      	str	r3, [r7, #28]
 8000c20:	69fb      	ldr	r3, [r7, #28]
 8000c22:	2b0f      	cmp	r3, #15
 8000c24:	f67f ae86 	bls.w	8000934 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8000c28:	bf00      	nop
 8000c2a:	bf00      	nop
 8000c2c:	3724      	adds	r7, #36	; 0x24
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	40023800 	.word	0x40023800
 8000c3c:	40013800 	.word	0x40013800
 8000c40:	40020000 	.word	0x40020000
 8000c44:	40020400 	.word	0x40020400
 8000c48:	40020800 	.word	0x40020800
 8000c4c:	40020c00 	.word	0x40020c00
 8000c50:	40021000 	.word	0x40021000
 8000c54:	40021400 	.word	0x40021400
 8000c58:	40021800 	.word	0x40021800
 8000c5c:	40021c00 	.word	0x40021c00
 8000c60:	40022000 	.word	0x40022000
 8000c64:	40022400 	.word	0x40022400
 8000c68:	40013c00 	.word	0x40013c00

08000c6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
 8000c74:	460b      	mov	r3, r1
 8000c76:	807b      	strh	r3, [r7, #2]
 8000c78:	4613      	mov	r3, r2
 8000c7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c7c:	787b      	ldrb	r3, [r7, #1]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d003      	beq.n	8000c8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c82:	887a      	ldrh	r2, [r7, #2]
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8000c88:	e003      	b.n	8000c92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8000c8a:	887b      	ldrh	r3, [r7, #2]
 8000c8c:	041a      	lsls	r2, r3, #16
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	619a      	str	r2, [r3, #24]
}
 8000c92:	bf00      	nop
 8000c94:	370c      	adds	r7, #12
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr

08000c9e <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000c9e:	b480      	push	{r7}
 8000ca0:	b083      	sub	sp, #12
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	6078      	str	r0, [r7, #4]
 8000ca6:	460b      	mov	r3, r1
 8000ca8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	695a      	ldr	r2, [r3, #20]
 8000cae:	887b      	ldrh	r3, [r7, #2]
 8000cb0:	401a      	ands	r2, r3
 8000cb2:	887b      	ldrh	r3, [r7, #2]
 8000cb4:	429a      	cmp	r2, r3
 8000cb6:	d104      	bne.n	8000cc2 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000cb8:	887b      	ldrh	r3, [r7, #2]
 8000cba:	041a      	lsls	r2, r3, #16
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8000cc0:	e002      	b.n	8000cc8 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8000cc2:	887a      	ldrh	r2, [r7, #2]
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	619a      	str	r2, [r3, #24]
}
 8000cc8:	bf00      	nop
 8000cca:	370c      	adds	r7, #12
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr

08000cd4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000cd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cd6:	b08f      	sub	sp, #60	; 0x3c
 8000cd8:	af0a      	add	r7, sp, #40	; 0x28
 8000cda:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d101      	bne.n	8000ce6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	e10a      	b.n	8000efc <HAL_PCD_Init+0x228>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8000cec:	b2db      	uxtb	r3, r3
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d106      	bne.n	8000d00 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000cfa:	6878      	ldr	r0, [r7, #4]
 8000cfc:	f002 fdf8 	bl	80038f0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	2203      	movs	r2, #3
 8000d04:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f002 f8c9 	bl	8002ea4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	603b      	str	r3, [r7, #0]
 8000d18:	687e      	ldr	r6, [r7, #4]
 8000d1a:	466d      	mov	r5, sp
 8000d1c:	f106 0410 	add.w	r4, r6, #16
 8000d20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d28:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000d2c:	e885 0003 	stmia.w	r5, {r0, r1}
 8000d30:	1d33      	adds	r3, r6, #4
 8000d32:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d34:	6838      	ldr	r0, [r7, #0]
 8000d36:	f002 f85d 	bl	8002df4 <USB_CoreInit>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d005      	beq.n	8000d4c <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	2202      	movs	r2, #2
 8000d44:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	e0d7      	b.n	8000efc <HAL_PCD_Init+0x228>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	2100      	movs	r1, #0
 8000d52:	4618      	mov	r0, r3
 8000d54:	f002 f8b7 	bl	8002ec6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d58:	2300      	movs	r3, #0
 8000d5a:	73fb      	strb	r3, [r7, #15]
 8000d5c:	e04a      	b.n	8000df4 <HAL_PCD_Init+0x120>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000d5e:	7bfa      	ldrb	r2, [r7, #15]
 8000d60:	6879      	ldr	r1, [r7, #4]
 8000d62:	4613      	mov	r3, r2
 8000d64:	00db      	lsls	r3, r3, #3
 8000d66:	1a9b      	subs	r3, r3, r2
 8000d68:	009b      	lsls	r3, r3, #2
 8000d6a:	440b      	add	r3, r1
 8000d6c:	333d      	adds	r3, #61	; 0x3d
 8000d6e:	2201      	movs	r2, #1
 8000d70:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000d72:	7bfa      	ldrb	r2, [r7, #15]
 8000d74:	6879      	ldr	r1, [r7, #4]
 8000d76:	4613      	mov	r3, r2
 8000d78:	00db      	lsls	r3, r3, #3
 8000d7a:	1a9b      	subs	r3, r3, r2
 8000d7c:	009b      	lsls	r3, r3, #2
 8000d7e:	440b      	add	r3, r1
 8000d80:	333c      	adds	r3, #60	; 0x3c
 8000d82:	7bfa      	ldrb	r2, [r7, #15]
 8000d84:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000d86:	7bfa      	ldrb	r2, [r7, #15]
 8000d88:	7bfb      	ldrb	r3, [r7, #15]
 8000d8a:	b298      	uxth	r0, r3
 8000d8c:	6879      	ldr	r1, [r7, #4]
 8000d8e:	4613      	mov	r3, r2
 8000d90:	00db      	lsls	r3, r3, #3
 8000d92:	1a9b      	subs	r3, r3, r2
 8000d94:	009b      	lsls	r3, r3, #2
 8000d96:	440b      	add	r3, r1
 8000d98:	3342      	adds	r3, #66	; 0x42
 8000d9a:	4602      	mov	r2, r0
 8000d9c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000d9e:	7bfa      	ldrb	r2, [r7, #15]
 8000da0:	6879      	ldr	r1, [r7, #4]
 8000da2:	4613      	mov	r3, r2
 8000da4:	00db      	lsls	r3, r3, #3
 8000da6:	1a9b      	subs	r3, r3, r2
 8000da8:	009b      	lsls	r3, r3, #2
 8000daa:	440b      	add	r3, r1
 8000dac:	333f      	adds	r3, #63	; 0x3f
 8000dae:	2200      	movs	r2, #0
 8000db0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000db2:	7bfa      	ldrb	r2, [r7, #15]
 8000db4:	6879      	ldr	r1, [r7, #4]
 8000db6:	4613      	mov	r3, r2
 8000db8:	00db      	lsls	r3, r3, #3
 8000dba:	1a9b      	subs	r3, r3, r2
 8000dbc:	009b      	lsls	r3, r3, #2
 8000dbe:	440b      	add	r3, r1
 8000dc0:	3344      	adds	r3, #68	; 0x44
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000dc6:	7bfa      	ldrb	r2, [r7, #15]
 8000dc8:	6879      	ldr	r1, [r7, #4]
 8000dca:	4613      	mov	r3, r2
 8000dcc:	00db      	lsls	r3, r3, #3
 8000dce:	1a9b      	subs	r3, r3, r2
 8000dd0:	009b      	lsls	r3, r3, #2
 8000dd2:	440b      	add	r3, r1
 8000dd4:	3348      	adds	r3, #72	; 0x48
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000dda:	7bfa      	ldrb	r2, [r7, #15]
 8000ddc:	6879      	ldr	r1, [r7, #4]
 8000dde:	4613      	mov	r3, r2
 8000de0:	00db      	lsls	r3, r3, #3
 8000de2:	1a9b      	subs	r3, r3, r2
 8000de4:	009b      	lsls	r3, r3, #2
 8000de6:	440b      	add	r3, r1
 8000de8:	3350      	adds	r3, #80	; 0x50
 8000dea:	2200      	movs	r2, #0
 8000dec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000dee:	7bfb      	ldrb	r3, [r7, #15]
 8000df0:	3301      	adds	r3, #1
 8000df2:	73fb      	strb	r3, [r7, #15]
 8000df4:	7bfa      	ldrb	r2, [r7, #15]
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	429a      	cmp	r2, r3
 8000dfc:	d3af      	bcc.n	8000d5e <HAL_PCD_Init+0x8a>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000dfe:	2300      	movs	r3, #0
 8000e00:	73fb      	strb	r3, [r7, #15]
 8000e02:	e044      	b.n	8000e8e <HAL_PCD_Init+0x1ba>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000e04:	7bfa      	ldrb	r2, [r7, #15]
 8000e06:	6879      	ldr	r1, [r7, #4]
 8000e08:	4613      	mov	r3, r2
 8000e0a:	00db      	lsls	r3, r3, #3
 8000e0c:	1a9b      	subs	r3, r3, r2
 8000e0e:	009b      	lsls	r3, r3, #2
 8000e10:	440b      	add	r3, r1
 8000e12:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8000e16:	2200      	movs	r2, #0
 8000e18:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000e1a:	7bfa      	ldrb	r2, [r7, #15]
 8000e1c:	6879      	ldr	r1, [r7, #4]
 8000e1e:	4613      	mov	r3, r2
 8000e20:	00db      	lsls	r3, r3, #3
 8000e22:	1a9b      	subs	r3, r3, r2
 8000e24:	009b      	lsls	r3, r3, #2
 8000e26:	440b      	add	r3, r1
 8000e28:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8000e2c:	7bfa      	ldrb	r2, [r7, #15]
 8000e2e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000e30:	7bfa      	ldrb	r2, [r7, #15]
 8000e32:	6879      	ldr	r1, [r7, #4]
 8000e34:	4613      	mov	r3, r2
 8000e36:	00db      	lsls	r3, r3, #3
 8000e38:	1a9b      	subs	r3, r3, r2
 8000e3a:	009b      	lsls	r3, r3, #2
 8000e3c:	440b      	add	r3, r1
 8000e3e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8000e42:	2200      	movs	r2, #0
 8000e44:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000e46:	7bfa      	ldrb	r2, [r7, #15]
 8000e48:	6879      	ldr	r1, [r7, #4]
 8000e4a:	4613      	mov	r3, r2
 8000e4c:	00db      	lsls	r3, r3, #3
 8000e4e:	1a9b      	subs	r3, r3, r2
 8000e50:	009b      	lsls	r3, r3, #2
 8000e52:	440b      	add	r3, r1
 8000e54:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8000e58:	2200      	movs	r2, #0
 8000e5a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000e5c:	7bfa      	ldrb	r2, [r7, #15]
 8000e5e:	6879      	ldr	r1, [r7, #4]
 8000e60:	4613      	mov	r3, r2
 8000e62:	00db      	lsls	r3, r3, #3
 8000e64:	1a9b      	subs	r3, r3, r2
 8000e66:	009b      	lsls	r3, r3, #2
 8000e68:	440b      	add	r3, r1
 8000e6a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8000e6e:	2200      	movs	r2, #0
 8000e70:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000e72:	7bfa      	ldrb	r2, [r7, #15]
 8000e74:	6879      	ldr	r1, [r7, #4]
 8000e76:	4613      	mov	r3, r2
 8000e78:	00db      	lsls	r3, r3, #3
 8000e7a:	1a9b      	subs	r3, r3, r2
 8000e7c:	009b      	lsls	r3, r3, #2
 8000e7e:	440b      	add	r3, r1
 8000e80:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e88:	7bfb      	ldrb	r3, [r7, #15]
 8000e8a:	3301      	adds	r3, #1
 8000e8c:	73fb      	strb	r3, [r7, #15]
 8000e8e:	7bfa      	ldrb	r2, [r7, #15]
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	429a      	cmp	r2, r3
 8000e96:	d3b5      	bcc.n	8000e04 <HAL_PCD_Init+0x130>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	603b      	str	r3, [r7, #0]
 8000e9e:	687e      	ldr	r6, [r7, #4]
 8000ea0:	466d      	mov	r5, sp
 8000ea2:	f106 0410 	add.w	r4, r6, #16
 8000ea6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ea8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000eaa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000eac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000eae:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000eb2:	e885 0003 	stmia.w	r5, {r0, r1}
 8000eb6:	1d33      	adds	r3, r6, #4
 8000eb8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000eba:	6838      	ldr	r0, [r7, #0]
 8000ebc:	f002 f82e 	bl	8002f1c <USB_DevInit>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d005      	beq.n	8000ed2 <HAL_PCD_Init+0x1fe>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2202      	movs	r2, #2
 8000eca:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	e014      	b.n	8000efc <HAL_PCD_Init+0x228>
  }

  hpcd->USB_Address = 0U;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	2201      	movs	r2, #1
 8000ede:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ee6:	2b01      	cmp	r3, #1
 8000ee8:	d102      	bne.n	8000ef0 <HAL_PCD_Init+0x21c>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8000eea:	6878      	ldr	r0, [r7, #4]
 8000eec:	f000 f80a 	bl	8000f04 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f002 f9ee 	bl	80032d6 <USB_DevDisconnect>

  return HAL_OK;
 8000efa:	2300      	movs	r3, #0
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	3714      	adds	r7, #20
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000f04 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b085      	sub	sp, #20
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2201      	movs	r2, #1
 8000f16:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	699b      	ldr	r3, [r3, #24]
 8000f26:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8000f32:	4b05      	ldr	r3, [pc, #20]	; (8000f48 <HAL_PCDEx_ActivateLPM+0x44>)
 8000f34:	4313      	orrs	r3, r2
 8000f36:	68fa      	ldr	r2, [r7, #12]
 8000f38:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8000f3a:	2300      	movs	r3, #0
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3714      	adds	r7, #20
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr
 8000f48:	10000003 	.word	0x10000003

08000f4c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000f50:	4b05      	ldr	r3, [pc, #20]	; (8000f68 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a04      	ldr	r2, [pc, #16]	; (8000f68 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000f56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f5a:	6013      	str	r3, [r2, #0]
}
 8000f5c:	bf00      	nop
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	40007000 	.word	0x40007000

08000f6c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b086      	sub	sp, #24
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8000f74:	2300      	movs	r3, #0
 8000f76:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d101      	bne.n	8000f82 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	e25c      	b.n	800143c <HAL_RCC_OscConfig+0x4d0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f003 0301 	and.w	r3, r3, #1
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	f000 8087 	beq.w	800109e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f90:	4b96      	ldr	r3, [pc, #600]	; (80011ec <HAL_RCC_OscConfig+0x280>)
 8000f92:	689b      	ldr	r3, [r3, #8]
 8000f94:	f003 030c 	and.w	r3, r3, #12
 8000f98:	2b04      	cmp	r3, #4
 8000f9a:	d00c      	beq.n	8000fb6 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f9c:	4b93      	ldr	r3, [pc, #588]	; (80011ec <HAL_RCC_OscConfig+0x280>)
 8000f9e:	689b      	ldr	r3, [r3, #8]
 8000fa0:	f003 030c 	and.w	r3, r3, #12
 8000fa4:	2b08      	cmp	r3, #8
 8000fa6:	d112      	bne.n	8000fce <HAL_RCC_OscConfig+0x62>
 8000fa8:	4b90      	ldr	r3, [pc, #576]	; (80011ec <HAL_RCC_OscConfig+0x280>)
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fb0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000fb4:	d10b      	bne.n	8000fce <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fb6:	4b8d      	ldr	r3, [pc, #564]	; (80011ec <HAL_RCC_OscConfig+0x280>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d06c      	beq.n	800109c <HAL_RCC_OscConfig+0x130>
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d168      	bne.n	800109c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	e236      	b.n	800143c <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fd6:	d106      	bne.n	8000fe6 <HAL_RCC_OscConfig+0x7a>
 8000fd8:	4b84      	ldr	r3, [pc, #528]	; (80011ec <HAL_RCC_OscConfig+0x280>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a83      	ldr	r2, [pc, #524]	; (80011ec <HAL_RCC_OscConfig+0x280>)
 8000fde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fe2:	6013      	str	r3, [r2, #0]
 8000fe4:	e02e      	b.n	8001044 <HAL_RCC_OscConfig+0xd8>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d10c      	bne.n	8001008 <HAL_RCC_OscConfig+0x9c>
 8000fee:	4b7f      	ldr	r3, [pc, #508]	; (80011ec <HAL_RCC_OscConfig+0x280>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4a7e      	ldr	r2, [pc, #504]	; (80011ec <HAL_RCC_OscConfig+0x280>)
 8000ff4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ff8:	6013      	str	r3, [r2, #0]
 8000ffa:	4b7c      	ldr	r3, [pc, #496]	; (80011ec <HAL_RCC_OscConfig+0x280>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4a7b      	ldr	r2, [pc, #492]	; (80011ec <HAL_RCC_OscConfig+0x280>)
 8001000:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001004:	6013      	str	r3, [r2, #0]
 8001006:	e01d      	b.n	8001044 <HAL_RCC_OscConfig+0xd8>
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001010:	d10c      	bne.n	800102c <HAL_RCC_OscConfig+0xc0>
 8001012:	4b76      	ldr	r3, [pc, #472]	; (80011ec <HAL_RCC_OscConfig+0x280>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a75      	ldr	r2, [pc, #468]	; (80011ec <HAL_RCC_OscConfig+0x280>)
 8001018:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800101c:	6013      	str	r3, [r2, #0]
 800101e:	4b73      	ldr	r3, [pc, #460]	; (80011ec <HAL_RCC_OscConfig+0x280>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a72      	ldr	r2, [pc, #456]	; (80011ec <HAL_RCC_OscConfig+0x280>)
 8001024:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001028:	6013      	str	r3, [r2, #0]
 800102a:	e00b      	b.n	8001044 <HAL_RCC_OscConfig+0xd8>
 800102c:	4b6f      	ldr	r3, [pc, #444]	; (80011ec <HAL_RCC_OscConfig+0x280>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a6e      	ldr	r2, [pc, #440]	; (80011ec <HAL_RCC_OscConfig+0x280>)
 8001032:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001036:	6013      	str	r3, [r2, #0]
 8001038:	4b6c      	ldr	r3, [pc, #432]	; (80011ec <HAL_RCC_OscConfig+0x280>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a6b      	ldr	r2, [pc, #428]	; (80011ec <HAL_RCC_OscConfig+0x280>)
 800103e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001042:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d013      	beq.n	8001074 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800104c:	f7ff fafe 	bl	800064c <HAL_GetTick>
 8001050:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001052:	e008      	b.n	8001066 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001054:	f7ff fafa 	bl	800064c <HAL_GetTick>
 8001058:	4602      	mov	r2, r0
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	1ad3      	subs	r3, r2, r3
 800105e:	2b64      	cmp	r3, #100	; 0x64
 8001060:	d901      	bls.n	8001066 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001062:	2303      	movs	r3, #3
 8001064:	e1ea      	b.n	800143c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001066:	4b61      	ldr	r3, [pc, #388]	; (80011ec <HAL_RCC_OscConfig+0x280>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800106e:	2b00      	cmp	r3, #0
 8001070:	d0f0      	beq.n	8001054 <HAL_RCC_OscConfig+0xe8>
 8001072:	e014      	b.n	800109e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001074:	f7ff faea 	bl	800064c <HAL_GetTick>
 8001078:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800107a:	e008      	b.n	800108e <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800107c:	f7ff fae6 	bl	800064c <HAL_GetTick>
 8001080:	4602      	mov	r2, r0
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	1ad3      	subs	r3, r2, r3
 8001086:	2b64      	cmp	r3, #100	; 0x64
 8001088:	d901      	bls.n	800108e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800108a:	2303      	movs	r3, #3
 800108c:	e1d6      	b.n	800143c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800108e:	4b57      	ldr	r3, [pc, #348]	; (80011ec <HAL_RCC_OscConfig+0x280>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001096:	2b00      	cmp	r3, #0
 8001098:	d1f0      	bne.n	800107c <HAL_RCC_OscConfig+0x110>
 800109a:	e000      	b.n	800109e <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800109c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f003 0302 	and.w	r3, r3, #2
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d069      	beq.n	800117e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80010aa:	4b50      	ldr	r3, [pc, #320]	; (80011ec <HAL_RCC_OscConfig+0x280>)
 80010ac:	689b      	ldr	r3, [r3, #8]
 80010ae:	f003 030c 	and.w	r3, r3, #12
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d00b      	beq.n	80010ce <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80010b6:	4b4d      	ldr	r3, [pc, #308]	; (80011ec <HAL_RCC_OscConfig+0x280>)
 80010b8:	689b      	ldr	r3, [r3, #8]
 80010ba:	f003 030c 	and.w	r3, r3, #12
 80010be:	2b08      	cmp	r3, #8
 80010c0:	d11c      	bne.n	80010fc <HAL_RCC_OscConfig+0x190>
 80010c2:	4b4a      	ldr	r3, [pc, #296]	; (80011ec <HAL_RCC_OscConfig+0x280>)
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d116      	bne.n	80010fc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010ce:	4b47      	ldr	r3, [pc, #284]	; (80011ec <HAL_RCC_OscConfig+0x280>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f003 0302 	and.w	r3, r3, #2
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d005      	beq.n	80010e6 <HAL_RCC_OscConfig+0x17a>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	68db      	ldr	r3, [r3, #12]
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d001      	beq.n	80010e6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80010e2:	2301      	movs	r3, #1
 80010e4:	e1aa      	b.n	800143c <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010e6:	4b41      	ldr	r3, [pc, #260]	; (80011ec <HAL_RCC_OscConfig+0x280>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	691b      	ldr	r3, [r3, #16]
 80010f2:	00db      	lsls	r3, r3, #3
 80010f4:	493d      	ldr	r1, [pc, #244]	; (80011ec <HAL_RCC_OscConfig+0x280>)
 80010f6:	4313      	orrs	r3, r2
 80010f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010fa:	e040      	b.n	800117e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d023      	beq.n	800114c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001104:	4b39      	ldr	r3, [pc, #228]	; (80011ec <HAL_RCC_OscConfig+0x280>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a38      	ldr	r2, [pc, #224]	; (80011ec <HAL_RCC_OscConfig+0x280>)
 800110a:	f043 0301 	orr.w	r3, r3, #1
 800110e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001110:	f7ff fa9c 	bl	800064c <HAL_GetTick>
 8001114:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001116:	e008      	b.n	800112a <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001118:	f7ff fa98 	bl	800064c <HAL_GetTick>
 800111c:	4602      	mov	r2, r0
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	1ad3      	subs	r3, r2, r3
 8001122:	2b02      	cmp	r3, #2
 8001124:	d901      	bls.n	800112a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001126:	2303      	movs	r3, #3
 8001128:	e188      	b.n	800143c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800112a:	4b30      	ldr	r3, [pc, #192]	; (80011ec <HAL_RCC_OscConfig+0x280>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f003 0302 	and.w	r3, r3, #2
 8001132:	2b00      	cmp	r3, #0
 8001134:	d0f0      	beq.n	8001118 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001136:	4b2d      	ldr	r3, [pc, #180]	; (80011ec <HAL_RCC_OscConfig+0x280>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	691b      	ldr	r3, [r3, #16]
 8001142:	00db      	lsls	r3, r3, #3
 8001144:	4929      	ldr	r1, [pc, #164]	; (80011ec <HAL_RCC_OscConfig+0x280>)
 8001146:	4313      	orrs	r3, r2
 8001148:	600b      	str	r3, [r1, #0]
 800114a:	e018      	b.n	800117e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800114c:	4b27      	ldr	r3, [pc, #156]	; (80011ec <HAL_RCC_OscConfig+0x280>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a26      	ldr	r2, [pc, #152]	; (80011ec <HAL_RCC_OscConfig+0x280>)
 8001152:	f023 0301 	bic.w	r3, r3, #1
 8001156:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001158:	f7ff fa78 	bl	800064c <HAL_GetTick>
 800115c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800115e:	e008      	b.n	8001172 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001160:	f7ff fa74 	bl	800064c <HAL_GetTick>
 8001164:	4602      	mov	r2, r0
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	1ad3      	subs	r3, r2, r3
 800116a:	2b02      	cmp	r3, #2
 800116c:	d901      	bls.n	8001172 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800116e:	2303      	movs	r3, #3
 8001170:	e164      	b.n	800143c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001172:	4b1e      	ldr	r3, [pc, #120]	; (80011ec <HAL_RCC_OscConfig+0x280>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f003 0302 	and.w	r3, r3, #2
 800117a:	2b00      	cmp	r3, #0
 800117c:	d1f0      	bne.n	8001160 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f003 0308 	and.w	r3, r3, #8
 8001186:	2b00      	cmp	r3, #0
 8001188:	d038      	beq.n	80011fc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	695b      	ldr	r3, [r3, #20]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d019      	beq.n	80011c6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001192:	4b16      	ldr	r3, [pc, #88]	; (80011ec <HAL_RCC_OscConfig+0x280>)
 8001194:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001196:	4a15      	ldr	r2, [pc, #84]	; (80011ec <HAL_RCC_OscConfig+0x280>)
 8001198:	f043 0301 	orr.w	r3, r3, #1
 800119c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800119e:	f7ff fa55 	bl	800064c <HAL_GetTick>
 80011a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011a4:	e008      	b.n	80011b8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011a6:	f7ff fa51 	bl	800064c <HAL_GetTick>
 80011aa:	4602      	mov	r2, r0
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	1ad3      	subs	r3, r2, r3
 80011b0:	2b02      	cmp	r3, #2
 80011b2:	d901      	bls.n	80011b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80011b4:	2303      	movs	r3, #3
 80011b6:	e141      	b.n	800143c <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011b8:	4b0c      	ldr	r3, [pc, #48]	; (80011ec <HAL_RCC_OscConfig+0x280>)
 80011ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80011bc:	f003 0302 	and.w	r3, r3, #2
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d0f0      	beq.n	80011a6 <HAL_RCC_OscConfig+0x23a>
 80011c4:	e01a      	b.n	80011fc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011c6:	4b09      	ldr	r3, [pc, #36]	; (80011ec <HAL_RCC_OscConfig+0x280>)
 80011c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80011ca:	4a08      	ldr	r2, [pc, #32]	; (80011ec <HAL_RCC_OscConfig+0x280>)
 80011cc:	f023 0301 	bic.w	r3, r3, #1
 80011d0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011d2:	f7ff fa3b 	bl	800064c <HAL_GetTick>
 80011d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011d8:	e00a      	b.n	80011f0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011da:	f7ff fa37 	bl	800064c <HAL_GetTick>
 80011de:	4602      	mov	r2, r0
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	1ad3      	subs	r3, r2, r3
 80011e4:	2b02      	cmp	r3, #2
 80011e6:	d903      	bls.n	80011f0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80011e8:	2303      	movs	r3, #3
 80011ea:	e127      	b.n	800143c <HAL_RCC_OscConfig+0x4d0>
 80011ec:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011f0:	4b94      	ldr	r3, [pc, #592]	; (8001444 <HAL_RCC_OscConfig+0x4d8>)
 80011f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80011f4:	f003 0302 	and.w	r3, r3, #2
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d1ee      	bne.n	80011da <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f003 0304 	and.w	r3, r3, #4
 8001204:	2b00      	cmp	r3, #0
 8001206:	f000 80a4 	beq.w	8001352 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800120a:	4b8e      	ldr	r3, [pc, #568]	; (8001444 <HAL_RCC_OscConfig+0x4d8>)
 800120c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001212:	2b00      	cmp	r3, #0
 8001214:	d10d      	bne.n	8001232 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001216:	4b8b      	ldr	r3, [pc, #556]	; (8001444 <HAL_RCC_OscConfig+0x4d8>)
 8001218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121a:	4a8a      	ldr	r2, [pc, #552]	; (8001444 <HAL_RCC_OscConfig+0x4d8>)
 800121c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001220:	6413      	str	r3, [r2, #64]	; 0x40
 8001222:	4b88      	ldr	r3, [pc, #544]	; (8001444 <HAL_RCC_OscConfig+0x4d8>)
 8001224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001226:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800122a:	60fb      	str	r3, [r7, #12]
 800122c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800122e:	2301      	movs	r3, #1
 8001230:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001232:	4b85      	ldr	r3, [pc, #532]	; (8001448 <HAL_RCC_OscConfig+0x4dc>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800123a:	2b00      	cmp	r3, #0
 800123c:	d118      	bne.n	8001270 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800123e:	4b82      	ldr	r3, [pc, #520]	; (8001448 <HAL_RCC_OscConfig+0x4dc>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4a81      	ldr	r2, [pc, #516]	; (8001448 <HAL_RCC_OscConfig+0x4dc>)
 8001244:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001248:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800124a:	f7ff f9ff 	bl	800064c <HAL_GetTick>
 800124e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001250:	e008      	b.n	8001264 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001252:	f7ff f9fb 	bl	800064c <HAL_GetTick>
 8001256:	4602      	mov	r2, r0
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	1ad3      	subs	r3, r2, r3
 800125c:	2b64      	cmp	r3, #100	; 0x64
 800125e:	d901      	bls.n	8001264 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001260:	2303      	movs	r3, #3
 8001262:	e0eb      	b.n	800143c <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001264:	4b78      	ldr	r3, [pc, #480]	; (8001448 <HAL_RCC_OscConfig+0x4dc>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800126c:	2b00      	cmp	r3, #0
 800126e:	d0f0      	beq.n	8001252 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	689b      	ldr	r3, [r3, #8]
 8001274:	2b01      	cmp	r3, #1
 8001276:	d106      	bne.n	8001286 <HAL_RCC_OscConfig+0x31a>
 8001278:	4b72      	ldr	r3, [pc, #456]	; (8001444 <HAL_RCC_OscConfig+0x4d8>)
 800127a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800127c:	4a71      	ldr	r2, [pc, #452]	; (8001444 <HAL_RCC_OscConfig+0x4d8>)
 800127e:	f043 0301 	orr.w	r3, r3, #1
 8001282:	6713      	str	r3, [r2, #112]	; 0x70
 8001284:	e02d      	b.n	80012e2 <HAL_RCC_OscConfig+0x376>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	689b      	ldr	r3, [r3, #8]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d10c      	bne.n	80012a8 <HAL_RCC_OscConfig+0x33c>
 800128e:	4b6d      	ldr	r3, [pc, #436]	; (8001444 <HAL_RCC_OscConfig+0x4d8>)
 8001290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001292:	4a6c      	ldr	r2, [pc, #432]	; (8001444 <HAL_RCC_OscConfig+0x4d8>)
 8001294:	f023 0301 	bic.w	r3, r3, #1
 8001298:	6713      	str	r3, [r2, #112]	; 0x70
 800129a:	4b6a      	ldr	r3, [pc, #424]	; (8001444 <HAL_RCC_OscConfig+0x4d8>)
 800129c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800129e:	4a69      	ldr	r2, [pc, #420]	; (8001444 <HAL_RCC_OscConfig+0x4d8>)
 80012a0:	f023 0304 	bic.w	r3, r3, #4
 80012a4:	6713      	str	r3, [r2, #112]	; 0x70
 80012a6:	e01c      	b.n	80012e2 <HAL_RCC_OscConfig+0x376>
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	689b      	ldr	r3, [r3, #8]
 80012ac:	2b05      	cmp	r3, #5
 80012ae:	d10c      	bne.n	80012ca <HAL_RCC_OscConfig+0x35e>
 80012b0:	4b64      	ldr	r3, [pc, #400]	; (8001444 <HAL_RCC_OscConfig+0x4d8>)
 80012b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012b4:	4a63      	ldr	r2, [pc, #396]	; (8001444 <HAL_RCC_OscConfig+0x4d8>)
 80012b6:	f043 0304 	orr.w	r3, r3, #4
 80012ba:	6713      	str	r3, [r2, #112]	; 0x70
 80012bc:	4b61      	ldr	r3, [pc, #388]	; (8001444 <HAL_RCC_OscConfig+0x4d8>)
 80012be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012c0:	4a60      	ldr	r2, [pc, #384]	; (8001444 <HAL_RCC_OscConfig+0x4d8>)
 80012c2:	f043 0301 	orr.w	r3, r3, #1
 80012c6:	6713      	str	r3, [r2, #112]	; 0x70
 80012c8:	e00b      	b.n	80012e2 <HAL_RCC_OscConfig+0x376>
 80012ca:	4b5e      	ldr	r3, [pc, #376]	; (8001444 <HAL_RCC_OscConfig+0x4d8>)
 80012cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012ce:	4a5d      	ldr	r2, [pc, #372]	; (8001444 <HAL_RCC_OscConfig+0x4d8>)
 80012d0:	f023 0301 	bic.w	r3, r3, #1
 80012d4:	6713      	str	r3, [r2, #112]	; 0x70
 80012d6:	4b5b      	ldr	r3, [pc, #364]	; (8001444 <HAL_RCC_OscConfig+0x4d8>)
 80012d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012da:	4a5a      	ldr	r2, [pc, #360]	; (8001444 <HAL_RCC_OscConfig+0x4d8>)
 80012dc:	f023 0304 	bic.w	r3, r3, #4
 80012e0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d015      	beq.n	8001316 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012ea:	f7ff f9af 	bl	800064c <HAL_GetTick>
 80012ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012f0:	e00a      	b.n	8001308 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012f2:	f7ff f9ab 	bl	800064c <HAL_GetTick>
 80012f6:	4602      	mov	r2, r0
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	1ad3      	subs	r3, r2, r3
 80012fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001300:	4293      	cmp	r3, r2
 8001302:	d901      	bls.n	8001308 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001304:	2303      	movs	r3, #3
 8001306:	e099      	b.n	800143c <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001308:	4b4e      	ldr	r3, [pc, #312]	; (8001444 <HAL_RCC_OscConfig+0x4d8>)
 800130a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800130c:	f003 0302 	and.w	r3, r3, #2
 8001310:	2b00      	cmp	r3, #0
 8001312:	d0ee      	beq.n	80012f2 <HAL_RCC_OscConfig+0x386>
 8001314:	e014      	b.n	8001340 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001316:	f7ff f999 	bl	800064c <HAL_GetTick>
 800131a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800131c:	e00a      	b.n	8001334 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800131e:	f7ff f995 	bl	800064c <HAL_GetTick>
 8001322:	4602      	mov	r2, r0
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	1ad3      	subs	r3, r2, r3
 8001328:	f241 3288 	movw	r2, #5000	; 0x1388
 800132c:	4293      	cmp	r3, r2
 800132e:	d901      	bls.n	8001334 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001330:	2303      	movs	r3, #3
 8001332:	e083      	b.n	800143c <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001334:	4b43      	ldr	r3, [pc, #268]	; (8001444 <HAL_RCC_OscConfig+0x4d8>)
 8001336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001338:	f003 0302 	and.w	r3, r3, #2
 800133c:	2b00      	cmp	r3, #0
 800133e:	d1ee      	bne.n	800131e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001340:	7dfb      	ldrb	r3, [r7, #23]
 8001342:	2b01      	cmp	r3, #1
 8001344:	d105      	bne.n	8001352 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001346:	4b3f      	ldr	r3, [pc, #252]	; (8001444 <HAL_RCC_OscConfig+0x4d8>)
 8001348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134a:	4a3e      	ldr	r2, [pc, #248]	; (8001444 <HAL_RCC_OscConfig+0x4d8>)
 800134c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001350:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	699b      	ldr	r3, [r3, #24]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d06f      	beq.n	800143a <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800135a:	4b3a      	ldr	r3, [pc, #232]	; (8001444 <HAL_RCC_OscConfig+0x4d8>)
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	f003 030c 	and.w	r3, r3, #12
 8001362:	2b08      	cmp	r3, #8
 8001364:	d067      	beq.n	8001436 <HAL_RCC_OscConfig+0x4ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	699b      	ldr	r3, [r3, #24]
 800136a:	2b02      	cmp	r3, #2
 800136c:	d149      	bne.n	8001402 <HAL_RCC_OscConfig+0x496>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800136e:	4b35      	ldr	r3, [pc, #212]	; (8001444 <HAL_RCC_OscConfig+0x4d8>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4a34      	ldr	r2, [pc, #208]	; (8001444 <HAL_RCC_OscConfig+0x4d8>)
 8001374:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001378:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800137a:	f7ff f967 	bl	800064c <HAL_GetTick>
 800137e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001380:	e008      	b.n	8001394 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001382:	f7ff f963 	bl	800064c <HAL_GetTick>
 8001386:	4602      	mov	r2, r0
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	1ad3      	subs	r3, r2, r3
 800138c:	2b02      	cmp	r3, #2
 800138e:	d901      	bls.n	8001394 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001390:	2303      	movs	r3, #3
 8001392:	e053      	b.n	800143c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001394:	4b2b      	ldr	r3, [pc, #172]	; (8001444 <HAL_RCC_OscConfig+0x4d8>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800139c:	2b00      	cmp	r3, #0
 800139e:	d1f0      	bne.n	8001382 <HAL_RCC_OscConfig+0x416>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	69da      	ldr	r2, [r3, #28]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6a1b      	ldr	r3, [r3, #32]
 80013a8:	431a      	orrs	r2, r3
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ae:	019b      	lsls	r3, r3, #6
 80013b0:	431a      	orrs	r2, r3
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013b6:	085b      	lsrs	r3, r3, #1
 80013b8:	3b01      	subs	r3, #1
 80013ba:	041b      	lsls	r3, r3, #16
 80013bc:	431a      	orrs	r2, r3
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013c2:	061b      	lsls	r3, r3, #24
 80013c4:	4313      	orrs	r3, r2
 80013c6:	4a1f      	ldr	r2, [pc, #124]	; (8001444 <HAL_RCC_OscConfig+0x4d8>)
 80013c8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80013cc:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013ce:	4b1d      	ldr	r3, [pc, #116]	; (8001444 <HAL_RCC_OscConfig+0x4d8>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4a1c      	ldr	r2, [pc, #112]	; (8001444 <HAL_RCC_OscConfig+0x4d8>)
 80013d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80013d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013da:	f7ff f937 	bl	800064c <HAL_GetTick>
 80013de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013e0:	e008      	b.n	80013f4 <HAL_RCC_OscConfig+0x488>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013e2:	f7ff f933 	bl	800064c <HAL_GetTick>
 80013e6:	4602      	mov	r2, r0
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	1ad3      	subs	r3, r2, r3
 80013ec:	2b02      	cmp	r3, #2
 80013ee:	d901      	bls.n	80013f4 <HAL_RCC_OscConfig+0x488>
          {
            return HAL_TIMEOUT;
 80013f0:	2303      	movs	r3, #3
 80013f2:	e023      	b.n	800143c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013f4:	4b13      	ldr	r3, [pc, #76]	; (8001444 <HAL_RCC_OscConfig+0x4d8>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d0f0      	beq.n	80013e2 <HAL_RCC_OscConfig+0x476>
 8001400:	e01b      	b.n	800143a <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001402:	4b10      	ldr	r3, [pc, #64]	; (8001444 <HAL_RCC_OscConfig+0x4d8>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a0f      	ldr	r2, [pc, #60]	; (8001444 <HAL_RCC_OscConfig+0x4d8>)
 8001408:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800140c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800140e:	f7ff f91d 	bl	800064c <HAL_GetTick>
 8001412:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001414:	e008      	b.n	8001428 <HAL_RCC_OscConfig+0x4bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001416:	f7ff f919 	bl	800064c <HAL_GetTick>
 800141a:	4602      	mov	r2, r0
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	1ad3      	subs	r3, r2, r3
 8001420:	2b02      	cmp	r3, #2
 8001422:	d901      	bls.n	8001428 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8001424:	2303      	movs	r3, #3
 8001426:	e009      	b.n	800143c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001428:	4b06      	ldr	r3, [pc, #24]	; (8001444 <HAL_RCC_OscConfig+0x4d8>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001430:	2b00      	cmp	r3, #0
 8001432:	d1f0      	bne.n	8001416 <HAL_RCC_OscConfig+0x4aa>
 8001434:	e001      	b.n	800143a <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	e000      	b.n	800143c <HAL_RCC_OscConfig+0x4d0>
    }
  }
  return HAL_OK;
 800143a:	2300      	movs	r3, #0
}
 800143c:	4618      	mov	r0, r3
 800143e:	3718      	adds	r7, #24
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	40023800 	.word	0x40023800
 8001448:	40007000 	.word	0x40007000

0800144c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001456:	2300      	movs	r3, #0
 8001458:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d101      	bne.n	8001464 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001460:	2301      	movs	r3, #1
 8001462:	e0ce      	b.n	8001602 <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001464:	4b69      	ldr	r3, [pc, #420]	; (800160c <HAL_RCC_ClockConfig+0x1c0>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f003 030f 	and.w	r3, r3, #15
 800146c:	683a      	ldr	r2, [r7, #0]
 800146e:	429a      	cmp	r2, r3
 8001470:	d910      	bls.n	8001494 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001472:	4b66      	ldr	r3, [pc, #408]	; (800160c <HAL_RCC_ClockConfig+0x1c0>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f023 020f 	bic.w	r2, r3, #15
 800147a:	4964      	ldr	r1, [pc, #400]	; (800160c <HAL_RCC_ClockConfig+0x1c0>)
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	4313      	orrs	r3, r2
 8001480:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001482:	4b62      	ldr	r3, [pc, #392]	; (800160c <HAL_RCC_ClockConfig+0x1c0>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f003 030f 	and.w	r3, r3, #15
 800148a:	683a      	ldr	r2, [r7, #0]
 800148c:	429a      	cmp	r2, r3
 800148e:	d001      	beq.n	8001494 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001490:	2301      	movs	r3, #1
 8001492:	e0b6      	b.n	8001602 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f003 0302 	and.w	r3, r3, #2
 800149c:	2b00      	cmp	r3, #0
 800149e:	d020      	beq.n	80014e2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f003 0304 	and.w	r3, r3, #4
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d005      	beq.n	80014b8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014ac:	4b58      	ldr	r3, [pc, #352]	; (8001610 <HAL_RCC_ClockConfig+0x1c4>)
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	4a57      	ldr	r2, [pc, #348]	; (8001610 <HAL_RCC_ClockConfig+0x1c4>)
 80014b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80014b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f003 0308 	and.w	r3, r3, #8
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d005      	beq.n	80014d0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014c4:	4b52      	ldr	r3, [pc, #328]	; (8001610 <HAL_RCC_ClockConfig+0x1c4>)
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	4a51      	ldr	r2, [pc, #324]	; (8001610 <HAL_RCC_ClockConfig+0x1c4>)
 80014ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80014ce:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014d0:	4b4f      	ldr	r3, [pc, #316]	; (8001610 <HAL_RCC_ClockConfig+0x1c4>)
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	494c      	ldr	r1, [pc, #304]	; (8001610 <HAL_RCC_ClockConfig+0x1c4>)
 80014de:	4313      	orrs	r3, r2
 80014e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f003 0301 	and.w	r3, r3, #1
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d040      	beq.n	8001570 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d107      	bne.n	8001506 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014f6:	4b46      	ldr	r3, [pc, #280]	; (8001610 <HAL_RCC_ClockConfig+0x1c4>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d115      	bne.n	800152e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	e07d      	b.n	8001602 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	2b02      	cmp	r3, #2
 800150c:	d107      	bne.n	800151e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800150e:	4b40      	ldr	r3, [pc, #256]	; (8001610 <HAL_RCC_ClockConfig+0x1c4>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001516:	2b00      	cmp	r3, #0
 8001518:	d109      	bne.n	800152e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	e071      	b.n	8001602 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800151e:	4b3c      	ldr	r3, [pc, #240]	; (8001610 <HAL_RCC_ClockConfig+0x1c4>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f003 0302 	and.w	r3, r3, #2
 8001526:	2b00      	cmp	r3, #0
 8001528:	d101      	bne.n	800152e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	e069      	b.n	8001602 <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800152e:	4b38      	ldr	r3, [pc, #224]	; (8001610 <HAL_RCC_ClockConfig+0x1c4>)
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	f023 0203 	bic.w	r2, r3, #3
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	4935      	ldr	r1, [pc, #212]	; (8001610 <HAL_RCC_ClockConfig+0x1c4>)
 800153c:	4313      	orrs	r3, r2
 800153e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001540:	f7ff f884 	bl	800064c <HAL_GetTick>
 8001544:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001546:	e00a      	b.n	800155e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001548:	f7ff f880 	bl	800064c <HAL_GetTick>
 800154c:	4602      	mov	r2, r0
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	f241 3288 	movw	r2, #5000	; 0x1388
 8001556:	4293      	cmp	r3, r2
 8001558:	d901      	bls.n	800155e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800155a:	2303      	movs	r3, #3
 800155c:	e051      	b.n	8001602 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800155e:	4b2c      	ldr	r3, [pc, #176]	; (8001610 <HAL_RCC_ClockConfig+0x1c4>)
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	f003 020c 	and.w	r2, r3, #12
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	429a      	cmp	r2, r3
 800156e:	d1eb      	bne.n	8001548 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001570:	4b26      	ldr	r3, [pc, #152]	; (800160c <HAL_RCC_ClockConfig+0x1c0>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f003 030f 	and.w	r3, r3, #15
 8001578:	683a      	ldr	r2, [r7, #0]
 800157a:	429a      	cmp	r2, r3
 800157c:	d210      	bcs.n	80015a0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800157e:	4b23      	ldr	r3, [pc, #140]	; (800160c <HAL_RCC_ClockConfig+0x1c0>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f023 020f 	bic.w	r2, r3, #15
 8001586:	4921      	ldr	r1, [pc, #132]	; (800160c <HAL_RCC_ClockConfig+0x1c0>)
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	4313      	orrs	r3, r2
 800158c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800158e:	4b1f      	ldr	r3, [pc, #124]	; (800160c <HAL_RCC_ClockConfig+0x1c0>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f003 030f 	and.w	r3, r3, #15
 8001596:	683a      	ldr	r2, [r7, #0]
 8001598:	429a      	cmp	r2, r3
 800159a:	d001      	beq.n	80015a0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800159c:	2301      	movs	r3, #1
 800159e:	e030      	b.n	8001602 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f003 0304 	and.w	r3, r3, #4
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d008      	beq.n	80015be <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015ac:	4b18      	ldr	r3, [pc, #96]	; (8001610 <HAL_RCC_ClockConfig+0x1c4>)
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	4915      	ldr	r1, [pc, #84]	; (8001610 <HAL_RCC_ClockConfig+0x1c4>)
 80015ba:	4313      	orrs	r3, r2
 80015bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 0308 	and.w	r3, r3, #8
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d009      	beq.n	80015de <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80015ca:	4b11      	ldr	r3, [pc, #68]	; (8001610 <HAL_RCC_ClockConfig+0x1c4>)
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	691b      	ldr	r3, [r3, #16]
 80015d6:	00db      	lsls	r3, r3, #3
 80015d8:	490d      	ldr	r1, [pc, #52]	; (8001610 <HAL_RCC_ClockConfig+0x1c4>)
 80015da:	4313      	orrs	r3, r2
 80015dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80015de:	f000 f81d 	bl	800161c <HAL_RCC_GetSysClockFreq>
 80015e2:	4602      	mov	r2, r0
 80015e4:	4b0a      	ldr	r3, [pc, #40]	; (8001610 <HAL_RCC_ClockConfig+0x1c4>)
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	091b      	lsrs	r3, r3, #4
 80015ea:	f003 030f 	and.w	r3, r3, #15
 80015ee:	4909      	ldr	r1, [pc, #36]	; (8001614 <HAL_RCC_ClockConfig+0x1c8>)
 80015f0:	5ccb      	ldrb	r3, [r1, r3]
 80015f2:	fa22 f303 	lsr.w	r3, r2, r3
 80015f6:	4a08      	ldr	r2, [pc, #32]	; (8001618 <HAL_RCC_ClockConfig+0x1cc>)
 80015f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80015fa:	2000      	movs	r0, #0
 80015fc:	f7fe ffe2 	bl	80005c4 <HAL_InitTick>

  return HAL_OK;
 8001600:	2300      	movs	r3, #0
}
 8001602:	4618      	mov	r0, r3
 8001604:	3710      	adds	r7, #16
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	40023c00 	.word	0x40023c00
 8001610:	40023800 	.word	0x40023800
 8001614:	08004b14 	.word	0x08004b14
 8001618:	20000008 	.word	0x20000008

0800161c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800161c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001620:	b084      	sub	sp, #16
 8001622:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001624:	2300      	movs	r3, #0
 8001626:	607b      	str	r3, [r7, #4]
 8001628:	2300      	movs	r3, #0
 800162a:	60fb      	str	r3, [r7, #12]
 800162c:	2300      	movs	r3, #0
 800162e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8001630:	2300      	movs	r3, #0
 8001632:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001634:	4b67      	ldr	r3, [pc, #412]	; (80017d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	f003 030c 	and.w	r3, r3, #12
 800163c:	2b08      	cmp	r3, #8
 800163e:	d00d      	beq.n	800165c <HAL_RCC_GetSysClockFreq+0x40>
 8001640:	2b08      	cmp	r3, #8
 8001642:	f200 80bd 	bhi.w	80017c0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001646:	2b00      	cmp	r3, #0
 8001648:	d002      	beq.n	8001650 <HAL_RCC_GetSysClockFreq+0x34>
 800164a:	2b04      	cmp	r3, #4
 800164c:	d003      	beq.n	8001656 <HAL_RCC_GetSysClockFreq+0x3a>
 800164e:	e0b7      	b.n	80017c0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001650:	4b61      	ldr	r3, [pc, #388]	; (80017d8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001652:	60bb      	str	r3, [r7, #8]
       break;
 8001654:	e0b7      	b.n	80017c6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001656:	4b61      	ldr	r3, [pc, #388]	; (80017dc <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001658:	60bb      	str	r3, [r7, #8]
      break;
 800165a:	e0b4      	b.n	80017c6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800165c:	4b5d      	ldr	r3, [pc, #372]	; (80017d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001664:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001666:	4b5b      	ldr	r3, [pc, #364]	; (80017d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d04d      	beq.n	800170e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001672:	4b58      	ldr	r3, [pc, #352]	; (80017d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	099b      	lsrs	r3, r3, #6
 8001678:	461a      	mov	r2, r3
 800167a:	f04f 0300 	mov.w	r3, #0
 800167e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001682:	f04f 0100 	mov.w	r1, #0
 8001686:	ea02 0800 	and.w	r8, r2, r0
 800168a:	ea03 0901 	and.w	r9, r3, r1
 800168e:	4640      	mov	r0, r8
 8001690:	4649      	mov	r1, r9
 8001692:	f04f 0200 	mov.w	r2, #0
 8001696:	f04f 0300 	mov.w	r3, #0
 800169a:	014b      	lsls	r3, r1, #5
 800169c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80016a0:	0142      	lsls	r2, r0, #5
 80016a2:	4610      	mov	r0, r2
 80016a4:	4619      	mov	r1, r3
 80016a6:	ebb0 0008 	subs.w	r0, r0, r8
 80016aa:	eb61 0109 	sbc.w	r1, r1, r9
 80016ae:	f04f 0200 	mov.w	r2, #0
 80016b2:	f04f 0300 	mov.w	r3, #0
 80016b6:	018b      	lsls	r3, r1, #6
 80016b8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80016bc:	0182      	lsls	r2, r0, #6
 80016be:	1a12      	subs	r2, r2, r0
 80016c0:	eb63 0301 	sbc.w	r3, r3, r1
 80016c4:	f04f 0000 	mov.w	r0, #0
 80016c8:	f04f 0100 	mov.w	r1, #0
 80016cc:	00d9      	lsls	r1, r3, #3
 80016ce:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80016d2:	00d0      	lsls	r0, r2, #3
 80016d4:	4602      	mov	r2, r0
 80016d6:	460b      	mov	r3, r1
 80016d8:	eb12 0208 	adds.w	r2, r2, r8
 80016dc:	eb43 0309 	adc.w	r3, r3, r9
 80016e0:	f04f 0000 	mov.w	r0, #0
 80016e4:	f04f 0100 	mov.w	r1, #0
 80016e8:	0259      	lsls	r1, r3, #9
 80016ea:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80016ee:	0250      	lsls	r0, r2, #9
 80016f0:	4602      	mov	r2, r0
 80016f2:	460b      	mov	r3, r1
 80016f4:	4610      	mov	r0, r2
 80016f6:	4619      	mov	r1, r3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	461a      	mov	r2, r3
 80016fc:	f04f 0300 	mov.w	r3, #0
 8001700:	f7fe fdd6 	bl	80002b0 <__aeabi_uldivmod>
 8001704:	4602      	mov	r2, r0
 8001706:	460b      	mov	r3, r1
 8001708:	4613      	mov	r3, r2
 800170a:	60fb      	str	r3, [r7, #12]
 800170c:	e04a      	b.n	80017a4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800170e:	4b31      	ldr	r3, [pc, #196]	; (80017d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	099b      	lsrs	r3, r3, #6
 8001714:	461a      	mov	r2, r3
 8001716:	f04f 0300 	mov.w	r3, #0
 800171a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800171e:	f04f 0100 	mov.w	r1, #0
 8001722:	ea02 0400 	and.w	r4, r2, r0
 8001726:	ea03 0501 	and.w	r5, r3, r1
 800172a:	4620      	mov	r0, r4
 800172c:	4629      	mov	r1, r5
 800172e:	f04f 0200 	mov.w	r2, #0
 8001732:	f04f 0300 	mov.w	r3, #0
 8001736:	014b      	lsls	r3, r1, #5
 8001738:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800173c:	0142      	lsls	r2, r0, #5
 800173e:	4610      	mov	r0, r2
 8001740:	4619      	mov	r1, r3
 8001742:	1b00      	subs	r0, r0, r4
 8001744:	eb61 0105 	sbc.w	r1, r1, r5
 8001748:	f04f 0200 	mov.w	r2, #0
 800174c:	f04f 0300 	mov.w	r3, #0
 8001750:	018b      	lsls	r3, r1, #6
 8001752:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001756:	0182      	lsls	r2, r0, #6
 8001758:	1a12      	subs	r2, r2, r0
 800175a:	eb63 0301 	sbc.w	r3, r3, r1
 800175e:	f04f 0000 	mov.w	r0, #0
 8001762:	f04f 0100 	mov.w	r1, #0
 8001766:	00d9      	lsls	r1, r3, #3
 8001768:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800176c:	00d0      	lsls	r0, r2, #3
 800176e:	4602      	mov	r2, r0
 8001770:	460b      	mov	r3, r1
 8001772:	1912      	adds	r2, r2, r4
 8001774:	eb45 0303 	adc.w	r3, r5, r3
 8001778:	f04f 0000 	mov.w	r0, #0
 800177c:	f04f 0100 	mov.w	r1, #0
 8001780:	0299      	lsls	r1, r3, #10
 8001782:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001786:	0290      	lsls	r0, r2, #10
 8001788:	4602      	mov	r2, r0
 800178a:	460b      	mov	r3, r1
 800178c:	4610      	mov	r0, r2
 800178e:	4619      	mov	r1, r3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	461a      	mov	r2, r3
 8001794:	f04f 0300 	mov.w	r3, #0
 8001798:	f7fe fd8a 	bl	80002b0 <__aeabi_uldivmod>
 800179c:	4602      	mov	r2, r0
 800179e:	460b      	mov	r3, r1
 80017a0:	4613      	mov	r3, r2
 80017a2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 80017a4:	4b0b      	ldr	r3, [pc, #44]	; (80017d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	0c1b      	lsrs	r3, r3, #16
 80017aa:	f003 0303 	and.w	r3, r3, #3
 80017ae:	3301      	adds	r3, #1
 80017b0:	005b      	lsls	r3, r3, #1
 80017b2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80017b4:	68fa      	ldr	r2, [r7, #12]
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80017bc:	60bb      	str	r3, [r7, #8]
      break;
 80017be:	e002      	b.n	80017c6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80017c0:	4b05      	ldr	r3, [pc, #20]	; (80017d8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80017c2:	60bb      	str	r3, [r7, #8]
      break;
 80017c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017c6:	68bb      	ldr	r3, [r7, #8]
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3710      	adds	r7, #16
 80017cc:	46bd      	mov	sp, r7
 80017ce:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80017d2:	bf00      	nop
 80017d4:	40023800 	.word	0x40023800
 80017d8:	00f42400 	.word	0x00f42400
 80017dc:	007a1200 	.word	0x007a1200

080017e0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80017e4:	4b03      	ldr	r3, [pc, #12]	; (80017f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80017e6:	681b      	ldr	r3, [r3, #0]
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	20000008 	.word	0x20000008

080017f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80017fc:	f7ff fff0 	bl	80017e0 <HAL_RCC_GetHCLKFreq>
 8001800:	4602      	mov	r2, r0
 8001802:	4b05      	ldr	r3, [pc, #20]	; (8001818 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	0a9b      	lsrs	r3, r3, #10
 8001808:	f003 0307 	and.w	r3, r3, #7
 800180c:	4903      	ldr	r1, [pc, #12]	; (800181c <HAL_RCC_GetPCLK1Freq+0x24>)
 800180e:	5ccb      	ldrb	r3, [r1, r3]
 8001810:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001814:	4618      	mov	r0, r3
 8001816:	bd80      	pop	{r7, pc}
 8001818:	40023800 	.word	0x40023800
 800181c:	08004b24 	.word	0x08004b24

08001820 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001824:	f7ff ffdc 	bl	80017e0 <HAL_RCC_GetHCLKFreq>
 8001828:	4602      	mov	r2, r0
 800182a:	4b05      	ldr	r3, [pc, #20]	; (8001840 <HAL_RCC_GetPCLK2Freq+0x20>)
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	0b5b      	lsrs	r3, r3, #13
 8001830:	f003 0307 	and.w	r3, r3, #7
 8001834:	4903      	ldr	r1, [pc, #12]	; (8001844 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001836:	5ccb      	ldrb	r3, [r1, r3]
 8001838:	fa22 f303 	lsr.w	r3, r2, r3
}
 800183c:	4618      	mov	r0, r3
 800183e:	bd80      	pop	{r7, pc}
 8001840:	40023800 	.word	0x40023800
 8001844:	08004b24 	.word	0x08004b24

08001848 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b088      	sub	sp, #32
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001850:	2300      	movs	r3, #0
 8001852:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001854:	2300      	movs	r3, #0
 8001856:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001858:	2300      	movs	r3, #0
 800185a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800185c:	2300      	movs	r3, #0
 800185e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001860:	2300      	movs	r3, #0
 8001862:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 0301 	and.w	r3, r3, #1
 800186c:	2b00      	cmp	r3, #0
 800186e:	d012      	beq.n	8001896 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001870:	4b69      	ldr	r3, [pc, #420]	; (8001a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	4a68      	ldr	r2, [pc, #416]	; (8001a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001876:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800187a:	6093      	str	r3, [r2, #8]
 800187c:	4b66      	ldr	r3, [pc, #408]	; (8001a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800187e:	689a      	ldr	r2, [r3, #8]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001884:	4964      	ldr	r1, [pc, #400]	; (8001a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001886:	4313      	orrs	r3, r2
 8001888:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800188e:	2b00      	cmp	r3, #0
 8001890:	d101      	bne.n	8001896 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001892:	2301      	movs	r3, #1
 8001894:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d017      	beq.n	80018d2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80018a2:	4b5d      	ldr	r3, [pc, #372]	; (8001a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80018a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80018a8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018b0:	4959      	ldr	r1, [pc, #356]	; (8001a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80018b2:	4313      	orrs	r3, r2
 80018b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80018c0:	d101      	bne.n	80018c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80018c2:	2301      	movs	r3, #1
 80018c4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d101      	bne.n	80018d2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80018ce:	2301      	movs	r3, #1
 80018d0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d017      	beq.n	800190e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80018de:	4b4e      	ldr	r3, [pc, #312]	; (8001a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80018e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80018e4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ec:	494a      	ldr	r1, [pc, #296]	; (8001a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80018ee:	4313      	orrs	r3, r2
 80018f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80018fc:	d101      	bne.n	8001902 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80018fe:	2301      	movs	r3, #1
 8001900:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001906:	2b00      	cmp	r3, #0
 8001908:	d101      	bne.n	800190e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800190a:	2301      	movs	r3, #1
 800190c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d001      	beq.n	800191e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800191a:	2301      	movs	r3, #1
 800191c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0320 	and.w	r3, r3, #32
 8001926:	2b00      	cmp	r3, #0
 8001928:	f000 808b 	beq.w	8001a42 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800192c:	4b3a      	ldr	r3, [pc, #232]	; (8001a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800192e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001930:	4a39      	ldr	r2, [pc, #228]	; (8001a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001932:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001936:	6413      	str	r3, [r2, #64]	; 0x40
 8001938:	4b37      	ldr	r3, [pc, #220]	; (8001a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800193a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001940:	60bb      	str	r3, [r7, #8]
 8001942:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001944:	4b35      	ldr	r3, [pc, #212]	; (8001a1c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a34      	ldr	r2, [pc, #208]	; (8001a1c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800194a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800194e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001950:	f7fe fe7c 	bl	800064c <HAL_GetTick>
 8001954:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001956:	e008      	b.n	800196a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001958:	f7fe fe78 	bl	800064c <HAL_GetTick>
 800195c:	4602      	mov	r2, r0
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	2b64      	cmp	r3, #100	; 0x64
 8001964:	d901      	bls.n	800196a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001966:	2303      	movs	r3, #3
 8001968:	e355      	b.n	8002016 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800196a:	4b2c      	ldr	r3, [pc, #176]	; (8001a1c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001972:	2b00      	cmp	r3, #0
 8001974:	d0f0      	beq.n	8001958 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001976:	4b28      	ldr	r3, [pc, #160]	; (8001a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800197a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800197e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d035      	beq.n	80019f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800198e:	693a      	ldr	r2, [r7, #16]
 8001990:	429a      	cmp	r2, r3
 8001992:	d02e      	beq.n	80019f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001994:	4b20      	ldr	r3, [pc, #128]	; (8001a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001996:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001998:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800199c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800199e:	4b1e      	ldr	r3, [pc, #120]	; (8001a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80019a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019a2:	4a1d      	ldr	r2, [pc, #116]	; (8001a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80019a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019a8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80019aa:	4b1b      	ldr	r3, [pc, #108]	; (8001a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80019ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019ae:	4a1a      	ldr	r2, [pc, #104]	; (8001a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80019b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019b4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80019b6:	4a18      	ldr	r2, [pc, #96]	; (8001a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80019bc:	4b16      	ldr	r3, [pc, #88]	; (8001a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80019be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019c0:	f003 0301 	and.w	r3, r3, #1
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d114      	bne.n	80019f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c8:	f7fe fe40 	bl	800064c <HAL_GetTick>
 80019cc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019ce:	e00a      	b.n	80019e6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019d0:	f7fe fe3c 	bl	800064c <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	f241 3288 	movw	r2, #5000	; 0x1388
 80019de:	4293      	cmp	r3, r2
 80019e0:	d901      	bls.n	80019e6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	e317      	b.n	8002016 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019e6:	4b0c      	ldr	r3, [pc, #48]	; (8001a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80019e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019ea:	f003 0302 	and.w	r3, r3, #2
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d0ee      	beq.n	80019d0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80019fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80019fe:	d111      	bne.n	8001a24 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001a00:	4b05      	ldr	r3, [pc, #20]	; (8001a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001a0c:	4b04      	ldr	r3, [pc, #16]	; (8001a20 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001a0e:	400b      	ands	r3, r1
 8001a10:	4901      	ldr	r1, [pc, #4]	; (8001a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a12:	4313      	orrs	r3, r2
 8001a14:	608b      	str	r3, [r1, #8]
 8001a16:	e00b      	b.n	8001a30 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001a18:	40023800 	.word	0x40023800
 8001a1c:	40007000 	.word	0x40007000
 8001a20:	0ffffcff 	.word	0x0ffffcff
 8001a24:	4bb0      	ldr	r3, [pc, #704]	; (8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	4aaf      	ldr	r2, [pc, #700]	; (8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001a2a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001a2e:	6093      	str	r3, [r2, #8]
 8001a30:	4bad      	ldr	r3, [pc, #692]	; (8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001a32:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a3c:	49aa      	ldr	r1, [pc, #680]	; (8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 0310 	and.w	r3, r3, #16
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d010      	beq.n	8001a70 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001a4e:	4ba6      	ldr	r3, [pc, #664]	; (8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001a50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a54:	4aa4      	ldr	r2, [pc, #656]	; (8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001a56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a5a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001a5e:	4ba2      	ldr	r3, [pc, #648]	; (8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001a60:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a68:	499f      	ldr	r1, [pc, #636]	; (8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d00a      	beq.n	8001a92 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001a7c:	4b9a      	ldr	r3, [pc, #616]	; (8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a82:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001a8a:	4997      	ldr	r1, [pc, #604]	; (8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d00a      	beq.n	8001ab4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001a9e:	4b92      	ldr	r3, [pc, #584]	; (8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001aa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aa4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001aac:	498e      	ldr	r1, [pc, #568]	; (8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d00a      	beq.n	8001ad6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001ac0:	4b89      	ldr	r3, [pc, #548]	; (8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ac6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ace:	4986      	ldr	r1, [pc, #536]	; (8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d00a      	beq.n	8001af8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001ae2:	4b81      	ldr	r3, [pc, #516]	; (8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001ae4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ae8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001af0:	497d      	ldr	r1, [pc, #500]	; (8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001af2:	4313      	orrs	r3, r2
 8001af4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d00a      	beq.n	8001b1a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001b04:	4b78      	ldr	r3, [pc, #480]	; (8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001b06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b0a:	f023 0203 	bic.w	r2, r3, #3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b12:	4975      	ldr	r1, [pc, #468]	; (8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001b14:	4313      	orrs	r3, r2
 8001b16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d00a      	beq.n	8001b3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001b26:	4b70      	ldr	r3, [pc, #448]	; (8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001b28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b2c:	f023 020c 	bic.w	r2, r3, #12
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b34:	496c      	ldr	r1, [pc, #432]	; (8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001b36:	4313      	orrs	r3, r2
 8001b38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d00a      	beq.n	8001b5e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001b48:	4b67      	ldr	r3, [pc, #412]	; (8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b4e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b56:	4964      	ldr	r1, [pc, #400]	; (8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d00a      	beq.n	8001b80 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001b6a:	4b5f      	ldr	r3, [pc, #380]	; (8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001b6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b70:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b78:	495b      	ldr	r1, [pc, #364]	; (8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d00a      	beq.n	8001ba2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001b8c:	4b56      	ldr	r3, [pc, #344]	; (8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b92:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b9a:	4953      	ldr	r1, [pc, #332]	; (8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d00a      	beq.n	8001bc4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8001bae:	4b4e      	ldr	r3, [pc, #312]	; (8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001bb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bb4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bbc:	494a      	ldr	r1, [pc, #296]	; (8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d00a      	beq.n	8001be6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001bd0:	4b45      	ldr	r3, [pc, #276]	; (8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001bd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bd6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bde:	4942      	ldr	r1, [pc, #264]	; (8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001be0:	4313      	orrs	r3, r2
 8001be2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d00a      	beq.n	8001c08 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8001bf2:	4b3d      	ldr	r3, [pc, #244]	; (8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001bf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bf8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c00:	4939      	ldr	r1, [pc, #228]	; (8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001c02:	4313      	orrs	r3, r2
 8001c04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d00a      	beq.n	8001c2a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001c14:	4b34      	ldr	r3, [pc, #208]	; (8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c1a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001c22:	4931      	ldr	r1, [pc, #196]	; (8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001c24:	4313      	orrs	r3, r2
 8001c26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d011      	beq.n	8001c5a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001c36:	4b2c      	ldr	r3, [pc, #176]	; (8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001c38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c3c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001c44:	4928      	ldr	r1, [pc, #160]	; (8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001c46:	4313      	orrs	r3, r2
 8001c48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001c50:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001c54:	d101      	bne.n	8001c5a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8001c56:	2301      	movs	r3, #1
 8001c58:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0308 	and.w	r3, r3, #8
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8001c66:	2301      	movs	r3, #1
 8001c68:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d00a      	beq.n	8001c8c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001c76:	4b1c      	ldr	r3, [pc, #112]	; (8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001c78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c7c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c84:	4918      	ldr	r1, [pc, #96]	; (8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001c86:	4313      	orrs	r3, r2
 8001c88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d00b      	beq.n	8001cb0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001c98:	4b13      	ldr	r3, [pc, #76]	; (8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c9e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ca8:	490f      	ldr	r1, [pc, #60]	; (8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001caa:	4313      	orrs	r3, r2
 8001cac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d005      	beq.n	8001cc2 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001cbe:	f040 80d8 	bne.w	8001e72 <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001cc2:	4b09      	ldr	r3, [pc, #36]	; (8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a08      	ldr	r2, [pc, #32]	; (8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001cc8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001ccc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001cce:	f7fe fcbd 	bl	800064c <HAL_GetTick>
 8001cd2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001cd4:	e00a      	b.n	8001cec <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001cd6:	f7fe fcb9 	bl	800064c <HAL_GetTick>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	1ad3      	subs	r3, r2, r3
 8001ce0:	2b64      	cmp	r3, #100	; 0x64
 8001ce2:	d903      	bls.n	8001cec <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	e196      	b.n	8002016 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8001ce8:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001cec:	4b6c      	ldr	r3, [pc, #432]	; (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d1ee      	bne.n	8001cd6 <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 0301 	and.w	r3, r3, #1
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d021      	beq.n	8001d48 <HAL_RCCEx_PeriphCLKConfig+0x500>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d11d      	bne.n	8001d48 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001d0c:	4b64      	ldr	r3, [pc, #400]	; (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001d0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d12:	0c1b      	lsrs	r3, r3, #16
 8001d14:	f003 0303 	and.w	r3, r3, #3
 8001d18:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001d1a:	4b61      	ldr	r3, [pc, #388]	; (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001d1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d20:	0e1b      	lsrs	r3, r3, #24
 8001d22:	f003 030f 	and.w	r3, r3, #15
 8001d26:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	019a      	lsls	r2, r3, #6
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	041b      	lsls	r3, r3, #16
 8001d32:	431a      	orrs	r2, r3
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	061b      	lsls	r3, r3, #24
 8001d38:	431a      	orrs	r2, r3
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	071b      	lsls	r3, r3, #28
 8001d40:	4957      	ldr	r1, [pc, #348]	; (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001d42:	4313      	orrs	r3, r2
 8001d44:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d004      	beq.n	8001d5e <HAL_RCCEx_PeriphCLKConfig+0x516>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001d5c:	d00a      	beq.n	8001d74 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d02e      	beq.n	8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d72:	d129      	bne.n	8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001d74:	4b4a      	ldr	r3, [pc, #296]	; (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001d76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d7a:	0c1b      	lsrs	r3, r3, #16
 8001d7c:	f003 0303 	and.w	r3, r3, #3
 8001d80:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001d82:	4b47      	ldr	r3, [pc, #284]	; (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001d84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d88:	0f1b      	lsrs	r3, r3, #28
 8001d8a:	f003 0307 	and.w	r3, r3, #7
 8001d8e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	019a      	lsls	r2, r3, #6
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	041b      	lsls	r3, r3, #16
 8001d9a:	431a      	orrs	r2, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	061b      	lsls	r3, r3, #24
 8001da2:	431a      	orrs	r2, r3
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	071b      	lsls	r3, r3, #28
 8001da8:	493d      	ldr	r1, [pc, #244]	; (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001daa:	4313      	orrs	r3, r2
 8001dac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001db0:	4b3b      	ldr	r3, [pc, #236]	; (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001db2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001db6:	f023 021f 	bic.w	r2, r3, #31
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dbe:	3b01      	subs	r3, #1
 8001dc0:	4937      	ldr	r1, [pc, #220]	; (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d01d      	beq.n	8001e10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001dd4:	4b32      	ldr	r3, [pc, #200]	; (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001dd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001dda:	0e1b      	lsrs	r3, r3, #24
 8001ddc:	f003 030f 	and.w	r3, r3, #15
 8001de0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001de2:	4b2f      	ldr	r3, [pc, #188]	; (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001de4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001de8:	0f1b      	lsrs	r3, r3, #28
 8001dea:	f003 0307 	and.w	r3, r3, #7
 8001dee:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	019a      	lsls	r2, r3, #6
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	691b      	ldr	r3, [r3, #16]
 8001dfa:	041b      	lsls	r3, r3, #16
 8001dfc:	431a      	orrs	r2, r3
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	061b      	lsls	r3, r3, #24
 8001e02:	431a      	orrs	r2, r3
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	071b      	lsls	r3, r3, #28
 8001e08:	4925      	ldr	r1, [pc, #148]	; (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d011      	beq.n	8001e40 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	019a      	lsls	r2, r3, #6
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	691b      	ldr	r3, [r3, #16]
 8001e26:	041b      	lsls	r3, r3, #16
 8001e28:	431a      	orrs	r2, r3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	68db      	ldr	r3, [r3, #12]
 8001e2e:	061b      	lsls	r3, r3, #24
 8001e30:	431a      	orrs	r2, r3
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	071b      	lsls	r3, r3, #28
 8001e38:	4919      	ldr	r1, [pc, #100]	; (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001e40:	4b17      	ldr	r3, [pc, #92]	; (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a16      	ldr	r2, [pc, #88]	; (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001e46:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001e4a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e4c:	f7fe fbfe 	bl	800064c <HAL_GetTick>
 8001e50:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001e52:	e008      	b.n	8001e66 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001e54:	f7fe fbfa 	bl	800064c <HAL_GetTick>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	2b64      	cmp	r3, #100	; 0x64
 8001e60:	d901      	bls.n	8001e66 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e0d7      	b.n	8002016 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001e66:	4b0e      	ldr	r3, [pc, #56]	; (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d0f0      	beq.n	8001e54 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8001e72:	69bb      	ldr	r3, [r7, #24]
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	f040 80cd 	bne.w	8002014 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8001e7a:	4b09      	ldr	r3, [pc, #36]	; (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a08      	ldr	r2, [pc, #32]	; (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001e80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e86:	f7fe fbe1 	bl	800064c <HAL_GetTick>
 8001e8a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001e8c:	e00a      	b.n	8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001e8e:	f7fe fbdd 	bl	800064c <HAL_GetTick>
 8001e92:	4602      	mov	r2, r0
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	1ad3      	subs	r3, r2, r3
 8001e98:	2b64      	cmp	r3, #100	; 0x64
 8001e9a:	d903      	bls.n	8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	e0ba      	b.n	8002016 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8001ea0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001ea4:	4b5e      	ldr	r3, [pc, #376]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001eac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001eb0:	d0ed      	beq.n	8001e8e <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d003      	beq.n	8001ec6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d009      	beq.n	8001eda <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d02e      	beq.n	8001f30 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d12a      	bne.n	8001f30 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8001eda:	4b51      	ldr	r3, [pc, #324]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001edc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ee0:	0c1b      	lsrs	r3, r3, #16
 8001ee2:	f003 0303 	and.w	r3, r3, #3
 8001ee6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001ee8:	4b4d      	ldr	r3, [pc, #308]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eee:	0f1b      	lsrs	r3, r3, #28
 8001ef0:	f003 0307 	and.w	r3, r3, #7
 8001ef4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	695b      	ldr	r3, [r3, #20]
 8001efa:	019a      	lsls	r2, r3, #6
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	041b      	lsls	r3, r3, #16
 8001f00:	431a      	orrs	r2, r3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	699b      	ldr	r3, [r3, #24]
 8001f06:	061b      	lsls	r3, r3, #24
 8001f08:	431a      	orrs	r2, r3
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	071b      	lsls	r3, r3, #28
 8001f0e:	4944      	ldr	r1, [pc, #272]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001f10:	4313      	orrs	r3, r2
 8001f12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001f16:	4b42      	ldr	r3, [pc, #264]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001f18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f1c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f24:	3b01      	subs	r3, #1
 8001f26:	021b      	lsls	r3, r3, #8
 8001f28:	493d      	ldr	r1, [pc, #244]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d022      	beq.n	8001f82 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001f40:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001f44:	d11d      	bne.n	8001f82 <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001f46:	4b36      	ldr	r3, [pc, #216]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001f48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f4c:	0e1b      	lsrs	r3, r3, #24
 8001f4e:	f003 030f 	and.w	r3, r3, #15
 8001f52:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001f54:	4b32      	ldr	r3, [pc, #200]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f5a:	0f1b      	lsrs	r3, r3, #28
 8001f5c:	f003 0307 	and.w	r3, r3, #7
 8001f60:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	695b      	ldr	r3, [r3, #20]
 8001f66:	019a      	lsls	r2, r3, #6
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6a1b      	ldr	r3, [r3, #32]
 8001f6c:	041b      	lsls	r3, r3, #16
 8001f6e:	431a      	orrs	r2, r3
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	061b      	lsls	r3, r3, #24
 8001f74:	431a      	orrs	r2, r3
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	071b      	lsls	r3, r3, #28
 8001f7a:	4929      	ldr	r1, [pc, #164]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0308 	and.w	r3, r3, #8
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d028      	beq.n	8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001f8e:	4b24      	ldr	r3, [pc, #144]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001f90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f94:	0e1b      	lsrs	r3, r3, #24
 8001f96:	f003 030f 	and.w	r3, r3, #15
 8001f9a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8001f9c:	4b20      	ldr	r3, [pc, #128]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fa2:	0c1b      	lsrs	r3, r3, #16
 8001fa4:	f003 0303 	and.w	r3, r3, #3
 8001fa8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	695b      	ldr	r3, [r3, #20]
 8001fae:	019a      	lsls	r2, r3, #6
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	041b      	lsls	r3, r3, #16
 8001fb4:	431a      	orrs	r2, r3
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	061b      	lsls	r3, r3, #24
 8001fba:	431a      	orrs	r2, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	69db      	ldr	r3, [r3, #28]
 8001fc0:	071b      	lsls	r3, r3, #28
 8001fc2:	4917      	ldr	r1, [pc, #92]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8001fca:	4b15      	ldr	r3, [pc, #84]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001fcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001fd0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fd8:	4911      	ldr	r1, [pc, #68]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8001fe0:	4b0f      	ldr	r3, [pc, #60]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a0e      	ldr	r2, [pc, #56]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001fe6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fec:	f7fe fb2e 	bl	800064c <HAL_GetTick>
 8001ff0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001ff2:	e008      	b.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001ff4:	f7fe fb2a 	bl	800064c <HAL_GetTick>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	2b64      	cmp	r3, #100	; 0x64
 8002000:	d901      	bls.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	e007      	b.n	8002016 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002006:	4b06      	ldr	r3, [pc, #24]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800200e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002012:	d1ef      	bne.n	8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8002014:	2300      	movs	r3, #0
}
 8002016:	4618      	mov	r0, r3
 8002018:	3720      	adds	r7, #32
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	40023800 	.word	0x40023800

08002024 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d101      	bne.n	8002036 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e040      	b.n	80020b8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800203a:	2b00      	cmp	r3, #0
 800203c:	d106      	bne.n	800204c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2200      	movs	r2, #0
 8002042:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f001 fc06 	bl	8003858 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2224      	movs	r2, #36	; 0x24
 8002050:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f022 0201 	bic.w	r2, r2, #1
 8002060:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f000 fab8 	bl	80025d8 <UART_SetConfig>
 8002068:	4603      	mov	r3, r0
 800206a:	2b01      	cmp	r3, #1
 800206c:	d101      	bne.n	8002072 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e022      	b.n	80020b8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002076:	2b00      	cmp	r3, #0
 8002078:	d002      	beq.n	8002080 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f000 fd52 	bl	8002b24 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	685a      	ldr	r2, [r3, #4]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800208e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	689a      	ldr	r2, [r3, #8]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800209e:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f042 0201 	orr.w	r2, r2, #1
 80020ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80020b0:	6878      	ldr	r0, [r7, #4]
 80020b2:	f000 fdd9 	bl	8002c68 <UART_CheckIdleState>
 80020b6:	4603      	mov	r3, r0
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3708      	adds	r7, #8
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}

080020c0 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b08a      	sub	sp, #40	; 0x28
 80020c4:	af02      	add	r7, sp, #8
 80020c6:	60f8      	str	r0, [r7, #12]
 80020c8:	60b9      	str	r1, [r7, #8]
 80020ca:	603b      	str	r3, [r7, #0]
 80020cc:	4613      	mov	r3, r2
 80020ce:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020d4:	2b20      	cmp	r3, #32
 80020d6:	d17f      	bne.n	80021d8 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d002      	beq.n	80020e4 <HAL_UART_Transmit+0x24>
 80020de:	88fb      	ldrh	r3, [r7, #6]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d101      	bne.n	80020e8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	e078      	b.n	80021da <HAL_UART_Transmit+0x11a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d101      	bne.n	80020f6 <HAL_UART_Transmit+0x36>
 80020f2:	2302      	movs	r3, #2
 80020f4:	e071      	b.n	80021da <HAL_UART_Transmit+0x11a>
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	2201      	movs	r2, #1
 80020fa:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	2200      	movs	r2, #0
 8002102:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	2221      	movs	r2, #33	; 0x21
 8002108:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800210a:	f7fe fa9f 	bl	800064c <HAL_GetTick>
 800210e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	88fa      	ldrh	r2, [r7, #6]
 8002114:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	88fa      	ldrh	r2, [r7, #6]
 800211c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

        /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002128:	d108      	bne.n	800213c <HAL_UART_Transmit+0x7c>
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	691b      	ldr	r3, [r3, #16]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d104      	bne.n	800213c <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 8002132:	2300      	movs	r3, #0
 8002134:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	61bb      	str	r3, [r7, #24]
 800213a:	e003      	b.n	8002144 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002140:	2300      	movs	r3, #0
 8002142:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002144:	e02c      	b.n	80021a0 <HAL_UART_Transmit+0xe0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	9300      	str	r3, [sp, #0]
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	2200      	movs	r2, #0
 800214e:	2180      	movs	r1, #128	; 0x80
 8002150:	68f8      	ldr	r0, [r7, #12]
 8002152:	f000 fdb8 	bl	8002cc6 <UART_WaitOnFlagUntilTimeout>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d001      	beq.n	8002160 <HAL_UART_Transmit+0xa0>
      {
        return HAL_TIMEOUT;
 800215c:	2303      	movs	r3, #3
 800215e:	e03c      	b.n	80021da <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d10b      	bne.n	800217e <HAL_UART_Transmit+0xbe>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002166:	69bb      	ldr	r3, [r7, #24]
 8002168:	881b      	ldrh	r3, [r3, #0]
 800216a:	461a      	mov	r2, r3
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002174:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002176:	69bb      	ldr	r3, [r7, #24]
 8002178:	3302      	adds	r3, #2
 800217a:	61bb      	str	r3, [r7, #24]
 800217c:	e007      	b.n	800218e <HAL_UART_Transmit+0xce>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	781a      	ldrb	r2, [r3, #0]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	3301      	adds	r3, #1
 800218c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002194:	b29b      	uxth	r3, r3
 8002196:	3b01      	subs	r3, #1
 8002198:	b29a      	uxth	r2, r3
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80021a6:	b29b      	uxth	r3, r3
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d1cc      	bne.n	8002146 <HAL_UART_Transmit+0x86>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	9300      	str	r3, [sp, #0]
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	2200      	movs	r2, #0
 80021b4:	2140      	movs	r1, #64	; 0x40
 80021b6:	68f8      	ldr	r0, [r7, #12]
 80021b8:	f000 fd85 	bl	8002cc6 <UART_WaitOnFlagUntilTimeout>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <HAL_UART_Transmit+0x106>
    {
      return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e009      	b.n	80021da <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2220      	movs	r2, #32
 80021ca:	675a      	str	r2, [r3, #116]	; 0x74

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2200      	movs	r2, #0
 80021d0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 80021d4:	2300      	movs	r3, #0
 80021d6:	e000      	b.n	80021da <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 80021d8:	2302      	movs	r3, #2
  }
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3720      	adds	r7, #32
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}

080021e2 <HAL_UART_Receive>:
  * @param Size    Amount of data to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021e2:	b580      	push	{r7, lr}
 80021e4:	b08a      	sub	sp, #40	; 0x28
 80021e6:	af02      	add	r7, sp, #8
 80021e8:	60f8      	str	r0, [r7, #12]
 80021ea:	60b9      	str	r1, [r7, #8]
 80021ec:	603b      	str	r3, [r7, #0]
 80021ee:	4613      	mov	r3, r2
 80021f0:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80021f6:	2b20      	cmp	r3, #32
 80021f8:	f040 80ba 	bne.w	8002370 <HAL_UART_Receive+0x18e>
  {
    if ((pData == NULL) || (Size == 0U))
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d002      	beq.n	8002208 <HAL_UART_Receive+0x26>
 8002202:	88fb      	ldrh	r3, [r7, #6]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d101      	bne.n	800220c <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e0b2      	b.n	8002372 <HAL_UART_Receive+0x190>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002212:	2b01      	cmp	r3, #1
 8002214:	d101      	bne.n	800221a <HAL_UART_Receive+0x38>
 8002216:	2302      	movs	r3, #2
 8002218:	e0ab      	b.n	8002372 <HAL_UART_Receive+0x190>
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	2201      	movs	r2, #1
 800221e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2200      	movs	r2, #0
 8002226:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2222      	movs	r2, #34	; 0x22
 800222c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800222e:	f7fe fa0d 	bl	800064c <HAL_GetTick>
 8002232:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	88fa      	ldrh	r2, [r7, #6]
 8002238:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	88fa      	ldrh	r2, [r7, #6]
 8002240:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800224c:	d10e      	bne.n	800226c <HAL_UART_Receive+0x8a>
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	691b      	ldr	r3, [r3, #16]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d105      	bne.n	8002262 <HAL_UART_Receive+0x80>
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	f240 12ff 	movw	r2, #511	; 0x1ff
 800225c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002260:	e02d      	b.n	80022be <HAL_UART_Receive+0xdc>
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	22ff      	movs	r2, #255	; 0xff
 8002266:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800226a:	e028      	b.n	80022be <HAL_UART_Receive+0xdc>
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d10d      	bne.n	8002290 <HAL_UART_Receive+0xae>
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	691b      	ldr	r3, [r3, #16]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d104      	bne.n	8002286 <HAL_UART_Receive+0xa4>
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	22ff      	movs	r2, #255	; 0xff
 8002280:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002284:	e01b      	b.n	80022be <HAL_UART_Receive+0xdc>
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	227f      	movs	r2, #127	; 0x7f
 800228a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800228e:	e016      	b.n	80022be <HAL_UART_Receive+0xdc>
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002298:	d10d      	bne.n	80022b6 <HAL_UART_Receive+0xd4>
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	691b      	ldr	r3, [r3, #16]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d104      	bne.n	80022ac <HAL_UART_Receive+0xca>
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	227f      	movs	r2, #127	; 0x7f
 80022a6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80022aa:	e008      	b.n	80022be <HAL_UART_Receive+0xdc>
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	223f      	movs	r2, #63	; 0x3f
 80022b0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80022b4:	e003      	b.n	80022be <HAL_UART_Receive+0xdc>
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2200      	movs	r2, #0
 80022ba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80022c4:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022ce:	d108      	bne.n	80022e2 <HAL_UART_Receive+0x100>
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	691b      	ldr	r3, [r3, #16]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d104      	bne.n	80022e2 <HAL_UART_Receive+0x100>
    {
      pdata8bits  = NULL;
 80022d8:	2300      	movs	r3, #0
 80022da:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	61bb      	str	r3, [r7, #24]
 80022e0:	e003      	b.n	80022ea <HAL_UART_Receive+0x108>
    }
    else
    {
      pdata8bits  = pData;
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80022e6:	2300      	movs	r3, #0
 80022e8:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80022ea:	e032      	b.n	8002352 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	9300      	str	r3, [sp, #0]
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	2200      	movs	r2, #0
 80022f4:	2120      	movs	r1, #32
 80022f6:	68f8      	ldr	r0, [r7, #12]
 80022f8:	f000 fce5 	bl	8002cc6 <UART_WaitOnFlagUntilTimeout>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d001      	beq.n	8002306 <HAL_UART_Receive+0x124>
      {
        return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	e035      	b.n	8002372 <HAL_UART_Receive+0x190>
      }
      if (pdata8bits == NULL)
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d10c      	bne.n	8002326 <HAL_UART_Receive+0x144>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002312:	b29a      	uxth	r2, r3
 8002314:	8a7b      	ldrh	r3, [r7, #18]
 8002316:	4013      	ands	r3, r2
 8002318:	b29a      	uxth	r2, r3
 800231a:	69bb      	ldr	r3, [r7, #24]
 800231c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800231e:	69bb      	ldr	r3, [r7, #24]
 8002320:	3302      	adds	r3, #2
 8002322:	61bb      	str	r3, [r7, #24]
 8002324:	e00c      	b.n	8002340 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800232c:	b2da      	uxtb	r2, r3
 800232e:	8a7b      	ldrh	r3, [r7, #18]
 8002330:	b2db      	uxtb	r3, r3
 8002332:	4013      	ands	r3, r2
 8002334:	b2da      	uxtb	r2, r3
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	3301      	adds	r3, #1
 800233e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002346:	b29b      	uxth	r3, r3
 8002348:	3b01      	subs	r3, #1
 800234a:	b29a      	uxth	r2, r3
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002358:	b29b      	uxth	r3, r3
 800235a:	2b00      	cmp	r3, #0
 800235c:	d1c6      	bne.n	80022ec <HAL_UART_Receive+0x10a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2220      	movs	r2, #32
 8002362:	679a      	str	r2, [r3, #120]	; 0x78

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2200      	movs	r2, #0
 8002368:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 800236c:	2300      	movs	r3, #0
 800236e:	e000      	b.n	8002372 <HAL_UART_Receive+0x190>
  }
  else
  {
    return HAL_BUSY;
 8002370:	2302      	movs	r3, #2
  }
}
 8002372:	4618      	mov	r0, r3
 8002374:	3720      	adds	r7, #32
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
	...

0800237c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b088      	sub	sp, #32
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	69db      	ldr	r3, [r3, #28]
 800238a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	f003 030f 	and.w	r3, r3, #15
 80023a2:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d113      	bne.n	80023d2 <HAL_UART_IRQHandler+0x56>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	f003 0320 	and.w	r3, r3, #32
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d00e      	beq.n	80023d2 <HAL_UART_IRQHandler+0x56>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80023b4:	69bb      	ldr	r3, [r7, #24]
 80023b6:	f003 0320 	and.w	r3, r3, #32
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d009      	beq.n	80023d2 <HAL_UART_IRQHandler+0x56>
    {
      if (huart->RxISR != NULL)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	f000 80ea 	beq.w	800259c <HAL_UART_IRQHandler+0x220>
      {
        huart->RxISR(huart);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	4798      	blx	r3
      }
      return;
 80023d0:	e0e4      	b.n	800259c <HAL_UART_IRQHandler+0x220>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	f000 80c0 	beq.w	800255a <HAL_UART_IRQHandler+0x1de>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	f003 0301 	and.w	r3, r3, #1
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d105      	bne.n	80023f0 <HAL_UART_IRQHandler+0x74>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 80023e4:	69bb      	ldr	r3, [r7, #24]
 80023e6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	f000 80b5 	beq.w	800255a <HAL_UART_IRQHandler+0x1de>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	f003 0301 	and.w	r3, r3, #1
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d00e      	beq.n	8002418 <HAL_UART_IRQHandler+0x9c>
 80023fa:	69bb      	ldr	r3, [r7, #24]
 80023fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002400:	2b00      	cmp	r3, #0
 8002402:	d009      	beq.n	8002418 <HAL_UART_IRQHandler+0x9c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	2201      	movs	r2, #1
 800240a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002410:	f043 0201 	orr.w	r2, r3, #1
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	f003 0302 	and.w	r3, r3, #2
 800241e:	2b00      	cmp	r3, #0
 8002420:	d00e      	beq.n	8002440 <HAL_UART_IRQHandler+0xc4>
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	f003 0301 	and.w	r3, r3, #1
 8002428:	2b00      	cmp	r3, #0
 800242a:	d009      	beq.n	8002440 <HAL_UART_IRQHandler+0xc4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	2202      	movs	r2, #2
 8002432:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002438:	f043 0204 	orr.w	r2, r3, #4
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	f003 0304 	and.w	r3, r3, #4
 8002446:	2b00      	cmp	r3, #0
 8002448:	d00e      	beq.n	8002468 <HAL_UART_IRQHandler+0xec>
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	f003 0301 	and.w	r3, r3, #1
 8002450:	2b00      	cmp	r3, #0
 8002452:	d009      	beq.n	8002468 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	2204      	movs	r2, #4
 800245a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002460:	f043 0202 	orr.w	r2, r3, #2
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	f003 0308 	and.w	r3, r3, #8
 800246e:	2b00      	cmp	r3, #0
 8002470:	d013      	beq.n	800249a <HAL_UART_IRQHandler+0x11e>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002472:	69bb      	ldr	r3, [r7, #24]
 8002474:	f003 0320 	and.w	r3, r3, #32
 8002478:	2b00      	cmp	r3, #0
 800247a:	d104      	bne.n	8002486 <HAL_UART_IRQHandler+0x10a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002482:	2b00      	cmp	r3, #0
 8002484:	d009      	beq.n	800249a <HAL_UART_IRQHandler+0x11e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	2208      	movs	r2, #8
 800248c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002492:	f043 0208 	orr.w	r2, r3, #8
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d07e      	beq.n	80025a0 <HAL_UART_IRQHandler+0x224>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	f003 0320 	and.w	r3, r3, #32
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d00c      	beq.n	80024c6 <HAL_UART_IRQHandler+0x14a>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80024ac:	69bb      	ldr	r3, [r7, #24]
 80024ae:	f003 0320 	and.w	r3, r3, #32
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d007      	beq.n	80024c6 <HAL_UART_IRQHandler+0x14a>
      {
        if (huart->RxISR != NULL)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d003      	beq.n	80024c6 <HAL_UART_IRQHandler+0x14a>
        {
          huart->RxISR(huart);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80024ca:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024d6:	2b40      	cmp	r3, #64	; 0x40
 80024d8:	d004      	beq.n	80024e4 <HAL_UART_IRQHandler+0x168>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	f003 0308 	and.w	r3, r3, #8
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d031      	beq.n	8002548 <HAL_UART_IRQHandler+0x1cc>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80024e4:	6878      	ldr	r0, [r7, #4]
 80024e6:	f000 fc36 	bl	8002d56 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024f4:	2b40      	cmp	r3, #64	; 0x40
 80024f6:	d123      	bne.n	8002540 <HAL_UART_IRQHandler+0x1c4>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	689a      	ldr	r2, [r3, #8]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002506:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800250c:	2b00      	cmp	r3, #0
 800250e:	d013      	beq.n	8002538 <HAL_UART_IRQHandler+0x1bc>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002514:	4a25      	ldr	r2, [pc, #148]	; (80025ac <HAL_UART_IRQHandler+0x230>)
 8002516:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800251c:	4618      	mov	r0, r3
 800251e:	f7fe f9d6 	bl	80008ce <HAL_DMA_Abort_IT>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d016      	beq.n	8002556 <HAL_UART_IRQHandler+0x1da>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800252c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8002532:	4610      	mov	r0, r2
 8002534:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002536:	e00e      	b.n	8002556 <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	f000 f843 	bl	80025c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800253e:	e00a      	b.n	8002556 <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f000 f83f 	bl	80025c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002546:	e006      	b.n	8002556 <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f000 f83b 	bl	80025c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2200      	movs	r2, #0
 8002552:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8002554:	e024      	b.n	80025a0 <HAL_UART_IRQHandler+0x224>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002556:	bf00      	nop
    return;
 8002558:	e022      	b.n	80025a0 <HAL_UART_IRQHandler+0x224>

  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002560:	2b00      	cmp	r3, #0
 8002562:	d00d      	beq.n	8002580 <HAL_UART_IRQHandler+0x204>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002564:	69bb      	ldr	r3, [r7, #24]
 8002566:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800256a:	2b00      	cmp	r3, #0
 800256c:	d008      	beq.n	8002580 <HAL_UART_IRQHandler+0x204>
  {
    if (huart->TxISR != NULL)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002572:	2b00      	cmp	r3, #0
 8002574:	d016      	beq.n	80025a4 <HAL_UART_IRQHandler+0x228>
    {
      huart->TxISR(huart);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	4798      	blx	r3
    }
    return;
 800257e:	e011      	b.n	80025a4 <HAL_UART_IRQHandler+0x228>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002586:	2b00      	cmp	r3, #0
 8002588:	d00d      	beq.n	80025a6 <HAL_UART_IRQHandler+0x22a>
 800258a:	69bb      	ldr	r3, [r7, #24]
 800258c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002590:	2b00      	cmp	r3, #0
 8002592:	d008      	beq.n	80025a6 <HAL_UART_IRQHandler+0x22a>
  {
    UART_EndTransmit_IT(huart);
 8002594:	6878      	ldr	r0, [r7, #4]
 8002596:	f000 fc14 	bl	8002dc2 <UART_EndTransmit_IT>
    return;
 800259a:	e004      	b.n	80025a6 <HAL_UART_IRQHandler+0x22a>
      return;
 800259c:	bf00      	nop
 800259e:	e002      	b.n	80025a6 <HAL_UART_IRQHandler+0x22a>
    return;
 80025a0:	bf00      	nop
 80025a2:	e000      	b.n	80025a6 <HAL_UART_IRQHandler+0x22a>
    return;
 80025a4:	bf00      	nop
  }

}
 80025a6:	3720      	adds	r7, #32
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	08002d97 	.word	0x08002d97

080025b0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80025b8:	bf00      	nop
 80025ba:	370c      	adds	r7, #12
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr

080025c4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80025cc:	bf00      	nop
 80025ce:	370c      	adds	r7, #12
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr

080025d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b088      	sub	sp, #32
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80025e0:	2300      	movs	r3, #0
 80025e2:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80025e4:	2300      	movs	r3, #0
 80025e6:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	689a      	ldr	r2, [r3, #8]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	691b      	ldr	r3, [r3, #16]
 80025f0:	431a      	orrs	r2, r3
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	695b      	ldr	r3, [r3, #20]
 80025f6:	431a      	orrs	r2, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	69db      	ldr	r3, [r3, #28]
 80025fc:	4313      	orrs	r3, r2
 80025fe:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	4ba7      	ldr	r3, [pc, #668]	; (80028a4 <UART_SetConfig+0x2cc>)
 8002608:	4013      	ands	r3, r2
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	6812      	ldr	r2, [r2, #0]
 800260e:	6939      	ldr	r1, [r7, #16]
 8002610:	430b      	orrs	r3, r1
 8002612:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	68da      	ldr	r2, [r3, #12]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	430a      	orrs	r2, r1
 8002628:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	699b      	ldr	r3, [r3, #24]
 800262e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6a1b      	ldr	r3, [r3, #32]
 8002634:	693a      	ldr	r2, [r7, #16]
 8002636:	4313      	orrs	r3, r2
 8002638:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	693a      	ldr	r2, [r7, #16]
 800264a:	430a      	orrs	r2, r1
 800264c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a95      	ldr	r2, [pc, #596]	; (80028a8 <UART_SetConfig+0x2d0>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d120      	bne.n	800269a <UART_SetConfig+0xc2>
 8002658:	4b94      	ldr	r3, [pc, #592]	; (80028ac <UART_SetConfig+0x2d4>)
 800265a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800265e:	f003 0303 	and.w	r3, r3, #3
 8002662:	2b03      	cmp	r3, #3
 8002664:	d816      	bhi.n	8002694 <UART_SetConfig+0xbc>
 8002666:	a201      	add	r2, pc, #4	; (adr r2, 800266c <UART_SetConfig+0x94>)
 8002668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800266c:	0800267d 	.word	0x0800267d
 8002670:	08002689 	.word	0x08002689
 8002674:	08002683 	.word	0x08002683
 8002678:	0800268f 	.word	0x0800268f
 800267c:	2301      	movs	r3, #1
 800267e:	77fb      	strb	r3, [r7, #31]
 8002680:	e14f      	b.n	8002922 <UART_SetConfig+0x34a>
 8002682:	2302      	movs	r3, #2
 8002684:	77fb      	strb	r3, [r7, #31]
 8002686:	e14c      	b.n	8002922 <UART_SetConfig+0x34a>
 8002688:	2304      	movs	r3, #4
 800268a:	77fb      	strb	r3, [r7, #31]
 800268c:	e149      	b.n	8002922 <UART_SetConfig+0x34a>
 800268e:	2308      	movs	r3, #8
 8002690:	77fb      	strb	r3, [r7, #31]
 8002692:	e146      	b.n	8002922 <UART_SetConfig+0x34a>
 8002694:	2310      	movs	r3, #16
 8002696:	77fb      	strb	r3, [r7, #31]
 8002698:	e143      	b.n	8002922 <UART_SetConfig+0x34a>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a84      	ldr	r2, [pc, #528]	; (80028b0 <UART_SetConfig+0x2d8>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d132      	bne.n	800270a <UART_SetConfig+0x132>
 80026a4:	4b81      	ldr	r3, [pc, #516]	; (80028ac <UART_SetConfig+0x2d4>)
 80026a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026aa:	f003 030c 	and.w	r3, r3, #12
 80026ae:	2b0c      	cmp	r3, #12
 80026b0:	d828      	bhi.n	8002704 <UART_SetConfig+0x12c>
 80026b2:	a201      	add	r2, pc, #4	; (adr r2, 80026b8 <UART_SetConfig+0xe0>)
 80026b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026b8:	080026ed 	.word	0x080026ed
 80026bc:	08002705 	.word	0x08002705
 80026c0:	08002705 	.word	0x08002705
 80026c4:	08002705 	.word	0x08002705
 80026c8:	080026f9 	.word	0x080026f9
 80026cc:	08002705 	.word	0x08002705
 80026d0:	08002705 	.word	0x08002705
 80026d4:	08002705 	.word	0x08002705
 80026d8:	080026f3 	.word	0x080026f3
 80026dc:	08002705 	.word	0x08002705
 80026e0:	08002705 	.word	0x08002705
 80026e4:	08002705 	.word	0x08002705
 80026e8:	080026ff 	.word	0x080026ff
 80026ec:	2300      	movs	r3, #0
 80026ee:	77fb      	strb	r3, [r7, #31]
 80026f0:	e117      	b.n	8002922 <UART_SetConfig+0x34a>
 80026f2:	2302      	movs	r3, #2
 80026f4:	77fb      	strb	r3, [r7, #31]
 80026f6:	e114      	b.n	8002922 <UART_SetConfig+0x34a>
 80026f8:	2304      	movs	r3, #4
 80026fa:	77fb      	strb	r3, [r7, #31]
 80026fc:	e111      	b.n	8002922 <UART_SetConfig+0x34a>
 80026fe:	2308      	movs	r3, #8
 8002700:	77fb      	strb	r3, [r7, #31]
 8002702:	e10e      	b.n	8002922 <UART_SetConfig+0x34a>
 8002704:	2310      	movs	r3, #16
 8002706:	77fb      	strb	r3, [r7, #31]
 8002708:	e10b      	b.n	8002922 <UART_SetConfig+0x34a>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a69      	ldr	r2, [pc, #420]	; (80028b4 <UART_SetConfig+0x2dc>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d120      	bne.n	8002756 <UART_SetConfig+0x17e>
 8002714:	4b65      	ldr	r3, [pc, #404]	; (80028ac <UART_SetConfig+0x2d4>)
 8002716:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800271a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800271e:	2b30      	cmp	r3, #48	; 0x30
 8002720:	d013      	beq.n	800274a <UART_SetConfig+0x172>
 8002722:	2b30      	cmp	r3, #48	; 0x30
 8002724:	d814      	bhi.n	8002750 <UART_SetConfig+0x178>
 8002726:	2b20      	cmp	r3, #32
 8002728:	d009      	beq.n	800273e <UART_SetConfig+0x166>
 800272a:	2b20      	cmp	r3, #32
 800272c:	d810      	bhi.n	8002750 <UART_SetConfig+0x178>
 800272e:	2b00      	cmp	r3, #0
 8002730:	d002      	beq.n	8002738 <UART_SetConfig+0x160>
 8002732:	2b10      	cmp	r3, #16
 8002734:	d006      	beq.n	8002744 <UART_SetConfig+0x16c>
 8002736:	e00b      	b.n	8002750 <UART_SetConfig+0x178>
 8002738:	2300      	movs	r3, #0
 800273a:	77fb      	strb	r3, [r7, #31]
 800273c:	e0f1      	b.n	8002922 <UART_SetConfig+0x34a>
 800273e:	2302      	movs	r3, #2
 8002740:	77fb      	strb	r3, [r7, #31]
 8002742:	e0ee      	b.n	8002922 <UART_SetConfig+0x34a>
 8002744:	2304      	movs	r3, #4
 8002746:	77fb      	strb	r3, [r7, #31]
 8002748:	e0eb      	b.n	8002922 <UART_SetConfig+0x34a>
 800274a:	2308      	movs	r3, #8
 800274c:	77fb      	strb	r3, [r7, #31]
 800274e:	e0e8      	b.n	8002922 <UART_SetConfig+0x34a>
 8002750:	2310      	movs	r3, #16
 8002752:	77fb      	strb	r3, [r7, #31]
 8002754:	e0e5      	b.n	8002922 <UART_SetConfig+0x34a>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a57      	ldr	r2, [pc, #348]	; (80028b8 <UART_SetConfig+0x2e0>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d120      	bne.n	80027a2 <UART_SetConfig+0x1ca>
 8002760:	4b52      	ldr	r3, [pc, #328]	; (80028ac <UART_SetConfig+0x2d4>)
 8002762:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002766:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800276a:	2bc0      	cmp	r3, #192	; 0xc0
 800276c:	d013      	beq.n	8002796 <UART_SetConfig+0x1be>
 800276e:	2bc0      	cmp	r3, #192	; 0xc0
 8002770:	d814      	bhi.n	800279c <UART_SetConfig+0x1c4>
 8002772:	2b80      	cmp	r3, #128	; 0x80
 8002774:	d009      	beq.n	800278a <UART_SetConfig+0x1b2>
 8002776:	2b80      	cmp	r3, #128	; 0x80
 8002778:	d810      	bhi.n	800279c <UART_SetConfig+0x1c4>
 800277a:	2b00      	cmp	r3, #0
 800277c:	d002      	beq.n	8002784 <UART_SetConfig+0x1ac>
 800277e:	2b40      	cmp	r3, #64	; 0x40
 8002780:	d006      	beq.n	8002790 <UART_SetConfig+0x1b8>
 8002782:	e00b      	b.n	800279c <UART_SetConfig+0x1c4>
 8002784:	2300      	movs	r3, #0
 8002786:	77fb      	strb	r3, [r7, #31]
 8002788:	e0cb      	b.n	8002922 <UART_SetConfig+0x34a>
 800278a:	2302      	movs	r3, #2
 800278c:	77fb      	strb	r3, [r7, #31]
 800278e:	e0c8      	b.n	8002922 <UART_SetConfig+0x34a>
 8002790:	2304      	movs	r3, #4
 8002792:	77fb      	strb	r3, [r7, #31]
 8002794:	e0c5      	b.n	8002922 <UART_SetConfig+0x34a>
 8002796:	2308      	movs	r3, #8
 8002798:	77fb      	strb	r3, [r7, #31]
 800279a:	e0c2      	b.n	8002922 <UART_SetConfig+0x34a>
 800279c:	2310      	movs	r3, #16
 800279e:	77fb      	strb	r3, [r7, #31]
 80027a0:	e0bf      	b.n	8002922 <UART_SetConfig+0x34a>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a45      	ldr	r2, [pc, #276]	; (80028bc <UART_SetConfig+0x2e4>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d125      	bne.n	80027f8 <UART_SetConfig+0x220>
 80027ac:	4b3f      	ldr	r3, [pc, #252]	; (80028ac <UART_SetConfig+0x2d4>)
 80027ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80027ba:	d017      	beq.n	80027ec <UART_SetConfig+0x214>
 80027bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80027c0:	d817      	bhi.n	80027f2 <UART_SetConfig+0x21a>
 80027c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027c6:	d00b      	beq.n	80027e0 <UART_SetConfig+0x208>
 80027c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027cc:	d811      	bhi.n	80027f2 <UART_SetConfig+0x21a>
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d003      	beq.n	80027da <UART_SetConfig+0x202>
 80027d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027d6:	d006      	beq.n	80027e6 <UART_SetConfig+0x20e>
 80027d8:	e00b      	b.n	80027f2 <UART_SetConfig+0x21a>
 80027da:	2300      	movs	r3, #0
 80027dc:	77fb      	strb	r3, [r7, #31]
 80027de:	e0a0      	b.n	8002922 <UART_SetConfig+0x34a>
 80027e0:	2302      	movs	r3, #2
 80027e2:	77fb      	strb	r3, [r7, #31]
 80027e4:	e09d      	b.n	8002922 <UART_SetConfig+0x34a>
 80027e6:	2304      	movs	r3, #4
 80027e8:	77fb      	strb	r3, [r7, #31]
 80027ea:	e09a      	b.n	8002922 <UART_SetConfig+0x34a>
 80027ec:	2308      	movs	r3, #8
 80027ee:	77fb      	strb	r3, [r7, #31]
 80027f0:	e097      	b.n	8002922 <UART_SetConfig+0x34a>
 80027f2:	2310      	movs	r3, #16
 80027f4:	77fb      	strb	r3, [r7, #31]
 80027f6:	e094      	b.n	8002922 <UART_SetConfig+0x34a>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a30      	ldr	r2, [pc, #192]	; (80028c0 <UART_SetConfig+0x2e8>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d125      	bne.n	800284e <UART_SetConfig+0x276>
 8002802:	4b2a      	ldr	r3, [pc, #168]	; (80028ac <UART_SetConfig+0x2d4>)
 8002804:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002808:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800280c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002810:	d017      	beq.n	8002842 <UART_SetConfig+0x26a>
 8002812:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002816:	d817      	bhi.n	8002848 <UART_SetConfig+0x270>
 8002818:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800281c:	d00b      	beq.n	8002836 <UART_SetConfig+0x25e>
 800281e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002822:	d811      	bhi.n	8002848 <UART_SetConfig+0x270>
 8002824:	2b00      	cmp	r3, #0
 8002826:	d003      	beq.n	8002830 <UART_SetConfig+0x258>
 8002828:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800282c:	d006      	beq.n	800283c <UART_SetConfig+0x264>
 800282e:	e00b      	b.n	8002848 <UART_SetConfig+0x270>
 8002830:	2301      	movs	r3, #1
 8002832:	77fb      	strb	r3, [r7, #31]
 8002834:	e075      	b.n	8002922 <UART_SetConfig+0x34a>
 8002836:	2302      	movs	r3, #2
 8002838:	77fb      	strb	r3, [r7, #31]
 800283a:	e072      	b.n	8002922 <UART_SetConfig+0x34a>
 800283c:	2304      	movs	r3, #4
 800283e:	77fb      	strb	r3, [r7, #31]
 8002840:	e06f      	b.n	8002922 <UART_SetConfig+0x34a>
 8002842:	2308      	movs	r3, #8
 8002844:	77fb      	strb	r3, [r7, #31]
 8002846:	e06c      	b.n	8002922 <UART_SetConfig+0x34a>
 8002848:	2310      	movs	r3, #16
 800284a:	77fb      	strb	r3, [r7, #31]
 800284c:	e069      	b.n	8002922 <UART_SetConfig+0x34a>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a1c      	ldr	r2, [pc, #112]	; (80028c4 <UART_SetConfig+0x2ec>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d137      	bne.n	80028c8 <UART_SetConfig+0x2f0>
 8002858:	4b14      	ldr	r3, [pc, #80]	; (80028ac <UART_SetConfig+0x2d4>)
 800285a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800285e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002862:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002866:	d017      	beq.n	8002898 <UART_SetConfig+0x2c0>
 8002868:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800286c:	d817      	bhi.n	800289e <UART_SetConfig+0x2c6>
 800286e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002872:	d00b      	beq.n	800288c <UART_SetConfig+0x2b4>
 8002874:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002878:	d811      	bhi.n	800289e <UART_SetConfig+0x2c6>
 800287a:	2b00      	cmp	r3, #0
 800287c:	d003      	beq.n	8002886 <UART_SetConfig+0x2ae>
 800287e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002882:	d006      	beq.n	8002892 <UART_SetConfig+0x2ba>
 8002884:	e00b      	b.n	800289e <UART_SetConfig+0x2c6>
 8002886:	2300      	movs	r3, #0
 8002888:	77fb      	strb	r3, [r7, #31]
 800288a:	e04a      	b.n	8002922 <UART_SetConfig+0x34a>
 800288c:	2302      	movs	r3, #2
 800288e:	77fb      	strb	r3, [r7, #31]
 8002890:	e047      	b.n	8002922 <UART_SetConfig+0x34a>
 8002892:	2304      	movs	r3, #4
 8002894:	77fb      	strb	r3, [r7, #31]
 8002896:	e044      	b.n	8002922 <UART_SetConfig+0x34a>
 8002898:	2308      	movs	r3, #8
 800289a:	77fb      	strb	r3, [r7, #31]
 800289c:	e041      	b.n	8002922 <UART_SetConfig+0x34a>
 800289e:	2310      	movs	r3, #16
 80028a0:	77fb      	strb	r3, [r7, #31]
 80028a2:	e03e      	b.n	8002922 <UART_SetConfig+0x34a>
 80028a4:	efff69f3 	.word	0xefff69f3
 80028a8:	40011000 	.word	0x40011000
 80028ac:	40023800 	.word	0x40023800
 80028b0:	40004400 	.word	0x40004400
 80028b4:	40004800 	.word	0x40004800
 80028b8:	40004c00 	.word	0x40004c00
 80028bc:	40005000 	.word	0x40005000
 80028c0:	40011400 	.word	0x40011400
 80028c4:	40007800 	.word	0x40007800
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a91      	ldr	r2, [pc, #580]	; (8002b14 <UART_SetConfig+0x53c>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d125      	bne.n	800291e <UART_SetConfig+0x346>
 80028d2:	4b91      	ldr	r3, [pc, #580]	; (8002b18 <UART_SetConfig+0x540>)
 80028d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80028dc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80028e0:	d017      	beq.n	8002912 <UART_SetConfig+0x33a>
 80028e2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80028e6:	d817      	bhi.n	8002918 <UART_SetConfig+0x340>
 80028e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028ec:	d00b      	beq.n	8002906 <UART_SetConfig+0x32e>
 80028ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028f2:	d811      	bhi.n	8002918 <UART_SetConfig+0x340>
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d003      	beq.n	8002900 <UART_SetConfig+0x328>
 80028f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80028fc:	d006      	beq.n	800290c <UART_SetConfig+0x334>
 80028fe:	e00b      	b.n	8002918 <UART_SetConfig+0x340>
 8002900:	2300      	movs	r3, #0
 8002902:	77fb      	strb	r3, [r7, #31]
 8002904:	e00d      	b.n	8002922 <UART_SetConfig+0x34a>
 8002906:	2302      	movs	r3, #2
 8002908:	77fb      	strb	r3, [r7, #31]
 800290a:	e00a      	b.n	8002922 <UART_SetConfig+0x34a>
 800290c:	2304      	movs	r3, #4
 800290e:	77fb      	strb	r3, [r7, #31]
 8002910:	e007      	b.n	8002922 <UART_SetConfig+0x34a>
 8002912:	2308      	movs	r3, #8
 8002914:	77fb      	strb	r3, [r7, #31]
 8002916:	e004      	b.n	8002922 <UART_SetConfig+0x34a>
 8002918:	2310      	movs	r3, #16
 800291a:	77fb      	strb	r3, [r7, #31]
 800291c:	e001      	b.n	8002922 <UART_SetConfig+0x34a>
 800291e:	2310      	movs	r3, #16
 8002920:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	69db      	ldr	r3, [r3, #28]
 8002926:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800292a:	d17c      	bne.n	8002a26 <UART_SetConfig+0x44e>
  {
    switch (clocksource)
 800292c:	7ffb      	ldrb	r3, [r7, #31]
 800292e:	2b08      	cmp	r3, #8
 8002930:	d859      	bhi.n	80029e6 <UART_SetConfig+0x40e>
 8002932:	a201      	add	r2, pc, #4	; (adr r2, 8002938 <UART_SetConfig+0x360>)
 8002934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002938:	0800295d 	.word	0x0800295d
 800293c:	0800297b 	.word	0x0800297b
 8002940:	08002999 	.word	0x08002999
 8002944:	080029e7 	.word	0x080029e7
 8002948:	080029b1 	.word	0x080029b1
 800294c:	080029e7 	.word	0x080029e7
 8002950:	080029e7 	.word	0x080029e7
 8002954:	080029e7 	.word	0x080029e7
 8002958:	080029cf 	.word	0x080029cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800295c:	f7fe ff4c 	bl	80017f8 <HAL_RCC_GetPCLK1Freq>
 8002960:	4603      	mov	r3, r0
 8002962:	005a      	lsls	r2, r3, #1
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	085b      	lsrs	r3, r3, #1
 800296a:	441a      	add	r2, r3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	fbb2 f3f3 	udiv	r3, r2, r3
 8002974:	b29b      	uxth	r3, r3
 8002976:	61bb      	str	r3, [r7, #24]
        break;
 8002978:	e038      	b.n	80029ec <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800297a:	f7fe ff51 	bl	8001820 <HAL_RCC_GetPCLK2Freq>
 800297e:	4603      	mov	r3, r0
 8002980:	005a      	lsls	r2, r3, #1
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	085b      	lsrs	r3, r3, #1
 8002988:	441a      	add	r2, r3
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002992:	b29b      	uxth	r3, r3
 8002994:	61bb      	str	r3, [r7, #24]
        break;
 8002996:	e029      	b.n	80029ec <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	085a      	lsrs	r2, r3, #1
 800299e:	4b5f      	ldr	r3, [pc, #380]	; (8002b1c <UART_SetConfig+0x544>)
 80029a0:	4413      	add	r3, r2
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	6852      	ldr	r2, [r2, #4]
 80029a6:	fbb3 f3f2 	udiv	r3, r3, r2
 80029aa:	b29b      	uxth	r3, r3
 80029ac:	61bb      	str	r3, [r7, #24]
        break;
 80029ae:	e01d      	b.n	80029ec <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80029b0:	f7fe fe34 	bl	800161c <HAL_RCC_GetSysClockFreq>
 80029b4:	4603      	mov	r3, r0
 80029b6:	005a      	lsls	r2, r3, #1
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	085b      	lsrs	r3, r3, #1
 80029be:	441a      	add	r2, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80029c8:	b29b      	uxth	r3, r3
 80029ca:	61bb      	str	r3, [r7, #24]
        break;
 80029cc:	e00e      	b.n	80029ec <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	085b      	lsrs	r3, r3, #1
 80029d4:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	61bb      	str	r3, [r7, #24]
        break;
 80029e4:	e002      	b.n	80029ec <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	75fb      	strb	r3, [r7, #23]
        break;
 80029ea:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80029ec:	69bb      	ldr	r3, [r7, #24]
 80029ee:	2b0f      	cmp	r3, #15
 80029f0:	d916      	bls.n	8002a20 <UART_SetConfig+0x448>
 80029f2:	69bb      	ldr	r3, [r7, #24]
 80029f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029f8:	d212      	bcs.n	8002a20 <UART_SetConfig+0x448>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80029fa:	69bb      	ldr	r3, [r7, #24]
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	f023 030f 	bic.w	r3, r3, #15
 8002a02:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002a04:	69bb      	ldr	r3, [r7, #24]
 8002a06:	085b      	lsrs	r3, r3, #1
 8002a08:	b29b      	uxth	r3, r3
 8002a0a:	f003 0307 	and.w	r3, r3, #7
 8002a0e:	b29a      	uxth	r2, r3
 8002a10:	89fb      	ldrh	r3, [r7, #14]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	89fa      	ldrh	r2, [r7, #14]
 8002a1c:	60da      	str	r2, [r3, #12]
 8002a1e:	e06e      	b.n	8002afe <UART_SetConfig+0x526>
    }
    else
    {
      ret = HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	75fb      	strb	r3, [r7, #23]
 8002a24:	e06b      	b.n	8002afe <UART_SetConfig+0x526>
    }
  }
  else
  {
    switch (clocksource)
 8002a26:	7ffb      	ldrb	r3, [r7, #31]
 8002a28:	2b08      	cmp	r3, #8
 8002a2a:	d857      	bhi.n	8002adc <UART_SetConfig+0x504>
 8002a2c:	a201      	add	r2, pc, #4	; (adr r2, 8002a34 <UART_SetConfig+0x45c>)
 8002a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a32:	bf00      	nop
 8002a34:	08002a59 	.word	0x08002a59
 8002a38:	08002a75 	.word	0x08002a75
 8002a3c:	08002a91 	.word	0x08002a91
 8002a40:	08002add 	.word	0x08002add
 8002a44:	08002aa9 	.word	0x08002aa9
 8002a48:	08002add 	.word	0x08002add
 8002a4c:	08002add 	.word	0x08002add
 8002a50:	08002add 	.word	0x08002add
 8002a54:	08002ac5 	.word	0x08002ac5
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002a58:	f7fe fece 	bl	80017f8 <HAL_RCC_GetPCLK1Freq>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	085b      	lsrs	r3, r3, #1
 8002a64:	441a      	add	r2, r3
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a6e:	b29b      	uxth	r3, r3
 8002a70:	61bb      	str	r3, [r7, #24]
        break;
 8002a72:	e036      	b.n	8002ae2 <UART_SetConfig+0x50a>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002a74:	f7fe fed4 	bl	8001820 <HAL_RCC_GetPCLK2Freq>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	085b      	lsrs	r3, r3, #1
 8002a80:	441a      	add	r2, r3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a8a:	b29b      	uxth	r3, r3
 8002a8c:	61bb      	str	r3, [r7, #24]
        break;
 8002a8e:	e028      	b.n	8002ae2 <UART_SetConfig+0x50a>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	085a      	lsrs	r2, r3, #1
 8002a96:	4b22      	ldr	r3, [pc, #136]	; (8002b20 <UART_SetConfig+0x548>)
 8002a98:	4413      	add	r3, r2
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	6852      	ldr	r2, [r2, #4]
 8002a9e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	61bb      	str	r3, [r7, #24]
        break;
 8002aa6:	e01c      	b.n	8002ae2 <UART_SetConfig+0x50a>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002aa8:	f7fe fdb8 	bl	800161c <HAL_RCC_GetSysClockFreq>
 8002aac:	4602      	mov	r2, r0
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	085b      	lsrs	r3, r3, #1
 8002ab4:	441a      	add	r2, r3
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	fbb2 f3f3 	udiv	r3, r2, r3
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	61bb      	str	r3, [r7, #24]
        break;
 8002ac2:	e00e      	b.n	8002ae2 <UART_SetConfig+0x50a>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	085b      	lsrs	r3, r3, #1
 8002aca:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ad6:	b29b      	uxth	r3, r3
 8002ad8:	61bb      	str	r3, [r7, #24]
        break;
 8002ada:	e002      	b.n	8002ae2 <UART_SetConfig+0x50a>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	75fb      	strb	r3, [r7, #23]
        break;
 8002ae0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ae2:	69bb      	ldr	r3, [r7, #24]
 8002ae4:	2b0f      	cmp	r3, #15
 8002ae6:	d908      	bls.n	8002afa <UART_SetConfig+0x522>
 8002ae8:	69bb      	ldr	r3, [r7, #24]
 8002aea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002aee:	d204      	bcs.n	8002afa <UART_SetConfig+0x522>
    {
      huart->Instance->BRR = usartdiv;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	69ba      	ldr	r2, [r7, #24]
 8002af6:	60da      	str	r2, [r3, #12]
 8002af8:	e001      	b.n	8002afe <UART_SetConfig+0x526>
    }
    else
    {
      ret = HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2200      	movs	r2, #0
 8002b02:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2200      	movs	r2, #0
 8002b08:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8002b0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3720      	adds	r7, #32
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	40007c00 	.word	0x40007c00
 8002b18:	40023800 	.word	0x40023800
 8002b1c:	01e84800 	.word	0x01e84800
 8002b20:	00f42400 	.word	0x00f42400

08002b24 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b083      	sub	sp, #12
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b30:	f003 0301 	and.w	r3, r3, #1
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d00a      	beq.n	8002b4e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	430a      	orrs	r2, r1
 8002b4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b52:	f003 0302 	and.w	r3, r3, #2
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d00a      	beq.n	8002b70 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	430a      	orrs	r2, r1
 8002b6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b74:	f003 0304 	and.w	r3, r3, #4
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d00a      	beq.n	8002b92 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	430a      	orrs	r2, r1
 8002b90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b96:	f003 0308 	and.w	r3, r3, #8
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d00a      	beq.n	8002bb4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	430a      	orrs	r2, r1
 8002bb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb8:	f003 0310 	and.w	r3, r3, #16
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d00a      	beq.n	8002bd6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	430a      	orrs	r2, r1
 8002bd4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bda:	f003 0320 	and.w	r3, r3, #32
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d00a      	beq.n	8002bf8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	430a      	orrs	r2, r1
 8002bf6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d01a      	beq.n	8002c3a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	430a      	orrs	r2, r1
 8002c18:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c22:	d10a      	bne.n	8002c3a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	430a      	orrs	r2, r1
 8002c38:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d00a      	beq.n	8002c5c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	430a      	orrs	r2, r1
 8002c5a:	605a      	str	r2, [r3, #4]
  }
}
 8002c5c:	bf00      	nop
 8002c5e:	370c      	adds	r7, #12
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr

08002c68 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b086      	sub	sp, #24
 8002c6c:	af02      	add	r7, sp, #8
 8002c6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2200      	movs	r2, #0
 8002c74:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002c76:	f7fd fce9 	bl	800064c <HAL_GetTick>
 8002c7a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0308 	and.w	r3, r3, #8
 8002c86:	2b08      	cmp	r3, #8
 8002c88:	d10e      	bne.n	8002ca8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c8a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002c8e:	9300      	str	r3, [sp, #0]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2200      	movs	r2, #0
 8002c94:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	f000 f814 	bl	8002cc6 <UART_WaitOnFlagUntilTimeout>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d001      	beq.n	8002ca8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	e00a      	b.n	8002cbe <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2220      	movs	r2, #32
 8002cac:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2220      	movs	r2, #32
 8002cb2:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8002cbc:	2300      	movs	r3, #0
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3710      	adds	r7, #16
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}

08002cc6 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002cc6:	b580      	push	{r7, lr}
 8002cc8:	b084      	sub	sp, #16
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	60f8      	str	r0, [r7, #12]
 8002cce:	60b9      	str	r1, [r7, #8]
 8002cd0:	603b      	str	r3, [r7, #0]
 8002cd2:	4613      	mov	r3, r2
 8002cd4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cd6:	e02a      	b.n	8002d2e <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cd8:	69bb      	ldr	r3, [r7, #24]
 8002cda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cde:	d026      	beq.n	8002d2e <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ce0:	f7fd fcb4 	bl	800064c <HAL_GetTick>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	69ba      	ldr	r2, [r7, #24]
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d302      	bcc.n	8002cf6 <UART_WaitOnFlagUntilTimeout+0x30>
 8002cf0:	69bb      	ldr	r3, [r7, #24]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d11b      	bne.n	8002d2e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002d04:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	689a      	ldr	r2, [r3, #8]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f022 0201 	bic.w	r2, r2, #1
 8002d14:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2220      	movs	r2, #32
 8002d1a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2220      	movs	r2, #32
 8002d20:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2200      	movs	r2, #0
 8002d26:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e00f      	b.n	8002d4e <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	69da      	ldr	r2, [r3, #28]
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	4013      	ands	r3, r2
 8002d38:	68ba      	ldr	r2, [r7, #8]
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	bf0c      	ite	eq
 8002d3e:	2301      	moveq	r3, #1
 8002d40:	2300      	movne	r3, #0
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	461a      	mov	r2, r3
 8002d46:	79fb      	ldrb	r3, [r7, #7]
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d0c5      	beq.n	8002cd8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002d4c:	2300      	movs	r3, #0
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3710      	adds	r7, #16
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}

08002d56 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002d56:	b480      	push	{r7}
 8002d58:	b083      	sub	sp, #12
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002d6c:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	689a      	ldr	r2, [r3, #8]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f022 0201 	bic.w	r2, r2, #1
 8002d7c:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2220      	movs	r2, #32
 8002d82:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2200      	movs	r2, #0
 8002d88:	661a      	str	r2, [r3, #96]	; 0x60
}
 8002d8a:	bf00      	nop
 8002d8c:	370c      	adds	r7, #12
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr

08002d96 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002d96:	b580      	push	{r7, lr}
 8002d98:	b084      	sub	sp, #16
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002da2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2200      	movs	r2, #0
 8002da8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2200      	movs	r2, #0
 8002db0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002db4:	68f8      	ldr	r0, [r7, #12]
 8002db6:	f7ff fc05 	bl	80025c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002dba:	bf00      	nop
 8002dbc:	3710      	adds	r7, #16
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}

08002dc2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002dc2:	b580      	push	{r7, lr}
 8002dc4:	b082      	sub	sp, #8
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002dd8:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2220      	movs	r2, #32
 8002dde:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2200      	movs	r2, #0
 8002de4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f7ff fbe2 	bl	80025b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002dec:	bf00      	nop
 8002dee:	3708      	adds	r7, #8
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}

08002df4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002df4:	b084      	sub	sp, #16
 8002df6:	b580      	push	{r7, lr}
 8002df8:	b084      	sub	sp, #16
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	6078      	str	r0, [r7, #4]
 8002dfe:	f107 001c 	add.w	r0, r7, #28
 8002e02:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d120      	bne.n	8002e4e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e10:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	68da      	ldr	r2, [r3, #12]
 8002e1c:	4b20      	ldr	r3, [pc, #128]	; (8002ea0 <USB_CoreInit+0xac>)
 8002e1e:	4013      	ands	r3, r2
 8002e20:	687a      	ldr	r2, [r7, #4]
 8002e22:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002e30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d105      	bne.n	8002e42 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f000 fa60 	bl	8003308 <USB_CoreReset>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	73fb      	strb	r3, [r7, #15]
 8002e4c:	e010      	b.n	8002e70 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f000 fa54 	bl	8003308 <USB_CoreReset>
 8002e60:	4603      	mov	r3, r0
 8002e62:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e68:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8002e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d10b      	bne.n	8002e8e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	f043 0206 	orr.w	r2, r3, #6
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	f043 0220 	orr.w	r2, r3, #32
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002e8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3710      	adds	r7, #16
 8002e94:	46bd      	mov	sp, r7
 8002e96:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002e9a:	b004      	add	sp, #16
 8002e9c:	4770      	bx	lr
 8002e9e:	bf00      	nop
 8002ea0:	ffbdffbf 	.word	0xffbdffbf

08002ea4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b083      	sub	sp, #12
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	f023 0201 	bic.w	r2, r3, #1
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002eb8:	2300      	movs	r3, #0
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	370c      	adds	r7, #12
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr

08002ec6 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002ec6:	b580      	push	{r7, lr}
 8002ec8:	b082      	sub	sp, #8
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	6078      	str	r0, [r7, #4]
 8002ece:	460b      	mov	r3, r1
 8002ed0:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	68db      	ldr	r3, [r3, #12]
 8002ed6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002ede:	78fb      	ldrb	r3, [r7, #3]
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d106      	bne.n	8002ef2 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	60da      	str	r2, [r3, #12]
 8002ef0:	e00b      	b.n	8002f0a <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8002ef2:	78fb      	ldrb	r3, [r7, #3]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d106      	bne.n	8002f06 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	60da      	str	r2, [r3, #12]
 8002f04:	e001      	b.n	8002f0a <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e003      	b.n	8002f12 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8002f0a:	2032      	movs	r0, #50	; 0x32
 8002f0c:	f7fd fbaa 	bl	8000664 <HAL_Delay>

  return HAL_OK;
 8002f10:	2300      	movs	r3, #0
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3708      	adds	r7, #8
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
	...

08002f1c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002f1c:	b084      	sub	sp, #16
 8002f1e:	b580      	push	{r7, lr}
 8002f20:	b086      	sub	sp, #24
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	6078      	str	r0, [r7, #4]
 8002f26:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002f2a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002f36:	2300      	movs	r3, #0
 8002f38:	613b      	str	r3, [r7, #16]
 8002f3a:	e009      	b.n	8002f50 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002f3c:	687a      	ldr	r2, [r7, #4]
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	3340      	adds	r3, #64	; 0x40
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	4413      	add	r3, r2
 8002f46:	2200      	movs	r2, #0
 8002f48:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	3301      	adds	r3, #1
 8002f4e:	613b      	str	r3, [r7, #16]
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	2b0e      	cmp	r3, #14
 8002f54:	d9f2      	bls.n	8002f3c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002f56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d112      	bne.n	8002f82 <USB_DevInit+0x66>
  {
    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f60:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	601a      	str	r2, [r3, #0]
 8002f80:	e005      	b.n	8002f8e <USB_DevInit+0x72>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f86:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8002f94:	461a      	mov	r2, r3
 8002f96:	2300      	movs	r3, #0
 8002f98:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fa0:	4619      	mov	r1, r3
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fa8:	461a      	mov	r2, r3
 8002faa:	680b      	ldr	r3, [r1, #0]
 8002fac:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d10c      	bne.n	8002fce <USB_DevInit+0xb2>
  {
    if (cfg.speed == USB_OTG_SPEED_HIGH)
 8002fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d104      	bne.n	8002fc4 <USB_DevInit+0xa8>
    {
      /* Set High speed phy */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002fba:	2100      	movs	r1, #0
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	f000 f971 	bl	80032a4 <USB_SetDevSpeed>
 8002fc2:	e018      	b.n	8002ff6 <USB_DevInit+0xda>
    }
    else
    {
      /* set High speed phy in Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002fc4:	2101      	movs	r1, #1
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f000 f96c 	bl	80032a4 <USB_SetDevSpeed>
 8002fcc:	e013      	b.n	8002ff6 <USB_DevInit+0xda>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8002fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fd0:	2b03      	cmp	r3, #3
 8002fd2:	d10c      	bne.n	8002fee <USB_DevInit+0xd2>
  {
    if (cfg.speed == USB_OTG_SPEED_HIGH)
 8002fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d104      	bne.n	8002fe4 <USB_DevInit+0xc8>
    {
      /* Set High speed phy */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002fda:	2100      	movs	r1, #0
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	f000 f961 	bl	80032a4 <USB_SetDevSpeed>
 8002fe2:	e008      	b.n	8002ff6 <USB_DevInit+0xda>
    }
    else
    {
      /* set High speed phy in Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002fe4:	2101      	movs	r1, #1
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f000 f95c 	bl	80032a4 <USB_SetDevSpeed>
 8002fec:	e003      	b.n	8002ff6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Full speed phy */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002fee:	2103      	movs	r1, #3
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	f000 f957 	bl	80032a4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002ff6:	2110      	movs	r1, #16
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f000 f90b 	bl	8003214 <USB_FlushTxFifo>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d001      	beq.n	8003008 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	f000 f929 	bl	8003260 <USB_FlushRxFifo>
 800300e:	4603      	mov	r3, r0
 8003010:	2b00      	cmp	r3, #0
 8003012:	d001      	beq.n	8003018 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800301e:	461a      	mov	r2, r3
 8003020:	2300      	movs	r3, #0
 8003022:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800302a:	461a      	mov	r2, r3
 800302c:	2300      	movs	r3, #0
 800302e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003036:	461a      	mov	r2, r3
 8003038:	2300      	movs	r3, #0
 800303a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800303c:	2300      	movs	r3, #0
 800303e:	613b      	str	r3, [r7, #16]
 8003040:	e043      	b.n	80030ca <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	015a      	lsls	r2, r3, #5
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	4413      	add	r3, r2
 800304a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003054:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003058:	d118      	bne.n	800308c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d10a      	bne.n	8003076 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	015a      	lsls	r2, r3, #5
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	4413      	add	r3, r2
 8003068:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800306c:	461a      	mov	r2, r3
 800306e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003072:	6013      	str	r3, [r2, #0]
 8003074:	e013      	b.n	800309e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	015a      	lsls	r2, r3, #5
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	4413      	add	r3, r2
 800307e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003082:	461a      	mov	r2, r3
 8003084:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003088:	6013      	str	r3, [r2, #0]
 800308a:	e008      	b.n	800309e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	015a      	lsls	r2, r3, #5
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	4413      	add	r3, r2
 8003094:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003098:	461a      	mov	r2, r3
 800309a:	2300      	movs	r3, #0
 800309c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	015a      	lsls	r2, r3, #5
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	4413      	add	r3, r2
 80030a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030aa:	461a      	mov	r2, r3
 80030ac:	2300      	movs	r3, #0
 80030ae:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	015a      	lsls	r2, r3, #5
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	4413      	add	r3, r2
 80030b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030bc:	461a      	mov	r2, r3
 80030be:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80030c2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	3301      	adds	r3, #1
 80030c8:	613b      	str	r3, [r7, #16]
 80030ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030cc:	693a      	ldr	r2, [r7, #16]
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d3b7      	bcc.n	8003042 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80030d2:	2300      	movs	r3, #0
 80030d4:	613b      	str	r3, [r7, #16]
 80030d6:	e043      	b.n	8003160 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	015a      	lsls	r2, r3, #5
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	4413      	add	r3, r2
 80030e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80030ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80030ee:	d118      	bne.n	8003122 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d10a      	bne.n	800310c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	015a      	lsls	r2, r3, #5
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	4413      	add	r3, r2
 80030fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003102:	461a      	mov	r2, r3
 8003104:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003108:	6013      	str	r3, [r2, #0]
 800310a:	e013      	b.n	8003134 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	015a      	lsls	r2, r3, #5
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	4413      	add	r3, r2
 8003114:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003118:	461a      	mov	r2, r3
 800311a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800311e:	6013      	str	r3, [r2, #0]
 8003120:	e008      	b.n	8003134 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	015a      	lsls	r2, r3, #5
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	4413      	add	r3, r2
 800312a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800312e:	461a      	mov	r2, r3
 8003130:	2300      	movs	r3, #0
 8003132:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	015a      	lsls	r2, r3, #5
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	4413      	add	r3, r2
 800313c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003140:	461a      	mov	r2, r3
 8003142:	2300      	movs	r3, #0
 8003144:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	015a      	lsls	r2, r3, #5
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	4413      	add	r3, r2
 800314e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003152:	461a      	mov	r2, r3
 8003154:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003158:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	3301      	adds	r3, #1
 800315e:	613b      	str	r3, [r7, #16]
 8003160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003162:	693a      	ldr	r2, [r7, #16]
 8003164:	429a      	cmp	r2, r3
 8003166:	d3b7      	bcc.n	80030d8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800316e:	691b      	ldr	r3, [r3, #16]
 8003170:	68fa      	ldr	r2, [r7, #12]
 8003172:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003176:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800317a:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 800317c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800317e:	2b01      	cmp	r3, #1
 8003180:	d110      	bne.n	80031a4 <USB_DevInit+0x288>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003188:	461a      	mov	r2, r3
 800318a:	4b1e      	ldr	r3, [pc, #120]	; (8003204 <USB_DevInit+0x2e8>)
 800318c:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003194:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800319c:	4619      	mov	r1, r3
 800319e:	4b1a      	ldr	r3, [pc, #104]	; (8003208 <USB_DevInit+0x2ec>)
 80031a0:	4313      	orrs	r3, r2
 80031a2:	630b      	str	r3, [r1, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2200      	movs	r2, #0
 80031a8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80031b0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80031b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d105      	bne.n	80031c4 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	699b      	ldr	r3, [r3, #24]
 80031bc:	f043 0210 	orr.w	r2, r3, #16
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	699a      	ldr	r2, [r3, #24]
 80031c8:	4b10      	ldr	r3, [pc, #64]	; (800320c <USB_DevInit+0x2f0>)
 80031ca:	4313      	orrs	r3, r2
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80031d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d005      	beq.n	80031e2 <USB_DevInit+0x2c6>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	699b      	ldr	r3, [r3, #24]
 80031da:	f043 0208 	orr.w	r2, r3, #8
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80031e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d105      	bne.n	80031f4 <USB_DevInit+0x2d8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	699a      	ldr	r2, [r3, #24]
 80031ec:	4b08      	ldr	r3, [pc, #32]	; (8003210 <USB_DevInit+0x2f4>)
 80031ee:	4313      	orrs	r3, r2
 80031f0:	687a      	ldr	r2, [r7, #4]
 80031f2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80031f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3718      	adds	r7, #24
 80031fa:	46bd      	mov	sp, r7
 80031fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003200:	b004      	add	sp, #16
 8003202:	4770      	bx	lr
 8003204:	00800100 	.word	0x00800100
 8003208:	00010003 	.word	0x00010003
 800320c:	803c3800 	.word	0x803c3800
 8003210:	40000004 	.word	0x40000004

08003214 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003214:	b480      	push	{r7}
 8003216:	b085      	sub	sp, #20
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800321e:	2300      	movs	r3, #0
 8003220:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	019b      	lsls	r3, r3, #6
 8003226:	f043 0220 	orr.w	r2, r3, #32
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	3301      	adds	r3, #1
 8003232:	60fb      	str	r3, [r7, #12]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	4a09      	ldr	r2, [pc, #36]	; (800325c <USB_FlushTxFifo+0x48>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d901      	bls.n	8003240 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800323c:	2303      	movs	r3, #3
 800323e:	e006      	b.n	800324e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	691b      	ldr	r3, [r3, #16]
 8003244:	f003 0320 	and.w	r3, r3, #32
 8003248:	2b20      	cmp	r3, #32
 800324a:	d0f0      	beq.n	800322e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800324c:	2300      	movs	r3, #0
}
 800324e:	4618      	mov	r0, r3
 8003250:	3714      	adds	r7, #20
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr
 800325a:	bf00      	nop
 800325c:	00030d40 	.word	0x00030d40

08003260 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003260:	b480      	push	{r7}
 8003262:	b085      	sub	sp, #20
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8003268:	2300      	movs	r3, #0
 800326a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2210      	movs	r2, #16
 8003270:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	3301      	adds	r3, #1
 8003276:	60fb      	str	r3, [r7, #12]
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	4a09      	ldr	r2, [pc, #36]	; (80032a0 <USB_FlushRxFifo+0x40>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d901      	bls.n	8003284 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8003280:	2303      	movs	r3, #3
 8003282:	e006      	b.n	8003292 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	691b      	ldr	r3, [r3, #16]
 8003288:	f003 0310 	and.w	r3, r3, #16
 800328c:	2b10      	cmp	r3, #16
 800328e:	d0f0      	beq.n	8003272 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8003290:	2300      	movs	r3, #0
}
 8003292:	4618      	mov	r0, r3
 8003294:	3714      	adds	r7, #20
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr
 800329e:	bf00      	nop
 80032a0:	00030d40 	.word	0x00030d40

080032a4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b085      	sub	sp, #20
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	460b      	mov	r3, r1
 80032ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	78fb      	ldrb	r3, [r7, #3]
 80032be:	68f9      	ldr	r1, [r7, #12]
 80032c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80032c4:	4313      	orrs	r3, r2
 80032c6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80032c8:	2300      	movs	r3, #0
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3714      	adds	r7, #20
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr

080032d6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80032d6:	b580      	push	{r7, lr}
 80032d8:	b084      	sub	sp, #16
 80032da:	af00      	add	r7, sp, #0
 80032dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	68fa      	ldr	r2, [r7, #12]
 80032ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032f0:	f043 0302 	orr.w	r3, r3, #2
 80032f4:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80032f6:	2003      	movs	r0, #3
 80032f8:	f7fd f9b4 	bl	8000664 <HAL_Delay>

  return HAL_OK;
 80032fc:	2300      	movs	r3, #0
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3710      	adds	r7, #16
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
	...

08003308 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003308:	b480      	push	{r7}
 800330a:	b085      	sub	sp, #20
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8003310:	2300      	movs	r3, #0
 8003312:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	3301      	adds	r3, #1
 8003318:	60fb      	str	r3, [r7, #12]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	4a13      	ldr	r2, [pc, #76]	; (800336c <USB_CoreReset+0x64>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d901      	bls.n	8003326 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003322:	2303      	movs	r3, #3
 8003324:	e01b      	b.n	800335e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	691b      	ldr	r3, [r3, #16]
 800332a:	2b00      	cmp	r3, #0
 800332c:	daf2      	bge.n	8003314 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800332e:	2300      	movs	r3, #0
 8003330:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	691b      	ldr	r3, [r3, #16]
 8003336:	f043 0201 	orr.w	r2, r3, #1
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	3301      	adds	r3, #1
 8003342:	60fb      	str	r3, [r7, #12]
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	4a09      	ldr	r2, [pc, #36]	; (800336c <USB_CoreReset+0x64>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d901      	bls.n	8003350 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800334c:	2303      	movs	r3, #3
 800334e:	e006      	b.n	800335e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	691b      	ldr	r3, [r3, #16]
 8003354:	f003 0301 	and.w	r3, r3, #1
 8003358:	2b01      	cmp	r3, #1
 800335a:	d0f0      	beq.n	800333e <USB_CoreReset+0x36>

  return HAL_OK;
 800335c:	2300      	movs	r3, #0
}
 800335e:	4618      	mov	r0, r3
 8003360:	3714      	adds	r7, #20
 8003362:	46bd      	mov	sp, r7
 8003364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003368:	4770      	bx	lr
 800336a:	bf00      	nop
 800336c:	00030d40 	.word	0x00030d40

08003370 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003374:	f7fd f918 	bl	80005a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003378:	f000 f81e 	bl	80033b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800337c:	f000 f90a 	bl	8003594 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8003380:	f000 f8aa 	bl	80034d8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8003384:	f000 f8d8 	bl	8003538 <MX_USB_OTG_FS_PCD_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//	  GPIOC->IDR
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8003388:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800338c:	4807      	ldr	r0, [pc, #28]	; (80033ac <main+0x3c>)
 800338e:	f7fd fc86 	bl	8000c9e <HAL_GPIO_TogglePin>
	  printf("Use printf for%d print\r\n", GPIOC->IDR & (1<<13));
 8003392:	4b07      	ldr	r3, [pc, #28]	; (80033b0 <main+0x40>)
 8003394:	691b      	ldr	r3, [r3, #16]
 8003396:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800339a:	4619      	mov	r1, r3
 800339c:	4805      	ldr	r0, [pc, #20]	; (80033b4 <main+0x44>)
 800339e:	f000 fc49 	bl	8003c34 <iprintf>
	  HAL_Delay(1000);
 80033a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80033a6:	f7fd f95d 	bl	8000664 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 80033aa:	e7ed      	b.n	8003388 <main+0x18>
 80033ac:	40020400 	.word	0x40020400
 80033b0:	40020800 	.word	0x40020800
 80033b4:	08004af8 	.word	0x08004af8

080033b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b0b4      	sub	sp, #208	; 0xd0
 80033bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80033be:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80033c2:	2230      	movs	r2, #48	; 0x30
 80033c4:	2100      	movs	r1, #0
 80033c6:	4618      	mov	r0, r3
 80033c8:	f000 fc2c 	bl	8003c24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80033cc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80033d0:	2200      	movs	r2, #0
 80033d2:	601a      	str	r2, [r3, #0]
 80033d4:	605a      	str	r2, [r3, #4]
 80033d6:	609a      	str	r2, [r3, #8]
 80033d8:	60da      	str	r2, [r3, #12]
 80033da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80033dc:	f107 0308 	add.w	r3, r7, #8
 80033e0:	2284      	movs	r2, #132	; 0x84
 80033e2:	2100      	movs	r1, #0
 80033e4:	4618      	mov	r0, r3
 80033e6:	f000 fc1d 	bl	8003c24 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80033ea:	f7fd fdaf 	bl	8000f4c <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80033ee:	4b37      	ldr	r3, [pc, #220]	; (80034cc <SystemClock_Config+0x114>)
 80033f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f2:	4a36      	ldr	r2, [pc, #216]	; (80034cc <SystemClock_Config+0x114>)
 80033f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033f8:	6413      	str	r3, [r2, #64]	; 0x40
 80033fa:	4b34      	ldr	r3, [pc, #208]	; (80034cc <SystemClock_Config+0x114>)
 80033fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003402:	607b      	str	r3, [r7, #4]
 8003404:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8003406:	4b32      	ldr	r3, [pc, #200]	; (80034d0 <SystemClock_Config+0x118>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800340e:	4a30      	ldr	r2, [pc, #192]	; (80034d0 <SystemClock_Config+0x118>)
 8003410:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003414:	6013      	str	r3, [r2, #0]
 8003416:	4b2e      	ldr	r3, [pc, #184]	; (80034d0 <SystemClock_Config+0x118>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800341e:	603b      	str	r3, [r7, #0]
 8003420:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003422:	2301      	movs	r3, #1
 8003424:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8003428:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800342c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003430:	2302      	movs	r3, #2
 8003432:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003436:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800343a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 800343e:	2304      	movs	r3, #4
 8003440:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 72;
 8003444:	2348      	movs	r3, #72	; 0x48
 8003446:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800344a:	2302      	movs	r3, #2
 800344c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8003450:	2303      	movs	r3, #3
 8003452:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003456:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800345a:	4618      	mov	r0, r3
 800345c:	f7fd fd86 	bl	8000f6c <HAL_RCC_OscConfig>
 8003460:	4603      	mov	r3, r0
 8003462:	2b00      	cmp	r3, #0
 8003464:	d001      	beq.n	800346a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8003466:	f000 f97b 	bl	8003760 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800346a:	230f      	movs	r3, #15
 800346c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003470:	2302      	movs	r3, #2
 8003472:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003476:	2300      	movs	r3, #0
 8003478:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800347c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003480:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003484:	2300      	movs	r3, #0
 8003486:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800348a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800348e:	2102      	movs	r1, #2
 8003490:	4618      	mov	r0, r3
 8003492:	f7fd ffdb 	bl	800144c <HAL_RCC_ClockConfig>
 8003496:	4603      	mov	r3, r0
 8003498:	2b00      	cmp	r3, #0
 800349a:	d001      	beq.n	80034a0 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 800349c:	f000 f960 	bl	8003760 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 80034a0:	4b0c      	ldr	r3, [pc, #48]	; (80034d4 <SystemClock_Config+0x11c>)
 80034a2:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80034a4:	2300      	movs	r3, #0
 80034a6:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80034a8:	2300      	movs	r3, #0
 80034aa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80034ae:	f107 0308 	add.w	r3, r7, #8
 80034b2:	4618      	mov	r0, r3
 80034b4:	f7fe f9c8 	bl	8001848 <HAL_RCCEx_PeriphCLKConfig>
 80034b8:	4603      	mov	r3, r0
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d001      	beq.n	80034c2 <SystemClock_Config+0x10a>
  {
    Error_Handler();
 80034be:	f000 f94f 	bl	8003760 <Error_Handler>
  }
}
 80034c2:	bf00      	nop
 80034c4:	37d0      	adds	r7, #208	; 0xd0
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	bf00      	nop
 80034cc:	40023800 	.word	0x40023800
 80034d0:	40007000 	.word	0x40007000
 80034d4:	00200100 	.word	0x00200100

080034d8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80034dc:	4b14      	ldr	r3, [pc, #80]	; (8003530 <MX_USART3_UART_Init+0x58>)
 80034de:	4a15      	ldr	r2, [pc, #84]	; (8003534 <MX_USART3_UART_Init+0x5c>)
 80034e0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80034e2:	4b13      	ldr	r3, [pc, #76]	; (8003530 <MX_USART3_UART_Init+0x58>)
 80034e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80034e8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80034ea:	4b11      	ldr	r3, [pc, #68]	; (8003530 <MX_USART3_UART_Init+0x58>)
 80034ec:	2200      	movs	r2, #0
 80034ee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80034f0:	4b0f      	ldr	r3, [pc, #60]	; (8003530 <MX_USART3_UART_Init+0x58>)
 80034f2:	2200      	movs	r2, #0
 80034f4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80034f6:	4b0e      	ldr	r3, [pc, #56]	; (8003530 <MX_USART3_UART_Init+0x58>)
 80034f8:	2200      	movs	r2, #0
 80034fa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80034fc:	4b0c      	ldr	r3, [pc, #48]	; (8003530 <MX_USART3_UART_Init+0x58>)
 80034fe:	220c      	movs	r2, #12
 8003500:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003502:	4b0b      	ldr	r3, [pc, #44]	; (8003530 <MX_USART3_UART_Init+0x58>)
 8003504:	2200      	movs	r2, #0
 8003506:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003508:	4b09      	ldr	r3, [pc, #36]	; (8003530 <MX_USART3_UART_Init+0x58>)
 800350a:	2200      	movs	r2, #0
 800350c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800350e:	4b08      	ldr	r3, [pc, #32]	; (8003530 <MX_USART3_UART_Init+0x58>)
 8003510:	2200      	movs	r2, #0
 8003512:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003514:	4b06      	ldr	r3, [pc, #24]	; (8003530 <MX_USART3_UART_Init+0x58>)
 8003516:	2200      	movs	r2, #0
 8003518:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800351a:	4805      	ldr	r0, [pc, #20]	; (8003530 <MX_USART3_UART_Init+0x58>)
 800351c:	f7fe fd82 	bl	8002024 <HAL_UART_Init>
 8003520:	4603      	mov	r3, r0
 8003522:	2b00      	cmp	r3, #0
 8003524:	d001      	beq.n	800352a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8003526:	f000 f91b 	bl	8003760 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800352a:	bf00      	nop
 800352c:	bd80      	pop	{r7, pc}
 800352e:	bf00      	nop
 8003530:	2000009c 	.word	0x2000009c
 8003534:	40004800 	.word	0x40004800

08003538 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800353c:	4b14      	ldr	r3, [pc, #80]	; (8003590 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800353e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8003542:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8003544:	4b12      	ldr	r3, [pc, #72]	; (8003590 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003546:	2206      	movs	r2, #6
 8003548:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800354a:	4b11      	ldr	r3, [pc, #68]	; (8003590 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800354c:	2202      	movs	r2, #2
 800354e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8003550:	4b0f      	ldr	r3, [pc, #60]	; (8003590 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003552:	2200      	movs	r2, #0
 8003554:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8003556:	4b0e      	ldr	r3, [pc, #56]	; (8003590 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003558:	2202      	movs	r2, #2
 800355a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800355c:	4b0c      	ldr	r3, [pc, #48]	; (8003590 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800355e:	2201      	movs	r2, #1
 8003560:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8003562:	4b0b      	ldr	r3, [pc, #44]	; (8003590 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003564:	2200      	movs	r2, #0
 8003566:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8003568:	4b09      	ldr	r3, [pc, #36]	; (8003590 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800356a:	2200      	movs	r2, #0
 800356c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800356e:	4b08      	ldr	r3, [pc, #32]	; (8003590 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003570:	2201      	movs	r2, #1
 8003572:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8003574:	4b06      	ldr	r3, [pc, #24]	; (8003590 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003576:	2200      	movs	r2, #0
 8003578:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800357a:	4805      	ldr	r0, [pc, #20]	; (8003590 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800357c:	f7fd fbaa 	bl	8000cd4 <HAL_PCD_Init>
 8003580:	4603      	mov	r3, r0
 8003582:	2b00      	cmp	r3, #0
 8003584:	d001      	beq.n	800358a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8003586:	f000 f8eb 	bl	8003760 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800358a:	bf00      	nop
 800358c:	bd80      	pop	{r7, pc}
 800358e:	bf00      	nop
 8003590:	2000011c 	.word	0x2000011c

08003594 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b08c      	sub	sp, #48	; 0x30
 8003598:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800359a:	f107 031c 	add.w	r3, r7, #28
 800359e:	2200      	movs	r2, #0
 80035a0:	601a      	str	r2, [r3, #0]
 80035a2:	605a      	str	r2, [r3, #4]
 80035a4:	609a      	str	r2, [r3, #8]
 80035a6:	60da      	str	r2, [r3, #12]
 80035a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80035aa:	4b67      	ldr	r3, [pc, #412]	; (8003748 <MX_GPIO_Init+0x1b4>)
 80035ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ae:	4a66      	ldr	r2, [pc, #408]	; (8003748 <MX_GPIO_Init+0x1b4>)
 80035b0:	f043 0304 	orr.w	r3, r3, #4
 80035b4:	6313      	str	r3, [r2, #48]	; 0x30
 80035b6:	4b64      	ldr	r3, [pc, #400]	; (8003748 <MX_GPIO_Init+0x1b4>)
 80035b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ba:	f003 0304 	and.w	r3, r3, #4
 80035be:	61bb      	str	r3, [r7, #24]
 80035c0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80035c2:	4b61      	ldr	r3, [pc, #388]	; (8003748 <MX_GPIO_Init+0x1b4>)
 80035c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c6:	4a60      	ldr	r2, [pc, #384]	; (8003748 <MX_GPIO_Init+0x1b4>)
 80035c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035cc:	6313      	str	r3, [r2, #48]	; 0x30
 80035ce:	4b5e      	ldr	r3, [pc, #376]	; (8003748 <MX_GPIO_Init+0x1b4>)
 80035d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035d6:	617b      	str	r3, [r7, #20]
 80035d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80035da:	4b5b      	ldr	r3, [pc, #364]	; (8003748 <MX_GPIO_Init+0x1b4>)
 80035dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035de:	4a5a      	ldr	r2, [pc, #360]	; (8003748 <MX_GPIO_Init+0x1b4>)
 80035e0:	f043 0301 	orr.w	r3, r3, #1
 80035e4:	6313      	str	r3, [r2, #48]	; 0x30
 80035e6:	4b58      	ldr	r3, [pc, #352]	; (8003748 <MX_GPIO_Init+0x1b4>)
 80035e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ea:	f003 0301 	and.w	r3, r3, #1
 80035ee:	613b      	str	r3, [r7, #16]
 80035f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80035f2:	4b55      	ldr	r3, [pc, #340]	; (8003748 <MX_GPIO_Init+0x1b4>)
 80035f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f6:	4a54      	ldr	r2, [pc, #336]	; (8003748 <MX_GPIO_Init+0x1b4>)
 80035f8:	f043 0302 	orr.w	r3, r3, #2
 80035fc:	6313      	str	r3, [r2, #48]	; 0x30
 80035fe:	4b52      	ldr	r3, [pc, #328]	; (8003748 <MX_GPIO_Init+0x1b4>)
 8003600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003602:	f003 0302 	and.w	r3, r3, #2
 8003606:	60fb      	str	r3, [r7, #12]
 8003608:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800360a:	4b4f      	ldr	r3, [pc, #316]	; (8003748 <MX_GPIO_Init+0x1b4>)
 800360c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800360e:	4a4e      	ldr	r2, [pc, #312]	; (8003748 <MX_GPIO_Init+0x1b4>)
 8003610:	f043 0308 	orr.w	r3, r3, #8
 8003614:	6313      	str	r3, [r2, #48]	; 0x30
 8003616:	4b4c      	ldr	r3, [pc, #304]	; (8003748 <MX_GPIO_Init+0x1b4>)
 8003618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800361a:	f003 0308 	and.w	r3, r3, #8
 800361e:	60bb      	str	r3, [r7, #8]
 8003620:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003622:	4b49      	ldr	r3, [pc, #292]	; (8003748 <MX_GPIO_Init+0x1b4>)
 8003624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003626:	4a48      	ldr	r2, [pc, #288]	; (8003748 <MX_GPIO_Init+0x1b4>)
 8003628:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800362c:	6313      	str	r3, [r2, #48]	; 0x30
 800362e:	4b46      	ldr	r3, [pc, #280]	; (8003748 <MX_GPIO_Init+0x1b4>)
 8003630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003632:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003636:	607b      	str	r3, [r7, #4]
 8003638:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800363a:	2200      	movs	r2, #0
 800363c:	f244 0181 	movw	r1, #16513	; 0x4081
 8003640:	4842      	ldr	r0, [pc, #264]	; (800374c <MX_GPIO_Init+0x1b8>)
 8003642:	f7fd fb13 	bl	8000c6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8003646:	2200      	movs	r2, #0
 8003648:	2140      	movs	r1, #64	; 0x40
 800364a:	4841      	ldr	r0, [pc, #260]	; (8003750 <MX_GPIO_Init+0x1bc>)
 800364c:	f7fd fb0e 	bl	8000c6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8003650:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003654:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003656:	4b3f      	ldr	r3, [pc, #252]	; (8003754 <MX_GPIO_Init+0x1c0>)
 8003658:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800365a:	2300      	movs	r3, #0
 800365c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800365e:	f107 031c 	add.w	r3, r7, #28
 8003662:	4619      	mov	r1, r3
 8003664:	483c      	ldr	r0, [pc, #240]	; (8003758 <MX_GPIO_Init+0x1c4>)
 8003666:	f7fd f955 	bl	8000914 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800366a:	2332      	movs	r3, #50	; 0x32
 800366c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800366e:	2302      	movs	r3, #2
 8003670:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003672:	2300      	movs	r3, #0
 8003674:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003676:	2303      	movs	r3, #3
 8003678:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800367a:	230b      	movs	r3, #11
 800367c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800367e:	f107 031c 	add.w	r3, r7, #28
 8003682:	4619      	mov	r1, r3
 8003684:	4834      	ldr	r0, [pc, #208]	; (8003758 <MX_GPIO_Init+0x1c4>)
 8003686:	f7fd f945 	bl	8000914 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800368a:	2386      	movs	r3, #134	; 0x86
 800368c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800368e:	2302      	movs	r3, #2
 8003690:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003692:	2300      	movs	r3, #0
 8003694:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003696:	2303      	movs	r3, #3
 8003698:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800369a:	230b      	movs	r3, #11
 800369c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800369e:	f107 031c 	add.w	r3, r7, #28
 80036a2:	4619      	mov	r1, r3
 80036a4:	482d      	ldr	r0, [pc, #180]	; (800375c <MX_GPIO_Init+0x1c8>)
 80036a6:	f7fd f935 	bl	8000914 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80036aa:	f244 0381 	movw	r3, #16513	; 0x4081
 80036ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036b0:	2301      	movs	r3, #1
 80036b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036b4:	2300      	movs	r3, #0
 80036b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036b8:	2300      	movs	r3, #0
 80036ba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036bc:	f107 031c 	add.w	r3, r7, #28
 80036c0:	4619      	mov	r1, r3
 80036c2:	4822      	ldr	r0, [pc, #136]	; (800374c <MX_GPIO_Init+0x1b8>)
 80036c4:	f7fd f926 	bl	8000914 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80036c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80036cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036ce:	2302      	movs	r3, #2
 80036d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036d2:	2300      	movs	r3, #0
 80036d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036d6:	2303      	movs	r3, #3
 80036d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80036da:	230b      	movs	r3, #11
 80036dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80036de:	f107 031c 	add.w	r3, r7, #28
 80036e2:	4619      	mov	r1, r3
 80036e4:	4819      	ldr	r0, [pc, #100]	; (800374c <MX_GPIO_Init+0x1b8>)
 80036e6:	f7fd f915 	bl	8000914 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80036ea:	2340      	movs	r3, #64	; 0x40
 80036ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036ee:	2301      	movs	r3, #1
 80036f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036f2:	2300      	movs	r3, #0
 80036f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036f6:	2300      	movs	r3, #0
 80036f8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80036fa:	f107 031c 	add.w	r3, r7, #28
 80036fe:	4619      	mov	r1, r3
 8003700:	4813      	ldr	r0, [pc, #76]	; (8003750 <MX_GPIO_Init+0x1bc>)
 8003702:	f7fd f907 	bl	8000914 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8003706:	2380      	movs	r3, #128	; 0x80
 8003708:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800370a:	2300      	movs	r3, #0
 800370c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800370e:	2300      	movs	r3, #0
 8003710:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8003712:	f107 031c 	add.w	r3, r7, #28
 8003716:	4619      	mov	r1, r3
 8003718:	480d      	ldr	r0, [pc, #52]	; (8003750 <MX_GPIO_Init+0x1bc>)
 800371a:	f7fd f8fb 	bl	8000914 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800371e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8003722:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003724:	2302      	movs	r3, #2
 8003726:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003728:	2300      	movs	r3, #0
 800372a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800372c:	2303      	movs	r3, #3
 800372e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003730:	230b      	movs	r3, #11
 8003732:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003734:	f107 031c 	add.w	r3, r7, #28
 8003738:	4619      	mov	r1, r3
 800373a:	4805      	ldr	r0, [pc, #20]	; (8003750 <MX_GPIO_Init+0x1bc>)
 800373c:	f7fd f8ea 	bl	8000914 <HAL_GPIO_Init>

}
 8003740:	bf00      	nop
 8003742:	3730      	adds	r7, #48	; 0x30
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}
 8003748:	40023800 	.word	0x40023800
 800374c:	40020400 	.word	0x40020400
 8003750:	40021800 	.word	0x40021800
 8003754:	10110000 	.word	0x10110000
 8003758:	40020800 	.word	0x40020800
 800375c:	40020000 	.word	0x40020000

08003760 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003760:	b480      	push	{r7}
 8003762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003764:	bf00      	nop
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr
	...

08003770 <__io_putchar>:
/* USER CODE BEGIN 0 */
//for printf
extern UART_HandleTypeDef huart3;

int __io_putchar(int ch)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b082      	sub	sp, #8
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART2 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8003778:	1d39      	adds	r1, r7, #4
 800377a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800377e:	2201      	movs	r2, #1
 8003780:	4803      	ldr	r0, [pc, #12]	; (8003790 <__io_putchar+0x20>)
 8003782:	f7fe fc9d 	bl	80020c0 <HAL_UART_Transmit>
	return ch;
 8003786:	687b      	ldr	r3, [r7, #4]
}
 8003788:	4618      	mov	r0, r3
 800378a:	3708      	adds	r7, #8
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}
 8003790:	2000009c 	.word	0x2000009c

08003794 <_read>:

// for scanf
int _read(int file, char *ptr, int len)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b086      	sub	sp, #24
 8003798:	af00      	add	r7, sp, #0
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	60b9      	str	r1, [r7, #8]
 800379e:	607a      	str	r2, [r7, #4]
	int ch=0;
 80037a0:	2300      	movs	r3, #0
 80037a2:	617b      	str	r3, [r7, #20]
	HAL_UART_Receive(&huart3, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80037a4:	f107 0114 	add.w	r1, r7, #20
 80037a8:	f04f 33ff 	mov.w	r3, #4294967295
 80037ac:	2201      	movs	r2, #1
 80037ae:	4817      	ldr	r0, [pc, #92]	; (800380c <_read+0x78>)
 80037b0:	f7fe fd17 	bl	80021e2 <HAL_UART_Receive>
	HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1,HAL_MAX_DELAY);
 80037b4:	f107 0114 	add.w	r1, r7, #20
 80037b8:	f04f 33ff 	mov.w	r3, #4294967295
 80037bc:	2201      	movs	r2, #1
 80037be:	4813      	ldr	r0, [pc, #76]	; (800380c <_read+0x78>)
 80037c0:	f7fe fc7e 	bl	80020c0 <HAL_UART_Transmit>
	if(ch==13)
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	2b0d      	cmp	r3, #13
 80037c8:	d10a      	bne.n	80037e0 <_read+0x4c>
	{
		ch=10;
 80037ca:	230a      	movs	r3, #10
 80037cc:	617b      	str	r3, [r7, #20]
		HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1,HAL_MAX_DELAY);
 80037ce:	f107 0114 	add.w	r1, r7, #20
 80037d2:	f04f 33ff 	mov.w	r3, #4294967295
 80037d6:	2201      	movs	r2, #1
 80037d8:	480c      	ldr	r0, [pc, #48]	; (800380c <_read+0x78>)
 80037da:	f7fe fc71 	bl	80020c0 <HAL_UART_Transmit>
 80037de:	e00c      	b.n	80037fa <_read+0x66>
	}
	else if(ch==8)
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	2b08      	cmp	r3, #8
 80037e4:	d109      	bne.n	80037fa <_read+0x66>
	{
		ch=0x30;
 80037e6:	2330      	movs	r3, #48	; 0x30
 80037e8:	617b      	str	r3, [r7, #20]
		HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1,HAL_MAX_DELAY);
 80037ea:	f107 0114 	add.w	r1, r7, #20
 80037ee:	f04f 33ff 	mov.w	r3, #4294967295
 80037f2:	2201      	movs	r2, #1
 80037f4:	4805      	ldr	r0, [pc, #20]	; (800380c <_read+0x78>)
 80037f6:	f7fe fc63 	bl	80020c0 <HAL_UART_Transmit>
	}

	*ptr=ch;
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	b2da      	uxtb	r2, r3
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	701a      	strb	r2, [r3, #0]

	return 1;
 8003802:	2301      	movs	r3, #1
}
 8003804:	4618      	mov	r0, r3
 8003806:	3718      	adds	r7, #24
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}
 800380c:	2000009c 	.word	0x2000009c

08003810 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003810:	b480      	push	{r7}
 8003812:	b083      	sub	sp, #12
 8003814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003816:	4b0f      	ldr	r3, [pc, #60]	; (8003854 <HAL_MspInit+0x44>)
 8003818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381a:	4a0e      	ldr	r2, [pc, #56]	; (8003854 <HAL_MspInit+0x44>)
 800381c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003820:	6413      	str	r3, [r2, #64]	; 0x40
 8003822:	4b0c      	ldr	r3, [pc, #48]	; (8003854 <HAL_MspInit+0x44>)
 8003824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800382a:	607b      	str	r3, [r7, #4]
 800382c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800382e:	4b09      	ldr	r3, [pc, #36]	; (8003854 <HAL_MspInit+0x44>)
 8003830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003832:	4a08      	ldr	r2, [pc, #32]	; (8003854 <HAL_MspInit+0x44>)
 8003834:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003838:	6453      	str	r3, [r2, #68]	; 0x44
 800383a:	4b06      	ldr	r3, [pc, #24]	; (8003854 <HAL_MspInit+0x44>)
 800383c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800383e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003842:	603b      	str	r3, [r7, #0]
 8003844:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003846:	bf00      	nop
 8003848:	370c      	adds	r7, #12
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr
 8003852:	bf00      	nop
 8003854:	40023800 	.word	0x40023800

08003858 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b08a      	sub	sp, #40	; 0x28
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003860:	f107 0314 	add.w	r3, r7, #20
 8003864:	2200      	movs	r2, #0
 8003866:	601a      	str	r2, [r3, #0]
 8003868:	605a      	str	r2, [r3, #4]
 800386a:	609a      	str	r2, [r3, #8]
 800386c:	60da      	str	r2, [r3, #12]
 800386e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a1b      	ldr	r2, [pc, #108]	; (80038e4 <HAL_UART_MspInit+0x8c>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d130      	bne.n	80038dc <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800387a:	4b1b      	ldr	r3, [pc, #108]	; (80038e8 <HAL_UART_MspInit+0x90>)
 800387c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387e:	4a1a      	ldr	r2, [pc, #104]	; (80038e8 <HAL_UART_MspInit+0x90>)
 8003880:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003884:	6413      	str	r3, [r2, #64]	; 0x40
 8003886:	4b18      	ldr	r3, [pc, #96]	; (80038e8 <HAL_UART_MspInit+0x90>)
 8003888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800388e:	613b      	str	r3, [r7, #16]
 8003890:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003892:	4b15      	ldr	r3, [pc, #84]	; (80038e8 <HAL_UART_MspInit+0x90>)
 8003894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003896:	4a14      	ldr	r2, [pc, #80]	; (80038e8 <HAL_UART_MspInit+0x90>)
 8003898:	f043 0308 	orr.w	r3, r3, #8
 800389c:	6313      	str	r3, [r2, #48]	; 0x30
 800389e:	4b12      	ldr	r3, [pc, #72]	; (80038e8 <HAL_UART_MspInit+0x90>)
 80038a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a2:	f003 0308 	and.w	r3, r3, #8
 80038a6:	60fb      	str	r3, [r7, #12]
 80038a8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80038aa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80038ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038b0:	2302      	movs	r3, #2
 80038b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038b4:	2300      	movs	r3, #0
 80038b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038b8:	2303      	movs	r3, #3
 80038ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80038bc:	2307      	movs	r3, #7
 80038be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80038c0:	f107 0314 	add.w	r3, r7, #20
 80038c4:	4619      	mov	r1, r3
 80038c6:	4809      	ldr	r0, [pc, #36]	; (80038ec <HAL_UART_MspInit+0x94>)
 80038c8:	f7fd f824 	bl	8000914 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80038cc:	2200      	movs	r2, #0
 80038ce:	2100      	movs	r1, #0
 80038d0:	2027      	movs	r0, #39	; 0x27
 80038d2:	f7fc ffc6 	bl	8000862 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80038d6:	2027      	movs	r0, #39	; 0x27
 80038d8:	f7fc ffdf 	bl	800089a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80038dc:	bf00      	nop
 80038de:	3728      	adds	r7, #40	; 0x28
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}
 80038e4:	40004800 	.word	0x40004800
 80038e8:	40023800 	.word	0x40023800
 80038ec:	40020c00 	.word	0x40020c00

080038f0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b08a      	sub	sp, #40	; 0x28
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038f8:	f107 0314 	add.w	r3, r7, #20
 80038fc:	2200      	movs	r2, #0
 80038fe:	601a      	str	r2, [r3, #0]
 8003900:	605a      	str	r2, [r3, #4]
 8003902:	609a      	str	r2, [r3, #8]
 8003904:	60da      	str	r2, [r3, #12]
 8003906:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003910:	d141      	bne.n	8003996 <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003912:	4b23      	ldr	r3, [pc, #140]	; (80039a0 <HAL_PCD_MspInit+0xb0>)
 8003914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003916:	4a22      	ldr	r2, [pc, #136]	; (80039a0 <HAL_PCD_MspInit+0xb0>)
 8003918:	f043 0301 	orr.w	r3, r3, #1
 800391c:	6313      	str	r3, [r2, #48]	; 0x30
 800391e:	4b20      	ldr	r3, [pc, #128]	; (80039a0 <HAL_PCD_MspInit+0xb0>)
 8003920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003922:	f003 0301 	and.w	r3, r3, #1
 8003926:	613b      	str	r3, [r7, #16]
 8003928:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800392a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800392e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003930:	2302      	movs	r3, #2
 8003932:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003934:	2300      	movs	r3, #0
 8003936:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003938:	2303      	movs	r3, #3
 800393a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800393c:	230a      	movs	r3, #10
 800393e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003940:	f107 0314 	add.w	r3, r7, #20
 8003944:	4619      	mov	r1, r3
 8003946:	4817      	ldr	r0, [pc, #92]	; (80039a4 <HAL_PCD_MspInit+0xb4>)
 8003948:	f7fc ffe4 	bl	8000914 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800394c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003950:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003952:	2300      	movs	r3, #0
 8003954:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003956:	2300      	movs	r3, #0
 8003958:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800395a:	f107 0314 	add.w	r3, r7, #20
 800395e:	4619      	mov	r1, r3
 8003960:	4810      	ldr	r0, [pc, #64]	; (80039a4 <HAL_PCD_MspInit+0xb4>)
 8003962:	f7fc ffd7 	bl	8000914 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8003966:	4b0e      	ldr	r3, [pc, #56]	; (80039a0 <HAL_PCD_MspInit+0xb0>)
 8003968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800396a:	4a0d      	ldr	r2, [pc, #52]	; (80039a0 <HAL_PCD_MspInit+0xb0>)
 800396c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003970:	6353      	str	r3, [r2, #52]	; 0x34
 8003972:	4b0b      	ldr	r3, [pc, #44]	; (80039a0 <HAL_PCD_MspInit+0xb0>)
 8003974:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003976:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800397a:	60fb      	str	r3, [r7, #12]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	4b08      	ldr	r3, [pc, #32]	; (80039a0 <HAL_PCD_MspInit+0xb0>)
 8003980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003982:	4a07      	ldr	r2, [pc, #28]	; (80039a0 <HAL_PCD_MspInit+0xb0>)
 8003984:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003988:	6453      	str	r3, [r2, #68]	; 0x44
 800398a:	4b05      	ldr	r3, [pc, #20]	; (80039a0 <HAL_PCD_MspInit+0xb0>)
 800398c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800398e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003992:	60bb      	str	r3, [r7, #8]
 8003994:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8003996:	bf00      	nop
 8003998:	3728      	adds	r7, #40	; 0x28
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	40023800 	.word	0x40023800
 80039a4:	40020000 	.word	0x40020000

080039a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80039a8:	b480      	push	{r7}
 80039aa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80039ac:	bf00      	nop
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr

080039b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80039b6:	b480      	push	{r7}
 80039b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80039ba:	e7fe      	b.n	80039ba <HardFault_Handler+0x4>

080039bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80039bc:	b480      	push	{r7}
 80039be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80039c0:	e7fe      	b.n	80039c0 <MemManage_Handler+0x4>

080039c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80039c2:	b480      	push	{r7}
 80039c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80039c6:	e7fe      	b.n	80039c6 <BusFault_Handler+0x4>

080039c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80039c8:	b480      	push	{r7}
 80039ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80039cc:	e7fe      	b.n	80039cc <UsageFault_Handler+0x4>

080039ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80039ce:	b480      	push	{r7}
 80039d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80039d2:	bf00      	nop
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr

080039dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80039dc:	b480      	push	{r7}
 80039de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80039e0:	bf00      	nop
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr

080039ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80039ea:	b480      	push	{r7}
 80039ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80039ee:	bf00      	nop
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr

080039f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80039fc:	f7fc fe12 	bl	8000624 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003a00:	bf00      	nop
 8003a02:	bd80      	pop	{r7, pc}

08003a04 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003a08:	4802      	ldr	r0, [pc, #8]	; (8003a14 <USART3_IRQHandler+0x10>)
 8003a0a:	f7fe fcb7 	bl	800237c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003a0e:	bf00      	nop
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	2000009c 	.word	0x2000009c

08003a18 <_write>:

return len;
}

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b086      	sub	sp, #24
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	60f8      	str	r0, [r7, #12]
 8003a20:	60b9      	str	r1, [r7, #8]
 8003a22:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a24:	2300      	movs	r3, #0
 8003a26:	617b      	str	r3, [r7, #20]
 8003a28:	e009      	b.n	8003a3e <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	1c5a      	adds	r2, r3, #1
 8003a2e:	60ba      	str	r2, [r7, #8]
 8003a30:	781b      	ldrb	r3, [r3, #0]
 8003a32:	4618      	mov	r0, r3
 8003a34:	f7ff fe9c 	bl	8003770 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	3301      	adds	r3, #1
 8003a3c:	617b      	str	r3, [r7, #20]
 8003a3e:	697a      	ldr	r2, [r7, #20]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	429a      	cmp	r2, r3
 8003a44:	dbf1      	blt.n	8003a2a <_write+0x12>
	}
	return len;
 8003a46:	687b      	ldr	r3, [r7, #4]
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3718      	adds	r7, #24
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <_close>:

int _close(int file)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b083      	sub	sp, #12
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
	return -1;
 8003a58:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	370c      	adds	r7, #12
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr

08003a68 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b083      	sub	sp, #12
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
 8003a70:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003a78:	605a      	str	r2, [r3, #4]
	return 0;
 8003a7a:	2300      	movs	r3, #0
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	370c      	adds	r7, #12
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr

08003a88 <_isatty>:

int _isatty(int file)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b083      	sub	sp, #12
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
	return 1;
 8003a90:	2301      	movs	r3, #1
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	370c      	adds	r7, #12
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr

08003a9e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003a9e:	b480      	push	{r7}
 8003aa0:	b085      	sub	sp, #20
 8003aa2:	af00      	add	r7, sp, #0
 8003aa4:	60f8      	str	r0, [r7, #12]
 8003aa6:	60b9      	str	r1, [r7, #8]
 8003aa8:	607a      	str	r2, [r7, #4]
	return 0;
 8003aaa:	2300      	movs	r3, #0
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3714      	adds	r7, #20
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr

08003ab8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b084      	sub	sp, #16
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003ac0:	4b11      	ldr	r3, [pc, #68]	; (8003b08 <_sbrk+0x50>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d102      	bne.n	8003ace <_sbrk+0x16>
		heap_end = &end;
 8003ac8:	4b0f      	ldr	r3, [pc, #60]	; (8003b08 <_sbrk+0x50>)
 8003aca:	4a10      	ldr	r2, [pc, #64]	; (8003b0c <_sbrk+0x54>)
 8003acc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003ace:	4b0e      	ldr	r3, [pc, #56]	; (8003b08 <_sbrk+0x50>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003ad4:	4b0c      	ldr	r3, [pc, #48]	; (8003b08 <_sbrk+0x50>)
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	4413      	add	r3, r2
 8003adc:	466a      	mov	r2, sp
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d907      	bls.n	8003af2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003ae2:	f000 f875 	bl	8003bd0 <__errno>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	220c      	movs	r2, #12
 8003aea:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8003aec:	f04f 33ff 	mov.w	r3, #4294967295
 8003af0:	e006      	b.n	8003b00 <_sbrk+0x48>
	}

	heap_end += incr;
 8003af2:	4b05      	ldr	r3, [pc, #20]	; (8003b08 <_sbrk+0x50>)
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4413      	add	r3, r2
 8003afa:	4a03      	ldr	r2, [pc, #12]	; (8003b08 <_sbrk+0x50>)
 8003afc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003afe:	68fb      	ldr	r3, [r7, #12]
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	3710      	adds	r7, #16
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}
 8003b08:	2000008c 	.word	0x2000008c
 8003b0c:	20000530 	.word	0x20000530

08003b10 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003b10:	b480      	push	{r7}
 8003b12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003b14:	4b15      	ldr	r3, [pc, #84]	; (8003b6c <SystemInit+0x5c>)
 8003b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b1a:	4a14      	ldr	r2, [pc, #80]	; (8003b6c <SystemInit+0x5c>)
 8003b1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003b20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003b24:	4b12      	ldr	r3, [pc, #72]	; (8003b70 <SystemInit+0x60>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a11      	ldr	r2, [pc, #68]	; (8003b70 <SystemInit+0x60>)
 8003b2a:	f043 0301 	orr.w	r3, r3, #1
 8003b2e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003b30:	4b0f      	ldr	r3, [pc, #60]	; (8003b70 <SystemInit+0x60>)
 8003b32:	2200      	movs	r2, #0
 8003b34:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003b36:	4b0e      	ldr	r3, [pc, #56]	; (8003b70 <SystemInit+0x60>)
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	490d      	ldr	r1, [pc, #52]	; (8003b70 <SystemInit+0x60>)
 8003b3c:	4b0d      	ldr	r3, [pc, #52]	; (8003b74 <SystemInit+0x64>)
 8003b3e:	4013      	ands	r3, r2
 8003b40:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003b42:	4b0b      	ldr	r3, [pc, #44]	; (8003b70 <SystemInit+0x60>)
 8003b44:	4a0c      	ldr	r2, [pc, #48]	; (8003b78 <SystemInit+0x68>)
 8003b46:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003b48:	4b09      	ldr	r3, [pc, #36]	; (8003b70 <SystemInit+0x60>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a08      	ldr	r2, [pc, #32]	; (8003b70 <SystemInit+0x60>)
 8003b4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b52:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003b54:	4b06      	ldr	r3, [pc, #24]	; (8003b70 <SystemInit+0x60>)
 8003b56:	2200      	movs	r2, #0
 8003b58:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003b5a:	4b04      	ldr	r3, [pc, #16]	; (8003b6c <SystemInit+0x5c>)
 8003b5c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003b60:	609a      	str	r2, [r3, #8]
#endif
}
 8003b62:	bf00      	nop
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr
 8003b6c:	e000ed00 	.word	0xe000ed00
 8003b70:	40023800 	.word	0x40023800
 8003b74:	fef6ffff 	.word	0xfef6ffff
 8003b78:	24003010 	.word	0x24003010

08003b7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003b7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003bb4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003b80:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003b82:	e003      	b.n	8003b8c <LoopCopyDataInit>

08003b84 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003b84:	4b0c      	ldr	r3, [pc, #48]	; (8003bb8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003b86:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003b88:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003b8a:	3104      	adds	r1, #4

08003b8c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003b8c:	480b      	ldr	r0, [pc, #44]	; (8003bbc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003b8e:	4b0c      	ldr	r3, [pc, #48]	; (8003bc0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003b90:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003b92:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003b94:	d3f6      	bcc.n	8003b84 <CopyDataInit>
  ldr  r2, =_sbss
 8003b96:	4a0b      	ldr	r2, [pc, #44]	; (8003bc4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003b98:	e002      	b.n	8003ba0 <LoopFillZerobss>

08003b9a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003b9a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003b9c:	f842 3b04 	str.w	r3, [r2], #4

08003ba0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003ba0:	4b09      	ldr	r3, [pc, #36]	; (8003bc8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003ba2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003ba4:	d3f9      	bcc.n	8003b9a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003ba6:	f7ff ffb3 	bl	8003b10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003baa:	f000 f817 	bl	8003bdc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003bae:	f7ff fbdf 	bl	8003370 <main>
  bx  lr    
 8003bb2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003bb4:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8003bb8:	08004bd4 	.word	0x08004bd4
  ldr  r0, =_sdata
 8003bbc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003bc0:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8003bc4:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8003bc8:	20000530 	.word	0x20000530

08003bcc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003bcc:	e7fe      	b.n	8003bcc <ADC_IRQHandler>
	...

08003bd0 <__errno>:
 8003bd0:	4b01      	ldr	r3, [pc, #4]	; (8003bd8 <__errno+0x8>)
 8003bd2:	6818      	ldr	r0, [r3, #0]
 8003bd4:	4770      	bx	lr
 8003bd6:	bf00      	nop
 8003bd8:	2000000c 	.word	0x2000000c

08003bdc <__libc_init_array>:
 8003bdc:	b570      	push	{r4, r5, r6, lr}
 8003bde:	4d0d      	ldr	r5, [pc, #52]	; (8003c14 <__libc_init_array+0x38>)
 8003be0:	4c0d      	ldr	r4, [pc, #52]	; (8003c18 <__libc_init_array+0x3c>)
 8003be2:	1b64      	subs	r4, r4, r5
 8003be4:	10a4      	asrs	r4, r4, #2
 8003be6:	2600      	movs	r6, #0
 8003be8:	42a6      	cmp	r6, r4
 8003bea:	d109      	bne.n	8003c00 <__libc_init_array+0x24>
 8003bec:	4d0b      	ldr	r5, [pc, #44]	; (8003c1c <__libc_init_array+0x40>)
 8003bee:	4c0c      	ldr	r4, [pc, #48]	; (8003c20 <__libc_init_array+0x44>)
 8003bf0:	f000 ff76 	bl	8004ae0 <_init>
 8003bf4:	1b64      	subs	r4, r4, r5
 8003bf6:	10a4      	asrs	r4, r4, #2
 8003bf8:	2600      	movs	r6, #0
 8003bfa:	42a6      	cmp	r6, r4
 8003bfc:	d105      	bne.n	8003c0a <__libc_init_array+0x2e>
 8003bfe:	bd70      	pop	{r4, r5, r6, pc}
 8003c00:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c04:	4798      	blx	r3
 8003c06:	3601      	adds	r6, #1
 8003c08:	e7ee      	b.n	8003be8 <__libc_init_array+0xc>
 8003c0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c0e:	4798      	blx	r3
 8003c10:	3601      	adds	r6, #1
 8003c12:	e7f2      	b.n	8003bfa <__libc_init_array+0x1e>
 8003c14:	08004bcc 	.word	0x08004bcc
 8003c18:	08004bcc 	.word	0x08004bcc
 8003c1c:	08004bcc 	.word	0x08004bcc
 8003c20:	08004bd0 	.word	0x08004bd0

08003c24 <memset>:
 8003c24:	4402      	add	r2, r0
 8003c26:	4603      	mov	r3, r0
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d100      	bne.n	8003c2e <memset+0xa>
 8003c2c:	4770      	bx	lr
 8003c2e:	f803 1b01 	strb.w	r1, [r3], #1
 8003c32:	e7f9      	b.n	8003c28 <memset+0x4>

08003c34 <iprintf>:
 8003c34:	b40f      	push	{r0, r1, r2, r3}
 8003c36:	4b0a      	ldr	r3, [pc, #40]	; (8003c60 <iprintf+0x2c>)
 8003c38:	b513      	push	{r0, r1, r4, lr}
 8003c3a:	681c      	ldr	r4, [r3, #0]
 8003c3c:	b124      	cbz	r4, 8003c48 <iprintf+0x14>
 8003c3e:	69a3      	ldr	r3, [r4, #24]
 8003c40:	b913      	cbnz	r3, 8003c48 <iprintf+0x14>
 8003c42:	4620      	mov	r0, r4
 8003c44:	f000 f866 	bl	8003d14 <__sinit>
 8003c48:	ab05      	add	r3, sp, #20
 8003c4a:	9a04      	ldr	r2, [sp, #16]
 8003c4c:	68a1      	ldr	r1, [r4, #8]
 8003c4e:	9301      	str	r3, [sp, #4]
 8003c50:	4620      	mov	r0, r4
 8003c52:	f000 f983 	bl	8003f5c <_vfiprintf_r>
 8003c56:	b002      	add	sp, #8
 8003c58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c5c:	b004      	add	sp, #16
 8003c5e:	4770      	bx	lr
 8003c60:	2000000c 	.word	0x2000000c

08003c64 <std>:
 8003c64:	2300      	movs	r3, #0
 8003c66:	b510      	push	{r4, lr}
 8003c68:	4604      	mov	r4, r0
 8003c6a:	e9c0 3300 	strd	r3, r3, [r0]
 8003c6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003c72:	6083      	str	r3, [r0, #8]
 8003c74:	8181      	strh	r1, [r0, #12]
 8003c76:	6643      	str	r3, [r0, #100]	; 0x64
 8003c78:	81c2      	strh	r2, [r0, #14]
 8003c7a:	6183      	str	r3, [r0, #24]
 8003c7c:	4619      	mov	r1, r3
 8003c7e:	2208      	movs	r2, #8
 8003c80:	305c      	adds	r0, #92	; 0x5c
 8003c82:	f7ff ffcf 	bl	8003c24 <memset>
 8003c86:	4b05      	ldr	r3, [pc, #20]	; (8003c9c <std+0x38>)
 8003c88:	6263      	str	r3, [r4, #36]	; 0x24
 8003c8a:	4b05      	ldr	r3, [pc, #20]	; (8003ca0 <std+0x3c>)
 8003c8c:	62a3      	str	r3, [r4, #40]	; 0x28
 8003c8e:	4b05      	ldr	r3, [pc, #20]	; (8003ca4 <std+0x40>)
 8003c90:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003c92:	4b05      	ldr	r3, [pc, #20]	; (8003ca8 <std+0x44>)
 8003c94:	6224      	str	r4, [r4, #32]
 8003c96:	6323      	str	r3, [r4, #48]	; 0x30
 8003c98:	bd10      	pop	{r4, pc}
 8003c9a:	bf00      	nop
 8003c9c:	08004505 	.word	0x08004505
 8003ca0:	08004527 	.word	0x08004527
 8003ca4:	0800455f 	.word	0x0800455f
 8003ca8:	08004583 	.word	0x08004583

08003cac <_cleanup_r>:
 8003cac:	4901      	ldr	r1, [pc, #4]	; (8003cb4 <_cleanup_r+0x8>)
 8003cae:	f000 b8af 	b.w	8003e10 <_fwalk_reent>
 8003cb2:	bf00      	nop
 8003cb4:	0800485d 	.word	0x0800485d

08003cb8 <__sfmoreglue>:
 8003cb8:	b570      	push	{r4, r5, r6, lr}
 8003cba:	1e4a      	subs	r2, r1, #1
 8003cbc:	2568      	movs	r5, #104	; 0x68
 8003cbe:	4355      	muls	r5, r2
 8003cc0:	460e      	mov	r6, r1
 8003cc2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003cc6:	f000 f8c5 	bl	8003e54 <_malloc_r>
 8003cca:	4604      	mov	r4, r0
 8003ccc:	b140      	cbz	r0, 8003ce0 <__sfmoreglue+0x28>
 8003cce:	2100      	movs	r1, #0
 8003cd0:	e9c0 1600 	strd	r1, r6, [r0]
 8003cd4:	300c      	adds	r0, #12
 8003cd6:	60a0      	str	r0, [r4, #8]
 8003cd8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003cdc:	f7ff ffa2 	bl	8003c24 <memset>
 8003ce0:	4620      	mov	r0, r4
 8003ce2:	bd70      	pop	{r4, r5, r6, pc}

08003ce4 <__sfp_lock_acquire>:
 8003ce4:	4801      	ldr	r0, [pc, #4]	; (8003cec <__sfp_lock_acquire+0x8>)
 8003ce6:	f000 b8b3 	b.w	8003e50 <__retarget_lock_acquire_recursive>
 8003cea:	bf00      	nop
 8003cec:	20000528 	.word	0x20000528

08003cf0 <__sfp_lock_release>:
 8003cf0:	4801      	ldr	r0, [pc, #4]	; (8003cf8 <__sfp_lock_release+0x8>)
 8003cf2:	f000 b8ae 	b.w	8003e52 <__retarget_lock_release_recursive>
 8003cf6:	bf00      	nop
 8003cf8:	20000528 	.word	0x20000528

08003cfc <__sinit_lock_acquire>:
 8003cfc:	4801      	ldr	r0, [pc, #4]	; (8003d04 <__sinit_lock_acquire+0x8>)
 8003cfe:	f000 b8a7 	b.w	8003e50 <__retarget_lock_acquire_recursive>
 8003d02:	bf00      	nop
 8003d04:	20000523 	.word	0x20000523

08003d08 <__sinit_lock_release>:
 8003d08:	4801      	ldr	r0, [pc, #4]	; (8003d10 <__sinit_lock_release+0x8>)
 8003d0a:	f000 b8a2 	b.w	8003e52 <__retarget_lock_release_recursive>
 8003d0e:	bf00      	nop
 8003d10:	20000523 	.word	0x20000523

08003d14 <__sinit>:
 8003d14:	b510      	push	{r4, lr}
 8003d16:	4604      	mov	r4, r0
 8003d18:	f7ff fff0 	bl	8003cfc <__sinit_lock_acquire>
 8003d1c:	69a3      	ldr	r3, [r4, #24]
 8003d1e:	b11b      	cbz	r3, 8003d28 <__sinit+0x14>
 8003d20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d24:	f7ff bff0 	b.w	8003d08 <__sinit_lock_release>
 8003d28:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003d2c:	6523      	str	r3, [r4, #80]	; 0x50
 8003d2e:	4b13      	ldr	r3, [pc, #76]	; (8003d7c <__sinit+0x68>)
 8003d30:	4a13      	ldr	r2, [pc, #76]	; (8003d80 <__sinit+0x6c>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	62a2      	str	r2, [r4, #40]	; 0x28
 8003d36:	42a3      	cmp	r3, r4
 8003d38:	bf04      	itt	eq
 8003d3a:	2301      	moveq	r3, #1
 8003d3c:	61a3      	streq	r3, [r4, #24]
 8003d3e:	4620      	mov	r0, r4
 8003d40:	f000 f820 	bl	8003d84 <__sfp>
 8003d44:	6060      	str	r0, [r4, #4]
 8003d46:	4620      	mov	r0, r4
 8003d48:	f000 f81c 	bl	8003d84 <__sfp>
 8003d4c:	60a0      	str	r0, [r4, #8]
 8003d4e:	4620      	mov	r0, r4
 8003d50:	f000 f818 	bl	8003d84 <__sfp>
 8003d54:	2200      	movs	r2, #0
 8003d56:	60e0      	str	r0, [r4, #12]
 8003d58:	2104      	movs	r1, #4
 8003d5a:	6860      	ldr	r0, [r4, #4]
 8003d5c:	f7ff ff82 	bl	8003c64 <std>
 8003d60:	68a0      	ldr	r0, [r4, #8]
 8003d62:	2201      	movs	r2, #1
 8003d64:	2109      	movs	r1, #9
 8003d66:	f7ff ff7d 	bl	8003c64 <std>
 8003d6a:	68e0      	ldr	r0, [r4, #12]
 8003d6c:	2202      	movs	r2, #2
 8003d6e:	2112      	movs	r1, #18
 8003d70:	f7ff ff78 	bl	8003c64 <std>
 8003d74:	2301      	movs	r3, #1
 8003d76:	61a3      	str	r3, [r4, #24]
 8003d78:	e7d2      	b.n	8003d20 <__sinit+0xc>
 8003d7a:	bf00      	nop
 8003d7c:	08004b2c 	.word	0x08004b2c
 8003d80:	08003cad 	.word	0x08003cad

08003d84 <__sfp>:
 8003d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d86:	4607      	mov	r7, r0
 8003d88:	f7ff ffac 	bl	8003ce4 <__sfp_lock_acquire>
 8003d8c:	4b1e      	ldr	r3, [pc, #120]	; (8003e08 <__sfp+0x84>)
 8003d8e:	681e      	ldr	r6, [r3, #0]
 8003d90:	69b3      	ldr	r3, [r6, #24]
 8003d92:	b913      	cbnz	r3, 8003d9a <__sfp+0x16>
 8003d94:	4630      	mov	r0, r6
 8003d96:	f7ff ffbd 	bl	8003d14 <__sinit>
 8003d9a:	3648      	adds	r6, #72	; 0x48
 8003d9c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003da0:	3b01      	subs	r3, #1
 8003da2:	d503      	bpl.n	8003dac <__sfp+0x28>
 8003da4:	6833      	ldr	r3, [r6, #0]
 8003da6:	b30b      	cbz	r3, 8003dec <__sfp+0x68>
 8003da8:	6836      	ldr	r6, [r6, #0]
 8003daa:	e7f7      	b.n	8003d9c <__sfp+0x18>
 8003dac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003db0:	b9d5      	cbnz	r5, 8003de8 <__sfp+0x64>
 8003db2:	4b16      	ldr	r3, [pc, #88]	; (8003e0c <__sfp+0x88>)
 8003db4:	60e3      	str	r3, [r4, #12]
 8003db6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003dba:	6665      	str	r5, [r4, #100]	; 0x64
 8003dbc:	f000 f847 	bl	8003e4e <__retarget_lock_init_recursive>
 8003dc0:	f7ff ff96 	bl	8003cf0 <__sfp_lock_release>
 8003dc4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003dc8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003dcc:	6025      	str	r5, [r4, #0]
 8003dce:	61a5      	str	r5, [r4, #24]
 8003dd0:	2208      	movs	r2, #8
 8003dd2:	4629      	mov	r1, r5
 8003dd4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003dd8:	f7ff ff24 	bl	8003c24 <memset>
 8003ddc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003de0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003de4:	4620      	mov	r0, r4
 8003de6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003de8:	3468      	adds	r4, #104	; 0x68
 8003dea:	e7d9      	b.n	8003da0 <__sfp+0x1c>
 8003dec:	2104      	movs	r1, #4
 8003dee:	4638      	mov	r0, r7
 8003df0:	f7ff ff62 	bl	8003cb8 <__sfmoreglue>
 8003df4:	4604      	mov	r4, r0
 8003df6:	6030      	str	r0, [r6, #0]
 8003df8:	2800      	cmp	r0, #0
 8003dfa:	d1d5      	bne.n	8003da8 <__sfp+0x24>
 8003dfc:	f7ff ff78 	bl	8003cf0 <__sfp_lock_release>
 8003e00:	230c      	movs	r3, #12
 8003e02:	603b      	str	r3, [r7, #0]
 8003e04:	e7ee      	b.n	8003de4 <__sfp+0x60>
 8003e06:	bf00      	nop
 8003e08:	08004b2c 	.word	0x08004b2c
 8003e0c:	ffff0001 	.word	0xffff0001

08003e10 <_fwalk_reent>:
 8003e10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e14:	4606      	mov	r6, r0
 8003e16:	4688      	mov	r8, r1
 8003e18:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003e1c:	2700      	movs	r7, #0
 8003e1e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003e22:	f1b9 0901 	subs.w	r9, r9, #1
 8003e26:	d505      	bpl.n	8003e34 <_fwalk_reent+0x24>
 8003e28:	6824      	ldr	r4, [r4, #0]
 8003e2a:	2c00      	cmp	r4, #0
 8003e2c:	d1f7      	bne.n	8003e1e <_fwalk_reent+0xe>
 8003e2e:	4638      	mov	r0, r7
 8003e30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e34:	89ab      	ldrh	r3, [r5, #12]
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d907      	bls.n	8003e4a <_fwalk_reent+0x3a>
 8003e3a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003e3e:	3301      	adds	r3, #1
 8003e40:	d003      	beq.n	8003e4a <_fwalk_reent+0x3a>
 8003e42:	4629      	mov	r1, r5
 8003e44:	4630      	mov	r0, r6
 8003e46:	47c0      	blx	r8
 8003e48:	4307      	orrs	r7, r0
 8003e4a:	3568      	adds	r5, #104	; 0x68
 8003e4c:	e7e9      	b.n	8003e22 <_fwalk_reent+0x12>

08003e4e <__retarget_lock_init_recursive>:
 8003e4e:	4770      	bx	lr

08003e50 <__retarget_lock_acquire_recursive>:
 8003e50:	4770      	bx	lr

08003e52 <__retarget_lock_release_recursive>:
 8003e52:	4770      	bx	lr

08003e54 <_malloc_r>:
 8003e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e56:	1ccd      	adds	r5, r1, #3
 8003e58:	f025 0503 	bic.w	r5, r5, #3
 8003e5c:	3508      	adds	r5, #8
 8003e5e:	2d0c      	cmp	r5, #12
 8003e60:	bf38      	it	cc
 8003e62:	250c      	movcc	r5, #12
 8003e64:	2d00      	cmp	r5, #0
 8003e66:	4606      	mov	r6, r0
 8003e68:	db01      	blt.n	8003e6e <_malloc_r+0x1a>
 8003e6a:	42a9      	cmp	r1, r5
 8003e6c:	d903      	bls.n	8003e76 <_malloc_r+0x22>
 8003e6e:	230c      	movs	r3, #12
 8003e70:	6033      	str	r3, [r6, #0]
 8003e72:	2000      	movs	r0, #0
 8003e74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e76:	f000 fda3 	bl	80049c0 <__malloc_lock>
 8003e7a:	4921      	ldr	r1, [pc, #132]	; (8003f00 <_malloc_r+0xac>)
 8003e7c:	680a      	ldr	r2, [r1, #0]
 8003e7e:	4614      	mov	r4, r2
 8003e80:	b99c      	cbnz	r4, 8003eaa <_malloc_r+0x56>
 8003e82:	4f20      	ldr	r7, [pc, #128]	; (8003f04 <_malloc_r+0xb0>)
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	b923      	cbnz	r3, 8003e92 <_malloc_r+0x3e>
 8003e88:	4621      	mov	r1, r4
 8003e8a:	4630      	mov	r0, r6
 8003e8c:	f000 fb2a 	bl	80044e4 <_sbrk_r>
 8003e90:	6038      	str	r0, [r7, #0]
 8003e92:	4629      	mov	r1, r5
 8003e94:	4630      	mov	r0, r6
 8003e96:	f000 fb25 	bl	80044e4 <_sbrk_r>
 8003e9a:	1c43      	adds	r3, r0, #1
 8003e9c:	d123      	bne.n	8003ee6 <_malloc_r+0x92>
 8003e9e:	230c      	movs	r3, #12
 8003ea0:	6033      	str	r3, [r6, #0]
 8003ea2:	4630      	mov	r0, r6
 8003ea4:	f000 fd92 	bl	80049cc <__malloc_unlock>
 8003ea8:	e7e3      	b.n	8003e72 <_malloc_r+0x1e>
 8003eaa:	6823      	ldr	r3, [r4, #0]
 8003eac:	1b5b      	subs	r3, r3, r5
 8003eae:	d417      	bmi.n	8003ee0 <_malloc_r+0x8c>
 8003eb0:	2b0b      	cmp	r3, #11
 8003eb2:	d903      	bls.n	8003ebc <_malloc_r+0x68>
 8003eb4:	6023      	str	r3, [r4, #0]
 8003eb6:	441c      	add	r4, r3
 8003eb8:	6025      	str	r5, [r4, #0]
 8003eba:	e004      	b.n	8003ec6 <_malloc_r+0x72>
 8003ebc:	6863      	ldr	r3, [r4, #4]
 8003ebe:	42a2      	cmp	r2, r4
 8003ec0:	bf0c      	ite	eq
 8003ec2:	600b      	streq	r3, [r1, #0]
 8003ec4:	6053      	strne	r3, [r2, #4]
 8003ec6:	4630      	mov	r0, r6
 8003ec8:	f000 fd80 	bl	80049cc <__malloc_unlock>
 8003ecc:	f104 000b 	add.w	r0, r4, #11
 8003ed0:	1d23      	adds	r3, r4, #4
 8003ed2:	f020 0007 	bic.w	r0, r0, #7
 8003ed6:	1ac2      	subs	r2, r0, r3
 8003ed8:	d0cc      	beq.n	8003e74 <_malloc_r+0x20>
 8003eda:	1a1b      	subs	r3, r3, r0
 8003edc:	50a3      	str	r3, [r4, r2]
 8003ede:	e7c9      	b.n	8003e74 <_malloc_r+0x20>
 8003ee0:	4622      	mov	r2, r4
 8003ee2:	6864      	ldr	r4, [r4, #4]
 8003ee4:	e7cc      	b.n	8003e80 <_malloc_r+0x2c>
 8003ee6:	1cc4      	adds	r4, r0, #3
 8003ee8:	f024 0403 	bic.w	r4, r4, #3
 8003eec:	42a0      	cmp	r0, r4
 8003eee:	d0e3      	beq.n	8003eb8 <_malloc_r+0x64>
 8003ef0:	1a21      	subs	r1, r4, r0
 8003ef2:	4630      	mov	r0, r6
 8003ef4:	f000 faf6 	bl	80044e4 <_sbrk_r>
 8003ef8:	3001      	adds	r0, #1
 8003efa:	d1dd      	bne.n	8003eb8 <_malloc_r+0x64>
 8003efc:	e7cf      	b.n	8003e9e <_malloc_r+0x4a>
 8003efe:	bf00      	nop
 8003f00:	20000090 	.word	0x20000090
 8003f04:	20000094 	.word	0x20000094

08003f08 <__sfputc_r>:
 8003f08:	6893      	ldr	r3, [r2, #8]
 8003f0a:	3b01      	subs	r3, #1
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	b410      	push	{r4}
 8003f10:	6093      	str	r3, [r2, #8]
 8003f12:	da08      	bge.n	8003f26 <__sfputc_r+0x1e>
 8003f14:	6994      	ldr	r4, [r2, #24]
 8003f16:	42a3      	cmp	r3, r4
 8003f18:	db01      	blt.n	8003f1e <__sfputc_r+0x16>
 8003f1a:	290a      	cmp	r1, #10
 8003f1c:	d103      	bne.n	8003f26 <__sfputc_r+0x1e>
 8003f1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003f22:	f000 bb33 	b.w	800458c <__swbuf_r>
 8003f26:	6813      	ldr	r3, [r2, #0]
 8003f28:	1c58      	adds	r0, r3, #1
 8003f2a:	6010      	str	r0, [r2, #0]
 8003f2c:	7019      	strb	r1, [r3, #0]
 8003f2e:	4608      	mov	r0, r1
 8003f30:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003f34:	4770      	bx	lr

08003f36 <__sfputs_r>:
 8003f36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f38:	4606      	mov	r6, r0
 8003f3a:	460f      	mov	r7, r1
 8003f3c:	4614      	mov	r4, r2
 8003f3e:	18d5      	adds	r5, r2, r3
 8003f40:	42ac      	cmp	r4, r5
 8003f42:	d101      	bne.n	8003f48 <__sfputs_r+0x12>
 8003f44:	2000      	movs	r0, #0
 8003f46:	e007      	b.n	8003f58 <__sfputs_r+0x22>
 8003f48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f4c:	463a      	mov	r2, r7
 8003f4e:	4630      	mov	r0, r6
 8003f50:	f7ff ffda 	bl	8003f08 <__sfputc_r>
 8003f54:	1c43      	adds	r3, r0, #1
 8003f56:	d1f3      	bne.n	8003f40 <__sfputs_r+0xa>
 8003f58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003f5c <_vfiprintf_r>:
 8003f5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f60:	460d      	mov	r5, r1
 8003f62:	b09d      	sub	sp, #116	; 0x74
 8003f64:	4614      	mov	r4, r2
 8003f66:	4698      	mov	r8, r3
 8003f68:	4606      	mov	r6, r0
 8003f6a:	b118      	cbz	r0, 8003f74 <_vfiprintf_r+0x18>
 8003f6c:	6983      	ldr	r3, [r0, #24]
 8003f6e:	b90b      	cbnz	r3, 8003f74 <_vfiprintf_r+0x18>
 8003f70:	f7ff fed0 	bl	8003d14 <__sinit>
 8003f74:	4b89      	ldr	r3, [pc, #548]	; (800419c <_vfiprintf_r+0x240>)
 8003f76:	429d      	cmp	r5, r3
 8003f78:	d11b      	bne.n	8003fb2 <_vfiprintf_r+0x56>
 8003f7a:	6875      	ldr	r5, [r6, #4]
 8003f7c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003f7e:	07d9      	lsls	r1, r3, #31
 8003f80:	d405      	bmi.n	8003f8e <_vfiprintf_r+0x32>
 8003f82:	89ab      	ldrh	r3, [r5, #12]
 8003f84:	059a      	lsls	r2, r3, #22
 8003f86:	d402      	bmi.n	8003f8e <_vfiprintf_r+0x32>
 8003f88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003f8a:	f7ff ff61 	bl	8003e50 <__retarget_lock_acquire_recursive>
 8003f8e:	89ab      	ldrh	r3, [r5, #12]
 8003f90:	071b      	lsls	r3, r3, #28
 8003f92:	d501      	bpl.n	8003f98 <_vfiprintf_r+0x3c>
 8003f94:	692b      	ldr	r3, [r5, #16]
 8003f96:	b9eb      	cbnz	r3, 8003fd4 <_vfiprintf_r+0x78>
 8003f98:	4629      	mov	r1, r5
 8003f9a:	4630      	mov	r0, r6
 8003f9c:	f000 fb5a 	bl	8004654 <__swsetup_r>
 8003fa0:	b1c0      	cbz	r0, 8003fd4 <_vfiprintf_r+0x78>
 8003fa2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003fa4:	07dc      	lsls	r4, r3, #31
 8003fa6:	d50e      	bpl.n	8003fc6 <_vfiprintf_r+0x6a>
 8003fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8003fac:	b01d      	add	sp, #116	; 0x74
 8003fae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fb2:	4b7b      	ldr	r3, [pc, #492]	; (80041a0 <_vfiprintf_r+0x244>)
 8003fb4:	429d      	cmp	r5, r3
 8003fb6:	d101      	bne.n	8003fbc <_vfiprintf_r+0x60>
 8003fb8:	68b5      	ldr	r5, [r6, #8]
 8003fba:	e7df      	b.n	8003f7c <_vfiprintf_r+0x20>
 8003fbc:	4b79      	ldr	r3, [pc, #484]	; (80041a4 <_vfiprintf_r+0x248>)
 8003fbe:	429d      	cmp	r5, r3
 8003fc0:	bf08      	it	eq
 8003fc2:	68f5      	ldreq	r5, [r6, #12]
 8003fc4:	e7da      	b.n	8003f7c <_vfiprintf_r+0x20>
 8003fc6:	89ab      	ldrh	r3, [r5, #12]
 8003fc8:	0598      	lsls	r0, r3, #22
 8003fca:	d4ed      	bmi.n	8003fa8 <_vfiprintf_r+0x4c>
 8003fcc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003fce:	f7ff ff40 	bl	8003e52 <__retarget_lock_release_recursive>
 8003fd2:	e7e9      	b.n	8003fa8 <_vfiprintf_r+0x4c>
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	9309      	str	r3, [sp, #36]	; 0x24
 8003fd8:	2320      	movs	r3, #32
 8003fda:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003fde:	f8cd 800c 	str.w	r8, [sp, #12]
 8003fe2:	2330      	movs	r3, #48	; 0x30
 8003fe4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80041a8 <_vfiprintf_r+0x24c>
 8003fe8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003fec:	f04f 0901 	mov.w	r9, #1
 8003ff0:	4623      	mov	r3, r4
 8003ff2:	469a      	mov	sl, r3
 8003ff4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003ff8:	b10a      	cbz	r2, 8003ffe <_vfiprintf_r+0xa2>
 8003ffa:	2a25      	cmp	r2, #37	; 0x25
 8003ffc:	d1f9      	bne.n	8003ff2 <_vfiprintf_r+0x96>
 8003ffe:	ebba 0b04 	subs.w	fp, sl, r4
 8004002:	d00b      	beq.n	800401c <_vfiprintf_r+0xc0>
 8004004:	465b      	mov	r3, fp
 8004006:	4622      	mov	r2, r4
 8004008:	4629      	mov	r1, r5
 800400a:	4630      	mov	r0, r6
 800400c:	f7ff ff93 	bl	8003f36 <__sfputs_r>
 8004010:	3001      	adds	r0, #1
 8004012:	f000 80aa 	beq.w	800416a <_vfiprintf_r+0x20e>
 8004016:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004018:	445a      	add	r2, fp
 800401a:	9209      	str	r2, [sp, #36]	; 0x24
 800401c:	f89a 3000 	ldrb.w	r3, [sl]
 8004020:	2b00      	cmp	r3, #0
 8004022:	f000 80a2 	beq.w	800416a <_vfiprintf_r+0x20e>
 8004026:	2300      	movs	r3, #0
 8004028:	f04f 32ff 	mov.w	r2, #4294967295
 800402c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004030:	f10a 0a01 	add.w	sl, sl, #1
 8004034:	9304      	str	r3, [sp, #16]
 8004036:	9307      	str	r3, [sp, #28]
 8004038:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800403c:	931a      	str	r3, [sp, #104]	; 0x68
 800403e:	4654      	mov	r4, sl
 8004040:	2205      	movs	r2, #5
 8004042:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004046:	4858      	ldr	r0, [pc, #352]	; (80041a8 <_vfiprintf_r+0x24c>)
 8004048:	f7fc f8e2 	bl	8000210 <memchr>
 800404c:	9a04      	ldr	r2, [sp, #16]
 800404e:	b9d8      	cbnz	r0, 8004088 <_vfiprintf_r+0x12c>
 8004050:	06d1      	lsls	r1, r2, #27
 8004052:	bf44      	itt	mi
 8004054:	2320      	movmi	r3, #32
 8004056:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800405a:	0713      	lsls	r3, r2, #28
 800405c:	bf44      	itt	mi
 800405e:	232b      	movmi	r3, #43	; 0x2b
 8004060:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004064:	f89a 3000 	ldrb.w	r3, [sl]
 8004068:	2b2a      	cmp	r3, #42	; 0x2a
 800406a:	d015      	beq.n	8004098 <_vfiprintf_r+0x13c>
 800406c:	9a07      	ldr	r2, [sp, #28]
 800406e:	4654      	mov	r4, sl
 8004070:	2000      	movs	r0, #0
 8004072:	f04f 0c0a 	mov.w	ip, #10
 8004076:	4621      	mov	r1, r4
 8004078:	f811 3b01 	ldrb.w	r3, [r1], #1
 800407c:	3b30      	subs	r3, #48	; 0x30
 800407e:	2b09      	cmp	r3, #9
 8004080:	d94e      	bls.n	8004120 <_vfiprintf_r+0x1c4>
 8004082:	b1b0      	cbz	r0, 80040b2 <_vfiprintf_r+0x156>
 8004084:	9207      	str	r2, [sp, #28]
 8004086:	e014      	b.n	80040b2 <_vfiprintf_r+0x156>
 8004088:	eba0 0308 	sub.w	r3, r0, r8
 800408c:	fa09 f303 	lsl.w	r3, r9, r3
 8004090:	4313      	orrs	r3, r2
 8004092:	9304      	str	r3, [sp, #16]
 8004094:	46a2      	mov	sl, r4
 8004096:	e7d2      	b.n	800403e <_vfiprintf_r+0xe2>
 8004098:	9b03      	ldr	r3, [sp, #12]
 800409a:	1d19      	adds	r1, r3, #4
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	9103      	str	r1, [sp, #12]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	bfbb      	ittet	lt
 80040a4:	425b      	neglt	r3, r3
 80040a6:	f042 0202 	orrlt.w	r2, r2, #2
 80040aa:	9307      	strge	r3, [sp, #28]
 80040ac:	9307      	strlt	r3, [sp, #28]
 80040ae:	bfb8      	it	lt
 80040b0:	9204      	strlt	r2, [sp, #16]
 80040b2:	7823      	ldrb	r3, [r4, #0]
 80040b4:	2b2e      	cmp	r3, #46	; 0x2e
 80040b6:	d10c      	bne.n	80040d2 <_vfiprintf_r+0x176>
 80040b8:	7863      	ldrb	r3, [r4, #1]
 80040ba:	2b2a      	cmp	r3, #42	; 0x2a
 80040bc:	d135      	bne.n	800412a <_vfiprintf_r+0x1ce>
 80040be:	9b03      	ldr	r3, [sp, #12]
 80040c0:	1d1a      	adds	r2, r3, #4
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	9203      	str	r2, [sp, #12]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	bfb8      	it	lt
 80040ca:	f04f 33ff 	movlt.w	r3, #4294967295
 80040ce:	3402      	adds	r4, #2
 80040d0:	9305      	str	r3, [sp, #20]
 80040d2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80041b8 <_vfiprintf_r+0x25c>
 80040d6:	7821      	ldrb	r1, [r4, #0]
 80040d8:	2203      	movs	r2, #3
 80040da:	4650      	mov	r0, sl
 80040dc:	f7fc f898 	bl	8000210 <memchr>
 80040e0:	b140      	cbz	r0, 80040f4 <_vfiprintf_r+0x198>
 80040e2:	2340      	movs	r3, #64	; 0x40
 80040e4:	eba0 000a 	sub.w	r0, r0, sl
 80040e8:	fa03 f000 	lsl.w	r0, r3, r0
 80040ec:	9b04      	ldr	r3, [sp, #16]
 80040ee:	4303      	orrs	r3, r0
 80040f0:	3401      	adds	r4, #1
 80040f2:	9304      	str	r3, [sp, #16]
 80040f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040f8:	482c      	ldr	r0, [pc, #176]	; (80041ac <_vfiprintf_r+0x250>)
 80040fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80040fe:	2206      	movs	r2, #6
 8004100:	f7fc f886 	bl	8000210 <memchr>
 8004104:	2800      	cmp	r0, #0
 8004106:	d03f      	beq.n	8004188 <_vfiprintf_r+0x22c>
 8004108:	4b29      	ldr	r3, [pc, #164]	; (80041b0 <_vfiprintf_r+0x254>)
 800410a:	bb1b      	cbnz	r3, 8004154 <_vfiprintf_r+0x1f8>
 800410c:	9b03      	ldr	r3, [sp, #12]
 800410e:	3307      	adds	r3, #7
 8004110:	f023 0307 	bic.w	r3, r3, #7
 8004114:	3308      	adds	r3, #8
 8004116:	9303      	str	r3, [sp, #12]
 8004118:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800411a:	443b      	add	r3, r7
 800411c:	9309      	str	r3, [sp, #36]	; 0x24
 800411e:	e767      	b.n	8003ff0 <_vfiprintf_r+0x94>
 8004120:	fb0c 3202 	mla	r2, ip, r2, r3
 8004124:	460c      	mov	r4, r1
 8004126:	2001      	movs	r0, #1
 8004128:	e7a5      	b.n	8004076 <_vfiprintf_r+0x11a>
 800412a:	2300      	movs	r3, #0
 800412c:	3401      	adds	r4, #1
 800412e:	9305      	str	r3, [sp, #20]
 8004130:	4619      	mov	r1, r3
 8004132:	f04f 0c0a 	mov.w	ip, #10
 8004136:	4620      	mov	r0, r4
 8004138:	f810 2b01 	ldrb.w	r2, [r0], #1
 800413c:	3a30      	subs	r2, #48	; 0x30
 800413e:	2a09      	cmp	r2, #9
 8004140:	d903      	bls.n	800414a <_vfiprintf_r+0x1ee>
 8004142:	2b00      	cmp	r3, #0
 8004144:	d0c5      	beq.n	80040d2 <_vfiprintf_r+0x176>
 8004146:	9105      	str	r1, [sp, #20]
 8004148:	e7c3      	b.n	80040d2 <_vfiprintf_r+0x176>
 800414a:	fb0c 2101 	mla	r1, ip, r1, r2
 800414e:	4604      	mov	r4, r0
 8004150:	2301      	movs	r3, #1
 8004152:	e7f0      	b.n	8004136 <_vfiprintf_r+0x1da>
 8004154:	ab03      	add	r3, sp, #12
 8004156:	9300      	str	r3, [sp, #0]
 8004158:	462a      	mov	r2, r5
 800415a:	4b16      	ldr	r3, [pc, #88]	; (80041b4 <_vfiprintf_r+0x258>)
 800415c:	a904      	add	r1, sp, #16
 800415e:	4630      	mov	r0, r6
 8004160:	f3af 8000 	nop.w
 8004164:	4607      	mov	r7, r0
 8004166:	1c78      	adds	r0, r7, #1
 8004168:	d1d6      	bne.n	8004118 <_vfiprintf_r+0x1bc>
 800416a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800416c:	07d9      	lsls	r1, r3, #31
 800416e:	d405      	bmi.n	800417c <_vfiprintf_r+0x220>
 8004170:	89ab      	ldrh	r3, [r5, #12]
 8004172:	059a      	lsls	r2, r3, #22
 8004174:	d402      	bmi.n	800417c <_vfiprintf_r+0x220>
 8004176:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004178:	f7ff fe6b 	bl	8003e52 <__retarget_lock_release_recursive>
 800417c:	89ab      	ldrh	r3, [r5, #12]
 800417e:	065b      	lsls	r3, r3, #25
 8004180:	f53f af12 	bmi.w	8003fa8 <_vfiprintf_r+0x4c>
 8004184:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004186:	e711      	b.n	8003fac <_vfiprintf_r+0x50>
 8004188:	ab03      	add	r3, sp, #12
 800418a:	9300      	str	r3, [sp, #0]
 800418c:	462a      	mov	r2, r5
 800418e:	4b09      	ldr	r3, [pc, #36]	; (80041b4 <_vfiprintf_r+0x258>)
 8004190:	a904      	add	r1, sp, #16
 8004192:	4630      	mov	r0, r6
 8004194:	f000 f880 	bl	8004298 <_printf_i>
 8004198:	e7e4      	b.n	8004164 <_vfiprintf_r+0x208>
 800419a:	bf00      	nop
 800419c:	08004b50 	.word	0x08004b50
 80041a0:	08004b70 	.word	0x08004b70
 80041a4:	08004b30 	.word	0x08004b30
 80041a8:	08004b90 	.word	0x08004b90
 80041ac:	08004b9a 	.word	0x08004b9a
 80041b0:	00000000 	.word	0x00000000
 80041b4:	08003f37 	.word	0x08003f37
 80041b8:	08004b96 	.word	0x08004b96

080041bc <_printf_common>:
 80041bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041c0:	4616      	mov	r6, r2
 80041c2:	4699      	mov	r9, r3
 80041c4:	688a      	ldr	r2, [r1, #8]
 80041c6:	690b      	ldr	r3, [r1, #16]
 80041c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80041cc:	4293      	cmp	r3, r2
 80041ce:	bfb8      	it	lt
 80041d0:	4613      	movlt	r3, r2
 80041d2:	6033      	str	r3, [r6, #0]
 80041d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80041d8:	4607      	mov	r7, r0
 80041da:	460c      	mov	r4, r1
 80041dc:	b10a      	cbz	r2, 80041e2 <_printf_common+0x26>
 80041de:	3301      	adds	r3, #1
 80041e0:	6033      	str	r3, [r6, #0]
 80041e2:	6823      	ldr	r3, [r4, #0]
 80041e4:	0699      	lsls	r1, r3, #26
 80041e6:	bf42      	ittt	mi
 80041e8:	6833      	ldrmi	r3, [r6, #0]
 80041ea:	3302      	addmi	r3, #2
 80041ec:	6033      	strmi	r3, [r6, #0]
 80041ee:	6825      	ldr	r5, [r4, #0]
 80041f0:	f015 0506 	ands.w	r5, r5, #6
 80041f4:	d106      	bne.n	8004204 <_printf_common+0x48>
 80041f6:	f104 0a19 	add.w	sl, r4, #25
 80041fa:	68e3      	ldr	r3, [r4, #12]
 80041fc:	6832      	ldr	r2, [r6, #0]
 80041fe:	1a9b      	subs	r3, r3, r2
 8004200:	42ab      	cmp	r3, r5
 8004202:	dc26      	bgt.n	8004252 <_printf_common+0x96>
 8004204:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004208:	1e13      	subs	r3, r2, #0
 800420a:	6822      	ldr	r2, [r4, #0]
 800420c:	bf18      	it	ne
 800420e:	2301      	movne	r3, #1
 8004210:	0692      	lsls	r2, r2, #26
 8004212:	d42b      	bmi.n	800426c <_printf_common+0xb0>
 8004214:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004218:	4649      	mov	r1, r9
 800421a:	4638      	mov	r0, r7
 800421c:	47c0      	blx	r8
 800421e:	3001      	adds	r0, #1
 8004220:	d01e      	beq.n	8004260 <_printf_common+0xa4>
 8004222:	6823      	ldr	r3, [r4, #0]
 8004224:	68e5      	ldr	r5, [r4, #12]
 8004226:	6832      	ldr	r2, [r6, #0]
 8004228:	f003 0306 	and.w	r3, r3, #6
 800422c:	2b04      	cmp	r3, #4
 800422e:	bf08      	it	eq
 8004230:	1aad      	subeq	r5, r5, r2
 8004232:	68a3      	ldr	r3, [r4, #8]
 8004234:	6922      	ldr	r2, [r4, #16]
 8004236:	bf0c      	ite	eq
 8004238:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800423c:	2500      	movne	r5, #0
 800423e:	4293      	cmp	r3, r2
 8004240:	bfc4      	itt	gt
 8004242:	1a9b      	subgt	r3, r3, r2
 8004244:	18ed      	addgt	r5, r5, r3
 8004246:	2600      	movs	r6, #0
 8004248:	341a      	adds	r4, #26
 800424a:	42b5      	cmp	r5, r6
 800424c:	d11a      	bne.n	8004284 <_printf_common+0xc8>
 800424e:	2000      	movs	r0, #0
 8004250:	e008      	b.n	8004264 <_printf_common+0xa8>
 8004252:	2301      	movs	r3, #1
 8004254:	4652      	mov	r2, sl
 8004256:	4649      	mov	r1, r9
 8004258:	4638      	mov	r0, r7
 800425a:	47c0      	blx	r8
 800425c:	3001      	adds	r0, #1
 800425e:	d103      	bne.n	8004268 <_printf_common+0xac>
 8004260:	f04f 30ff 	mov.w	r0, #4294967295
 8004264:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004268:	3501      	adds	r5, #1
 800426a:	e7c6      	b.n	80041fa <_printf_common+0x3e>
 800426c:	18e1      	adds	r1, r4, r3
 800426e:	1c5a      	adds	r2, r3, #1
 8004270:	2030      	movs	r0, #48	; 0x30
 8004272:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004276:	4422      	add	r2, r4
 8004278:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800427c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004280:	3302      	adds	r3, #2
 8004282:	e7c7      	b.n	8004214 <_printf_common+0x58>
 8004284:	2301      	movs	r3, #1
 8004286:	4622      	mov	r2, r4
 8004288:	4649      	mov	r1, r9
 800428a:	4638      	mov	r0, r7
 800428c:	47c0      	blx	r8
 800428e:	3001      	adds	r0, #1
 8004290:	d0e6      	beq.n	8004260 <_printf_common+0xa4>
 8004292:	3601      	adds	r6, #1
 8004294:	e7d9      	b.n	800424a <_printf_common+0x8e>
	...

08004298 <_printf_i>:
 8004298:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800429c:	460c      	mov	r4, r1
 800429e:	4691      	mov	r9, r2
 80042a0:	7e27      	ldrb	r7, [r4, #24]
 80042a2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80042a4:	2f78      	cmp	r7, #120	; 0x78
 80042a6:	4680      	mov	r8, r0
 80042a8:	469a      	mov	sl, r3
 80042aa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80042ae:	d807      	bhi.n	80042c0 <_printf_i+0x28>
 80042b0:	2f62      	cmp	r7, #98	; 0x62
 80042b2:	d80a      	bhi.n	80042ca <_printf_i+0x32>
 80042b4:	2f00      	cmp	r7, #0
 80042b6:	f000 80d8 	beq.w	800446a <_printf_i+0x1d2>
 80042ba:	2f58      	cmp	r7, #88	; 0x58
 80042bc:	f000 80a3 	beq.w	8004406 <_printf_i+0x16e>
 80042c0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80042c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80042c8:	e03a      	b.n	8004340 <_printf_i+0xa8>
 80042ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80042ce:	2b15      	cmp	r3, #21
 80042d0:	d8f6      	bhi.n	80042c0 <_printf_i+0x28>
 80042d2:	a001      	add	r0, pc, #4	; (adr r0, 80042d8 <_printf_i+0x40>)
 80042d4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80042d8:	08004331 	.word	0x08004331
 80042dc:	08004345 	.word	0x08004345
 80042e0:	080042c1 	.word	0x080042c1
 80042e4:	080042c1 	.word	0x080042c1
 80042e8:	080042c1 	.word	0x080042c1
 80042ec:	080042c1 	.word	0x080042c1
 80042f0:	08004345 	.word	0x08004345
 80042f4:	080042c1 	.word	0x080042c1
 80042f8:	080042c1 	.word	0x080042c1
 80042fc:	080042c1 	.word	0x080042c1
 8004300:	080042c1 	.word	0x080042c1
 8004304:	08004451 	.word	0x08004451
 8004308:	08004375 	.word	0x08004375
 800430c:	08004433 	.word	0x08004433
 8004310:	080042c1 	.word	0x080042c1
 8004314:	080042c1 	.word	0x080042c1
 8004318:	08004473 	.word	0x08004473
 800431c:	080042c1 	.word	0x080042c1
 8004320:	08004375 	.word	0x08004375
 8004324:	080042c1 	.word	0x080042c1
 8004328:	080042c1 	.word	0x080042c1
 800432c:	0800443b 	.word	0x0800443b
 8004330:	680b      	ldr	r3, [r1, #0]
 8004332:	1d1a      	adds	r2, r3, #4
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	600a      	str	r2, [r1, #0]
 8004338:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800433c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004340:	2301      	movs	r3, #1
 8004342:	e0a3      	b.n	800448c <_printf_i+0x1f4>
 8004344:	6825      	ldr	r5, [r4, #0]
 8004346:	6808      	ldr	r0, [r1, #0]
 8004348:	062e      	lsls	r6, r5, #24
 800434a:	f100 0304 	add.w	r3, r0, #4
 800434e:	d50a      	bpl.n	8004366 <_printf_i+0xce>
 8004350:	6805      	ldr	r5, [r0, #0]
 8004352:	600b      	str	r3, [r1, #0]
 8004354:	2d00      	cmp	r5, #0
 8004356:	da03      	bge.n	8004360 <_printf_i+0xc8>
 8004358:	232d      	movs	r3, #45	; 0x2d
 800435a:	426d      	negs	r5, r5
 800435c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004360:	485e      	ldr	r0, [pc, #376]	; (80044dc <_printf_i+0x244>)
 8004362:	230a      	movs	r3, #10
 8004364:	e019      	b.n	800439a <_printf_i+0x102>
 8004366:	f015 0f40 	tst.w	r5, #64	; 0x40
 800436a:	6805      	ldr	r5, [r0, #0]
 800436c:	600b      	str	r3, [r1, #0]
 800436e:	bf18      	it	ne
 8004370:	b22d      	sxthne	r5, r5
 8004372:	e7ef      	b.n	8004354 <_printf_i+0xbc>
 8004374:	680b      	ldr	r3, [r1, #0]
 8004376:	6825      	ldr	r5, [r4, #0]
 8004378:	1d18      	adds	r0, r3, #4
 800437a:	6008      	str	r0, [r1, #0]
 800437c:	0628      	lsls	r0, r5, #24
 800437e:	d501      	bpl.n	8004384 <_printf_i+0xec>
 8004380:	681d      	ldr	r5, [r3, #0]
 8004382:	e002      	b.n	800438a <_printf_i+0xf2>
 8004384:	0669      	lsls	r1, r5, #25
 8004386:	d5fb      	bpl.n	8004380 <_printf_i+0xe8>
 8004388:	881d      	ldrh	r5, [r3, #0]
 800438a:	4854      	ldr	r0, [pc, #336]	; (80044dc <_printf_i+0x244>)
 800438c:	2f6f      	cmp	r7, #111	; 0x6f
 800438e:	bf0c      	ite	eq
 8004390:	2308      	moveq	r3, #8
 8004392:	230a      	movne	r3, #10
 8004394:	2100      	movs	r1, #0
 8004396:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800439a:	6866      	ldr	r6, [r4, #4]
 800439c:	60a6      	str	r6, [r4, #8]
 800439e:	2e00      	cmp	r6, #0
 80043a0:	bfa2      	ittt	ge
 80043a2:	6821      	ldrge	r1, [r4, #0]
 80043a4:	f021 0104 	bicge.w	r1, r1, #4
 80043a8:	6021      	strge	r1, [r4, #0]
 80043aa:	b90d      	cbnz	r5, 80043b0 <_printf_i+0x118>
 80043ac:	2e00      	cmp	r6, #0
 80043ae:	d04d      	beq.n	800444c <_printf_i+0x1b4>
 80043b0:	4616      	mov	r6, r2
 80043b2:	fbb5 f1f3 	udiv	r1, r5, r3
 80043b6:	fb03 5711 	mls	r7, r3, r1, r5
 80043ba:	5dc7      	ldrb	r7, [r0, r7]
 80043bc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80043c0:	462f      	mov	r7, r5
 80043c2:	42bb      	cmp	r3, r7
 80043c4:	460d      	mov	r5, r1
 80043c6:	d9f4      	bls.n	80043b2 <_printf_i+0x11a>
 80043c8:	2b08      	cmp	r3, #8
 80043ca:	d10b      	bne.n	80043e4 <_printf_i+0x14c>
 80043cc:	6823      	ldr	r3, [r4, #0]
 80043ce:	07df      	lsls	r7, r3, #31
 80043d0:	d508      	bpl.n	80043e4 <_printf_i+0x14c>
 80043d2:	6923      	ldr	r3, [r4, #16]
 80043d4:	6861      	ldr	r1, [r4, #4]
 80043d6:	4299      	cmp	r1, r3
 80043d8:	bfde      	ittt	le
 80043da:	2330      	movle	r3, #48	; 0x30
 80043dc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80043e0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80043e4:	1b92      	subs	r2, r2, r6
 80043e6:	6122      	str	r2, [r4, #16]
 80043e8:	f8cd a000 	str.w	sl, [sp]
 80043ec:	464b      	mov	r3, r9
 80043ee:	aa03      	add	r2, sp, #12
 80043f0:	4621      	mov	r1, r4
 80043f2:	4640      	mov	r0, r8
 80043f4:	f7ff fee2 	bl	80041bc <_printf_common>
 80043f8:	3001      	adds	r0, #1
 80043fa:	d14c      	bne.n	8004496 <_printf_i+0x1fe>
 80043fc:	f04f 30ff 	mov.w	r0, #4294967295
 8004400:	b004      	add	sp, #16
 8004402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004406:	4835      	ldr	r0, [pc, #212]	; (80044dc <_printf_i+0x244>)
 8004408:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800440c:	6823      	ldr	r3, [r4, #0]
 800440e:	680e      	ldr	r6, [r1, #0]
 8004410:	061f      	lsls	r7, r3, #24
 8004412:	f856 5b04 	ldr.w	r5, [r6], #4
 8004416:	600e      	str	r6, [r1, #0]
 8004418:	d514      	bpl.n	8004444 <_printf_i+0x1ac>
 800441a:	07d9      	lsls	r1, r3, #31
 800441c:	bf44      	itt	mi
 800441e:	f043 0320 	orrmi.w	r3, r3, #32
 8004422:	6023      	strmi	r3, [r4, #0]
 8004424:	b91d      	cbnz	r5, 800442e <_printf_i+0x196>
 8004426:	6823      	ldr	r3, [r4, #0]
 8004428:	f023 0320 	bic.w	r3, r3, #32
 800442c:	6023      	str	r3, [r4, #0]
 800442e:	2310      	movs	r3, #16
 8004430:	e7b0      	b.n	8004394 <_printf_i+0xfc>
 8004432:	6823      	ldr	r3, [r4, #0]
 8004434:	f043 0320 	orr.w	r3, r3, #32
 8004438:	6023      	str	r3, [r4, #0]
 800443a:	2378      	movs	r3, #120	; 0x78
 800443c:	4828      	ldr	r0, [pc, #160]	; (80044e0 <_printf_i+0x248>)
 800443e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004442:	e7e3      	b.n	800440c <_printf_i+0x174>
 8004444:	065e      	lsls	r6, r3, #25
 8004446:	bf48      	it	mi
 8004448:	b2ad      	uxthmi	r5, r5
 800444a:	e7e6      	b.n	800441a <_printf_i+0x182>
 800444c:	4616      	mov	r6, r2
 800444e:	e7bb      	b.n	80043c8 <_printf_i+0x130>
 8004450:	680b      	ldr	r3, [r1, #0]
 8004452:	6826      	ldr	r6, [r4, #0]
 8004454:	6960      	ldr	r0, [r4, #20]
 8004456:	1d1d      	adds	r5, r3, #4
 8004458:	600d      	str	r5, [r1, #0]
 800445a:	0635      	lsls	r5, r6, #24
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	d501      	bpl.n	8004464 <_printf_i+0x1cc>
 8004460:	6018      	str	r0, [r3, #0]
 8004462:	e002      	b.n	800446a <_printf_i+0x1d2>
 8004464:	0671      	lsls	r1, r6, #25
 8004466:	d5fb      	bpl.n	8004460 <_printf_i+0x1c8>
 8004468:	8018      	strh	r0, [r3, #0]
 800446a:	2300      	movs	r3, #0
 800446c:	6123      	str	r3, [r4, #16]
 800446e:	4616      	mov	r6, r2
 8004470:	e7ba      	b.n	80043e8 <_printf_i+0x150>
 8004472:	680b      	ldr	r3, [r1, #0]
 8004474:	1d1a      	adds	r2, r3, #4
 8004476:	600a      	str	r2, [r1, #0]
 8004478:	681e      	ldr	r6, [r3, #0]
 800447a:	6862      	ldr	r2, [r4, #4]
 800447c:	2100      	movs	r1, #0
 800447e:	4630      	mov	r0, r6
 8004480:	f7fb fec6 	bl	8000210 <memchr>
 8004484:	b108      	cbz	r0, 800448a <_printf_i+0x1f2>
 8004486:	1b80      	subs	r0, r0, r6
 8004488:	6060      	str	r0, [r4, #4]
 800448a:	6863      	ldr	r3, [r4, #4]
 800448c:	6123      	str	r3, [r4, #16]
 800448e:	2300      	movs	r3, #0
 8004490:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004494:	e7a8      	b.n	80043e8 <_printf_i+0x150>
 8004496:	6923      	ldr	r3, [r4, #16]
 8004498:	4632      	mov	r2, r6
 800449a:	4649      	mov	r1, r9
 800449c:	4640      	mov	r0, r8
 800449e:	47d0      	blx	sl
 80044a0:	3001      	adds	r0, #1
 80044a2:	d0ab      	beq.n	80043fc <_printf_i+0x164>
 80044a4:	6823      	ldr	r3, [r4, #0]
 80044a6:	079b      	lsls	r3, r3, #30
 80044a8:	d413      	bmi.n	80044d2 <_printf_i+0x23a>
 80044aa:	68e0      	ldr	r0, [r4, #12]
 80044ac:	9b03      	ldr	r3, [sp, #12]
 80044ae:	4298      	cmp	r0, r3
 80044b0:	bfb8      	it	lt
 80044b2:	4618      	movlt	r0, r3
 80044b4:	e7a4      	b.n	8004400 <_printf_i+0x168>
 80044b6:	2301      	movs	r3, #1
 80044b8:	4632      	mov	r2, r6
 80044ba:	4649      	mov	r1, r9
 80044bc:	4640      	mov	r0, r8
 80044be:	47d0      	blx	sl
 80044c0:	3001      	adds	r0, #1
 80044c2:	d09b      	beq.n	80043fc <_printf_i+0x164>
 80044c4:	3501      	adds	r5, #1
 80044c6:	68e3      	ldr	r3, [r4, #12]
 80044c8:	9903      	ldr	r1, [sp, #12]
 80044ca:	1a5b      	subs	r3, r3, r1
 80044cc:	42ab      	cmp	r3, r5
 80044ce:	dcf2      	bgt.n	80044b6 <_printf_i+0x21e>
 80044d0:	e7eb      	b.n	80044aa <_printf_i+0x212>
 80044d2:	2500      	movs	r5, #0
 80044d4:	f104 0619 	add.w	r6, r4, #25
 80044d8:	e7f5      	b.n	80044c6 <_printf_i+0x22e>
 80044da:	bf00      	nop
 80044dc:	08004ba1 	.word	0x08004ba1
 80044e0:	08004bb2 	.word	0x08004bb2

080044e4 <_sbrk_r>:
 80044e4:	b538      	push	{r3, r4, r5, lr}
 80044e6:	4d06      	ldr	r5, [pc, #24]	; (8004500 <_sbrk_r+0x1c>)
 80044e8:	2300      	movs	r3, #0
 80044ea:	4604      	mov	r4, r0
 80044ec:	4608      	mov	r0, r1
 80044ee:	602b      	str	r3, [r5, #0]
 80044f0:	f7ff fae2 	bl	8003ab8 <_sbrk>
 80044f4:	1c43      	adds	r3, r0, #1
 80044f6:	d102      	bne.n	80044fe <_sbrk_r+0x1a>
 80044f8:	682b      	ldr	r3, [r5, #0]
 80044fa:	b103      	cbz	r3, 80044fe <_sbrk_r+0x1a>
 80044fc:	6023      	str	r3, [r4, #0]
 80044fe:	bd38      	pop	{r3, r4, r5, pc}
 8004500:	2000052c 	.word	0x2000052c

08004504 <__sread>:
 8004504:	b510      	push	{r4, lr}
 8004506:	460c      	mov	r4, r1
 8004508:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800450c:	f000 fab4 	bl	8004a78 <_read_r>
 8004510:	2800      	cmp	r0, #0
 8004512:	bfab      	itete	ge
 8004514:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004516:	89a3      	ldrhlt	r3, [r4, #12]
 8004518:	181b      	addge	r3, r3, r0
 800451a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800451e:	bfac      	ite	ge
 8004520:	6563      	strge	r3, [r4, #84]	; 0x54
 8004522:	81a3      	strhlt	r3, [r4, #12]
 8004524:	bd10      	pop	{r4, pc}

08004526 <__swrite>:
 8004526:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800452a:	461f      	mov	r7, r3
 800452c:	898b      	ldrh	r3, [r1, #12]
 800452e:	05db      	lsls	r3, r3, #23
 8004530:	4605      	mov	r5, r0
 8004532:	460c      	mov	r4, r1
 8004534:	4616      	mov	r6, r2
 8004536:	d505      	bpl.n	8004544 <__swrite+0x1e>
 8004538:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800453c:	2302      	movs	r3, #2
 800453e:	2200      	movs	r2, #0
 8004540:	f000 f9c8 	bl	80048d4 <_lseek_r>
 8004544:	89a3      	ldrh	r3, [r4, #12]
 8004546:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800454a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800454e:	81a3      	strh	r3, [r4, #12]
 8004550:	4632      	mov	r2, r6
 8004552:	463b      	mov	r3, r7
 8004554:	4628      	mov	r0, r5
 8004556:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800455a:	f000 b869 	b.w	8004630 <_write_r>

0800455e <__sseek>:
 800455e:	b510      	push	{r4, lr}
 8004560:	460c      	mov	r4, r1
 8004562:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004566:	f000 f9b5 	bl	80048d4 <_lseek_r>
 800456a:	1c43      	adds	r3, r0, #1
 800456c:	89a3      	ldrh	r3, [r4, #12]
 800456e:	bf15      	itete	ne
 8004570:	6560      	strne	r0, [r4, #84]	; 0x54
 8004572:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004576:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800457a:	81a3      	strheq	r3, [r4, #12]
 800457c:	bf18      	it	ne
 800457e:	81a3      	strhne	r3, [r4, #12]
 8004580:	bd10      	pop	{r4, pc}

08004582 <__sclose>:
 8004582:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004586:	f000 b8d3 	b.w	8004730 <_close_r>
	...

0800458c <__swbuf_r>:
 800458c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800458e:	460e      	mov	r6, r1
 8004590:	4614      	mov	r4, r2
 8004592:	4605      	mov	r5, r0
 8004594:	b118      	cbz	r0, 800459e <__swbuf_r+0x12>
 8004596:	6983      	ldr	r3, [r0, #24]
 8004598:	b90b      	cbnz	r3, 800459e <__swbuf_r+0x12>
 800459a:	f7ff fbbb 	bl	8003d14 <__sinit>
 800459e:	4b21      	ldr	r3, [pc, #132]	; (8004624 <__swbuf_r+0x98>)
 80045a0:	429c      	cmp	r4, r3
 80045a2:	d12b      	bne.n	80045fc <__swbuf_r+0x70>
 80045a4:	686c      	ldr	r4, [r5, #4]
 80045a6:	69a3      	ldr	r3, [r4, #24]
 80045a8:	60a3      	str	r3, [r4, #8]
 80045aa:	89a3      	ldrh	r3, [r4, #12]
 80045ac:	071a      	lsls	r2, r3, #28
 80045ae:	d52f      	bpl.n	8004610 <__swbuf_r+0x84>
 80045b0:	6923      	ldr	r3, [r4, #16]
 80045b2:	b36b      	cbz	r3, 8004610 <__swbuf_r+0x84>
 80045b4:	6923      	ldr	r3, [r4, #16]
 80045b6:	6820      	ldr	r0, [r4, #0]
 80045b8:	1ac0      	subs	r0, r0, r3
 80045ba:	6963      	ldr	r3, [r4, #20]
 80045bc:	b2f6      	uxtb	r6, r6
 80045be:	4283      	cmp	r3, r0
 80045c0:	4637      	mov	r7, r6
 80045c2:	dc04      	bgt.n	80045ce <__swbuf_r+0x42>
 80045c4:	4621      	mov	r1, r4
 80045c6:	4628      	mov	r0, r5
 80045c8:	f000 f948 	bl	800485c <_fflush_r>
 80045cc:	bb30      	cbnz	r0, 800461c <__swbuf_r+0x90>
 80045ce:	68a3      	ldr	r3, [r4, #8]
 80045d0:	3b01      	subs	r3, #1
 80045d2:	60a3      	str	r3, [r4, #8]
 80045d4:	6823      	ldr	r3, [r4, #0]
 80045d6:	1c5a      	adds	r2, r3, #1
 80045d8:	6022      	str	r2, [r4, #0]
 80045da:	701e      	strb	r6, [r3, #0]
 80045dc:	6963      	ldr	r3, [r4, #20]
 80045de:	3001      	adds	r0, #1
 80045e0:	4283      	cmp	r3, r0
 80045e2:	d004      	beq.n	80045ee <__swbuf_r+0x62>
 80045e4:	89a3      	ldrh	r3, [r4, #12]
 80045e6:	07db      	lsls	r3, r3, #31
 80045e8:	d506      	bpl.n	80045f8 <__swbuf_r+0x6c>
 80045ea:	2e0a      	cmp	r6, #10
 80045ec:	d104      	bne.n	80045f8 <__swbuf_r+0x6c>
 80045ee:	4621      	mov	r1, r4
 80045f0:	4628      	mov	r0, r5
 80045f2:	f000 f933 	bl	800485c <_fflush_r>
 80045f6:	b988      	cbnz	r0, 800461c <__swbuf_r+0x90>
 80045f8:	4638      	mov	r0, r7
 80045fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80045fc:	4b0a      	ldr	r3, [pc, #40]	; (8004628 <__swbuf_r+0x9c>)
 80045fe:	429c      	cmp	r4, r3
 8004600:	d101      	bne.n	8004606 <__swbuf_r+0x7a>
 8004602:	68ac      	ldr	r4, [r5, #8]
 8004604:	e7cf      	b.n	80045a6 <__swbuf_r+0x1a>
 8004606:	4b09      	ldr	r3, [pc, #36]	; (800462c <__swbuf_r+0xa0>)
 8004608:	429c      	cmp	r4, r3
 800460a:	bf08      	it	eq
 800460c:	68ec      	ldreq	r4, [r5, #12]
 800460e:	e7ca      	b.n	80045a6 <__swbuf_r+0x1a>
 8004610:	4621      	mov	r1, r4
 8004612:	4628      	mov	r0, r5
 8004614:	f000 f81e 	bl	8004654 <__swsetup_r>
 8004618:	2800      	cmp	r0, #0
 800461a:	d0cb      	beq.n	80045b4 <__swbuf_r+0x28>
 800461c:	f04f 37ff 	mov.w	r7, #4294967295
 8004620:	e7ea      	b.n	80045f8 <__swbuf_r+0x6c>
 8004622:	bf00      	nop
 8004624:	08004b50 	.word	0x08004b50
 8004628:	08004b70 	.word	0x08004b70
 800462c:	08004b30 	.word	0x08004b30

08004630 <_write_r>:
 8004630:	b538      	push	{r3, r4, r5, lr}
 8004632:	4d07      	ldr	r5, [pc, #28]	; (8004650 <_write_r+0x20>)
 8004634:	4604      	mov	r4, r0
 8004636:	4608      	mov	r0, r1
 8004638:	4611      	mov	r1, r2
 800463a:	2200      	movs	r2, #0
 800463c:	602a      	str	r2, [r5, #0]
 800463e:	461a      	mov	r2, r3
 8004640:	f7ff f9ea 	bl	8003a18 <_write>
 8004644:	1c43      	adds	r3, r0, #1
 8004646:	d102      	bne.n	800464e <_write_r+0x1e>
 8004648:	682b      	ldr	r3, [r5, #0]
 800464a:	b103      	cbz	r3, 800464e <_write_r+0x1e>
 800464c:	6023      	str	r3, [r4, #0]
 800464e:	bd38      	pop	{r3, r4, r5, pc}
 8004650:	2000052c 	.word	0x2000052c

08004654 <__swsetup_r>:
 8004654:	4b32      	ldr	r3, [pc, #200]	; (8004720 <__swsetup_r+0xcc>)
 8004656:	b570      	push	{r4, r5, r6, lr}
 8004658:	681d      	ldr	r5, [r3, #0]
 800465a:	4606      	mov	r6, r0
 800465c:	460c      	mov	r4, r1
 800465e:	b125      	cbz	r5, 800466a <__swsetup_r+0x16>
 8004660:	69ab      	ldr	r3, [r5, #24]
 8004662:	b913      	cbnz	r3, 800466a <__swsetup_r+0x16>
 8004664:	4628      	mov	r0, r5
 8004666:	f7ff fb55 	bl	8003d14 <__sinit>
 800466a:	4b2e      	ldr	r3, [pc, #184]	; (8004724 <__swsetup_r+0xd0>)
 800466c:	429c      	cmp	r4, r3
 800466e:	d10f      	bne.n	8004690 <__swsetup_r+0x3c>
 8004670:	686c      	ldr	r4, [r5, #4]
 8004672:	89a3      	ldrh	r3, [r4, #12]
 8004674:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004678:	0719      	lsls	r1, r3, #28
 800467a:	d42c      	bmi.n	80046d6 <__swsetup_r+0x82>
 800467c:	06dd      	lsls	r5, r3, #27
 800467e:	d411      	bmi.n	80046a4 <__swsetup_r+0x50>
 8004680:	2309      	movs	r3, #9
 8004682:	6033      	str	r3, [r6, #0]
 8004684:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004688:	81a3      	strh	r3, [r4, #12]
 800468a:	f04f 30ff 	mov.w	r0, #4294967295
 800468e:	e03e      	b.n	800470e <__swsetup_r+0xba>
 8004690:	4b25      	ldr	r3, [pc, #148]	; (8004728 <__swsetup_r+0xd4>)
 8004692:	429c      	cmp	r4, r3
 8004694:	d101      	bne.n	800469a <__swsetup_r+0x46>
 8004696:	68ac      	ldr	r4, [r5, #8]
 8004698:	e7eb      	b.n	8004672 <__swsetup_r+0x1e>
 800469a:	4b24      	ldr	r3, [pc, #144]	; (800472c <__swsetup_r+0xd8>)
 800469c:	429c      	cmp	r4, r3
 800469e:	bf08      	it	eq
 80046a0:	68ec      	ldreq	r4, [r5, #12]
 80046a2:	e7e6      	b.n	8004672 <__swsetup_r+0x1e>
 80046a4:	0758      	lsls	r0, r3, #29
 80046a6:	d512      	bpl.n	80046ce <__swsetup_r+0x7a>
 80046a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80046aa:	b141      	cbz	r1, 80046be <__swsetup_r+0x6a>
 80046ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80046b0:	4299      	cmp	r1, r3
 80046b2:	d002      	beq.n	80046ba <__swsetup_r+0x66>
 80046b4:	4630      	mov	r0, r6
 80046b6:	f000 f98f 	bl	80049d8 <_free_r>
 80046ba:	2300      	movs	r3, #0
 80046bc:	6363      	str	r3, [r4, #52]	; 0x34
 80046be:	89a3      	ldrh	r3, [r4, #12]
 80046c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80046c4:	81a3      	strh	r3, [r4, #12]
 80046c6:	2300      	movs	r3, #0
 80046c8:	6063      	str	r3, [r4, #4]
 80046ca:	6923      	ldr	r3, [r4, #16]
 80046cc:	6023      	str	r3, [r4, #0]
 80046ce:	89a3      	ldrh	r3, [r4, #12]
 80046d0:	f043 0308 	orr.w	r3, r3, #8
 80046d4:	81a3      	strh	r3, [r4, #12]
 80046d6:	6923      	ldr	r3, [r4, #16]
 80046d8:	b94b      	cbnz	r3, 80046ee <__swsetup_r+0x9a>
 80046da:	89a3      	ldrh	r3, [r4, #12]
 80046dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80046e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046e4:	d003      	beq.n	80046ee <__swsetup_r+0x9a>
 80046e6:	4621      	mov	r1, r4
 80046e8:	4630      	mov	r0, r6
 80046ea:	f000 f929 	bl	8004940 <__smakebuf_r>
 80046ee:	89a0      	ldrh	r0, [r4, #12]
 80046f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80046f4:	f010 0301 	ands.w	r3, r0, #1
 80046f8:	d00a      	beq.n	8004710 <__swsetup_r+0xbc>
 80046fa:	2300      	movs	r3, #0
 80046fc:	60a3      	str	r3, [r4, #8]
 80046fe:	6963      	ldr	r3, [r4, #20]
 8004700:	425b      	negs	r3, r3
 8004702:	61a3      	str	r3, [r4, #24]
 8004704:	6923      	ldr	r3, [r4, #16]
 8004706:	b943      	cbnz	r3, 800471a <__swsetup_r+0xc6>
 8004708:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800470c:	d1ba      	bne.n	8004684 <__swsetup_r+0x30>
 800470e:	bd70      	pop	{r4, r5, r6, pc}
 8004710:	0781      	lsls	r1, r0, #30
 8004712:	bf58      	it	pl
 8004714:	6963      	ldrpl	r3, [r4, #20]
 8004716:	60a3      	str	r3, [r4, #8]
 8004718:	e7f4      	b.n	8004704 <__swsetup_r+0xb0>
 800471a:	2000      	movs	r0, #0
 800471c:	e7f7      	b.n	800470e <__swsetup_r+0xba>
 800471e:	bf00      	nop
 8004720:	2000000c 	.word	0x2000000c
 8004724:	08004b50 	.word	0x08004b50
 8004728:	08004b70 	.word	0x08004b70
 800472c:	08004b30 	.word	0x08004b30

08004730 <_close_r>:
 8004730:	b538      	push	{r3, r4, r5, lr}
 8004732:	4d06      	ldr	r5, [pc, #24]	; (800474c <_close_r+0x1c>)
 8004734:	2300      	movs	r3, #0
 8004736:	4604      	mov	r4, r0
 8004738:	4608      	mov	r0, r1
 800473a:	602b      	str	r3, [r5, #0]
 800473c:	f7ff f988 	bl	8003a50 <_close>
 8004740:	1c43      	adds	r3, r0, #1
 8004742:	d102      	bne.n	800474a <_close_r+0x1a>
 8004744:	682b      	ldr	r3, [r5, #0]
 8004746:	b103      	cbz	r3, 800474a <_close_r+0x1a>
 8004748:	6023      	str	r3, [r4, #0]
 800474a:	bd38      	pop	{r3, r4, r5, pc}
 800474c:	2000052c 	.word	0x2000052c

08004750 <__sflush_r>:
 8004750:	898a      	ldrh	r2, [r1, #12]
 8004752:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004756:	4605      	mov	r5, r0
 8004758:	0710      	lsls	r0, r2, #28
 800475a:	460c      	mov	r4, r1
 800475c:	d458      	bmi.n	8004810 <__sflush_r+0xc0>
 800475e:	684b      	ldr	r3, [r1, #4]
 8004760:	2b00      	cmp	r3, #0
 8004762:	dc05      	bgt.n	8004770 <__sflush_r+0x20>
 8004764:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004766:	2b00      	cmp	r3, #0
 8004768:	dc02      	bgt.n	8004770 <__sflush_r+0x20>
 800476a:	2000      	movs	r0, #0
 800476c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004770:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004772:	2e00      	cmp	r6, #0
 8004774:	d0f9      	beq.n	800476a <__sflush_r+0x1a>
 8004776:	2300      	movs	r3, #0
 8004778:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800477c:	682f      	ldr	r7, [r5, #0]
 800477e:	602b      	str	r3, [r5, #0]
 8004780:	d032      	beq.n	80047e8 <__sflush_r+0x98>
 8004782:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004784:	89a3      	ldrh	r3, [r4, #12]
 8004786:	075a      	lsls	r2, r3, #29
 8004788:	d505      	bpl.n	8004796 <__sflush_r+0x46>
 800478a:	6863      	ldr	r3, [r4, #4]
 800478c:	1ac0      	subs	r0, r0, r3
 800478e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004790:	b10b      	cbz	r3, 8004796 <__sflush_r+0x46>
 8004792:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004794:	1ac0      	subs	r0, r0, r3
 8004796:	2300      	movs	r3, #0
 8004798:	4602      	mov	r2, r0
 800479a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800479c:	6a21      	ldr	r1, [r4, #32]
 800479e:	4628      	mov	r0, r5
 80047a0:	47b0      	blx	r6
 80047a2:	1c43      	adds	r3, r0, #1
 80047a4:	89a3      	ldrh	r3, [r4, #12]
 80047a6:	d106      	bne.n	80047b6 <__sflush_r+0x66>
 80047a8:	6829      	ldr	r1, [r5, #0]
 80047aa:	291d      	cmp	r1, #29
 80047ac:	d82c      	bhi.n	8004808 <__sflush_r+0xb8>
 80047ae:	4a2a      	ldr	r2, [pc, #168]	; (8004858 <__sflush_r+0x108>)
 80047b0:	40ca      	lsrs	r2, r1
 80047b2:	07d6      	lsls	r6, r2, #31
 80047b4:	d528      	bpl.n	8004808 <__sflush_r+0xb8>
 80047b6:	2200      	movs	r2, #0
 80047b8:	6062      	str	r2, [r4, #4]
 80047ba:	04d9      	lsls	r1, r3, #19
 80047bc:	6922      	ldr	r2, [r4, #16]
 80047be:	6022      	str	r2, [r4, #0]
 80047c0:	d504      	bpl.n	80047cc <__sflush_r+0x7c>
 80047c2:	1c42      	adds	r2, r0, #1
 80047c4:	d101      	bne.n	80047ca <__sflush_r+0x7a>
 80047c6:	682b      	ldr	r3, [r5, #0]
 80047c8:	b903      	cbnz	r3, 80047cc <__sflush_r+0x7c>
 80047ca:	6560      	str	r0, [r4, #84]	; 0x54
 80047cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80047ce:	602f      	str	r7, [r5, #0]
 80047d0:	2900      	cmp	r1, #0
 80047d2:	d0ca      	beq.n	800476a <__sflush_r+0x1a>
 80047d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80047d8:	4299      	cmp	r1, r3
 80047da:	d002      	beq.n	80047e2 <__sflush_r+0x92>
 80047dc:	4628      	mov	r0, r5
 80047de:	f000 f8fb 	bl	80049d8 <_free_r>
 80047e2:	2000      	movs	r0, #0
 80047e4:	6360      	str	r0, [r4, #52]	; 0x34
 80047e6:	e7c1      	b.n	800476c <__sflush_r+0x1c>
 80047e8:	6a21      	ldr	r1, [r4, #32]
 80047ea:	2301      	movs	r3, #1
 80047ec:	4628      	mov	r0, r5
 80047ee:	47b0      	blx	r6
 80047f0:	1c41      	adds	r1, r0, #1
 80047f2:	d1c7      	bne.n	8004784 <__sflush_r+0x34>
 80047f4:	682b      	ldr	r3, [r5, #0]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d0c4      	beq.n	8004784 <__sflush_r+0x34>
 80047fa:	2b1d      	cmp	r3, #29
 80047fc:	d001      	beq.n	8004802 <__sflush_r+0xb2>
 80047fe:	2b16      	cmp	r3, #22
 8004800:	d101      	bne.n	8004806 <__sflush_r+0xb6>
 8004802:	602f      	str	r7, [r5, #0]
 8004804:	e7b1      	b.n	800476a <__sflush_r+0x1a>
 8004806:	89a3      	ldrh	r3, [r4, #12]
 8004808:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800480c:	81a3      	strh	r3, [r4, #12]
 800480e:	e7ad      	b.n	800476c <__sflush_r+0x1c>
 8004810:	690f      	ldr	r7, [r1, #16]
 8004812:	2f00      	cmp	r7, #0
 8004814:	d0a9      	beq.n	800476a <__sflush_r+0x1a>
 8004816:	0793      	lsls	r3, r2, #30
 8004818:	680e      	ldr	r6, [r1, #0]
 800481a:	bf08      	it	eq
 800481c:	694b      	ldreq	r3, [r1, #20]
 800481e:	600f      	str	r7, [r1, #0]
 8004820:	bf18      	it	ne
 8004822:	2300      	movne	r3, #0
 8004824:	eba6 0807 	sub.w	r8, r6, r7
 8004828:	608b      	str	r3, [r1, #8]
 800482a:	f1b8 0f00 	cmp.w	r8, #0
 800482e:	dd9c      	ble.n	800476a <__sflush_r+0x1a>
 8004830:	6a21      	ldr	r1, [r4, #32]
 8004832:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004834:	4643      	mov	r3, r8
 8004836:	463a      	mov	r2, r7
 8004838:	4628      	mov	r0, r5
 800483a:	47b0      	blx	r6
 800483c:	2800      	cmp	r0, #0
 800483e:	dc06      	bgt.n	800484e <__sflush_r+0xfe>
 8004840:	89a3      	ldrh	r3, [r4, #12]
 8004842:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004846:	81a3      	strh	r3, [r4, #12]
 8004848:	f04f 30ff 	mov.w	r0, #4294967295
 800484c:	e78e      	b.n	800476c <__sflush_r+0x1c>
 800484e:	4407      	add	r7, r0
 8004850:	eba8 0800 	sub.w	r8, r8, r0
 8004854:	e7e9      	b.n	800482a <__sflush_r+0xda>
 8004856:	bf00      	nop
 8004858:	20400001 	.word	0x20400001

0800485c <_fflush_r>:
 800485c:	b538      	push	{r3, r4, r5, lr}
 800485e:	690b      	ldr	r3, [r1, #16]
 8004860:	4605      	mov	r5, r0
 8004862:	460c      	mov	r4, r1
 8004864:	b913      	cbnz	r3, 800486c <_fflush_r+0x10>
 8004866:	2500      	movs	r5, #0
 8004868:	4628      	mov	r0, r5
 800486a:	bd38      	pop	{r3, r4, r5, pc}
 800486c:	b118      	cbz	r0, 8004876 <_fflush_r+0x1a>
 800486e:	6983      	ldr	r3, [r0, #24]
 8004870:	b90b      	cbnz	r3, 8004876 <_fflush_r+0x1a>
 8004872:	f7ff fa4f 	bl	8003d14 <__sinit>
 8004876:	4b14      	ldr	r3, [pc, #80]	; (80048c8 <_fflush_r+0x6c>)
 8004878:	429c      	cmp	r4, r3
 800487a:	d11b      	bne.n	80048b4 <_fflush_r+0x58>
 800487c:	686c      	ldr	r4, [r5, #4]
 800487e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d0ef      	beq.n	8004866 <_fflush_r+0xa>
 8004886:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004888:	07d0      	lsls	r0, r2, #31
 800488a:	d404      	bmi.n	8004896 <_fflush_r+0x3a>
 800488c:	0599      	lsls	r1, r3, #22
 800488e:	d402      	bmi.n	8004896 <_fflush_r+0x3a>
 8004890:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004892:	f7ff fadd 	bl	8003e50 <__retarget_lock_acquire_recursive>
 8004896:	4628      	mov	r0, r5
 8004898:	4621      	mov	r1, r4
 800489a:	f7ff ff59 	bl	8004750 <__sflush_r>
 800489e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80048a0:	07da      	lsls	r2, r3, #31
 80048a2:	4605      	mov	r5, r0
 80048a4:	d4e0      	bmi.n	8004868 <_fflush_r+0xc>
 80048a6:	89a3      	ldrh	r3, [r4, #12]
 80048a8:	059b      	lsls	r3, r3, #22
 80048aa:	d4dd      	bmi.n	8004868 <_fflush_r+0xc>
 80048ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80048ae:	f7ff fad0 	bl	8003e52 <__retarget_lock_release_recursive>
 80048b2:	e7d9      	b.n	8004868 <_fflush_r+0xc>
 80048b4:	4b05      	ldr	r3, [pc, #20]	; (80048cc <_fflush_r+0x70>)
 80048b6:	429c      	cmp	r4, r3
 80048b8:	d101      	bne.n	80048be <_fflush_r+0x62>
 80048ba:	68ac      	ldr	r4, [r5, #8]
 80048bc:	e7df      	b.n	800487e <_fflush_r+0x22>
 80048be:	4b04      	ldr	r3, [pc, #16]	; (80048d0 <_fflush_r+0x74>)
 80048c0:	429c      	cmp	r4, r3
 80048c2:	bf08      	it	eq
 80048c4:	68ec      	ldreq	r4, [r5, #12]
 80048c6:	e7da      	b.n	800487e <_fflush_r+0x22>
 80048c8:	08004b50 	.word	0x08004b50
 80048cc:	08004b70 	.word	0x08004b70
 80048d0:	08004b30 	.word	0x08004b30

080048d4 <_lseek_r>:
 80048d4:	b538      	push	{r3, r4, r5, lr}
 80048d6:	4d07      	ldr	r5, [pc, #28]	; (80048f4 <_lseek_r+0x20>)
 80048d8:	4604      	mov	r4, r0
 80048da:	4608      	mov	r0, r1
 80048dc:	4611      	mov	r1, r2
 80048de:	2200      	movs	r2, #0
 80048e0:	602a      	str	r2, [r5, #0]
 80048e2:	461a      	mov	r2, r3
 80048e4:	f7ff f8db 	bl	8003a9e <_lseek>
 80048e8:	1c43      	adds	r3, r0, #1
 80048ea:	d102      	bne.n	80048f2 <_lseek_r+0x1e>
 80048ec:	682b      	ldr	r3, [r5, #0]
 80048ee:	b103      	cbz	r3, 80048f2 <_lseek_r+0x1e>
 80048f0:	6023      	str	r3, [r4, #0]
 80048f2:	bd38      	pop	{r3, r4, r5, pc}
 80048f4:	2000052c 	.word	0x2000052c

080048f8 <__swhatbuf_r>:
 80048f8:	b570      	push	{r4, r5, r6, lr}
 80048fa:	460e      	mov	r6, r1
 80048fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004900:	2900      	cmp	r1, #0
 8004902:	b096      	sub	sp, #88	; 0x58
 8004904:	4614      	mov	r4, r2
 8004906:	461d      	mov	r5, r3
 8004908:	da07      	bge.n	800491a <__swhatbuf_r+0x22>
 800490a:	2300      	movs	r3, #0
 800490c:	602b      	str	r3, [r5, #0]
 800490e:	89b3      	ldrh	r3, [r6, #12]
 8004910:	061a      	lsls	r2, r3, #24
 8004912:	d410      	bmi.n	8004936 <__swhatbuf_r+0x3e>
 8004914:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004918:	e00e      	b.n	8004938 <__swhatbuf_r+0x40>
 800491a:	466a      	mov	r2, sp
 800491c:	f000 f8be 	bl	8004a9c <_fstat_r>
 8004920:	2800      	cmp	r0, #0
 8004922:	dbf2      	blt.n	800490a <__swhatbuf_r+0x12>
 8004924:	9a01      	ldr	r2, [sp, #4]
 8004926:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800492a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800492e:	425a      	negs	r2, r3
 8004930:	415a      	adcs	r2, r3
 8004932:	602a      	str	r2, [r5, #0]
 8004934:	e7ee      	b.n	8004914 <__swhatbuf_r+0x1c>
 8004936:	2340      	movs	r3, #64	; 0x40
 8004938:	2000      	movs	r0, #0
 800493a:	6023      	str	r3, [r4, #0]
 800493c:	b016      	add	sp, #88	; 0x58
 800493e:	bd70      	pop	{r4, r5, r6, pc}

08004940 <__smakebuf_r>:
 8004940:	898b      	ldrh	r3, [r1, #12]
 8004942:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004944:	079d      	lsls	r5, r3, #30
 8004946:	4606      	mov	r6, r0
 8004948:	460c      	mov	r4, r1
 800494a:	d507      	bpl.n	800495c <__smakebuf_r+0x1c>
 800494c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004950:	6023      	str	r3, [r4, #0]
 8004952:	6123      	str	r3, [r4, #16]
 8004954:	2301      	movs	r3, #1
 8004956:	6163      	str	r3, [r4, #20]
 8004958:	b002      	add	sp, #8
 800495a:	bd70      	pop	{r4, r5, r6, pc}
 800495c:	ab01      	add	r3, sp, #4
 800495e:	466a      	mov	r2, sp
 8004960:	f7ff ffca 	bl	80048f8 <__swhatbuf_r>
 8004964:	9900      	ldr	r1, [sp, #0]
 8004966:	4605      	mov	r5, r0
 8004968:	4630      	mov	r0, r6
 800496a:	f7ff fa73 	bl	8003e54 <_malloc_r>
 800496e:	b948      	cbnz	r0, 8004984 <__smakebuf_r+0x44>
 8004970:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004974:	059a      	lsls	r2, r3, #22
 8004976:	d4ef      	bmi.n	8004958 <__smakebuf_r+0x18>
 8004978:	f023 0303 	bic.w	r3, r3, #3
 800497c:	f043 0302 	orr.w	r3, r3, #2
 8004980:	81a3      	strh	r3, [r4, #12]
 8004982:	e7e3      	b.n	800494c <__smakebuf_r+0xc>
 8004984:	4b0d      	ldr	r3, [pc, #52]	; (80049bc <__smakebuf_r+0x7c>)
 8004986:	62b3      	str	r3, [r6, #40]	; 0x28
 8004988:	89a3      	ldrh	r3, [r4, #12]
 800498a:	6020      	str	r0, [r4, #0]
 800498c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004990:	81a3      	strh	r3, [r4, #12]
 8004992:	9b00      	ldr	r3, [sp, #0]
 8004994:	6163      	str	r3, [r4, #20]
 8004996:	9b01      	ldr	r3, [sp, #4]
 8004998:	6120      	str	r0, [r4, #16]
 800499a:	b15b      	cbz	r3, 80049b4 <__smakebuf_r+0x74>
 800499c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80049a0:	4630      	mov	r0, r6
 80049a2:	f000 f88d 	bl	8004ac0 <_isatty_r>
 80049a6:	b128      	cbz	r0, 80049b4 <__smakebuf_r+0x74>
 80049a8:	89a3      	ldrh	r3, [r4, #12]
 80049aa:	f023 0303 	bic.w	r3, r3, #3
 80049ae:	f043 0301 	orr.w	r3, r3, #1
 80049b2:	81a3      	strh	r3, [r4, #12]
 80049b4:	89a0      	ldrh	r0, [r4, #12]
 80049b6:	4305      	orrs	r5, r0
 80049b8:	81a5      	strh	r5, [r4, #12]
 80049ba:	e7cd      	b.n	8004958 <__smakebuf_r+0x18>
 80049bc:	08003cad 	.word	0x08003cad

080049c0 <__malloc_lock>:
 80049c0:	4801      	ldr	r0, [pc, #4]	; (80049c8 <__malloc_lock+0x8>)
 80049c2:	f7ff ba45 	b.w	8003e50 <__retarget_lock_acquire_recursive>
 80049c6:	bf00      	nop
 80049c8:	20000524 	.word	0x20000524

080049cc <__malloc_unlock>:
 80049cc:	4801      	ldr	r0, [pc, #4]	; (80049d4 <__malloc_unlock+0x8>)
 80049ce:	f7ff ba40 	b.w	8003e52 <__retarget_lock_release_recursive>
 80049d2:	bf00      	nop
 80049d4:	20000524 	.word	0x20000524

080049d8 <_free_r>:
 80049d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80049da:	2900      	cmp	r1, #0
 80049dc:	d048      	beq.n	8004a70 <_free_r+0x98>
 80049de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80049e2:	9001      	str	r0, [sp, #4]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	f1a1 0404 	sub.w	r4, r1, #4
 80049ea:	bfb8      	it	lt
 80049ec:	18e4      	addlt	r4, r4, r3
 80049ee:	f7ff ffe7 	bl	80049c0 <__malloc_lock>
 80049f2:	4a20      	ldr	r2, [pc, #128]	; (8004a74 <_free_r+0x9c>)
 80049f4:	9801      	ldr	r0, [sp, #4]
 80049f6:	6813      	ldr	r3, [r2, #0]
 80049f8:	4615      	mov	r5, r2
 80049fa:	b933      	cbnz	r3, 8004a0a <_free_r+0x32>
 80049fc:	6063      	str	r3, [r4, #4]
 80049fe:	6014      	str	r4, [r2, #0]
 8004a00:	b003      	add	sp, #12
 8004a02:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004a06:	f7ff bfe1 	b.w	80049cc <__malloc_unlock>
 8004a0a:	42a3      	cmp	r3, r4
 8004a0c:	d90b      	bls.n	8004a26 <_free_r+0x4e>
 8004a0e:	6821      	ldr	r1, [r4, #0]
 8004a10:	1862      	adds	r2, r4, r1
 8004a12:	4293      	cmp	r3, r2
 8004a14:	bf04      	itt	eq
 8004a16:	681a      	ldreq	r2, [r3, #0]
 8004a18:	685b      	ldreq	r3, [r3, #4]
 8004a1a:	6063      	str	r3, [r4, #4]
 8004a1c:	bf04      	itt	eq
 8004a1e:	1852      	addeq	r2, r2, r1
 8004a20:	6022      	streq	r2, [r4, #0]
 8004a22:	602c      	str	r4, [r5, #0]
 8004a24:	e7ec      	b.n	8004a00 <_free_r+0x28>
 8004a26:	461a      	mov	r2, r3
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	b10b      	cbz	r3, 8004a30 <_free_r+0x58>
 8004a2c:	42a3      	cmp	r3, r4
 8004a2e:	d9fa      	bls.n	8004a26 <_free_r+0x4e>
 8004a30:	6811      	ldr	r1, [r2, #0]
 8004a32:	1855      	adds	r5, r2, r1
 8004a34:	42a5      	cmp	r5, r4
 8004a36:	d10b      	bne.n	8004a50 <_free_r+0x78>
 8004a38:	6824      	ldr	r4, [r4, #0]
 8004a3a:	4421      	add	r1, r4
 8004a3c:	1854      	adds	r4, r2, r1
 8004a3e:	42a3      	cmp	r3, r4
 8004a40:	6011      	str	r1, [r2, #0]
 8004a42:	d1dd      	bne.n	8004a00 <_free_r+0x28>
 8004a44:	681c      	ldr	r4, [r3, #0]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	6053      	str	r3, [r2, #4]
 8004a4a:	4421      	add	r1, r4
 8004a4c:	6011      	str	r1, [r2, #0]
 8004a4e:	e7d7      	b.n	8004a00 <_free_r+0x28>
 8004a50:	d902      	bls.n	8004a58 <_free_r+0x80>
 8004a52:	230c      	movs	r3, #12
 8004a54:	6003      	str	r3, [r0, #0]
 8004a56:	e7d3      	b.n	8004a00 <_free_r+0x28>
 8004a58:	6825      	ldr	r5, [r4, #0]
 8004a5a:	1961      	adds	r1, r4, r5
 8004a5c:	428b      	cmp	r3, r1
 8004a5e:	bf04      	itt	eq
 8004a60:	6819      	ldreq	r1, [r3, #0]
 8004a62:	685b      	ldreq	r3, [r3, #4]
 8004a64:	6063      	str	r3, [r4, #4]
 8004a66:	bf04      	itt	eq
 8004a68:	1949      	addeq	r1, r1, r5
 8004a6a:	6021      	streq	r1, [r4, #0]
 8004a6c:	6054      	str	r4, [r2, #4]
 8004a6e:	e7c7      	b.n	8004a00 <_free_r+0x28>
 8004a70:	b003      	add	sp, #12
 8004a72:	bd30      	pop	{r4, r5, pc}
 8004a74:	20000090 	.word	0x20000090

08004a78 <_read_r>:
 8004a78:	b538      	push	{r3, r4, r5, lr}
 8004a7a:	4d07      	ldr	r5, [pc, #28]	; (8004a98 <_read_r+0x20>)
 8004a7c:	4604      	mov	r4, r0
 8004a7e:	4608      	mov	r0, r1
 8004a80:	4611      	mov	r1, r2
 8004a82:	2200      	movs	r2, #0
 8004a84:	602a      	str	r2, [r5, #0]
 8004a86:	461a      	mov	r2, r3
 8004a88:	f7fe fe84 	bl	8003794 <_read>
 8004a8c:	1c43      	adds	r3, r0, #1
 8004a8e:	d102      	bne.n	8004a96 <_read_r+0x1e>
 8004a90:	682b      	ldr	r3, [r5, #0]
 8004a92:	b103      	cbz	r3, 8004a96 <_read_r+0x1e>
 8004a94:	6023      	str	r3, [r4, #0]
 8004a96:	bd38      	pop	{r3, r4, r5, pc}
 8004a98:	2000052c 	.word	0x2000052c

08004a9c <_fstat_r>:
 8004a9c:	b538      	push	{r3, r4, r5, lr}
 8004a9e:	4d07      	ldr	r5, [pc, #28]	; (8004abc <_fstat_r+0x20>)
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	4604      	mov	r4, r0
 8004aa4:	4608      	mov	r0, r1
 8004aa6:	4611      	mov	r1, r2
 8004aa8:	602b      	str	r3, [r5, #0]
 8004aaa:	f7fe ffdd 	bl	8003a68 <_fstat>
 8004aae:	1c43      	adds	r3, r0, #1
 8004ab0:	d102      	bne.n	8004ab8 <_fstat_r+0x1c>
 8004ab2:	682b      	ldr	r3, [r5, #0]
 8004ab4:	b103      	cbz	r3, 8004ab8 <_fstat_r+0x1c>
 8004ab6:	6023      	str	r3, [r4, #0]
 8004ab8:	bd38      	pop	{r3, r4, r5, pc}
 8004aba:	bf00      	nop
 8004abc:	2000052c 	.word	0x2000052c

08004ac0 <_isatty_r>:
 8004ac0:	b538      	push	{r3, r4, r5, lr}
 8004ac2:	4d06      	ldr	r5, [pc, #24]	; (8004adc <_isatty_r+0x1c>)
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	4604      	mov	r4, r0
 8004ac8:	4608      	mov	r0, r1
 8004aca:	602b      	str	r3, [r5, #0]
 8004acc:	f7fe ffdc 	bl	8003a88 <_isatty>
 8004ad0:	1c43      	adds	r3, r0, #1
 8004ad2:	d102      	bne.n	8004ada <_isatty_r+0x1a>
 8004ad4:	682b      	ldr	r3, [r5, #0]
 8004ad6:	b103      	cbz	r3, 8004ada <_isatty_r+0x1a>
 8004ad8:	6023      	str	r3, [r4, #0]
 8004ada:	bd38      	pop	{r3, r4, r5, pc}
 8004adc:	2000052c 	.word	0x2000052c

08004ae0 <_init>:
 8004ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ae2:	bf00      	nop
 8004ae4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ae6:	bc08      	pop	{r3}
 8004ae8:	469e      	mov	lr, r3
 8004aea:	4770      	bx	lr

08004aec <_fini>:
 8004aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aee:	bf00      	nop
 8004af0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004af2:	bc08      	pop	{r3}
 8004af4:	469e      	mov	lr, r3
 8004af6:	4770      	bx	lr
