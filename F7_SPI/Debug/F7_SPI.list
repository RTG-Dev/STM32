
F7_SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005828  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  080059f8  080059f8  000159f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ac4  08005ac4  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08005ac4  08005ac4  00015ac4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005acc  08005acc  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005acc  08005acc  00015acc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005ad0  08005ad0  00015ad0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08005ad4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006a4  2000007c  08005b50  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000720  08005b50  00020720  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011e2f  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027a9  00000000  00000000  00031edb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dc8  00000000  00000000  00034688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ca0  00000000  00000000  00035450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002730f  00000000  00000000  000360f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fac7  00000000  00000000  0005d3ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f0585  00000000  00000000  0006cec6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015d44b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004080  00000000  00000000  0015d4a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080059e0 	.word	0x080059e0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000080 	.word	0x20000080
 800020c:	080059e0 	.word	0x080059e0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96e 	b.w	80005a4 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468c      	mov	ip, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8083 	bne.w	80003f6 <__udivmoddi4+0x116>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d947      	bls.n	8000386 <__udivmoddi4+0xa6>
 80002f6:	fab2 f282 	clz	r2, r2
 80002fa:	b142      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fc:	f1c2 0020 	rsb	r0, r2, #32
 8000300:	fa24 f000 	lsr.w	r0, r4, r0
 8000304:	4091      	lsls	r1, r2
 8000306:	4097      	lsls	r7, r2
 8000308:	ea40 0c01 	orr.w	ip, r0, r1
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbbc f6f8 	udiv	r6, ip, r8
 8000318:	fa1f fe87 	uxth.w	lr, r7
 800031c:	fb08 c116 	mls	r1, r8, r6, ip
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb06 f10e 	mul.w	r1, r6, lr
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000332:	f080 8119 	bcs.w	8000568 <__udivmoddi4+0x288>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8116 	bls.w	8000568 <__udivmoddi4+0x288>
 800033c:	3e02      	subs	r6, #2
 800033e:	443b      	add	r3, r7
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0f8 	udiv	r0, r3, r8
 8000348:	fb08 3310 	mls	r3, r8, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fe0e 	mul.w	lr, r0, lr
 8000354:	45a6      	cmp	lr, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	193c      	adds	r4, r7, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8105 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f240 8102 	bls.w	800056c <__udivmoddi4+0x28c>
 8000368:	3802      	subs	r0, #2
 800036a:	443c      	add	r4, r7
 800036c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000370:	eba4 040e 	sub.w	r4, r4, lr
 8000374:	2600      	movs	r6, #0
 8000376:	b11d      	cbz	r5, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c5 4300 	strd	r4, r3, [r5]
 8000380:	4631      	mov	r1, r6
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	b902      	cbnz	r2, 800038a <__udivmoddi4+0xaa>
 8000388:	deff      	udf	#255	; 0xff
 800038a:	fab2 f282 	clz	r2, r2
 800038e:	2a00      	cmp	r2, #0
 8000390:	d150      	bne.n	8000434 <__udivmoddi4+0x154>
 8000392:	1bcb      	subs	r3, r1, r7
 8000394:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000398:	fa1f f887 	uxth.w	r8, r7
 800039c:	2601      	movs	r6, #1
 800039e:	fbb3 fcfe 	udiv	ip, r3, lr
 80003a2:	0c21      	lsrs	r1, r4, #16
 80003a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb08 f30c 	mul.w	r3, r8, ip
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0xe2>
 80003bc:	428b      	cmp	r3, r1
 80003be:	f200 80e9 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1ac9      	subs	r1, r1, r3
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x10c>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x10a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80d9 	bhi.w	800059c <__udivmoddi4+0x2bc>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e7bf      	b.n	8000376 <__udivmoddi4+0x96>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0x12e>
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	f000 80b1 	beq.w	8000562 <__udivmoddi4+0x282>
 8000400:	2600      	movs	r6, #0
 8000402:	e9c5 0100 	strd	r0, r1, [r5]
 8000406:	4630      	mov	r0, r6
 8000408:	4631      	mov	r1, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	fab3 f683 	clz	r6, r3
 8000412:	2e00      	cmp	r6, #0
 8000414:	d14a      	bne.n	80004ac <__udivmoddi4+0x1cc>
 8000416:	428b      	cmp	r3, r1
 8000418:	d302      	bcc.n	8000420 <__udivmoddi4+0x140>
 800041a:	4282      	cmp	r2, r0
 800041c:	f200 80b8 	bhi.w	8000590 <__udivmoddi4+0x2b0>
 8000420:	1a84      	subs	r4, r0, r2
 8000422:	eb61 0103 	sbc.w	r1, r1, r3
 8000426:	2001      	movs	r0, #1
 8000428:	468c      	mov	ip, r1
 800042a:	2d00      	cmp	r5, #0
 800042c:	d0a8      	beq.n	8000380 <__udivmoddi4+0xa0>
 800042e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000432:	e7a5      	b.n	8000380 <__udivmoddi4+0xa0>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f603 	lsr.w	r6, r0, r3
 800043c:	4097      	lsls	r7, r2
 800043e:	fa01 f002 	lsl.w	r0, r1, r2
 8000442:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000446:	40d9      	lsrs	r1, r3
 8000448:	4330      	orrs	r0, r6
 800044a:	0c03      	lsrs	r3, r0, #16
 800044c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000450:	fa1f f887 	uxth.w	r8, r7
 8000454:	fb0e 1116 	mls	r1, lr, r6, r1
 8000458:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045c:	fb06 f108 	mul.w	r1, r6, r8
 8000460:	4299      	cmp	r1, r3
 8000462:	fa04 f402 	lsl.w	r4, r4, r2
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x19c>
 8000468:	18fb      	adds	r3, r7, r3
 800046a:	f106 3cff 	add.w	ip, r6, #4294967295
 800046e:	f080 808d 	bcs.w	800058c <__udivmoddi4+0x2ac>
 8000472:	4299      	cmp	r1, r3
 8000474:	f240 808a 	bls.w	800058c <__udivmoddi4+0x2ac>
 8000478:	3e02      	subs	r6, #2
 800047a:	443b      	add	r3, r7
 800047c:	1a5b      	subs	r3, r3, r1
 800047e:	b281      	uxth	r1, r0
 8000480:	fbb3 f0fe 	udiv	r0, r3, lr
 8000484:	fb0e 3310 	mls	r3, lr, r0, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb00 f308 	mul.w	r3, r0, r8
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0x1c4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f100 3cff 	add.w	ip, r0, #4294967295
 800049a:	d273      	bcs.n	8000584 <__udivmoddi4+0x2a4>
 800049c:	428b      	cmp	r3, r1
 800049e:	d971      	bls.n	8000584 <__udivmoddi4+0x2a4>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4439      	add	r1, r7
 80004a4:	1acb      	subs	r3, r1, r3
 80004a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004aa:	e778      	b.n	800039e <__udivmoddi4+0xbe>
 80004ac:	f1c6 0c20 	rsb	ip, r6, #32
 80004b0:	fa03 f406 	lsl.w	r4, r3, r6
 80004b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004b8:	431c      	orrs	r4, r3
 80004ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80004be:	fa01 f306 	lsl.w	r3, r1, r6
 80004c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ca:	431f      	orrs	r7, r3
 80004cc:	0c3b      	lsrs	r3, r7, #16
 80004ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d2:	fa1f f884 	uxth.w	r8, r4
 80004d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004de:	fb09 fa08 	mul.w	sl, r9, r8
 80004e2:	458a      	cmp	sl, r1
 80004e4:	fa02 f206 	lsl.w	r2, r2, r6
 80004e8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x220>
 80004ee:	1861      	adds	r1, r4, r1
 80004f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f4:	d248      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 80004f6:	458a      	cmp	sl, r1
 80004f8:	d946      	bls.n	8000588 <__udivmoddi4+0x2a8>
 80004fa:	f1a9 0902 	sub.w	r9, r9, #2
 80004fe:	4421      	add	r1, r4
 8000500:	eba1 010a 	sub.w	r1, r1, sl
 8000504:	b2bf      	uxth	r7, r7
 8000506:	fbb1 f0fe 	udiv	r0, r1, lr
 800050a:	fb0e 1110 	mls	r1, lr, r0, r1
 800050e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000512:	fb00 f808 	mul.w	r8, r0, r8
 8000516:	45b8      	cmp	r8, r7
 8000518:	d907      	bls.n	800052a <__udivmoddi4+0x24a>
 800051a:	19e7      	adds	r7, r4, r7
 800051c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000520:	d22e      	bcs.n	8000580 <__udivmoddi4+0x2a0>
 8000522:	45b8      	cmp	r8, r7
 8000524:	d92c      	bls.n	8000580 <__udivmoddi4+0x2a0>
 8000526:	3802      	subs	r0, #2
 8000528:	4427      	add	r7, r4
 800052a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800052e:	eba7 0708 	sub.w	r7, r7, r8
 8000532:	fba0 8902 	umull	r8, r9, r0, r2
 8000536:	454f      	cmp	r7, r9
 8000538:	46c6      	mov	lr, r8
 800053a:	4649      	mov	r1, r9
 800053c:	d31a      	bcc.n	8000574 <__udivmoddi4+0x294>
 800053e:	d017      	beq.n	8000570 <__udivmoddi4+0x290>
 8000540:	b15d      	cbz	r5, 800055a <__udivmoddi4+0x27a>
 8000542:	ebb3 020e 	subs.w	r2, r3, lr
 8000546:	eb67 0701 	sbc.w	r7, r7, r1
 800054a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800054e:	40f2      	lsrs	r2, r6
 8000550:	ea4c 0202 	orr.w	r2, ip, r2
 8000554:	40f7      	lsrs	r7, r6
 8000556:	e9c5 2700 	strd	r2, r7, [r5]
 800055a:	2600      	movs	r6, #0
 800055c:	4631      	mov	r1, r6
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e70b      	b.n	8000380 <__udivmoddi4+0xa0>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0x60>
 800056c:	4618      	mov	r0, r3
 800056e:	e6fd      	b.n	800036c <__udivmoddi4+0x8c>
 8000570:	4543      	cmp	r3, r8
 8000572:	d2e5      	bcs.n	8000540 <__udivmoddi4+0x260>
 8000574:	ebb8 0e02 	subs.w	lr, r8, r2
 8000578:	eb69 0104 	sbc.w	r1, r9, r4
 800057c:	3801      	subs	r0, #1
 800057e:	e7df      	b.n	8000540 <__udivmoddi4+0x260>
 8000580:	4608      	mov	r0, r1
 8000582:	e7d2      	b.n	800052a <__udivmoddi4+0x24a>
 8000584:	4660      	mov	r0, ip
 8000586:	e78d      	b.n	80004a4 <__udivmoddi4+0x1c4>
 8000588:	4681      	mov	r9, r0
 800058a:	e7b9      	b.n	8000500 <__udivmoddi4+0x220>
 800058c:	4666      	mov	r6, ip
 800058e:	e775      	b.n	800047c <__udivmoddi4+0x19c>
 8000590:	4630      	mov	r0, r6
 8000592:	e74a      	b.n	800042a <__udivmoddi4+0x14a>
 8000594:	f1ac 0c02 	sub.w	ip, ip, #2
 8000598:	4439      	add	r1, r7
 800059a:	e713      	b.n	80003c4 <__udivmoddi4+0xe4>
 800059c:	3802      	subs	r0, #2
 800059e:	443c      	add	r4, r7
 80005a0:	e724      	b.n	80003ec <__udivmoddi4+0x10c>
 80005a2:	bf00      	nop

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005ac:	2003      	movs	r0, #3
 80005ae:	f000 f94d 	bl	800084c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005b2:	2000      	movs	r0, #0
 80005b4:	f000 f806 	bl	80005c4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80005b8:	f003 ff38 	bl	800442c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80005bc:	2300      	movs	r3, #0
}
 80005be:	4618      	mov	r0, r3
 80005c0:	bd80      	pop	{r7, pc}
	...

080005c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005cc:	4b12      	ldr	r3, [pc, #72]	; (8000618 <HAL_InitTick+0x54>)
 80005ce:	681a      	ldr	r2, [r3, #0]
 80005d0:	4b12      	ldr	r3, [pc, #72]	; (800061c <HAL_InitTick+0x58>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	4619      	mov	r1, r3
 80005d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005da:	fbb3 f3f1 	udiv	r3, r3, r1
 80005de:	fbb2 f3f3 	udiv	r3, r2, r3
 80005e2:	4618      	mov	r0, r3
 80005e4:	f000 f967 	bl	80008b6 <HAL_SYSTICK_Config>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005ee:	2301      	movs	r3, #1
 80005f0:	e00e      	b.n	8000610 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	2b0f      	cmp	r3, #15
 80005f6:	d80a      	bhi.n	800060e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005f8:	2200      	movs	r2, #0
 80005fa:	6879      	ldr	r1, [r7, #4]
 80005fc:	f04f 30ff 	mov.w	r0, #4294967295
 8000600:	f000 f92f 	bl	8000862 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000604:	4a06      	ldr	r2, [pc, #24]	; (8000620 <HAL_InitTick+0x5c>)
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800060a:	2300      	movs	r3, #0
 800060c:	e000      	b.n	8000610 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800060e:	2301      	movs	r3, #1
}
 8000610:	4618      	mov	r0, r3
 8000612:	3708      	adds	r7, #8
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	20000014 	.word	0x20000014
 800061c:	20000004 	.word	0x20000004
 8000620:	20000000 	.word	0x20000000

08000624 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000628:	4b06      	ldr	r3, [pc, #24]	; (8000644 <HAL_IncTick+0x20>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	461a      	mov	r2, r3
 800062e:	4b06      	ldr	r3, [pc, #24]	; (8000648 <HAL_IncTick+0x24>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	4413      	add	r3, r2
 8000634:	4a04      	ldr	r2, [pc, #16]	; (8000648 <HAL_IncTick+0x24>)
 8000636:	6013      	str	r3, [r2, #0]
}
 8000638:	bf00      	nop
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop
 8000644:	20000004 	.word	0x20000004
 8000648:	200000b0 	.word	0x200000b0

0800064c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  return uwTick;
 8000650:	4b03      	ldr	r3, [pc, #12]	; (8000660 <HAL_GetTick+0x14>)
 8000652:	681b      	ldr	r3, [r3, #0]
}
 8000654:	4618      	mov	r0, r3
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop
 8000660:	200000b0 	.word	0x200000b0

08000664 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b084      	sub	sp, #16
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800066c:	f7ff ffee 	bl	800064c <HAL_GetTick>
 8000670:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000676:	68fb      	ldr	r3, [r7, #12]
 8000678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800067c:	d005      	beq.n	800068a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800067e:	4b0a      	ldr	r3, [pc, #40]	; (80006a8 <HAL_Delay+0x44>)
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	461a      	mov	r2, r3
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	4413      	add	r3, r2
 8000688:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800068a:	bf00      	nop
 800068c:	f7ff ffde 	bl	800064c <HAL_GetTick>
 8000690:	4602      	mov	r2, r0
 8000692:	68bb      	ldr	r3, [r7, #8]
 8000694:	1ad3      	subs	r3, r2, r3
 8000696:	68fa      	ldr	r2, [r7, #12]
 8000698:	429a      	cmp	r2, r3
 800069a:	d8f7      	bhi.n	800068c <HAL_Delay+0x28>
  {
  }
}
 800069c:	bf00      	nop
 800069e:	bf00      	nop
 80006a0:	3710      	adds	r7, #16
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	20000004 	.word	0x20000004

080006ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b085      	sub	sp, #20
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	f003 0307 	and.w	r3, r3, #7
 80006ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006bc:	4b0b      	ldr	r3, [pc, #44]	; (80006ec <__NVIC_SetPriorityGrouping+0x40>)
 80006be:	68db      	ldr	r3, [r3, #12]
 80006c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006c2:	68ba      	ldr	r2, [r7, #8]
 80006c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006c8:	4013      	ands	r3, r2
 80006ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006d0:	68bb      	ldr	r3, [r7, #8]
 80006d2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80006d4:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <__NVIC_SetPriorityGrouping+0x44>)
 80006d6:	4313      	orrs	r3, r2
 80006d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006da:	4a04      	ldr	r2, [pc, #16]	; (80006ec <__NVIC_SetPriorityGrouping+0x40>)
 80006dc:	68bb      	ldr	r3, [r7, #8]
 80006de:	60d3      	str	r3, [r2, #12]
}
 80006e0:	bf00      	nop
 80006e2:	3714      	adds	r7, #20
 80006e4:	46bd      	mov	sp, r7
 80006e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ea:	4770      	bx	lr
 80006ec:	e000ed00 	.word	0xe000ed00
 80006f0:	05fa0000 	.word	0x05fa0000

080006f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006f8:	4b04      	ldr	r3, [pc, #16]	; (800070c <__NVIC_GetPriorityGrouping+0x18>)
 80006fa:	68db      	ldr	r3, [r3, #12]
 80006fc:	0a1b      	lsrs	r3, r3, #8
 80006fe:	f003 0307 	and.w	r3, r3, #7
}
 8000702:	4618      	mov	r0, r3
 8000704:	46bd      	mov	sp, r7
 8000706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070a:	4770      	bx	lr
 800070c:	e000ed00 	.word	0xe000ed00

08000710 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000710:	b480      	push	{r7}
 8000712:	b083      	sub	sp, #12
 8000714:	af00      	add	r7, sp, #0
 8000716:	4603      	mov	r3, r0
 8000718:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800071a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800071e:	2b00      	cmp	r3, #0
 8000720:	db0b      	blt.n	800073a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000722:	79fb      	ldrb	r3, [r7, #7]
 8000724:	f003 021f 	and.w	r2, r3, #31
 8000728:	4907      	ldr	r1, [pc, #28]	; (8000748 <__NVIC_EnableIRQ+0x38>)
 800072a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800072e:	095b      	lsrs	r3, r3, #5
 8000730:	2001      	movs	r0, #1
 8000732:	fa00 f202 	lsl.w	r2, r0, r2
 8000736:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800073a:	bf00      	nop
 800073c:	370c      	adds	r7, #12
 800073e:	46bd      	mov	sp, r7
 8000740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop
 8000748:	e000e100 	.word	0xe000e100

0800074c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800074c:	b480      	push	{r7}
 800074e:	b083      	sub	sp, #12
 8000750:	af00      	add	r7, sp, #0
 8000752:	4603      	mov	r3, r0
 8000754:	6039      	str	r1, [r7, #0]
 8000756:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000758:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800075c:	2b00      	cmp	r3, #0
 800075e:	db0a      	blt.n	8000776 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000760:	683b      	ldr	r3, [r7, #0]
 8000762:	b2da      	uxtb	r2, r3
 8000764:	490c      	ldr	r1, [pc, #48]	; (8000798 <__NVIC_SetPriority+0x4c>)
 8000766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800076a:	0112      	lsls	r2, r2, #4
 800076c:	b2d2      	uxtb	r2, r2
 800076e:	440b      	add	r3, r1
 8000770:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000774:	e00a      	b.n	800078c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000776:	683b      	ldr	r3, [r7, #0]
 8000778:	b2da      	uxtb	r2, r3
 800077a:	4908      	ldr	r1, [pc, #32]	; (800079c <__NVIC_SetPriority+0x50>)
 800077c:	79fb      	ldrb	r3, [r7, #7]
 800077e:	f003 030f 	and.w	r3, r3, #15
 8000782:	3b04      	subs	r3, #4
 8000784:	0112      	lsls	r2, r2, #4
 8000786:	b2d2      	uxtb	r2, r2
 8000788:	440b      	add	r3, r1
 800078a:	761a      	strb	r2, [r3, #24]
}
 800078c:	bf00      	nop
 800078e:	370c      	adds	r7, #12
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr
 8000798:	e000e100 	.word	0xe000e100
 800079c:	e000ed00 	.word	0xe000ed00

080007a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b089      	sub	sp, #36	; 0x24
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	60f8      	str	r0, [r7, #12]
 80007a8:	60b9      	str	r1, [r7, #8]
 80007aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	f003 0307 	and.w	r3, r3, #7
 80007b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007b4:	69fb      	ldr	r3, [r7, #28]
 80007b6:	f1c3 0307 	rsb	r3, r3, #7
 80007ba:	2b04      	cmp	r3, #4
 80007bc:	bf28      	it	cs
 80007be:	2304      	movcs	r3, #4
 80007c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007c2:	69fb      	ldr	r3, [r7, #28]
 80007c4:	3304      	adds	r3, #4
 80007c6:	2b06      	cmp	r3, #6
 80007c8:	d902      	bls.n	80007d0 <NVIC_EncodePriority+0x30>
 80007ca:	69fb      	ldr	r3, [r7, #28]
 80007cc:	3b03      	subs	r3, #3
 80007ce:	e000      	b.n	80007d2 <NVIC_EncodePriority+0x32>
 80007d0:	2300      	movs	r3, #0
 80007d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007d4:	f04f 32ff 	mov.w	r2, #4294967295
 80007d8:	69bb      	ldr	r3, [r7, #24]
 80007da:	fa02 f303 	lsl.w	r3, r2, r3
 80007de:	43da      	mvns	r2, r3
 80007e0:	68bb      	ldr	r3, [r7, #8]
 80007e2:	401a      	ands	r2, r3
 80007e4:	697b      	ldr	r3, [r7, #20]
 80007e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007e8:	f04f 31ff 	mov.w	r1, #4294967295
 80007ec:	697b      	ldr	r3, [r7, #20]
 80007ee:	fa01 f303 	lsl.w	r3, r1, r3
 80007f2:	43d9      	mvns	r1, r3
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007f8:	4313      	orrs	r3, r2
         );
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	3724      	adds	r7, #36	; 0x24
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr
	...

08000808 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	3b01      	subs	r3, #1
 8000814:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000818:	d301      	bcc.n	800081e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800081a:	2301      	movs	r3, #1
 800081c:	e00f      	b.n	800083e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800081e:	4a0a      	ldr	r2, [pc, #40]	; (8000848 <SysTick_Config+0x40>)
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	3b01      	subs	r3, #1
 8000824:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000826:	210f      	movs	r1, #15
 8000828:	f04f 30ff 	mov.w	r0, #4294967295
 800082c:	f7ff ff8e 	bl	800074c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000830:	4b05      	ldr	r3, [pc, #20]	; (8000848 <SysTick_Config+0x40>)
 8000832:	2200      	movs	r2, #0
 8000834:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000836:	4b04      	ldr	r3, [pc, #16]	; (8000848 <SysTick_Config+0x40>)
 8000838:	2207      	movs	r2, #7
 800083a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800083c:	2300      	movs	r3, #0
}
 800083e:	4618      	mov	r0, r3
 8000840:	3708      	adds	r7, #8
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	e000e010 	.word	0xe000e010

0800084c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000854:	6878      	ldr	r0, [r7, #4]
 8000856:	f7ff ff29 	bl	80006ac <__NVIC_SetPriorityGrouping>
}
 800085a:	bf00      	nop
 800085c:	3708      	adds	r7, #8
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}

08000862 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000862:	b580      	push	{r7, lr}
 8000864:	b086      	sub	sp, #24
 8000866:	af00      	add	r7, sp, #0
 8000868:	4603      	mov	r3, r0
 800086a:	60b9      	str	r1, [r7, #8]
 800086c:	607a      	str	r2, [r7, #4]
 800086e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000870:	2300      	movs	r3, #0
 8000872:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000874:	f7ff ff3e 	bl	80006f4 <__NVIC_GetPriorityGrouping>
 8000878:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800087a:	687a      	ldr	r2, [r7, #4]
 800087c:	68b9      	ldr	r1, [r7, #8]
 800087e:	6978      	ldr	r0, [r7, #20]
 8000880:	f7ff ff8e 	bl	80007a0 <NVIC_EncodePriority>
 8000884:	4602      	mov	r2, r0
 8000886:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800088a:	4611      	mov	r1, r2
 800088c:	4618      	mov	r0, r3
 800088e:	f7ff ff5d 	bl	800074c <__NVIC_SetPriority>
}
 8000892:	bf00      	nop
 8000894:	3718      	adds	r7, #24
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}

0800089a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800089a:	b580      	push	{r7, lr}
 800089c:	b082      	sub	sp, #8
 800089e:	af00      	add	r7, sp, #0
 80008a0:	4603      	mov	r3, r0
 80008a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008a8:	4618      	mov	r0, r3
 80008aa:	f7ff ff31 	bl	8000710 <__NVIC_EnableIRQ>
}
 80008ae:	bf00      	nop
 80008b0:	3708      	adds	r7, #8
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}

080008b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008b6:	b580      	push	{r7, lr}
 80008b8:	b082      	sub	sp, #8
 80008ba:	af00      	add	r7, sp, #0
 80008bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008be:	6878      	ldr	r0, [r7, #4]
 80008c0:	f7ff ffa2 	bl	8000808 <SysTick_Config>
 80008c4:	4603      	mov	r3, r0
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	3708      	adds	r7, #8
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}

080008ce <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80008ce:	b480      	push	{r7}
 80008d0:	b083      	sub	sp, #12
 80008d2:	af00      	add	r7, sp, #0
 80008d4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80008dc:	b2db      	uxtb	r3, r3
 80008de:	2b02      	cmp	r3, #2
 80008e0:	d004      	beq.n	80008ec <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	2280      	movs	r2, #128	; 0x80
 80008e6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80008e8:	2301      	movs	r3, #1
 80008ea:	e00c      	b.n	8000906 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	2205      	movs	r2, #5
 80008f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	681a      	ldr	r2, [r3, #0]
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	f022 0201 	bic.w	r2, r2, #1
 8000902:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000904:	2300      	movs	r3, #0
}
 8000906:	4618      	mov	r0, r3
 8000908:	370c      	adds	r7, #12
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr
	...

08000914 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000914:	b480      	push	{r7}
 8000916:	b089      	sub	sp, #36	; 0x24
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
 800091c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800091e:	2300      	movs	r3, #0
 8000920:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000922:	2300      	movs	r3, #0
 8000924:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000926:	2300      	movs	r3, #0
 8000928:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800092a:	2300      	movs	r3, #0
 800092c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800092e:	2300      	movs	r3, #0
 8000930:	61fb      	str	r3, [r7, #28]
 8000932:	e175      	b.n	8000c20 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000934:	2201      	movs	r2, #1
 8000936:	69fb      	ldr	r3, [r7, #28]
 8000938:	fa02 f303 	lsl.w	r3, r2, r3
 800093c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	697a      	ldr	r2, [r7, #20]
 8000944:	4013      	ands	r3, r2
 8000946:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000948:	693a      	ldr	r2, [r7, #16]
 800094a:	697b      	ldr	r3, [r7, #20]
 800094c:	429a      	cmp	r2, r3
 800094e:	f040 8164 	bne.w	8000c1a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000952:	683b      	ldr	r3, [r7, #0]
 8000954:	685b      	ldr	r3, [r3, #4]
 8000956:	2b02      	cmp	r3, #2
 8000958:	d003      	beq.n	8000962 <HAL_GPIO_Init+0x4e>
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	685b      	ldr	r3, [r3, #4]
 800095e:	2b12      	cmp	r3, #18
 8000960:	d123      	bne.n	80009aa <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000962:	69fb      	ldr	r3, [r7, #28]
 8000964:	08da      	lsrs	r2, r3, #3
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	3208      	adds	r2, #8
 800096a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800096e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000970:	69fb      	ldr	r3, [r7, #28]
 8000972:	f003 0307 	and.w	r3, r3, #7
 8000976:	009b      	lsls	r3, r3, #2
 8000978:	220f      	movs	r2, #15
 800097a:	fa02 f303 	lsl.w	r3, r2, r3
 800097e:	43db      	mvns	r3, r3
 8000980:	69ba      	ldr	r2, [r7, #24]
 8000982:	4013      	ands	r3, r2
 8000984:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	691a      	ldr	r2, [r3, #16]
 800098a:	69fb      	ldr	r3, [r7, #28]
 800098c:	f003 0307 	and.w	r3, r3, #7
 8000990:	009b      	lsls	r3, r3, #2
 8000992:	fa02 f303 	lsl.w	r3, r2, r3
 8000996:	69ba      	ldr	r2, [r7, #24]
 8000998:	4313      	orrs	r3, r2
 800099a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800099c:	69fb      	ldr	r3, [r7, #28]
 800099e:	08da      	lsrs	r2, r3, #3
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	3208      	adds	r2, #8
 80009a4:	69b9      	ldr	r1, [r7, #24]
 80009a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80009b0:	69fb      	ldr	r3, [r7, #28]
 80009b2:	005b      	lsls	r3, r3, #1
 80009b4:	2203      	movs	r2, #3
 80009b6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ba:	43db      	mvns	r3, r3
 80009bc:	69ba      	ldr	r2, [r7, #24]
 80009be:	4013      	ands	r3, r2
 80009c0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80009c2:	683b      	ldr	r3, [r7, #0]
 80009c4:	685b      	ldr	r3, [r3, #4]
 80009c6:	f003 0203 	and.w	r2, r3, #3
 80009ca:	69fb      	ldr	r3, [r7, #28]
 80009cc:	005b      	lsls	r3, r3, #1
 80009ce:	fa02 f303 	lsl.w	r3, r2, r3
 80009d2:	69ba      	ldr	r2, [r7, #24]
 80009d4:	4313      	orrs	r3, r2
 80009d6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	69ba      	ldr	r2, [r7, #24]
 80009dc:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	685b      	ldr	r3, [r3, #4]
 80009e2:	2b01      	cmp	r3, #1
 80009e4:	d00b      	beq.n	80009fe <HAL_GPIO_Init+0xea>
 80009e6:	683b      	ldr	r3, [r7, #0]
 80009e8:	685b      	ldr	r3, [r3, #4]
 80009ea:	2b02      	cmp	r3, #2
 80009ec:	d007      	beq.n	80009fe <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009f2:	2b11      	cmp	r3, #17
 80009f4:	d003      	beq.n	80009fe <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	685b      	ldr	r3, [r3, #4]
 80009fa:	2b12      	cmp	r3, #18
 80009fc:	d130      	bne.n	8000a60 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	689b      	ldr	r3, [r3, #8]
 8000a02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000a04:	69fb      	ldr	r3, [r7, #28]
 8000a06:	005b      	lsls	r3, r3, #1
 8000a08:	2203      	movs	r2, #3
 8000a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a0e:	43db      	mvns	r3, r3
 8000a10:	69ba      	ldr	r2, [r7, #24]
 8000a12:	4013      	ands	r3, r2
 8000a14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	68da      	ldr	r2, [r3, #12]
 8000a1a:	69fb      	ldr	r3, [r7, #28]
 8000a1c:	005b      	lsls	r3, r3, #1
 8000a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a22:	69ba      	ldr	r2, [r7, #24]
 8000a24:	4313      	orrs	r3, r2
 8000a26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	69ba      	ldr	r2, [r7, #24]
 8000a2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	685b      	ldr	r3, [r3, #4]
 8000a32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a34:	2201      	movs	r2, #1
 8000a36:	69fb      	ldr	r3, [r7, #28]
 8000a38:	fa02 f303 	lsl.w	r3, r2, r3
 8000a3c:	43db      	mvns	r3, r3
 8000a3e:	69ba      	ldr	r2, [r7, #24]
 8000a40:	4013      	ands	r3, r2
 8000a42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	685b      	ldr	r3, [r3, #4]
 8000a48:	091b      	lsrs	r3, r3, #4
 8000a4a:	f003 0201 	and.w	r2, r3, #1
 8000a4e:	69fb      	ldr	r3, [r7, #28]
 8000a50:	fa02 f303 	lsl.w	r3, r2, r3
 8000a54:	69ba      	ldr	r2, [r7, #24]
 8000a56:	4313      	orrs	r3, r2
 8000a58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	69ba      	ldr	r2, [r7, #24]
 8000a5e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	68db      	ldr	r3, [r3, #12]
 8000a64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000a66:	69fb      	ldr	r3, [r7, #28]
 8000a68:	005b      	lsls	r3, r3, #1
 8000a6a:	2203      	movs	r2, #3
 8000a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a70:	43db      	mvns	r3, r3
 8000a72:	69ba      	ldr	r2, [r7, #24]
 8000a74:	4013      	ands	r3, r2
 8000a76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	689a      	ldr	r2, [r3, #8]
 8000a7c:	69fb      	ldr	r3, [r7, #28]
 8000a7e:	005b      	lsls	r3, r3, #1
 8000a80:	fa02 f303 	lsl.w	r3, r2, r3
 8000a84:	69ba      	ldr	r2, [r7, #24]
 8000a86:	4313      	orrs	r3, r2
 8000a88:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	69ba      	ldr	r2, [r7, #24]
 8000a8e:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	685b      	ldr	r3, [r3, #4]
 8000a94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	f000 80be 	beq.w	8000c1a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a9e:	4b66      	ldr	r3, [pc, #408]	; (8000c38 <HAL_GPIO_Init+0x324>)
 8000aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aa2:	4a65      	ldr	r2, [pc, #404]	; (8000c38 <HAL_GPIO_Init+0x324>)
 8000aa4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aa8:	6453      	str	r3, [r2, #68]	; 0x44
 8000aaa:	4b63      	ldr	r3, [pc, #396]	; (8000c38 <HAL_GPIO_Init+0x324>)
 8000aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ab2:	60fb      	str	r3, [r7, #12]
 8000ab4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000ab6:	4a61      	ldr	r2, [pc, #388]	; (8000c3c <HAL_GPIO_Init+0x328>)
 8000ab8:	69fb      	ldr	r3, [r7, #28]
 8000aba:	089b      	lsrs	r3, r3, #2
 8000abc:	3302      	adds	r3, #2
 8000abe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ac2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000ac4:	69fb      	ldr	r3, [r7, #28]
 8000ac6:	f003 0303 	and.w	r3, r3, #3
 8000aca:	009b      	lsls	r3, r3, #2
 8000acc:	220f      	movs	r2, #15
 8000ace:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad2:	43db      	mvns	r3, r3
 8000ad4:	69ba      	ldr	r2, [r7, #24]
 8000ad6:	4013      	ands	r3, r2
 8000ad8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	4a58      	ldr	r2, [pc, #352]	; (8000c40 <HAL_GPIO_Init+0x32c>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d037      	beq.n	8000b52 <HAL_GPIO_Init+0x23e>
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	4a57      	ldr	r2, [pc, #348]	; (8000c44 <HAL_GPIO_Init+0x330>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d031      	beq.n	8000b4e <HAL_GPIO_Init+0x23a>
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	4a56      	ldr	r2, [pc, #344]	; (8000c48 <HAL_GPIO_Init+0x334>)
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d02b      	beq.n	8000b4a <HAL_GPIO_Init+0x236>
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	4a55      	ldr	r2, [pc, #340]	; (8000c4c <HAL_GPIO_Init+0x338>)
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d025      	beq.n	8000b46 <HAL_GPIO_Init+0x232>
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	4a54      	ldr	r2, [pc, #336]	; (8000c50 <HAL_GPIO_Init+0x33c>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d01f      	beq.n	8000b42 <HAL_GPIO_Init+0x22e>
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	4a53      	ldr	r2, [pc, #332]	; (8000c54 <HAL_GPIO_Init+0x340>)
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d019      	beq.n	8000b3e <HAL_GPIO_Init+0x22a>
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	4a52      	ldr	r2, [pc, #328]	; (8000c58 <HAL_GPIO_Init+0x344>)
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	d013      	beq.n	8000b3a <HAL_GPIO_Init+0x226>
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	4a51      	ldr	r2, [pc, #324]	; (8000c5c <HAL_GPIO_Init+0x348>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d00d      	beq.n	8000b36 <HAL_GPIO_Init+0x222>
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	4a50      	ldr	r2, [pc, #320]	; (8000c60 <HAL_GPIO_Init+0x34c>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d007      	beq.n	8000b32 <HAL_GPIO_Init+0x21e>
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	4a4f      	ldr	r2, [pc, #316]	; (8000c64 <HAL_GPIO_Init+0x350>)
 8000b26:	4293      	cmp	r3, r2
 8000b28:	d101      	bne.n	8000b2e <HAL_GPIO_Init+0x21a>
 8000b2a:	2309      	movs	r3, #9
 8000b2c:	e012      	b.n	8000b54 <HAL_GPIO_Init+0x240>
 8000b2e:	230a      	movs	r3, #10
 8000b30:	e010      	b.n	8000b54 <HAL_GPIO_Init+0x240>
 8000b32:	2308      	movs	r3, #8
 8000b34:	e00e      	b.n	8000b54 <HAL_GPIO_Init+0x240>
 8000b36:	2307      	movs	r3, #7
 8000b38:	e00c      	b.n	8000b54 <HAL_GPIO_Init+0x240>
 8000b3a:	2306      	movs	r3, #6
 8000b3c:	e00a      	b.n	8000b54 <HAL_GPIO_Init+0x240>
 8000b3e:	2305      	movs	r3, #5
 8000b40:	e008      	b.n	8000b54 <HAL_GPIO_Init+0x240>
 8000b42:	2304      	movs	r3, #4
 8000b44:	e006      	b.n	8000b54 <HAL_GPIO_Init+0x240>
 8000b46:	2303      	movs	r3, #3
 8000b48:	e004      	b.n	8000b54 <HAL_GPIO_Init+0x240>
 8000b4a:	2302      	movs	r3, #2
 8000b4c:	e002      	b.n	8000b54 <HAL_GPIO_Init+0x240>
 8000b4e:	2301      	movs	r3, #1
 8000b50:	e000      	b.n	8000b54 <HAL_GPIO_Init+0x240>
 8000b52:	2300      	movs	r3, #0
 8000b54:	69fa      	ldr	r2, [r7, #28]
 8000b56:	f002 0203 	and.w	r2, r2, #3
 8000b5a:	0092      	lsls	r2, r2, #2
 8000b5c:	4093      	lsls	r3, r2
 8000b5e:	69ba      	ldr	r2, [r7, #24]
 8000b60:	4313      	orrs	r3, r2
 8000b62:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000b64:	4935      	ldr	r1, [pc, #212]	; (8000c3c <HAL_GPIO_Init+0x328>)
 8000b66:	69fb      	ldr	r3, [r7, #28]
 8000b68:	089b      	lsrs	r3, r3, #2
 8000b6a:	3302      	adds	r3, #2
 8000b6c:	69ba      	ldr	r2, [r7, #24]
 8000b6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b72:	4b3d      	ldr	r3, [pc, #244]	; (8000c68 <HAL_GPIO_Init+0x354>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b78:	693b      	ldr	r3, [r7, #16]
 8000b7a:	43db      	mvns	r3, r3
 8000b7c:	69ba      	ldr	r2, [r7, #24]
 8000b7e:	4013      	ands	r3, r2
 8000b80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	685b      	ldr	r3, [r3, #4]
 8000b86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d003      	beq.n	8000b96 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000b8e:	69ba      	ldr	r2, [r7, #24]
 8000b90:	693b      	ldr	r3, [r7, #16]
 8000b92:	4313      	orrs	r3, r2
 8000b94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000b96:	4a34      	ldr	r2, [pc, #208]	; (8000c68 <HAL_GPIO_Init+0x354>)
 8000b98:	69bb      	ldr	r3, [r7, #24]
 8000b9a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000b9c:	4b32      	ldr	r3, [pc, #200]	; (8000c68 <HAL_GPIO_Init+0x354>)
 8000b9e:	685b      	ldr	r3, [r3, #4]
 8000ba0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ba2:	693b      	ldr	r3, [r7, #16]
 8000ba4:	43db      	mvns	r3, r3
 8000ba6:	69ba      	ldr	r2, [r7, #24]
 8000ba8:	4013      	ands	r3, r2
 8000baa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	685b      	ldr	r3, [r3, #4]
 8000bb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d003      	beq.n	8000bc0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000bb8:	69ba      	ldr	r2, [r7, #24]
 8000bba:	693b      	ldr	r3, [r7, #16]
 8000bbc:	4313      	orrs	r3, r2
 8000bbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000bc0:	4a29      	ldr	r2, [pc, #164]	; (8000c68 <HAL_GPIO_Init+0x354>)
 8000bc2:	69bb      	ldr	r3, [r7, #24]
 8000bc4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000bc6:	4b28      	ldr	r3, [pc, #160]	; (8000c68 <HAL_GPIO_Init+0x354>)
 8000bc8:	689b      	ldr	r3, [r3, #8]
 8000bca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000bcc:	693b      	ldr	r3, [r7, #16]
 8000bce:	43db      	mvns	r3, r3
 8000bd0:	69ba      	ldr	r2, [r7, #24]
 8000bd2:	4013      	ands	r3, r2
 8000bd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	685b      	ldr	r3, [r3, #4]
 8000bda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d003      	beq.n	8000bea <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000be2:	69ba      	ldr	r2, [r7, #24]
 8000be4:	693b      	ldr	r3, [r7, #16]
 8000be6:	4313      	orrs	r3, r2
 8000be8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000bea:	4a1f      	ldr	r2, [pc, #124]	; (8000c68 <HAL_GPIO_Init+0x354>)
 8000bec:	69bb      	ldr	r3, [r7, #24]
 8000bee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000bf0:	4b1d      	ldr	r3, [pc, #116]	; (8000c68 <HAL_GPIO_Init+0x354>)
 8000bf2:	68db      	ldr	r3, [r3, #12]
 8000bf4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000bf6:	693b      	ldr	r3, [r7, #16]
 8000bf8:	43db      	mvns	r3, r3
 8000bfa:	69ba      	ldr	r2, [r7, #24]
 8000bfc:	4013      	ands	r3, r2
 8000bfe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	685b      	ldr	r3, [r3, #4]
 8000c04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d003      	beq.n	8000c14 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000c0c:	69ba      	ldr	r2, [r7, #24]
 8000c0e:	693b      	ldr	r3, [r7, #16]
 8000c10:	4313      	orrs	r3, r2
 8000c12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000c14:	4a14      	ldr	r2, [pc, #80]	; (8000c68 <HAL_GPIO_Init+0x354>)
 8000c16:	69bb      	ldr	r3, [r7, #24]
 8000c18:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000c1a:	69fb      	ldr	r3, [r7, #28]
 8000c1c:	3301      	adds	r3, #1
 8000c1e:	61fb      	str	r3, [r7, #28]
 8000c20:	69fb      	ldr	r3, [r7, #28]
 8000c22:	2b0f      	cmp	r3, #15
 8000c24:	f67f ae86 	bls.w	8000934 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8000c28:	bf00      	nop
 8000c2a:	bf00      	nop
 8000c2c:	3724      	adds	r7, #36	; 0x24
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	40023800 	.word	0x40023800
 8000c3c:	40013800 	.word	0x40013800
 8000c40:	40020000 	.word	0x40020000
 8000c44:	40020400 	.word	0x40020400
 8000c48:	40020800 	.word	0x40020800
 8000c4c:	40020c00 	.word	0x40020c00
 8000c50:	40021000 	.word	0x40021000
 8000c54:	40021400 	.word	0x40021400
 8000c58:	40021800 	.word	0x40021800
 8000c5c:	40021c00 	.word	0x40021c00
 8000c60:	40022000 	.word	0x40022000
 8000c64:	40022400 	.word	0x40022400
 8000c68:	40013c00 	.word	0x40013c00

08000c6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
 8000c74:	460b      	mov	r3, r1
 8000c76:	807b      	strh	r3, [r7, #2]
 8000c78:	4613      	mov	r3, r2
 8000c7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c7c:	787b      	ldrb	r3, [r7, #1]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d003      	beq.n	8000c8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c82:	887a      	ldrh	r2, [r7, #2]
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8000c88:	e003      	b.n	8000c92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8000c8a:	887b      	ldrh	r3, [r7, #2]
 8000c8c:	041a      	lsls	r2, r3, #16
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	619a      	str	r2, [r3, #24]
}
 8000c92:	bf00      	nop
 8000c94:	370c      	adds	r7, #12
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr

08000c9e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000c9e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ca0:	b08f      	sub	sp, #60	; 0x3c
 8000ca2:	af0a      	add	r7, sp, #40	; 0x28
 8000ca4:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d101      	bne.n	8000cb0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000cac:	2301      	movs	r3, #1
 8000cae:	e10a      	b.n	8000ec6 <HAL_PCD_Init+0x228>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8000cb6:	b2db      	uxtb	r3, r3
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d106      	bne.n	8000cca <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000cc4:	6878      	ldr	r0, [r7, #4]
 8000cc6:	f003 fd61 	bl	800478c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	2203      	movs	r2, #3
 8000cce:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f002 fe3a 	bl	8003950 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	603b      	str	r3, [r7, #0]
 8000ce2:	687e      	ldr	r6, [r7, #4]
 8000ce4:	466d      	mov	r5, sp
 8000ce6:	f106 0410 	add.w	r4, r6, #16
 8000cea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000cec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000cee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000cf0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000cf2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000cf6:	e885 0003 	stmia.w	r5, {r0, r1}
 8000cfa:	1d33      	adds	r3, r6, #4
 8000cfc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000cfe:	6838      	ldr	r0, [r7, #0]
 8000d00:	f002 fdce 	bl	80038a0 <USB_CoreInit>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d005      	beq.n	8000d16 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	2202      	movs	r2, #2
 8000d0e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8000d12:	2301      	movs	r3, #1
 8000d14:	e0d7      	b.n	8000ec6 <HAL_PCD_Init+0x228>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	2100      	movs	r1, #0
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f002 fe28 	bl	8003972 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d22:	2300      	movs	r3, #0
 8000d24:	73fb      	strb	r3, [r7, #15]
 8000d26:	e04a      	b.n	8000dbe <HAL_PCD_Init+0x120>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000d28:	7bfa      	ldrb	r2, [r7, #15]
 8000d2a:	6879      	ldr	r1, [r7, #4]
 8000d2c:	4613      	mov	r3, r2
 8000d2e:	00db      	lsls	r3, r3, #3
 8000d30:	1a9b      	subs	r3, r3, r2
 8000d32:	009b      	lsls	r3, r3, #2
 8000d34:	440b      	add	r3, r1
 8000d36:	333d      	adds	r3, #61	; 0x3d
 8000d38:	2201      	movs	r2, #1
 8000d3a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000d3c:	7bfa      	ldrb	r2, [r7, #15]
 8000d3e:	6879      	ldr	r1, [r7, #4]
 8000d40:	4613      	mov	r3, r2
 8000d42:	00db      	lsls	r3, r3, #3
 8000d44:	1a9b      	subs	r3, r3, r2
 8000d46:	009b      	lsls	r3, r3, #2
 8000d48:	440b      	add	r3, r1
 8000d4a:	333c      	adds	r3, #60	; 0x3c
 8000d4c:	7bfa      	ldrb	r2, [r7, #15]
 8000d4e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000d50:	7bfa      	ldrb	r2, [r7, #15]
 8000d52:	7bfb      	ldrb	r3, [r7, #15]
 8000d54:	b298      	uxth	r0, r3
 8000d56:	6879      	ldr	r1, [r7, #4]
 8000d58:	4613      	mov	r3, r2
 8000d5a:	00db      	lsls	r3, r3, #3
 8000d5c:	1a9b      	subs	r3, r3, r2
 8000d5e:	009b      	lsls	r3, r3, #2
 8000d60:	440b      	add	r3, r1
 8000d62:	3342      	adds	r3, #66	; 0x42
 8000d64:	4602      	mov	r2, r0
 8000d66:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000d68:	7bfa      	ldrb	r2, [r7, #15]
 8000d6a:	6879      	ldr	r1, [r7, #4]
 8000d6c:	4613      	mov	r3, r2
 8000d6e:	00db      	lsls	r3, r3, #3
 8000d70:	1a9b      	subs	r3, r3, r2
 8000d72:	009b      	lsls	r3, r3, #2
 8000d74:	440b      	add	r3, r1
 8000d76:	333f      	adds	r3, #63	; 0x3f
 8000d78:	2200      	movs	r2, #0
 8000d7a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000d7c:	7bfa      	ldrb	r2, [r7, #15]
 8000d7e:	6879      	ldr	r1, [r7, #4]
 8000d80:	4613      	mov	r3, r2
 8000d82:	00db      	lsls	r3, r3, #3
 8000d84:	1a9b      	subs	r3, r3, r2
 8000d86:	009b      	lsls	r3, r3, #2
 8000d88:	440b      	add	r3, r1
 8000d8a:	3344      	adds	r3, #68	; 0x44
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000d90:	7bfa      	ldrb	r2, [r7, #15]
 8000d92:	6879      	ldr	r1, [r7, #4]
 8000d94:	4613      	mov	r3, r2
 8000d96:	00db      	lsls	r3, r3, #3
 8000d98:	1a9b      	subs	r3, r3, r2
 8000d9a:	009b      	lsls	r3, r3, #2
 8000d9c:	440b      	add	r3, r1
 8000d9e:	3348      	adds	r3, #72	; 0x48
 8000da0:	2200      	movs	r2, #0
 8000da2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000da4:	7bfa      	ldrb	r2, [r7, #15]
 8000da6:	6879      	ldr	r1, [r7, #4]
 8000da8:	4613      	mov	r3, r2
 8000daa:	00db      	lsls	r3, r3, #3
 8000dac:	1a9b      	subs	r3, r3, r2
 8000dae:	009b      	lsls	r3, r3, #2
 8000db0:	440b      	add	r3, r1
 8000db2:	3350      	adds	r3, #80	; 0x50
 8000db4:	2200      	movs	r2, #0
 8000db6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000db8:	7bfb      	ldrb	r3, [r7, #15]
 8000dba:	3301      	adds	r3, #1
 8000dbc:	73fb      	strb	r3, [r7, #15]
 8000dbe:	7bfa      	ldrb	r2, [r7, #15]
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	429a      	cmp	r2, r3
 8000dc6:	d3af      	bcc.n	8000d28 <HAL_PCD_Init+0x8a>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000dc8:	2300      	movs	r3, #0
 8000dca:	73fb      	strb	r3, [r7, #15]
 8000dcc:	e044      	b.n	8000e58 <HAL_PCD_Init+0x1ba>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000dce:	7bfa      	ldrb	r2, [r7, #15]
 8000dd0:	6879      	ldr	r1, [r7, #4]
 8000dd2:	4613      	mov	r3, r2
 8000dd4:	00db      	lsls	r3, r3, #3
 8000dd6:	1a9b      	subs	r3, r3, r2
 8000dd8:	009b      	lsls	r3, r3, #2
 8000dda:	440b      	add	r3, r1
 8000ddc:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8000de0:	2200      	movs	r2, #0
 8000de2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000de4:	7bfa      	ldrb	r2, [r7, #15]
 8000de6:	6879      	ldr	r1, [r7, #4]
 8000de8:	4613      	mov	r3, r2
 8000dea:	00db      	lsls	r3, r3, #3
 8000dec:	1a9b      	subs	r3, r3, r2
 8000dee:	009b      	lsls	r3, r3, #2
 8000df0:	440b      	add	r3, r1
 8000df2:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8000df6:	7bfa      	ldrb	r2, [r7, #15]
 8000df8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000dfa:	7bfa      	ldrb	r2, [r7, #15]
 8000dfc:	6879      	ldr	r1, [r7, #4]
 8000dfe:	4613      	mov	r3, r2
 8000e00:	00db      	lsls	r3, r3, #3
 8000e02:	1a9b      	subs	r3, r3, r2
 8000e04:	009b      	lsls	r3, r3, #2
 8000e06:	440b      	add	r3, r1
 8000e08:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000e10:	7bfa      	ldrb	r2, [r7, #15]
 8000e12:	6879      	ldr	r1, [r7, #4]
 8000e14:	4613      	mov	r3, r2
 8000e16:	00db      	lsls	r3, r3, #3
 8000e18:	1a9b      	subs	r3, r3, r2
 8000e1a:	009b      	lsls	r3, r3, #2
 8000e1c:	440b      	add	r3, r1
 8000e1e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8000e22:	2200      	movs	r2, #0
 8000e24:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000e26:	7bfa      	ldrb	r2, [r7, #15]
 8000e28:	6879      	ldr	r1, [r7, #4]
 8000e2a:	4613      	mov	r3, r2
 8000e2c:	00db      	lsls	r3, r3, #3
 8000e2e:	1a9b      	subs	r3, r3, r2
 8000e30:	009b      	lsls	r3, r3, #2
 8000e32:	440b      	add	r3, r1
 8000e34:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8000e38:	2200      	movs	r2, #0
 8000e3a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000e3c:	7bfa      	ldrb	r2, [r7, #15]
 8000e3e:	6879      	ldr	r1, [r7, #4]
 8000e40:	4613      	mov	r3, r2
 8000e42:	00db      	lsls	r3, r3, #3
 8000e44:	1a9b      	subs	r3, r3, r2
 8000e46:	009b      	lsls	r3, r3, #2
 8000e48:	440b      	add	r3, r1
 8000e4a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8000e4e:	2200      	movs	r2, #0
 8000e50:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e52:	7bfb      	ldrb	r3, [r7, #15]
 8000e54:	3301      	adds	r3, #1
 8000e56:	73fb      	strb	r3, [r7, #15]
 8000e58:	7bfa      	ldrb	r2, [r7, #15]
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	429a      	cmp	r2, r3
 8000e60:	d3b5      	bcc.n	8000dce <HAL_PCD_Init+0x130>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	603b      	str	r3, [r7, #0]
 8000e68:	687e      	ldr	r6, [r7, #4]
 8000e6a:	466d      	mov	r5, sp
 8000e6c:	f106 0410 	add.w	r4, r6, #16
 8000e70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e72:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e78:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000e7c:	e885 0003 	stmia.w	r5, {r0, r1}
 8000e80:	1d33      	adds	r3, r6, #4
 8000e82:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e84:	6838      	ldr	r0, [r7, #0]
 8000e86:	f002 fd9f 	bl	80039c8 <USB_DevInit>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d005      	beq.n	8000e9c <HAL_PCD_Init+0x1fe>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2202      	movs	r2, #2
 8000e94:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	e014      	b.n	8000ec6 <HAL_PCD_Init+0x228>
  }

  hpcd->USB_Address = 0U;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eb0:	2b01      	cmp	r3, #1
 8000eb2:	d102      	bne.n	8000eba <HAL_PCD_Init+0x21c>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8000eb4:	6878      	ldr	r0, [r7, #4]
 8000eb6:	f000 f80b 	bl	8000ed0 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f002 ff5f 	bl	8003d82 <USB_DevDisconnect>

  return HAL_OK;
 8000ec4:	2300      	movs	r3, #0
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3714      	adds	r7, #20
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08000ed0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b085      	sub	sp, #20
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2200      	movs	r2, #0
 8000eea:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	699b      	ldr	r3, [r3, #24]
 8000ef2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8000efe:	4b05      	ldr	r3, [pc, #20]	; (8000f14 <HAL_PCDEx_ActivateLPM+0x44>)
 8000f00:	4313      	orrs	r3, r2
 8000f02:	68fa      	ldr	r2, [r7, #12]
 8000f04:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8000f06:	2300      	movs	r3, #0
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	3714      	adds	r7, #20
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr
 8000f14:	10000003 	.word	0x10000003

08000f18 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000f1c:	4b05      	ldr	r3, [pc, #20]	; (8000f34 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a04      	ldr	r2, [pc, #16]	; (8000f34 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000f22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f26:	6013      	str	r3, [r2, #0]
}
 8000f28:	bf00      	nop
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	40007000 	.word	0x40007000

08000f38 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b086      	sub	sp, #24
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8000f40:	2300      	movs	r3, #0
 8000f42:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d101      	bne.n	8000f4e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	e25c      	b.n	8001408 <HAL_RCC_OscConfig+0x4d0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f003 0301 	and.w	r3, r3, #1
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	f000 8087 	beq.w	800106a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f5c:	4b96      	ldr	r3, [pc, #600]	; (80011b8 <HAL_RCC_OscConfig+0x280>)
 8000f5e:	689b      	ldr	r3, [r3, #8]
 8000f60:	f003 030c 	and.w	r3, r3, #12
 8000f64:	2b04      	cmp	r3, #4
 8000f66:	d00c      	beq.n	8000f82 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f68:	4b93      	ldr	r3, [pc, #588]	; (80011b8 <HAL_RCC_OscConfig+0x280>)
 8000f6a:	689b      	ldr	r3, [r3, #8]
 8000f6c:	f003 030c 	and.w	r3, r3, #12
 8000f70:	2b08      	cmp	r3, #8
 8000f72:	d112      	bne.n	8000f9a <HAL_RCC_OscConfig+0x62>
 8000f74:	4b90      	ldr	r3, [pc, #576]	; (80011b8 <HAL_RCC_OscConfig+0x280>)
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f7c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000f80:	d10b      	bne.n	8000f9a <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f82:	4b8d      	ldr	r3, [pc, #564]	; (80011b8 <HAL_RCC_OscConfig+0x280>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d06c      	beq.n	8001068 <HAL_RCC_OscConfig+0x130>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d168      	bne.n	8001068 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8000f96:	2301      	movs	r3, #1
 8000f98:	e236      	b.n	8001408 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fa2:	d106      	bne.n	8000fb2 <HAL_RCC_OscConfig+0x7a>
 8000fa4:	4b84      	ldr	r3, [pc, #528]	; (80011b8 <HAL_RCC_OscConfig+0x280>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a83      	ldr	r2, [pc, #524]	; (80011b8 <HAL_RCC_OscConfig+0x280>)
 8000faa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fae:	6013      	str	r3, [r2, #0]
 8000fb0:	e02e      	b.n	8001010 <HAL_RCC_OscConfig+0xd8>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d10c      	bne.n	8000fd4 <HAL_RCC_OscConfig+0x9c>
 8000fba:	4b7f      	ldr	r3, [pc, #508]	; (80011b8 <HAL_RCC_OscConfig+0x280>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4a7e      	ldr	r2, [pc, #504]	; (80011b8 <HAL_RCC_OscConfig+0x280>)
 8000fc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fc4:	6013      	str	r3, [r2, #0]
 8000fc6:	4b7c      	ldr	r3, [pc, #496]	; (80011b8 <HAL_RCC_OscConfig+0x280>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4a7b      	ldr	r2, [pc, #492]	; (80011b8 <HAL_RCC_OscConfig+0x280>)
 8000fcc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fd0:	6013      	str	r3, [r2, #0]
 8000fd2:	e01d      	b.n	8001010 <HAL_RCC_OscConfig+0xd8>
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000fdc:	d10c      	bne.n	8000ff8 <HAL_RCC_OscConfig+0xc0>
 8000fde:	4b76      	ldr	r3, [pc, #472]	; (80011b8 <HAL_RCC_OscConfig+0x280>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4a75      	ldr	r2, [pc, #468]	; (80011b8 <HAL_RCC_OscConfig+0x280>)
 8000fe4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fe8:	6013      	str	r3, [r2, #0]
 8000fea:	4b73      	ldr	r3, [pc, #460]	; (80011b8 <HAL_RCC_OscConfig+0x280>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4a72      	ldr	r2, [pc, #456]	; (80011b8 <HAL_RCC_OscConfig+0x280>)
 8000ff0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ff4:	6013      	str	r3, [r2, #0]
 8000ff6:	e00b      	b.n	8001010 <HAL_RCC_OscConfig+0xd8>
 8000ff8:	4b6f      	ldr	r3, [pc, #444]	; (80011b8 <HAL_RCC_OscConfig+0x280>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a6e      	ldr	r2, [pc, #440]	; (80011b8 <HAL_RCC_OscConfig+0x280>)
 8000ffe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001002:	6013      	str	r3, [r2, #0]
 8001004:	4b6c      	ldr	r3, [pc, #432]	; (80011b8 <HAL_RCC_OscConfig+0x280>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a6b      	ldr	r2, [pc, #428]	; (80011b8 <HAL_RCC_OscConfig+0x280>)
 800100a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800100e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d013      	beq.n	8001040 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001018:	f7ff fb18 	bl	800064c <HAL_GetTick>
 800101c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800101e:	e008      	b.n	8001032 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001020:	f7ff fb14 	bl	800064c <HAL_GetTick>
 8001024:	4602      	mov	r2, r0
 8001026:	693b      	ldr	r3, [r7, #16]
 8001028:	1ad3      	subs	r3, r2, r3
 800102a:	2b64      	cmp	r3, #100	; 0x64
 800102c:	d901      	bls.n	8001032 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800102e:	2303      	movs	r3, #3
 8001030:	e1ea      	b.n	8001408 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001032:	4b61      	ldr	r3, [pc, #388]	; (80011b8 <HAL_RCC_OscConfig+0x280>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800103a:	2b00      	cmp	r3, #0
 800103c:	d0f0      	beq.n	8001020 <HAL_RCC_OscConfig+0xe8>
 800103e:	e014      	b.n	800106a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001040:	f7ff fb04 	bl	800064c <HAL_GetTick>
 8001044:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001046:	e008      	b.n	800105a <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001048:	f7ff fb00 	bl	800064c <HAL_GetTick>
 800104c:	4602      	mov	r2, r0
 800104e:	693b      	ldr	r3, [r7, #16]
 8001050:	1ad3      	subs	r3, r2, r3
 8001052:	2b64      	cmp	r3, #100	; 0x64
 8001054:	d901      	bls.n	800105a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001056:	2303      	movs	r3, #3
 8001058:	e1d6      	b.n	8001408 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800105a:	4b57      	ldr	r3, [pc, #348]	; (80011b8 <HAL_RCC_OscConfig+0x280>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001062:	2b00      	cmp	r3, #0
 8001064:	d1f0      	bne.n	8001048 <HAL_RCC_OscConfig+0x110>
 8001066:	e000      	b.n	800106a <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001068:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f003 0302 	and.w	r3, r3, #2
 8001072:	2b00      	cmp	r3, #0
 8001074:	d069      	beq.n	800114a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001076:	4b50      	ldr	r3, [pc, #320]	; (80011b8 <HAL_RCC_OscConfig+0x280>)
 8001078:	689b      	ldr	r3, [r3, #8]
 800107a:	f003 030c 	and.w	r3, r3, #12
 800107e:	2b00      	cmp	r3, #0
 8001080:	d00b      	beq.n	800109a <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001082:	4b4d      	ldr	r3, [pc, #308]	; (80011b8 <HAL_RCC_OscConfig+0x280>)
 8001084:	689b      	ldr	r3, [r3, #8]
 8001086:	f003 030c 	and.w	r3, r3, #12
 800108a:	2b08      	cmp	r3, #8
 800108c:	d11c      	bne.n	80010c8 <HAL_RCC_OscConfig+0x190>
 800108e:	4b4a      	ldr	r3, [pc, #296]	; (80011b8 <HAL_RCC_OscConfig+0x280>)
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001096:	2b00      	cmp	r3, #0
 8001098:	d116      	bne.n	80010c8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800109a:	4b47      	ldr	r3, [pc, #284]	; (80011b8 <HAL_RCC_OscConfig+0x280>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f003 0302 	and.w	r3, r3, #2
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d005      	beq.n	80010b2 <HAL_RCC_OscConfig+0x17a>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	68db      	ldr	r3, [r3, #12]
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d001      	beq.n	80010b2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80010ae:	2301      	movs	r3, #1
 80010b0:	e1aa      	b.n	8001408 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010b2:	4b41      	ldr	r3, [pc, #260]	; (80011b8 <HAL_RCC_OscConfig+0x280>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	691b      	ldr	r3, [r3, #16]
 80010be:	00db      	lsls	r3, r3, #3
 80010c0:	493d      	ldr	r1, [pc, #244]	; (80011b8 <HAL_RCC_OscConfig+0x280>)
 80010c2:	4313      	orrs	r3, r2
 80010c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010c6:	e040      	b.n	800114a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d023      	beq.n	8001118 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010d0:	4b39      	ldr	r3, [pc, #228]	; (80011b8 <HAL_RCC_OscConfig+0x280>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a38      	ldr	r2, [pc, #224]	; (80011b8 <HAL_RCC_OscConfig+0x280>)
 80010d6:	f043 0301 	orr.w	r3, r3, #1
 80010da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010dc:	f7ff fab6 	bl	800064c <HAL_GetTick>
 80010e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010e2:	e008      	b.n	80010f6 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010e4:	f7ff fab2 	bl	800064c <HAL_GetTick>
 80010e8:	4602      	mov	r2, r0
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	1ad3      	subs	r3, r2, r3
 80010ee:	2b02      	cmp	r3, #2
 80010f0:	d901      	bls.n	80010f6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80010f2:	2303      	movs	r3, #3
 80010f4:	e188      	b.n	8001408 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010f6:	4b30      	ldr	r3, [pc, #192]	; (80011b8 <HAL_RCC_OscConfig+0x280>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f003 0302 	and.w	r3, r3, #2
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d0f0      	beq.n	80010e4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001102:	4b2d      	ldr	r3, [pc, #180]	; (80011b8 <HAL_RCC_OscConfig+0x280>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	691b      	ldr	r3, [r3, #16]
 800110e:	00db      	lsls	r3, r3, #3
 8001110:	4929      	ldr	r1, [pc, #164]	; (80011b8 <HAL_RCC_OscConfig+0x280>)
 8001112:	4313      	orrs	r3, r2
 8001114:	600b      	str	r3, [r1, #0]
 8001116:	e018      	b.n	800114a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001118:	4b27      	ldr	r3, [pc, #156]	; (80011b8 <HAL_RCC_OscConfig+0x280>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a26      	ldr	r2, [pc, #152]	; (80011b8 <HAL_RCC_OscConfig+0x280>)
 800111e:	f023 0301 	bic.w	r3, r3, #1
 8001122:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001124:	f7ff fa92 	bl	800064c <HAL_GetTick>
 8001128:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800112a:	e008      	b.n	800113e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800112c:	f7ff fa8e 	bl	800064c <HAL_GetTick>
 8001130:	4602      	mov	r2, r0
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	1ad3      	subs	r3, r2, r3
 8001136:	2b02      	cmp	r3, #2
 8001138:	d901      	bls.n	800113e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800113a:	2303      	movs	r3, #3
 800113c:	e164      	b.n	8001408 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800113e:	4b1e      	ldr	r3, [pc, #120]	; (80011b8 <HAL_RCC_OscConfig+0x280>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f003 0302 	and.w	r3, r3, #2
 8001146:	2b00      	cmp	r3, #0
 8001148:	d1f0      	bne.n	800112c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f003 0308 	and.w	r3, r3, #8
 8001152:	2b00      	cmp	r3, #0
 8001154:	d038      	beq.n	80011c8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	695b      	ldr	r3, [r3, #20]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d019      	beq.n	8001192 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800115e:	4b16      	ldr	r3, [pc, #88]	; (80011b8 <HAL_RCC_OscConfig+0x280>)
 8001160:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001162:	4a15      	ldr	r2, [pc, #84]	; (80011b8 <HAL_RCC_OscConfig+0x280>)
 8001164:	f043 0301 	orr.w	r3, r3, #1
 8001168:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800116a:	f7ff fa6f 	bl	800064c <HAL_GetTick>
 800116e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001170:	e008      	b.n	8001184 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001172:	f7ff fa6b 	bl	800064c <HAL_GetTick>
 8001176:	4602      	mov	r2, r0
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	1ad3      	subs	r3, r2, r3
 800117c:	2b02      	cmp	r3, #2
 800117e:	d901      	bls.n	8001184 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001180:	2303      	movs	r3, #3
 8001182:	e141      	b.n	8001408 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001184:	4b0c      	ldr	r3, [pc, #48]	; (80011b8 <HAL_RCC_OscConfig+0x280>)
 8001186:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001188:	f003 0302 	and.w	r3, r3, #2
 800118c:	2b00      	cmp	r3, #0
 800118e:	d0f0      	beq.n	8001172 <HAL_RCC_OscConfig+0x23a>
 8001190:	e01a      	b.n	80011c8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001192:	4b09      	ldr	r3, [pc, #36]	; (80011b8 <HAL_RCC_OscConfig+0x280>)
 8001194:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001196:	4a08      	ldr	r2, [pc, #32]	; (80011b8 <HAL_RCC_OscConfig+0x280>)
 8001198:	f023 0301 	bic.w	r3, r3, #1
 800119c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800119e:	f7ff fa55 	bl	800064c <HAL_GetTick>
 80011a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011a4:	e00a      	b.n	80011bc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011a6:	f7ff fa51 	bl	800064c <HAL_GetTick>
 80011aa:	4602      	mov	r2, r0
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	1ad3      	subs	r3, r2, r3
 80011b0:	2b02      	cmp	r3, #2
 80011b2:	d903      	bls.n	80011bc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80011b4:	2303      	movs	r3, #3
 80011b6:	e127      	b.n	8001408 <HAL_RCC_OscConfig+0x4d0>
 80011b8:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011bc:	4b94      	ldr	r3, [pc, #592]	; (8001410 <HAL_RCC_OscConfig+0x4d8>)
 80011be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80011c0:	f003 0302 	and.w	r3, r3, #2
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d1ee      	bne.n	80011a6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f003 0304 	and.w	r3, r3, #4
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	f000 80a4 	beq.w	800131e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011d6:	4b8e      	ldr	r3, [pc, #568]	; (8001410 <HAL_RCC_OscConfig+0x4d8>)
 80011d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d10d      	bne.n	80011fe <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80011e2:	4b8b      	ldr	r3, [pc, #556]	; (8001410 <HAL_RCC_OscConfig+0x4d8>)
 80011e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e6:	4a8a      	ldr	r2, [pc, #552]	; (8001410 <HAL_RCC_OscConfig+0x4d8>)
 80011e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011ec:	6413      	str	r3, [r2, #64]	; 0x40
 80011ee:	4b88      	ldr	r3, [pc, #544]	; (8001410 <HAL_RCC_OscConfig+0x4d8>)
 80011f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011f6:	60fb      	str	r3, [r7, #12]
 80011f8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80011fa:	2301      	movs	r3, #1
 80011fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011fe:	4b85      	ldr	r3, [pc, #532]	; (8001414 <HAL_RCC_OscConfig+0x4dc>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001206:	2b00      	cmp	r3, #0
 8001208:	d118      	bne.n	800123c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800120a:	4b82      	ldr	r3, [pc, #520]	; (8001414 <HAL_RCC_OscConfig+0x4dc>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a81      	ldr	r2, [pc, #516]	; (8001414 <HAL_RCC_OscConfig+0x4dc>)
 8001210:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001214:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001216:	f7ff fa19 	bl	800064c <HAL_GetTick>
 800121a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800121c:	e008      	b.n	8001230 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800121e:	f7ff fa15 	bl	800064c <HAL_GetTick>
 8001222:	4602      	mov	r2, r0
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	1ad3      	subs	r3, r2, r3
 8001228:	2b64      	cmp	r3, #100	; 0x64
 800122a:	d901      	bls.n	8001230 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800122c:	2303      	movs	r3, #3
 800122e:	e0eb      	b.n	8001408 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001230:	4b78      	ldr	r3, [pc, #480]	; (8001414 <HAL_RCC_OscConfig+0x4dc>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001238:	2b00      	cmp	r3, #0
 800123a:	d0f0      	beq.n	800121e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	689b      	ldr	r3, [r3, #8]
 8001240:	2b01      	cmp	r3, #1
 8001242:	d106      	bne.n	8001252 <HAL_RCC_OscConfig+0x31a>
 8001244:	4b72      	ldr	r3, [pc, #456]	; (8001410 <HAL_RCC_OscConfig+0x4d8>)
 8001246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001248:	4a71      	ldr	r2, [pc, #452]	; (8001410 <HAL_RCC_OscConfig+0x4d8>)
 800124a:	f043 0301 	orr.w	r3, r3, #1
 800124e:	6713      	str	r3, [r2, #112]	; 0x70
 8001250:	e02d      	b.n	80012ae <HAL_RCC_OscConfig+0x376>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	689b      	ldr	r3, [r3, #8]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d10c      	bne.n	8001274 <HAL_RCC_OscConfig+0x33c>
 800125a:	4b6d      	ldr	r3, [pc, #436]	; (8001410 <HAL_RCC_OscConfig+0x4d8>)
 800125c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800125e:	4a6c      	ldr	r2, [pc, #432]	; (8001410 <HAL_RCC_OscConfig+0x4d8>)
 8001260:	f023 0301 	bic.w	r3, r3, #1
 8001264:	6713      	str	r3, [r2, #112]	; 0x70
 8001266:	4b6a      	ldr	r3, [pc, #424]	; (8001410 <HAL_RCC_OscConfig+0x4d8>)
 8001268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800126a:	4a69      	ldr	r2, [pc, #420]	; (8001410 <HAL_RCC_OscConfig+0x4d8>)
 800126c:	f023 0304 	bic.w	r3, r3, #4
 8001270:	6713      	str	r3, [r2, #112]	; 0x70
 8001272:	e01c      	b.n	80012ae <HAL_RCC_OscConfig+0x376>
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	689b      	ldr	r3, [r3, #8]
 8001278:	2b05      	cmp	r3, #5
 800127a:	d10c      	bne.n	8001296 <HAL_RCC_OscConfig+0x35e>
 800127c:	4b64      	ldr	r3, [pc, #400]	; (8001410 <HAL_RCC_OscConfig+0x4d8>)
 800127e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001280:	4a63      	ldr	r2, [pc, #396]	; (8001410 <HAL_RCC_OscConfig+0x4d8>)
 8001282:	f043 0304 	orr.w	r3, r3, #4
 8001286:	6713      	str	r3, [r2, #112]	; 0x70
 8001288:	4b61      	ldr	r3, [pc, #388]	; (8001410 <HAL_RCC_OscConfig+0x4d8>)
 800128a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800128c:	4a60      	ldr	r2, [pc, #384]	; (8001410 <HAL_RCC_OscConfig+0x4d8>)
 800128e:	f043 0301 	orr.w	r3, r3, #1
 8001292:	6713      	str	r3, [r2, #112]	; 0x70
 8001294:	e00b      	b.n	80012ae <HAL_RCC_OscConfig+0x376>
 8001296:	4b5e      	ldr	r3, [pc, #376]	; (8001410 <HAL_RCC_OscConfig+0x4d8>)
 8001298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800129a:	4a5d      	ldr	r2, [pc, #372]	; (8001410 <HAL_RCC_OscConfig+0x4d8>)
 800129c:	f023 0301 	bic.w	r3, r3, #1
 80012a0:	6713      	str	r3, [r2, #112]	; 0x70
 80012a2:	4b5b      	ldr	r3, [pc, #364]	; (8001410 <HAL_RCC_OscConfig+0x4d8>)
 80012a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012a6:	4a5a      	ldr	r2, [pc, #360]	; (8001410 <HAL_RCC_OscConfig+0x4d8>)
 80012a8:	f023 0304 	bic.w	r3, r3, #4
 80012ac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d015      	beq.n	80012e2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012b6:	f7ff f9c9 	bl	800064c <HAL_GetTick>
 80012ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012bc:	e00a      	b.n	80012d4 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012be:	f7ff f9c5 	bl	800064c <HAL_GetTick>
 80012c2:	4602      	mov	r2, r0
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	1ad3      	subs	r3, r2, r3
 80012c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d901      	bls.n	80012d4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80012d0:	2303      	movs	r3, #3
 80012d2:	e099      	b.n	8001408 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012d4:	4b4e      	ldr	r3, [pc, #312]	; (8001410 <HAL_RCC_OscConfig+0x4d8>)
 80012d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012d8:	f003 0302 	and.w	r3, r3, #2
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d0ee      	beq.n	80012be <HAL_RCC_OscConfig+0x386>
 80012e0:	e014      	b.n	800130c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012e2:	f7ff f9b3 	bl	800064c <HAL_GetTick>
 80012e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012e8:	e00a      	b.n	8001300 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012ea:	f7ff f9af 	bl	800064c <HAL_GetTick>
 80012ee:	4602      	mov	r2, r0
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	1ad3      	subs	r3, r2, r3
 80012f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d901      	bls.n	8001300 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80012fc:	2303      	movs	r3, #3
 80012fe:	e083      	b.n	8001408 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001300:	4b43      	ldr	r3, [pc, #268]	; (8001410 <HAL_RCC_OscConfig+0x4d8>)
 8001302:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001304:	f003 0302 	and.w	r3, r3, #2
 8001308:	2b00      	cmp	r3, #0
 800130a:	d1ee      	bne.n	80012ea <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800130c:	7dfb      	ldrb	r3, [r7, #23]
 800130e:	2b01      	cmp	r3, #1
 8001310:	d105      	bne.n	800131e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001312:	4b3f      	ldr	r3, [pc, #252]	; (8001410 <HAL_RCC_OscConfig+0x4d8>)
 8001314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001316:	4a3e      	ldr	r2, [pc, #248]	; (8001410 <HAL_RCC_OscConfig+0x4d8>)
 8001318:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800131c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	699b      	ldr	r3, [r3, #24]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d06f      	beq.n	8001406 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001326:	4b3a      	ldr	r3, [pc, #232]	; (8001410 <HAL_RCC_OscConfig+0x4d8>)
 8001328:	689b      	ldr	r3, [r3, #8]
 800132a:	f003 030c 	and.w	r3, r3, #12
 800132e:	2b08      	cmp	r3, #8
 8001330:	d067      	beq.n	8001402 <HAL_RCC_OscConfig+0x4ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	699b      	ldr	r3, [r3, #24]
 8001336:	2b02      	cmp	r3, #2
 8001338:	d149      	bne.n	80013ce <HAL_RCC_OscConfig+0x496>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800133a:	4b35      	ldr	r3, [pc, #212]	; (8001410 <HAL_RCC_OscConfig+0x4d8>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a34      	ldr	r2, [pc, #208]	; (8001410 <HAL_RCC_OscConfig+0x4d8>)
 8001340:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001344:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001346:	f7ff f981 	bl	800064c <HAL_GetTick>
 800134a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800134c:	e008      	b.n	8001360 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800134e:	f7ff f97d 	bl	800064c <HAL_GetTick>
 8001352:	4602      	mov	r2, r0
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	1ad3      	subs	r3, r2, r3
 8001358:	2b02      	cmp	r3, #2
 800135a:	d901      	bls.n	8001360 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800135c:	2303      	movs	r3, #3
 800135e:	e053      	b.n	8001408 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001360:	4b2b      	ldr	r3, [pc, #172]	; (8001410 <HAL_RCC_OscConfig+0x4d8>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001368:	2b00      	cmp	r3, #0
 800136a:	d1f0      	bne.n	800134e <HAL_RCC_OscConfig+0x416>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	69da      	ldr	r2, [r3, #28]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6a1b      	ldr	r3, [r3, #32]
 8001374:	431a      	orrs	r2, r3
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800137a:	019b      	lsls	r3, r3, #6
 800137c:	431a      	orrs	r2, r3
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001382:	085b      	lsrs	r3, r3, #1
 8001384:	3b01      	subs	r3, #1
 8001386:	041b      	lsls	r3, r3, #16
 8001388:	431a      	orrs	r2, r3
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800138e:	061b      	lsls	r3, r3, #24
 8001390:	4313      	orrs	r3, r2
 8001392:	4a1f      	ldr	r2, [pc, #124]	; (8001410 <HAL_RCC_OscConfig+0x4d8>)
 8001394:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001398:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800139a:	4b1d      	ldr	r3, [pc, #116]	; (8001410 <HAL_RCC_OscConfig+0x4d8>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4a1c      	ldr	r2, [pc, #112]	; (8001410 <HAL_RCC_OscConfig+0x4d8>)
 80013a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80013a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013a6:	f7ff f951 	bl	800064c <HAL_GetTick>
 80013aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013ac:	e008      	b.n	80013c0 <HAL_RCC_OscConfig+0x488>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013ae:	f7ff f94d 	bl	800064c <HAL_GetTick>
 80013b2:	4602      	mov	r2, r0
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	1ad3      	subs	r3, r2, r3
 80013b8:	2b02      	cmp	r3, #2
 80013ba:	d901      	bls.n	80013c0 <HAL_RCC_OscConfig+0x488>
          {
            return HAL_TIMEOUT;
 80013bc:	2303      	movs	r3, #3
 80013be:	e023      	b.n	8001408 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013c0:	4b13      	ldr	r3, [pc, #76]	; (8001410 <HAL_RCC_OscConfig+0x4d8>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d0f0      	beq.n	80013ae <HAL_RCC_OscConfig+0x476>
 80013cc:	e01b      	b.n	8001406 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013ce:	4b10      	ldr	r3, [pc, #64]	; (8001410 <HAL_RCC_OscConfig+0x4d8>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4a0f      	ldr	r2, [pc, #60]	; (8001410 <HAL_RCC_OscConfig+0x4d8>)
 80013d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80013d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013da:	f7ff f937 	bl	800064c <HAL_GetTick>
 80013de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013e0:	e008      	b.n	80013f4 <HAL_RCC_OscConfig+0x4bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013e2:	f7ff f933 	bl	800064c <HAL_GetTick>
 80013e6:	4602      	mov	r2, r0
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	1ad3      	subs	r3, r2, r3
 80013ec:	2b02      	cmp	r3, #2
 80013ee:	d901      	bls.n	80013f4 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 80013f0:	2303      	movs	r3, #3
 80013f2:	e009      	b.n	8001408 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013f4:	4b06      	ldr	r3, [pc, #24]	; (8001410 <HAL_RCC_OscConfig+0x4d8>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d1f0      	bne.n	80013e2 <HAL_RCC_OscConfig+0x4aa>
 8001400:	e001      	b.n	8001406 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	e000      	b.n	8001408 <HAL_RCC_OscConfig+0x4d0>
    }
  }
  return HAL_OK;
 8001406:	2300      	movs	r3, #0
}
 8001408:	4618      	mov	r0, r3
 800140a:	3718      	adds	r7, #24
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	40023800 	.word	0x40023800
 8001414:	40007000 	.word	0x40007000

08001418 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b084      	sub	sp, #16
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001422:	2300      	movs	r3, #0
 8001424:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d101      	bne.n	8001430 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800142c:	2301      	movs	r3, #1
 800142e:	e0ce      	b.n	80015ce <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001430:	4b69      	ldr	r3, [pc, #420]	; (80015d8 <HAL_RCC_ClockConfig+0x1c0>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f003 030f 	and.w	r3, r3, #15
 8001438:	683a      	ldr	r2, [r7, #0]
 800143a:	429a      	cmp	r2, r3
 800143c:	d910      	bls.n	8001460 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800143e:	4b66      	ldr	r3, [pc, #408]	; (80015d8 <HAL_RCC_ClockConfig+0x1c0>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f023 020f 	bic.w	r2, r3, #15
 8001446:	4964      	ldr	r1, [pc, #400]	; (80015d8 <HAL_RCC_ClockConfig+0x1c0>)
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	4313      	orrs	r3, r2
 800144c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800144e:	4b62      	ldr	r3, [pc, #392]	; (80015d8 <HAL_RCC_ClockConfig+0x1c0>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f003 030f 	and.w	r3, r3, #15
 8001456:	683a      	ldr	r2, [r7, #0]
 8001458:	429a      	cmp	r2, r3
 800145a:	d001      	beq.n	8001460 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800145c:	2301      	movs	r3, #1
 800145e:	e0b6      	b.n	80015ce <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f003 0302 	and.w	r3, r3, #2
 8001468:	2b00      	cmp	r3, #0
 800146a:	d020      	beq.n	80014ae <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f003 0304 	and.w	r3, r3, #4
 8001474:	2b00      	cmp	r3, #0
 8001476:	d005      	beq.n	8001484 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001478:	4b58      	ldr	r3, [pc, #352]	; (80015dc <HAL_RCC_ClockConfig+0x1c4>)
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	4a57      	ldr	r2, [pc, #348]	; (80015dc <HAL_RCC_ClockConfig+0x1c4>)
 800147e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001482:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f003 0308 	and.w	r3, r3, #8
 800148c:	2b00      	cmp	r3, #0
 800148e:	d005      	beq.n	800149c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001490:	4b52      	ldr	r3, [pc, #328]	; (80015dc <HAL_RCC_ClockConfig+0x1c4>)
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	4a51      	ldr	r2, [pc, #324]	; (80015dc <HAL_RCC_ClockConfig+0x1c4>)
 8001496:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800149a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800149c:	4b4f      	ldr	r3, [pc, #316]	; (80015dc <HAL_RCC_ClockConfig+0x1c4>)
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	494c      	ldr	r1, [pc, #304]	; (80015dc <HAL_RCC_ClockConfig+0x1c4>)
 80014aa:	4313      	orrs	r3, r2
 80014ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f003 0301 	and.w	r3, r3, #1
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d040      	beq.n	800153c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d107      	bne.n	80014d2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014c2:	4b46      	ldr	r3, [pc, #280]	; (80015dc <HAL_RCC_ClockConfig+0x1c4>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d115      	bne.n	80014fa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e07d      	b.n	80015ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	d107      	bne.n	80014ea <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014da:	4b40      	ldr	r3, [pc, #256]	; (80015dc <HAL_RCC_ClockConfig+0x1c4>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d109      	bne.n	80014fa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e071      	b.n	80015ce <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014ea:	4b3c      	ldr	r3, [pc, #240]	; (80015dc <HAL_RCC_ClockConfig+0x1c4>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 0302 	and.w	r3, r3, #2
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d101      	bne.n	80014fa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e069      	b.n	80015ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014fa:	4b38      	ldr	r3, [pc, #224]	; (80015dc <HAL_RCC_ClockConfig+0x1c4>)
 80014fc:	689b      	ldr	r3, [r3, #8]
 80014fe:	f023 0203 	bic.w	r2, r3, #3
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	4935      	ldr	r1, [pc, #212]	; (80015dc <HAL_RCC_ClockConfig+0x1c4>)
 8001508:	4313      	orrs	r3, r2
 800150a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800150c:	f7ff f89e 	bl	800064c <HAL_GetTick>
 8001510:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001512:	e00a      	b.n	800152a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001514:	f7ff f89a 	bl	800064c <HAL_GetTick>
 8001518:	4602      	mov	r2, r0
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001522:	4293      	cmp	r3, r2
 8001524:	d901      	bls.n	800152a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001526:	2303      	movs	r3, #3
 8001528:	e051      	b.n	80015ce <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800152a:	4b2c      	ldr	r3, [pc, #176]	; (80015dc <HAL_RCC_ClockConfig+0x1c4>)
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	f003 020c 	and.w	r2, r3, #12
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	429a      	cmp	r2, r3
 800153a:	d1eb      	bne.n	8001514 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800153c:	4b26      	ldr	r3, [pc, #152]	; (80015d8 <HAL_RCC_ClockConfig+0x1c0>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f003 030f 	and.w	r3, r3, #15
 8001544:	683a      	ldr	r2, [r7, #0]
 8001546:	429a      	cmp	r2, r3
 8001548:	d210      	bcs.n	800156c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800154a:	4b23      	ldr	r3, [pc, #140]	; (80015d8 <HAL_RCC_ClockConfig+0x1c0>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f023 020f 	bic.w	r2, r3, #15
 8001552:	4921      	ldr	r1, [pc, #132]	; (80015d8 <HAL_RCC_ClockConfig+0x1c0>)
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	4313      	orrs	r3, r2
 8001558:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800155a:	4b1f      	ldr	r3, [pc, #124]	; (80015d8 <HAL_RCC_ClockConfig+0x1c0>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 030f 	and.w	r3, r3, #15
 8001562:	683a      	ldr	r2, [r7, #0]
 8001564:	429a      	cmp	r2, r3
 8001566:	d001      	beq.n	800156c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001568:	2301      	movs	r3, #1
 800156a:	e030      	b.n	80015ce <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f003 0304 	and.w	r3, r3, #4
 8001574:	2b00      	cmp	r3, #0
 8001576:	d008      	beq.n	800158a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001578:	4b18      	ldr	r3, [pc, #96]	; (80015dc <HAL_RCC_ClockConfig+0x1c4>)
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	4915      	ldr	r1, [pc, #84]	; (80015dc <HAL_RCC_ClockConfig+0x1c4>)
 8001586:	4313      	orrs	r3, r2
 8001588:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f003 0308 	and.w	r3, r3, #8
 8001592:	2b00      	cmp	r3, #0
 8001594:	d009      	beq.n	80015aa <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001596:	4b11      	ldr	r3, [pc, #68]	; (80015dc <HAL_RCC_ClockConfig+0x1c4>)
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	691b      	ldr	r3, [r3, #16]
 80015a2:	00db      	lsls	r3, r3, #3
 80015a4:	490d      	ldr	r1, [pc, #52]	; (80015dc <HAL_RCC_ClockConfig+0x1c4>)
 80015a6:	4313      	orrs	r3, r2
 80015a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80015aa:	f000 f81d 	bl	80015e8 <HAL_RCC_GetSysClockFreq>
 80015ae:	4602      	mov	r2, r0
 80015b0:	4b0a      	ldr	r3, [pc, #40]	; (80015dc <HAL_RCC_ClockConfig+0x1c4>)
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	091b      	lsrs	r3, r3, #4
 80015b6:	f003 030f 	and.w	r3, r3, #15
 80015ba:	4909      	ldr	r1, [pc, #36]	; (80015e0 <HAL_RCC_ClockConfig+0x1c8>)
 80015bc:	5ccb      	ldrb	r3, [r1, r3]
 80015be:	fa22 f303 	lsr.w	r3, r2, r3
 80015c2:	4a08      	ldr	r2, [pc, #32]	; (80015e4 <HAL_RCC_ClockConfig+0x1cc>)
 80015c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80015c6:	2000      	movs	r0, #0
 80015c8:	f7fe fffc 	bl	80005c4 <HAL_InitTick>

  return HAL_OK;
 80015cc:	2300      	movs	r3, #0
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3710      	adds	r7, #16
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	40023c00 	.word	0x40023c00
 80015dc:	40023800 	.word	0x40023800
 80015e0:	08005a14 	.word	0x08005a14
 80015e4:	20000014 	.word	0x20000014

080015e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015e8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80015ec:	b084      	sub	sp, #16
 80015ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80015f0:	2300      	movs	r3, #0
 80015f2:	607b      	str	r3, [r7, #4]
 80015f4:	2300      	movs	r3, #0
 80015f6:	60fb      	str	r3, [r7, #12]
 80015f8:	2300      	movs	r3, #0
 80015fa:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80015fc:	2300      	movs	r3, #0
 80015fe:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001600:	4b67      	ldr	r3, [pc, #412]	; (80017a0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	f003 030c 	and.w	r3, r3, #12
 8001608:	2b08      	cmp	r3, #8
 800160a:	d00d      	beq.n	8001628 <HAL_RCC_GetSysClockFreq+0x40>
 800160c:	2b08      	cmp	r3, #8
 800160e:	f200 80bd 	bhi.w	800178c <HAL_RCC_GetSysClockFreq+0x1a4>
 8001612:	2b00      	cmp	r3, #0
 8001614:	d002      	beq.n	800161c <HAL_RCC_GetSysClockFreq+0x34>
 8001616:	2b04      	cmp	r3, #4
 8001618:	d003      	beq.n	8001622 <HAL_RCC_GetSysClockFreq+0x3a>
 800161a:	e0b7      	b.n	800178c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800161c:	4b61      	ldr	r3, [pc, #388]	; (80017a4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800161e:	60bb      	str	r3, [r7, #8]
       break;
 8001620:	e0b7      	b.n	8001792 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001622:	4b61      	ldr	r3, [pc, #388]	; (80017a8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001624:	60bb      	str	r3, [r7, #8]
      break;
 8001626:	e0b4      	b.n	8001792 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001628:	4b5d      	ldr	r3, [pc, #372]	; (80017a0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001630:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001632:	4b5b      	ldr	r3, [pc, #364]	; (80017a0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800163a:	2b00      	cmp	r3, #0
 800163c:	d04d      	beq.n	80016da <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800163e:	4b58      	ldr	r3, [pc, #352]	; (80017a0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	099b      	lsrs	r3, r3, #6
 8001644:	461a      	mov	r2, r3
 8001646:	f04f 0300 	mov.w	r3, #0
 800164a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800164e:	f04f 0100 	mov.w	r1, #0
 8001652:	ea02 0800 	and.w	r8, r2, r0
 8001656:	ea03 0901 	and.w	r9, r3, r1
 800165a:	4640      	mov	r0, r8
 800165c:	4649      	mov	r1, r9
 800165e:	f04f 0200 	mov.w	r2, #0
 8001662:	f04f 0300 	mov.w	r3, #0
 8001666:	014b      	lsls	r3, r1, #5
 8001668:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800166c:	0142      	lsls	r2, r0, #5
 800166e:	4610      	mov	r0, r2
 8001670:	4619      	mov	r1, r3
 8001672:	ebb0 0008 	subs.w	r0, r0, r8
 8001676:	eb61 0109 	sbc.w	r1, r1, r9
 800167a:	f04f 0200 	mov.w	r2, #0
 800167e:	f04f 0300 	mov.w	r3, #0
 8001682:	018b      	lsls	r3, r1, #6
 8001684:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001688:	0182      	lsls	r2, r0, #6
 800168a:	1a12      	subs	r2, r2, r0
 800168c:	eb63 0301 	sbc.w	r3, r3, r1
 8001690:	f04f 0000 	mov.w	r0, #0
 8001694:	f04f 0100 	mov.w	r1, #0
 8001698:	00d9      	lsls	r1, r3, #3
 800169a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800169e:	00d0      	lsls	r0, r2, #3
 80016a0:	4602      	mov	r2, r0
 80016a2:	460b      	mov	r3, r1
 80016a4:	eb12 0208 	adds.w	r2, r2, r8
 80016a8:	eb43 0309 	adc.w	r3, r3, r9
 80016ac:	f04f 0000 	mov.w	r0, #0
 80016b0:	f04f 0100 	mov.w	r1, #0
 80016b4:	0259      	lsls	r1, r3, #9
 80016b6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80016ba:	0250      	lsls	r0, r2, #9
 80016bc:	4602      	mov	r2, r0
 80016be:	460b      	mov	r3, r1
 80016c0:	4610      	mov	r0, r2
 80016c2:	4619      	mov	r1, r3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	461a      	mov	r2, r3
 80016c8:	f04f 0300 	mov.w	r3, #0
 80016cc:	f7fe fdf0 	bl	80002b0 <__aeabi_uldivmod>
 80016d0:	4602      	mov	r2, r0
 80016d2:	460b      	mov	r3, r1
 80016d4:	4613      	mov	r3, r2
 80016d6:	60fb      	str	r3, [r7, #12]
 80016d8:	e04a      	b.n	8001770 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016da:	4b31      	ldr	r3, [pc, #196]	; (80017a0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	099b      	lsrs	r3, r3, #6
 80016e0:	461a      	mov	r2, r3
 80016e2:	f04f 0300 	mov.w	r3, #0
 80016e6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80016ea:	f04f 0100 	mov.w	r1, #0
 80016ee:	ea02 0400 	and.w	r4, r2, r0
 80016f2:	ea03 0501 	and.w	r5, r3, r1
 80016f6:	4620      	mov	r0, r4
 80016f8:	4629      	mov	r1, r5
 80016fa:	f04f 0200 	mov.w	r2, #0
 80016fe:	f04f 0300 	mov.w	r3, #0
 8001702:	014b      	lsls	r3, r1, #5
 8001704:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001708:	0142      	lsls	r2, r0, #5
 800170a:	4610      	mov	r0, r2
 800170c:	4619      	mov	r1, r3
 800170e:	1b00      	subs	r0, r0, r4
 8001710:	eb61 0105 	sbc.w	r1, r1, r5
 8001714:	f04f 0200 	mov.w	r2, #0
 8001718:	f04f 0300 	mov.w	r3, #0
 800171c:	018b      	lsls	r3, r1, #6
 800171e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001722:	0182      	lsls	r2, r0, #6
 8001724:	1a12      	subs	r2, r2, r0
 8001726:	eb63 0301 	sbc.w	r3, r3, r1
 800172a:	f04f 0000 	mov.w	r0, #0
 800172e:	f04f 0100 	mov.w	r1, #0
 8001732:	00d9      	lsls	r1, r3, #3
 8001734:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001738:	00d0      	lsls	r0, r2, #3
 800173a:	4602      	mov	r2, r0
 800173c:	460b      	mov	r3, r1
 800173e:	1912      	adds	r2, r2, r4
 8001740:	eb45 0303 	adc.w	r3, r5, r3
 8001744:	f04f 0000 	mov.w	r0, #0
 8001748:	f04f 0100 	mov.w	r1, #0
 800174c:	0299      	lsls	r1, r3, #10
 800174e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001752:	0290      	lsls	r0, r2, #10
 8001754:	4602      	mov	r2, r0
 8001756:	460b      	mov	r3, r1
 8001758:	4610      	mov	r0, r2
 800175a:	4619      	mov	r1, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	461a      	mov	r2, r3
 8001760:	f04f 0300 	mov.w	r3, #0
 8001764:	f7fe fda4 	bl	80002b0 <__aeabi_uldivmod>
 8001768:	4602      	mov	r2, r0
 800176a:	460b      	mov	r3, r1
 800176c:	4613      	mov	r3, r2
 800176e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8001770:	4b0b      	ldr	r3, [pc, #44]	; (80017a0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	0c1b      	lsrs	r3, r3, #16
 8001776:	f003 0303 	and.w	r3, r3, #3
 800177a:	3301      	adds	r3, #1
 800177c:	005b      	lsls	r3, r3, #1
 800177e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001780:	68fa      	ldr	r2, [r7, #12]
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	fbb2 f3f3 	udiv	r3, r2, r3
 8001788:	60bb      	str	r3, [r7, #8]
      break;
 800178a:	e002      	b.n	8001792 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800178c:	4b05      	ldr	r3, [pc, #20]	; (80017a4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800178e:	60bb      	str	r3, [r7, #8]
      break;
 8001790:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001792:	68bb      	ldr	r3, [r7, #8]
}
 8001794:	4618      	mov	r0, r3
 8001796:	3710      	adds	r7, #16
 8001798:	46bd      	mov	sp, r7
 800179a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800179e:	bf00      	nop
 80017a0:	40023800 	.word	0x40023800
 80017a4:	00f42400 	.word	0x00f42400
 80017a8:	007a1200 	.word	0x007a1200

080017ac <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80017b0:	4b03      	ldr	r3, [pc, #12]	; (80017c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80017b2:	681b      	ldr	r3, [r3, #0]
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	20000014 	.word	0x20000014

080017c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80017c8:	f7ff fff0 	bl	80017ac <HAL_RCC_GetHCLKFreq>
 80017cc:	4602      	mov	r2, r0
 80017ce:	4b05      	ldr	r3, [pc, #20]	; (80017e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	0a9b      	lsrs	r3, r3, #10
 80017d4:	f003 0307 	and.w	r3, r3, #7
 80017d8:	4903      	ldr	r1, [pc, #12]	; (80017e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80017da:	5ccb      	ldrb	r3, [r1, r3]
 80017dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	40023800 	.word	0x40023800
 80017e8:	08005a24 	.word	0x08005a24

080017ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80017f0:	f7ff ffdc 	bl	80017ac <HAL_RCC_GetHCLKFreq>
 80017f4:	4602      	mov	r2, r0
 80017f6:	4b05      	ldr	r3, [pc, #20]	; (800180c <HAL_RCC_GetPCLK2Freq+0x20>)
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	0b5b      	lsrs	r3, r3, #13
 80017fc:	f003 0307 	and.w	r3, r3, #7
 8001800:	4903      	ldr	r1, [pc, #12]	; (8001810 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001802:	5ccb      	ldrb	r3, [r1, r3]
 8001804:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001808:	4618      	mov	r0, r3
 800180a:	bd80      	pop	{r7, pc}
 800180c:	40023800 	.word	0x40023800
 8001810:	08005a24 	.word	0x08005a24

08001814 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b088      	sub	sp, #32
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800181c:	2300      	movs	r3, #0
 800181e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001820:	2300      	movs	r3, #0
 8001822:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001824:	2300      	movs	r3, #0
 8001826:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001828:	2300      	movs	r3, #0
 800182a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800182c:	2300      	movs	r3, #0
 800182e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f003 0301 	and.w	r3, r3, #1
 8001838:	2b00      	cmp	r3, #0
 800183a:	d012      	beq.n	8001862 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800183c:	4b69      	ldr	r3, [pc, #420]	; (80019e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	4a68      	ldr	r2, [pc, #416]	; (80019e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001842:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001846:	6093      	str	r3, [r2, #8]
 8001848:	4b66      	ldr	r3, [pc, #408]	; (80019e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800184a:	689a      	ldr	r2, [r3, #8]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001850:	4964      	ldr	r1, [pc, #400]	; (80019e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001852:	4313      	orrs	r3, r2
 8001854:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800185a:	2b00      	cmp	r3, #0
 800185c:	d101      	bne.n	8001862 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800185e:	2301      	movs	r3, #1
 8001860:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800186a:	2b00      	cmp	r3, #0
 800186c:	d017      	beq.n	800189e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800186e:	4b5d      	ldr	r3, [pc, #372]	; (80019e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001870:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001874:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800187c:	4959      	ldr	r1, [pc, #356]	; (80019e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800187e:	4313      	orrs	r3, r2
 8001880:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001888:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800188c:	d101      	bne.n	8001892 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800188e:	2301      	movs	r3, #1
 8001890:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001896:	2b00      	cmp	r3, #0
 8001898:	d101      	bne.n	800189e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800189a:	2301      	movs	r3, #1
 800189c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d017      	beq.n	80018da <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80018aa:	4b4e      	ldr	r3, [pc, #312]	; (80019e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80018ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80018b0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b8:	494a      	ldr	r1, [pc, #296]	; (80019e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80018ba:	4313      	orrs	r3, r2
 80018bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80018c8:	d101      	bne.n	80018ce <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80018ca:	2301      	movs	r3, #1
 80018cc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d101      	bne.n	80018da <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80018d6:	2301      	movs	r3, #1
 80018d8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80018e6:	2301      	movs	r3, #1
 80018e8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 0320 	and.w	r3, r3, #32
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	f000 808b 	beq.w	8001a0e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80018f8:	4b3a      	ldr	r3, [pc, #232]	; (80019e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80018fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fc:	4a39      	ldr	r2, [pc, #228]	; (80019e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80018fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001902:	6413      	str	r3, [r2, #64]	; 0x40
 8001904:	4b37      	ldr	r3, [pc, #220]	; (80019e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001908:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800190c:	60bb      	str	r3, [r7, #8]
 800190e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001910:	4b35      	ldr	r3, [pc, #212]	; (80019e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a34      	ldr	r2, [pc, #208]	; (80019e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001916:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800191a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800191c:	f7fe fe96 	bl	800064c <HAL_GetTick>
 8001920:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001922:	e008      	b.n	8001936 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001924:	f7fe fe92 	bl	800064c <HAL_GetTick>
 8001928:	4602      	mov	r2, r0
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	2b64      	cmp	r3, #100	; 0x64
 8001930:	d901      	bls.n	8001936 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001932:	2303      	movs	r3, #3
 8001934:	e355      	b.n	8001fe2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001936:	4b2c      	ldr	r3, [pc, #176]	; (80019e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800193e:	2b00      	cmp	r3, #0
 8001940:	d0f0      	beq.n	8001924 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001942:	4b28      	ldr	r3, [pc, #160]	; (80019e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001946:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800194a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d035      	beq.n	80019be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001956:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800195a:	693a      	ldr	r2, [r7, #16]
 800195c:	429a      	cmp	r2, r3
 800195e:	d02e      	beq.n	80019be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001960:	4b20      	ldr	r3, [pc, #128]	; (80019e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001964:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001968:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800196a:	4b1e      	ldr	r3, [pc, #120]	; (80019e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800196c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800196e:	4a1d      	ldr	r2, [pc, #116]	; (80019e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001970:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001974:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001976:	4b1b      	ldr	r3, [pc, #108]	; (80019e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800197a:	4a1a      	ldr	r2, [pc, #104]	; (80019e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800197c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001980:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001982:	4a18      	ldr	r2, [pc, #96]	; (80019e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001988:	4b16      	ldr	r3, [pc, #88]	; (80019e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800198a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800198c:	f003 0301 	and.w	r3, r3, #1
 8001990:	2b01      	cmp	r3, #1
 8001992:	d114      	bne.n	80019be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001994:	f7fe fe5a 	bl	800064c <HAL_GetTick>
 8001998:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800199a:	e00a      	b.n	80019b2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800199c:	f7fe fe56 	bl	800064c <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d901      	bls.n	80019b2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80019ae:	2303      	movs	r3, #3
 80019b0:	e317      	b.n	8001fe2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019b2:	4b0c      	ldr	r3, [pc, #48]	; (80019e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80019b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019b6:	f003 0302 	and.w	r3, r3, #2
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d0ee      	beq.n	800199c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80019c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80019ca:	d111      	bne.n	80019f0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80019cc:	4b05      	ldr	r3, [pc, #20]	; (80019e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80019d8:	4b04      	ldr	r3, [pc, #16]	; (80019ec <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80019da:	400b      	ands	r3, r1
 80019dc:	4901      	ldr	r1, [pc, #4]	; (80019e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80019de:	4313      	orrs	r3, r2
 80019e0:	608b      	str	r3, [r1, #8]
 80019e2:	e00b      	b.n	80019fc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80019e4:	40023800 	.word	0x40023800
 80019e8:	40007000 	.word	0x40007000
 80019ec:	0ffffcff 	.word	0x0ffffcff
 80019f0:	4bb0      	ldr	r3, [pc, #704]	; (8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	4aaf      	ldr	r2, [pc, #700]	; (8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80019f6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80019fa:	6093      	str	r3, [r2, #8]
 80019fc:	4bad      	ldr	r3, [pc, #692]	; (8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80019fe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a08:	49aa      	ldr	r1, [pc, #680]	; (8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 0310 	and.w	r3, r3, #16
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d010      	beq.n	8001a3c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001a1a:	4ba6      	ldr	r3, [pc, #664]	; (8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001a1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a20:	4aa4      	ldr	r2, [pc, #656]	; (8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001a22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a26:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001a2a:	4ba2      	ldr	r3, [pc, #648]	; (8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001a2c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a34:	499f      	ldr	r1, [pc, #636]	; (8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001a36:	4313      	orrs	r3, r2
 8001a38:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d00a      	beq.n	8001a5e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001a48:	4b9a      	ldr	r3, [pc, #616]	; (8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a4e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001a56:	4997      	ldr	r1, [pc, #604]	; (8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d00a      	beq.n	8001a80 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001a6a:	4b92      	ldr	r3, [pc, #584]	; (8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001a6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a70:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001a78:	498e      	ldr	r1, [pc, #568]	; (8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d00a      	beq.n	8001aa2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001a8c:	4b89      	ldr	r3, [pc, #548]	; (8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a92:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001a9a:	4986      	ldr	r1, [pc, #536]	; (8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d00a      	beq.n	8001ac4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001aae:	4b81      	ldr	r3, [pc, #516]	; (8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001ab0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ab4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001abc:	497d      	ldr	r1, [pc, #500]	; (8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d00a      	beq.n	8001ae6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001ad0:	4b78      	ldr	r3, [pc, #480]	; (8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ad6:	f023 0203 	bic.w	r2, r3, #3
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ade:	4975      	ldr	r1, [pc, #468]	; (8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d00a      	beq.n	8001b08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001af2:	4b70      	ldr	r3, [pc, #448]	; (8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001af4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001af8:	f023 020c 	bic.w	r2, r3, #12
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b00:	496c      	ldr	r1, [pc, #432]	; (8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001b02:	4313      	orrs	r3, r2
 8001b04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d00a      	beq.n	8001b2a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001b14:	4b67      	ldr	r3, [pc, #412]	; (8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b1a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b22:	4964      	ldr	r1, [pc, #400]	; (8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001b24:	4313      	orrs	r3, r2
 8001b26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d00a      	beq.n	8001b4c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001b36:	4b5f      	ldr	r3, [pc, #380]	; (8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001b38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b3c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b44:	495b      	ldr	r1, [pc, #364]	; (8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001b46:	4313      	orrs	r3, r2
 8001b48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d00a      	beq.n	8001b6e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001b58:	4b56      	ldr	r3, [pc, #344]	; (8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b5e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b66:	4953      	ldr	r1, [pc, #332]	; (8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d00a      	beq.n	8001b90 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8001b7a:	4b4e      	ldr	r3, [pc, #312]	; (8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001b7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b80:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b88:	494a      	ldr	r1, [pc, #296]	; (8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d00a      	beq.n	8001bb2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001b9c:	4b45      	ldr	r3, [pc, #276]	; (8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ba2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001baa:	4942      	ldr	r1, [pc, #264]	; (8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001bac:	4313      	orrs	r3, r2
 8001bae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d00a      	beq.n	8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8001bbe:	4b3d      	ldr	r3, [pc, #244]	; (8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001bc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bc4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bcc:	4939      	ldr	r1, [pc, #228]	; (8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d00a      	beq.n	8001bf6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001be0:	4b34      	ldr	r3, [pc, #208]	; (8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001be6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001bee:	4931      	ldr	r1, [pc, #196]	; (8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d011      	beq.n	8001c26 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001c02:	4b2c      	ldr	r3, [pc, #176]	; (8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001c04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c08:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001c10:	4928      	ldr	r1, [pc, #160]	; (8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001c12:	4313      	orrs	r3, r2
 8001c14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001c1c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001c20:	d101      	bne.n	8001c26 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8001c22:	2301      	movs	r3, #1
 8001c24:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 0308 	and.w	r3, r3, #8
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8001c32:	2301      	movs	r3, #1
 8001c34:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d00a      	beq.n	8001c58 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001c42:	4b1c      	ldr	r3, [pc, #112]	; (8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001c44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c48:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c50:	4918      	ldr	r1, [pc, #96]	; (8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001c52:	4313      	orrs	r3, r2
 8001c54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d00b      	beq.n	8001c7c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001c64:	4b13      	ldr	r3, [pc, #76]	; (8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c6a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c74:	490f      	ldr	r1, [pc, #60]	; (8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001c76:	4313      	orrs	r3, r2
 8001c78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d005      	beq.n	8001c8e <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001c8a:	f040 80d8 	bne.w	8001e3e <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001c8e:	4b09      	ldr	r3, [pc, #36]	; (8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a08      	ldr	r2, [pc, #32]	; (8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001c94:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001c98:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c9a:	f7fe fcd7 	bl	800064c <HAL_GetTick>
 8001c9e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001ca0:	e00a      	b.n	8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001ca2:	f7fe fcd3 	bl	800064c <HAL_GetTick>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	1ad3      	subs	r3, r2, r3
 8001cac:	2b64      	cmp	r3, #100	; 0x64
 8001cae:	d903      	bls.n	8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001cb0:	2303      	movs	r3, #3
 8001cb2:	e196      	b.n	8001fe2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8001cb4:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001cb8:	4b6c      	ldr	r3, [pc, #432]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d1ee      	bne.n	8001ca2 <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 0301 	and.w	r3, r3, #1
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d021      	beq.n	8001d14 <HAL_RCCEx_PeriphCLKConfig+0x500>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d11d      	bne.n	8001d14 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001cd8:	4b64      	ldr	r3, [pc, #400]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001cda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001cde:	0c1b      	lsrs	r3, r3, #16
 8001ce0:	f003 0303 	and.w	r3, r3, #3
 8001ce4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001ce6:	4b61      	ldr	r3, [pc, #388]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001ce8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001cec:	0e1b      	lsrs	r3, r3, #24
 8001cee:	f003 030f 	and.w	r3, r3, #15
 8001cf2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	019a      	lsls	r2, r3, #6
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	041b      	lsls	r3, r3, #16
 8001cfe:	431a      	orrs	r2, r3
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	061b      	lsls	r3, r3, #24
 8001d04:	431a      	orrs	r2, r3
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	071b      	lsls	r3, r3, #28
 8001d0c:	4957      	ldr	r1, [pc, #348]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d004      	beq.n	8001d2a <HAL_RCCEx_PeriphCLKConfig+0x516>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d24:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001d28:	d00a      	beq.n	8001d40 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d02e      	beq.n	8001d94 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d3e:	d129      	bne.n	8001d94 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001d40:	4b4a      	ldr	r3, [pc, #296]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001d42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d46:	0c1b      	lsrs	r3, r3, #16
 8001d48:	f003 0303 	and.w	r3, r3, #3
 8001d4c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001d4e:	4b47      	ldr	r3, [pc, #284]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001d50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d54:	0f1b      	lsrs	r3, r3, #28
 8001d56:	f003 0307 	and.w	r3, r3, #7
 8001d5a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	019a      	lsls	r2, r3, #6
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	041b      	lsls	r3, r3, #16
 8001d66:	431a      	orrs	r2, r3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	061b      	lsls	r3, r3, #24
 8001d6e:	431a      	orrs	r2, r3
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	071b      	lsls	r3, r3, #28
 8001d74:	493d      	ldr	r1, [pc, #244]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001d76:	4313      	orrs	r3, r2
 8001d78:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001d7c:	4b3b      	ldr	r3, [pc, #236]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001d7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d82:	f023 021f 	bic.w	r2, r3, #31
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d8a:	3b01      	subs	r3, #1
 8001d8c:	4937      	ldr	r1, [pc, #220]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d01d      	beq.n	8001ddc <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001da0:	4b32      	ldr	r3, [pc, #200]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001da2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001da6:	0e1b      	lsrs	r3, r3, #24
 8001da8:	f003 030f 	and.w	r3, r3, #15
 8001dac:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001dae:	4b2f      	ldr	r3, [pc, #188]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001db0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001db4:	0f1b      	lsrs	r3, r3, #28
 8001db6:	f003 0307 	and.w	r3, r3, #7
 8001dba:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	019a      	lsls	r2, r3, #6
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	691b      	ldr	r3, [r3, #16]
 8001dc6:	041b      	lsls	r3, r3, #16
 8001dc8:	431a      	orrs	r2, r3
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	061b      	lsls	r3, r3, #24
 8001dce:	431a      	orrs	r2, r3
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	071b      	lsls	r3, r3, #28
 8001dd4:	4925      	ldr	r1, [pc, #148]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d011      	beq.n	8001e0c <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	019a      	lsls	r2, r3, #6
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	691b      	ldr	r3, [r3, #16]
 8001df2:	041b      	lsls	r3, r3, #16
 8001df4:	431a      	orrs	r2, r3
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	68db      	ldr	r3, [r3, #12]
 8001dfa:	061b      	lsls	r3, r3, #24
 8001dfc:	431a      	orrs	r2, r3
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	071b      	lsls	r3, r3, #28
 8001e04:	4919      	ldr	r1, [pc, #100]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001e06:	4313      	orrs	r3, r2
 8001e08:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001e0c:	4b17      	ldr	r3, [pc, #92]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a16      	ldr	r2, [pc, #88]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001e12:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001e16:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e18:	f7fe fc18 	bl	800064c <HAL_GetTick>
 8001e1c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001e1e:	e008      	b.n	8001e32 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001e20:	f7fe fc14 	bl	800064c <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	2b64      	cmp	r3, #100	; 0x64
 8001e2c:	d901      	bls.n	8001e32 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e0d7      	b.n	8001fe2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001e32:	4b0e      	ldr	r3, [pc, #56]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d0f0      	beq.n	8001e20 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8001e3e:	69bb      	ldr	r3, [r7, #24]
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	f040 80cd 	bne.w	8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8001e46:	4b09      	ldr	r3, [pc, #36]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a08      	ldr	r2, [pc, #32]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001e4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e50:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e52:	f7fe fbfb 	bl	800064c <HAL_GetTick>
 8001e56:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001e58:	e00a      	b.n	8001e70 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001e5a:	f7fe fbf7 	bl	800064c <HAL_GetTick>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	1ad3      	subs	r3, r2, r3
 8001e64:	2b64      	cmp	r3, #100	; 0x64
 8001e66:	d903      	bls.n	8001e70 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	e0ba      	b.n	8001fe2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8001e6c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001e70:	4b5e      	ldr	r3, [pc, #376]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001e78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e7c:	d0ed      	beq.n	8001e5a <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d003      	beq.n	8001e92 <HAL_RCCEx_PeriphCLKConfig+0x67e>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d009      	beq.n	8001ea6 <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d02e      	beq.n	8001efc <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d12a      	bne.n	8001efc <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8001ea6:	4b51      	ldr	r3, [pc, #324]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001ea8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eac:	0c1b      	lsrs	r3, r3, #16
 8001eae:	f003 0303 	and.w	r3, r3, #3
 8001eb2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001eb4:	4b4d      	ldr	r3, [pc, #308]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eba:	0f1b      	lsrs	r3, r3, #28
 8001ebc:	f003 0307 	and.w	r3, r3, #7
 8001ec0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	695b      	ldr	r3, [r3, #20]
 8001ec6:	019a      	lsls	r2, r3, #6
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	041b      	lsls	r3, r3, #16
 8001ecc:	431a      	orrs	r2, r3
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	699b      	ldr	r3, [r3, #24]
 8001ed2:	061b      	lsls	r3, r3, #24
 8001ed4:	431a      	orrs	r2, r3
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	071b      	lsls	r3, r3, #28
 8001eda:	4944      	ldr	r1, [pc, #272]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001edc:	4313      	orrs	r3, r2
 8001ede:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001ee2:	4b42      	ldr	r3, [pc, #264]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001ee4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ee8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ef0:	3b01      	subs	r3, #1
 8001ef2:	021b      	lsls	r3, r3, #8
 8001ef4:	493d      	ldr	r1, [pc, #244]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d022      	beq.n	8001f4e <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001f0c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001f10:	d11d      	bne.n	8001f4e <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001f12:	4b36      	ldr	r3, [pc, #216]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001f14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f18:	0e1b      	lsrs	r3, r3, #24
 8001f1a:	f003 030f 	and.w	r3, r3, #15
 8001f1e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001f20:	4b32      	ldr	r3, [pc, #200]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f26:	0f1b      	lsrs	r3, r3, #28
 8001f28:	f003 0307 	and.w	r3, r3, #7
 8001f2c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	695b      	ldr	r3, [r3, #20]
 8001f32:	019a      	lsls	r2, r3, #6
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6a1b      	ldr	r3, [r3, #32]
 8001f38:	041b      	lsls	r3, r3, #16
 8001f3a:	431a      	orrs	r2, r3
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	061b      	lsls	r3, r3, #24
 8001f40:	431a      	orrs	r2, r3
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	071b      	lsls	r3, r3, #28
 8001f46:	4929      	ldr	r1, [pc, #164]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 0308 	and.w	r3, r3, #8
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d028      	beq.n	8001fac <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001f5a:	4b24      	ldr	r3, [pc, #144]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001f5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f60:	0e1b      	lsrs	r3, r3, #24
 8001f62:	f003 030f 	and.w	r3, r3, #15
 8001f66:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8001f68:	4b20      	ldr	r3, [pc, #128]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f6e:	0c1b      	lsrs	r3, r3, #16
 8001f70:	f003 0303 	and.w	r3, r3, #3
 8001f74:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	695b      	ldr	r3, [r3, #20]
 8001f7a:	019a      	lsls	r2, r3, #6
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	041b      	lsls	r3, r3, #16
 8001f80:	431a      	orrs	r2, r3
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	061b      	lsls	r3, r3, #24
 8001f86:	431a      	orrs	r2, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	69db      	ldr	r3, [r3, #28]
 8001f8c:	071b      	lsls	r3, r3, #28
 8001f8e:	4917      	ldr	r1, [pc, #92]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001f90:	4313      	orrs	r3, r2
 8001f92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8001f96:	4b15      	ldr	r3, [pc, #84]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001f98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f9c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fa4:	4911      	ldr	r1, [pc, #68]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8001fac:	4b0f      	ldr	r3, [pc, #60]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a0e      	ldr	r2, [pc, #56]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001fb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fb6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fb8:	f7fe fb48 	bl	800064c <HAL_GetTick>
 8001fbc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001fbe:	e008      	b.n	8001fd2 <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001fc0:	f7fe fb44 	bl	800064c <HAL_GetTick>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	2b64      	cmp	r3, #100	; 0x64
 8001fcc:	d901      	bls.n	8001fd2 <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e007      	b.n	8001fe2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001fd2:	4b06      	ldr	r3, [pc, #24]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001fda:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001fde:	d1ef      	bne.n	8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8001fe0:	2300      	movs	r3, #0
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3720      	adds	r7, #32
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	40023800 	.word	0x40023800

08001ff0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b084      	sub	sp, #16
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d101      	bne.n	8002002 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e084      	b.n	800210c <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2200      	movs	r2, #0
 8002006:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800200e:	b2db      	uxtb	r3, r3
 8002010:	2b00      	cmp	r3, #0
 8002012:	d106      	bne.n	8002022 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2200      	movs	r2, #0
 8002018:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	f002 fa29 	bl	8004474 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2202      	movs	r2, #2
 8002026:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002038:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	68db      	ldr	r3, [r3, #12]
 800203e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002042:	d902      	bls.n	800204a <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002044:	2300      	movs	r3, #0
 8002046:	60fb      	str	r3, [r7, #12]
 8002048:	e002      	b.n	8002050 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800204a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800204e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002058:	d007      	beq.n	800206a <HAL_SPI_Init+0x7a>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	68db      	ldr	r3, [r3, #12]
 800205e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002062:	d002      	beq.n	800206a <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2200      	movs	r2, #0
 8002068:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206e:	2b00      	cmp	r3, #0
 8002070:	d10b      	bne.n	800208a <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	68db      	ldr	r3, [r3, #12]
 8002076:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800207a:	d903      	bls.n	8002084 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2202      	movs	r2, #2
 8002080:	631a      	str	r2, [r3, #48]	; 0x30
 8002082:	e002      	b.n	800208a <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2201      	movs	r2, #1
 8002088:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	685a      	ldr	r2, [r3, #4]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	431a      	orrs	r2, r3
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	691b      	ldr	r3, [r3, #16]
 8002098:	431a      	orrs	r2, r3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	695b      	ldr	r3, [r3, #20]
 800209e:	431a      	orrs	r2, r3
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	699b      	ldr	r3, [r3, #24]
 80020a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020a8:	431a      	orrs	r2, r3
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	69db      	ldr	r3, [r3, #28]
 80020ae:	431a      	orrs	r2, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6a1b      	ldr	r3, [r3, #32]
 80020b4:	ea42 0103 	orr.w	r1, r2, r3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	430a      	orrs	r2, r1
 80020c2:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	699b      	ldr	r3, [r3, #24]
 80020c8:	0c1b      	lsrs	r3, r3, #16
 80020ca:	f003 0204 	and.w	r2, r3, #4
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d2:	431a      	orrs	r2, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020d8:	431a      	orrs	r2, r3
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	68db      	ldr	r3, [r3, #12]
 80020de:	ea42 0103 	orr.w	r1, r2, r3
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	68fa      	ldr	r2, [r7, #12]
 80020e8:	430a      	orrs	r2, r1
 80020ea:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	69da      	ldr	r2, [r3, #28]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020fa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2200      	movs	r2, #0
 8002100:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2201      	movs	r2, #1
 8002106:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800210a:	2300      	movs	r3, #0
}
 800210c:	4618      	mov	r0, r3
 800210e:	3710      	adds	r7, #16
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}

08002114 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b088      	sub	sp, #32
 8002118:	af00      	add	r7, sp, #0
 800211a:	60f8      	str	r0, [r7, #12]
 800211c:	60b9      	str	r1, [r7, #8]
 800211e:	603b      	str	r3, [r7, #0]
 8002120:	4613      	mov	r3, r2
 8002122:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002124:	2300      	movs	r3, #0
 8002126:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800212e:	2b01      	cmp	r3, #1
 8002130:	d101      	bne.n	8002136 <HAL_SPI_Transmit+0x22>
 8002132:	2302      	movs	r3, #2
 8002134:	e150      	b.n	80023d8 <HAL_SPI_Transmit+0x2c4>
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2201      	movs	r2, #1
 800213a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800213e:	f7fe fa85 	bl	800064c <HAL_GetTick>
 8002142:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002144:	88fb      	ldrh	r3, [r7, #6]
 8002146:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800214e:	b2db      	uxtb	r3, r3
 8002150:	2b01      	cmp	r3, #1
 8002152:	d002      	beq.n	800215a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002154:	2302      	movs	r3, #2
 8002156:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002158:	e135      	b.n	80023c6 <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d002      	beq.n	8002166 <HAL_SPI_Transmit+0x52>
 8002160:	88fb      	ldrh	r3, [r7, #6]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d102      	bne.n	800216c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	77fb      	strb	r3, [r7, #31]
    goto error;
 800216a:	e12c      	b.n	80023c6 <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2203      	movs	r2, #3
 8002170:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2200      	movs	r2, #0
 8002178:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	68ba      	ldr	r2, [r7, #8]
 800217e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	88fa      	ldrh	r2, [r7, #6]
 8002184:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	88fa      	ldrh	r2, [r7, #6]
 800218a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	2200      	movs	r2, #0
 8002190:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	2200      	movs	r2, #0
 8002196:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	2200      	movs	r2, #0
 800219e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2200      	movs	r2, #0
 80021a6:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2200      	movs	r2, #0
 80021ac:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80021b6:	d107      	bne.n	80021c8 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80021c6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021d2:	2b40      	cmp	r3, #64	; 0x40
 80021d4:	d007      	beq.n	80021e6 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021e4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	68db      	ldr	r3, [r3, #12]
 80021ea:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80021ee:	d94b      	bls.n	8002288 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d002      	beq.n	80021fe <HAL_SPI_Transmit+0xea>
 80021f8:	8afb      	ldrh	r3, [r7, #22]
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d13e      	bne.n	800227c <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002202:	881a      	ldrh	r2, [r3, #0]
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800220e:	1c9a      	adds	r2, r3, #2
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002218:	b29b      	uxth	r3, r3
 800221a:	3b01      	subs	r3, #1
 800221c:	b29a      	uxth	r2, r3
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002222:	e02b      	b.n	800227c <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	f003 0302 	and.w	r3, r3, #2
 800222e:	2b02      	cmp	r3, #2
 8002230:	d112      	bne.n	8002258 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002236:	881a      	ldrh	r2, [r3, #0]
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002242:	1c9a      	adds	r2, r3, #2
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800224c:	b29b      	uxth	r3, r3
 800224e:	3b01      	subs	r3, #1
 8002250:	b29a      	uxth	r2, r3
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002256:	e011      	b.n	800227c <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002258:	f7fe f9f8 	bl	800064c <HAL_GetTick>
 800225c:	4602      	mov	r2, r0
 800225e:	69bb      	ldr	r3, [r7, #24]
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	683a      	ldr	r2, [r7, #0]
 8002264:	429a      	cmp	r2, r3
 8002266:	d803      	bhi.n	8002270 <HAL_SPI_Transmit+0x15c>
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800226e:	d102      	bne.n	8002276 <HAL_SPI_Transmit+0x162>
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d102      	bne.n	800227c <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 8002276:	2303      	movs	r3, #3
 8002278:	77fb      	strb	r3, [r7, #31]
          goto error;
 800227a:	e0a4      	b.n	80023c6 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002280:	b29b      	uxth	r3, r3
 8002282:	2b00      	cmp	r3, #0
 8002284:	d1ce      	bne.n	8002224 <HAL_SPI_Transmit+0x110>
 8002286:	e07c      	b.n	8002382 <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d002      	beq.n	8002296 <HAL_SPI_Transmit+0x182>
 8002290:	8afb      	ldrh	r3, [r7, #22]
 8002292:	2b01      	cmp	r3, #1
 8002294:	d170      	bne.n	8002378 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800229a:	b29b      	uxth	r3, r3
 800229c:	2b01      	cmp	r3, #1
 800229e:	d912      	bls.n	80022c6 <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022a4:	881a      	ldrh	r2, [r3, #0]
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022b0:	1c9a      	adds	r2, r3, #2
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022ba:	b29b      	uxth	r3, r3
 80022bc:	3b02      	subs	r3, #2
 80022be:	b29a      	uxth	r2, r3
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80022c4:	e058      	b.n	8002378 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	330c      	adds	r3, #12
 80022d0:	7812      	ldrb	r2, [r2, #0]
 80022d2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022d8:	1c5a      	adds	r2, r3, #1
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022e2:	b29b      	uxth	r3, r3
 80022e4:	3b01      	subs	r3, #1
 80022e6:	b29a      	uxth	r2, r3
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80022ec:	e044      	b.n	8002378 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	f003 0302 	and.w	r3, r3, #2
 80022f8:	2b02      	cmp	r3, #2
 80022fa:	d12b      	bne.n	8002354 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002300:	b29b      	uxth	r3, r3
 8002302:	2b01      	cmp	r3, #1
 8002304:	d912      	bls.n	800232c <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800230a:	881a      	ldrh	r2, [r3, #0]
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002316:	1c9a      	adds	r2, r3, #2
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002320:	b29b      	uxth	r3, r3
 8002322:	3b02      	subs	r3, #2
 8002324:	b29a      	uxth	r2, r3
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	87da      	strh	r2, [r3, #62]	; 0x3e
 800232a:	e025      	b.n	8002378 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	330c      	adds	r3, #12
 8002336:	7812      	ldrb	r2, [r2, #0]
 8002338:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800233e:	1c5a      	adds	r2, r3, #1
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002348:	b29b      	uxth	r3, r3
 800234a:	3b01      	subs	r3, #1
 800234c:	b29a      	uxth	r2, r3
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002352:	e011      	b.n	8002378 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002354:	f7fe f97a 	bl	800064c <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	69bb      	ldr	r3, [r7, #24]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	683a      	ldr	r2, [r7, #0]
 8002360:	429a      	cmp	r2, r3
 8002362:	d803      	bhi.n	800236c <HAL_SPI_Transmit+0x258>
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	f1b3 3fff 	cmp.w	r3, #4294967295
 800236a:	d102      	bne.n	8002372 <HAL_SPI_Transmit+0x25e>
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d102      	bne.n	8002378 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002376:	e026      	b.n	80023c6 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800237c:	b29b      	uxth	r3, r3
 800237e:	2b00      	cmp	r3, #0
 8002380:	d1b5      	bne.n	80022ee <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002382:	69ba      	ldr	r2, [r7, #24]
 8002384:	6839      	ldr	r1, [r7, #0]
 8002386:	68f8      	ldr	r0, [r7, #12]
 8002388:	f000 fd33 	bl	8002df2 <SPI_EndRxTxTransaction>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d002      	beq.n	8002398 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2220      	movs	r2, #32
 8002396:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d10a      	bne.n	80023b6 <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80023a0:	2300      	movs	r3, #0
 80023a2:	613b      	str	r3, [r7, #16]
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	68db      	ldr	r3, [r3, #12]
 80023aa:	613b      	str	r3, [r7, #16]
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	613b      	str	r3, [r7, #16]
 80023b4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d002      	beq.n	80023c4 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	77fb      	strb	r3, [r7, #31]
 80023c2:	e000      	b.n	80023c6 <HAL_SPI_Transmit+0x2b2>
  }

error:
 80023c4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2201      	movs	r2, #1
 80023ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2200      	movs	r2, #0
 80023d2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80023d6:	7ffb      	ldrb	r3, [r7, #31]
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3720      	adds	r7, #32
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}

080023e0 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b086      	sub	sp, #24
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	60f8      	str	r0, [r7, #12]
 80023e8:	60b9      	str	r1, [r7, #8]
 80023ea:	4613      	mov	r3, r2
 80023ec:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80023ee:	2300      	movs	r3, #0
 80023f0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d110      	bne.n	800241c <HAL_SPI_Receive_IT+0x3c>
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002402:	d10b      	bne.n	800241c <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2204      	movs	r2, #4
 8002408:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 800240c:	88fb      	ldrh	r3, [r7, #6]
 800240e:	68ba      	ldr	r2, [r7, #8]
 8002410:	68b9      	ldr	r1, [r7, #8]
 8002412:	68f8      	ldr	r0, [r7, #12]
 8002414:	f000 f88c 	bl	8002530 <HAL_SPI_TransmitReceive_IT>
 8002418:	4603      	mov	r3, r0
 800241a:	e081      	b.n	8002520 <HAL_SPI_Receive_IT+0x140>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002422:	2b01      	cmp	r3, #1
 8002424:	d101      	bne.n	800242a <HAL_SPI_Receive_IT+0x4a>
 8002426:	2302      	movs	r3, #2
 8002428:	e07a      	b.n	8002520 <HAL_SPI_Receive_IT+0x140>
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2201      	movs	r2, #1
 800242e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002438:	b2db      	uxtb	r3, r3
 800243a:	2b01      	cmp	r3, #1
 800243c:	d002      	beq.n	8002444 <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 800243e:	2302      	movs	r3, #2
 8002440:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002442:	e068      	b.n	8002516 <HAL_SPI_Receive_IT+0x136>
  }

  if ((pData == NULL) || (Size == 0U))
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d002      	beq.n	8002450 <HAL_SPI_Receive_IT+0x70>
 800244a:	88fb      	ldrh	r3, [r7, #6]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d102      	bne.n	8002456 <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002454:	e05f      	b.n	8002516 <HAL_SPI_Receive_IT+0x136>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2204      	movs	r2, #4
 800245a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2200      	movs	r2, #0
 8002462:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	68ba      	ldr	r2, [r7, #8]
 8002468:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	88fa      	ldrh	r2, [r7, #6]
 800246e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	88fa      	ldrh	r2, [r7, #6]
 8002476:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2200      	movs	r2, #0
 800247e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	2200      	movs	r2, #0
 8002484:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2200      	movs	r2, #0
 800248a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	2200      	movs	r2, #0
 8002490:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	68db      	ldr	r3, [r3, #12]
 8002496:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800249a:	d90b      	bls.n	80024b4 <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	685a      	ldr	r2, [r3, #4]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80024aa:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	4a1e      	ldr	r2, [pc, #120]	; (8002528 <HAL_SPI_Receive_IT+0x148>)
 80024b0:	64da      	str	r2, [r3, #76]	; 0x4c
 80024b2:	e00a      	b.n	80024ca <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	685a      	ldr	r2, [r3, #4]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80024c2:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	4a19      	ldr	r2, [pc, #100]	; (800252c <HAL_SPI_Receive_IT+0x14c>)
 80024c8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024d2:	d107      	bne.n	80024e4 <HAL_SPI_Receive_IT+0x104>
  {
    SPI_1LINE_RX(hspi);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80024e2:	601a      	str	r2, [r3, #0]
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	685a      	ldr	r2, [r3, #4]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80024f2:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024fe:	2b40      	cmp	r3, #64	; 0x40
 8002500:	d008      	beq.n	8002514 <HAL_SPI_Receive_IT+0x134>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002510:	601a      	str	r2, [r3, #0]
 8002512:	e000      	b.n	8002516 <HAL_SPI_Receive_IT+0x136>
  }

error :
 8002514:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2200      	movs	r2, #0
 800251a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800251e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002520:	4618      	mov	r0, r3
 8002522:	3718      	adds	r7, #24
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	08002b49 	.word	0x08002b49
 800252c:	08002af9 	.word	0x08002af9

08002530 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8002530:	b480      	push	{r7}
 8002532:	b087      	sub	sp, #28
 8002534:	af00      	add	r7, sp, #0
 8002536:	60f8      	str	r0, [r7, #12]
 8002538:	60b9      	str	r1, [r7, #8]
 800253a:	607a      	str	r2, [r7, #4]
 800253c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800253e:	2300      	movs	r3, #0
 8002540:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002548:	2b01      	cmp	r3, #1
 800254a:	d101      	bne.n	8002550 <HAL_SPI_TransmitReceive_IT+0x20>
 800254c:	2302      	movs	r3, #2
 800254e:	e091      	b.n	8002674 <HAL_SPI_TransmitReceive_IT+0x144>
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2201      	movs	r2, #1
 8002554:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800255e:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002566:	7dbb      	ldrb	r3, [r7, #22]
 8002568:	2b01      	cmp	r3, #1
 800256a:	d00d      	beq.n	8002588 <HAL_SPI_TransmitReceive_IT+0x58>
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002572:	d106      	bne.n	8002582 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d102      	bne.n	8002582 <HAL_SPI_TransmitReceive_IT+0x52>
 800257c:	7dbb      	ldrb	r3, [r7, #22]
 800257e:	2b04      	cmp	r3, #4
 8002580:	d002      	beq.n	8002588 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8002582:	2302      	movs	r3, #2
 8002584:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002586:	e070      	b.n	800266a <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d005      	beq.n	800259a <HAL_SPI_TransmitReceive_IT+0x6a>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d002      	beq.n	800259a <HAL_SPI_TransmitReceive_IT+0x6a>
 8002594:	887b      	ldrh	r3, [r7, #2]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d102      	bne.n	80025a0 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800259e:	e064      	b.n	800266a <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	2b04      	cmp	r3, #4
 80025aa:	d003      	beq.n	80025b4 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2205      	movs	r2, #5
 80025b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2200      	movs	r2, #0
 80025b8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	68ba      	ldr	r2, [r7, #8]
 80025be:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	887a      	ldrh	r2, [r7, #2]
 80025c4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	887a      	ldrh	r2, [r7, #2]
 80025ca:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	887a      	ldrh	r2, [r7, #2]
 80025d6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	887a      	ldrh	r2, [r7, #2]
 80025de:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80025ea:	d906      	bls.n	80025fa <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	4a24      	ldr	r2, [pc, #144]	; (8002680 <HAL_SPI_TransmitReceive_IT+0x150>)
 80025f0:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	4a23      	ldr	r2, [pc, #140]	; (8002684 <HAL_SPI_TransmitReceive_IT+0x154>)
 80025f6:	651a      	str	r2, [r3, #80]	; 0x50
 80025f8:	e005      	b.n	8002606 <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	4a22      	ldr	r2, [pc, #136]	; (8002688 <HAL_SPI_TransmitReceive_IT+0x158>)
 80025fe:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	4a22      	ldr	r2, [pc, #136]	; (800268c <HAL_SPI_TransmitReceive_IT+0x15c>)
 8002604:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	68db      	ldr	r3, [r3, #12]
 800260a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800260e:	d802      	bhi.n	8002616 <HAL_SPI_TransmitReceive_IT+0xe6>
 8002610:	887b      	ldrh	r3, [r7, #2]
 8002612:	2b01      	cmp	r3, #1
 8002614:	d908      	bls.n	8002628 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	685a      	ldr	r2, [r3, #4]
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002624:	605a      	str	r2, [r3, #4]
 8002626:	e007      	b.n	8002638 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	685a      	ldr	r2, [r3, #4]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002636:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	685a      	ldr	r2, [r3, #4]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8002646:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002652:	2b40      	cmp	r3, #64	; 0x40
 8002654:	d008      	beq.n	8002668 <HAL_SPI_TransmitReceive_IT+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002664:	601a      	str	r2, [r3, #0]
 8002666:	e000      	b.n	800266a <HAL_SPI_TransmitReceive_IT+0x13a>
  }

error :
 8002668:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2200      	movs	r2, #0
 800266e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002672:	7dfb      	ldrb	r3, [r7, #23]
}
 8002674:	4618      	mov	r0, r3
 8002676:	371c      	adds	r7, #28
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr
 8002680:	08002a33 	.word	0x08002a33
 8002684:	08002a99 	.word	0x08002a99
 8002688:	080028e3 	.word	0x080028e3
 800268c:	080029a1 	.word	0x080029a1

08002690 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b088      	sub	sp, #32
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80026a8:	69bb      	ldr	r3, [r7, #24]
 80026aa:	099b      	lsrs	r3, r3, #6
 80026ac:	f003 0301 	and.w	r3, r3, #1
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d10f      	bne.n	80026d4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80026b4:	69bb      	ldr	r3, [r7, #24]
 80026b6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d00a      	beq.n	80026d4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	099b      	lsrs	r3, r3, #6
 80026c2:	f003 0301 	and.w	r3, r3, #1
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d004      	beq.n	80026d4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	4798      	blx	r3
    return;
 80026d2:	e0d7      	b.n	8002884 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80026d4:	69bb      	ldr	r3, [r7, #24]
 80026d6:	085b      	lsrs	r3, r3, #1
 80026d8:	f003 0301 	and.w	r3, r3, #1
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d00a      	beq.n	80026f6 <HAL_SPI_IRQHandler+0x66>
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	09db      	lsrs	r3, r3, #7
 80026e4:	f003 0301 	and.w	r3, r3, #1
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d004      	beq.n	80026f6 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	4798      	blx	r3
    return;
 80026f4:	e0c6      	b.n	8002884 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80026f6:	69bb      	ldr	r3, [r7, #24]
 80026f8:	095b      	lsrs	r3, r3, #5
 80026fa:	f003 0301 	and.w	r3, r3, #1
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d10c      	bne.n	800271c <HAL_SPI_IRQHandler+0x8c>
 8002702:	69bb      	ldr	r3, [r7, #24]
 8002704:	099b      	lsrs	r3, r3, #6
 8002706:	f003 0301 	and.w	r3, r3, #1
 800270a:	2b00      	cmp	r3, #0
 800270c:	d106      	bne.n	800271c <HAL_SPI_IRQHandler+0x8c>
 800270e:	69bb      	ldr	r3, [r7, #24]
 8002710:	0a1b      	lsrs	r3, r3, #8
 8002712:	f003 0301 	and.w	r3, r3, #1
 8002716:	2b00      	cmp	r3, #0
 8002718:	f000 80b4 	beq.w	8002884 <HAL_SPI_IRQHandler+0x1f4>
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	095b      	lsrs	r3, r3, #5
 8002720:	f003 0301 	and.w	r3, r3, #1
 8002724:	2b00      	cmp	r3, #0
 8002726:	f000 80ad 	beq.w	8002884 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800272a:	69bb      	ldr	r3, [r7, #24]
 800272c:	099b      	lsrs	r3, r3, #6
 800272e:	f003 0301 	and.w	r3, r3, #1
 8002732:	2b00      	cmp	r3, #0
 8002734:	d023      	beq.n	800277e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800273c:	b2db      	uxtb	r3, r3
 800273e:	2b03      	cmp	r3, #3
 8002740:	d011      	beq.n	8002766 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002746:	f043 0204 	orr.w	r2, r3, #4
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800274e:	2300      	movs	r3, #0
 8002750:	617b      	str	r3, [r7, #20]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	617b      	str	r3, [r7, #20]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	617b      	str	r3, [r7, #20]
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	e00b      	b.n	800277e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002766:	2300      	movs	r3, #0
 8002768:	613b      	str	r3, [r7, #16]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	613b      	str	r3, [r7, #16]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	613b      	str	r3, [r7, #16]
 800277a:	693b      	ldr	r3, [r7, #16]
        return;
 800277c:	e082      	b.n	8002884 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800277e:	69bb      	ldr	r3, [r7, #24]
 8002780:	095b      	lsrs	r3, r3, #5
 8002782:	f003 0301 	and.w	r3, r3, #1
 8002786:	2b00      	cmp	r3, #0
 8002788:	d014      	beq.n	80027b4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800278e:	f043 0201 	orr.w	r2, r3, #1
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002796:	2300      	movs	r3, #0
 8002798:	60fb      	str	r3, [r7, #12]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	60fb      	str	r3, [r7, #12]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027b0:	601a      	str	r2, [r3, #0]
 80027b2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80027b4:	69bb      	ldr	r3, [r7, #24]
 80027b6:	0a1b      	lsrs	r3, r3, #8
 80027b8:	f003 0301 	and.w	r3, r3, #1
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d00c      	beq.n	80027da <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027c4:	f043 0208 	orr.w	r2, r3, #8
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80027cc:	2300      	movs	r3, #0
 80027ce:	60bb      	str	r3, [r7, #8]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	60bb      	str	r3, [r7, #8]
 80027d8:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d04f      	beq.n	8002882 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	685a      	ldr	r2, [r3, #4]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80027f0:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2201      	movs	r2, #1
 80027f6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	f003 0302 	and.w	r3, r3, #2
 8002800:	2b00      	cmp	r3, #0
 8002802:	d104      	bne.n	800280e <HAL_SPI_IRQHandler+0x17e>
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	f003 0301 	and.w	r3, r3, #1
 800280a:	2b00      	cmp	r3, #0
 800280c:	d034      	beq.n	8002878 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	685a      	ldr	r2, [r3, #4]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f022 0203 	bic.w	r2, r2, #3
 800281c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002822:	2b00      	cmp	r3, #0
 8002824:	d011      	beq.n	800284a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800282a:	4a18      	ldr	r2, [pc, #96]	; (800288c <HAL_SPI_IRQHandler+0x1fc>)
 800282c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002832:	4618      	mov	r0, r3
 8002834:	f7fe f84b 	bl	80008ce <HAL_DMA_Abort_IT>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d005      	beq.n	800284a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002842:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800284e:	2b00      	cmp	r3, #0
 8002850:	d016      	beq.n	8002880 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002856:	4a0d      	ldr	r2, [pc, #52]	; (800288c <HAL_SPI_IRQHandler+0x1fc>)
 8002858:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800285e:	4618      	mov	r0, r3
 8002860:	f7fe f835 	bl	80008ce <HAL_DMA_Abort_IT>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d00a      	beq.n	8002880 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800286e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8002876:	e003      	b.n	8002880 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f000 f813 	bl	80028a4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800287e:	e000      	b.n	8002882 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8002880:	bf00      	nop
    return;
 8002882:	bf00      	nop
  }
}
 8002884:	3720      	adds	r7, #32
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	080028b9 	.word	0x080028b9

08002890 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8002898:	bf00      	nop
 800289a:	370c      	adds	r7, #12
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr

080028a4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80028ac:	bf00      	nop
 80028ae:	370c      	adds	r7, #12
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr

080028b8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b084      	sub	sp, #16
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028c4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2200      	movs	r2, #0
 80028ca:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2200      	movs	r2, #0
 80028d2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80028d4:	68f8      	ldr	r0, [r7, #12]
 80028d6:	f7ff ffe5 	bl	80028a4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80028da:	bf00      	nop
 80028dc:	3710      	adds	r7, #16
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}

080028e2 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80028e2:	b580      	push	{r7, lr}
 80028e4:	b082      	sub	sp, #8
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80028f0:	b29b      	uxth	r3, r3
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d923      	bls.n	800293e <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	68da      	ldr	r2, [r3, #12]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002900:	b292      	uxth	r2, r2
 8002902:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002908:	1c9a      	adds	r2, r3, #2
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002914:	b29b      	uxth	r3, r3
 8002916:	3b02      	subs	r3, #2
 8002918:	b29a      	uxth	r2, r3
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002926:	b29b      	uxth	r3, r3
 8002928:	2b01      	cmp	r3, #1
 800292a:	d11f      	bne.n	800296c <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	685a      	ldr	r2, [r3, #4]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800293a:	605a      	str	r2, [r3, #4]
 800293c:	e016      	b.n	800296c <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f103 020c 	add.w	r2, r3, #12
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294a:	7812      	ldrb	r2, [r2, #0]
 800294c:	b2d2      	uxtb	r2, r2
 800294e:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002954:	1c5a      	adds	r2, r3, #1
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002960:	b29b      	uxth	r3, r3
 8002962:	3b01      	subs	r3, #1
 8002964:	b29a      	uxth	r2, r3
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002972:	b29b      	uxth	r3, r3
 8002974:	2b00      	cmp	r3, #0
 8002976:	d10f      	bne.n	8002998 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	685a      	ldr	r2, [r3, #4]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002986:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800298c:	b29b      	uxth	r3, r3
 800298e:	2b00      	cmp	r3, #0
 8002990:	d102      	bne.n	8002998 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f000 fa73 	bl	8002e7e <SPI_CloseRxTx_ISR>
    }
  }
}
 8002998:	bf00      	nop
 800299a:	3708      	adds	r7, #8
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}

080029a0 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029ac:	b29b      	uxth	r3, r3
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d912      	bls.n	80029d8 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029b6:	881a      	ldrh	r2, [r3, #0]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029c2:	1c9a      	adds	r2, r3, #2
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029cc:	b29b      	uxth	r3, r3
 80029ce:	3b02      	subs	r3, #2
 80029d0:	b29a      	uxth	r2, r3
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80029d6:	e012      	b.n	80029fe <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	330c      	adds	r3, #12
 80029e2:	7812      	ldrb	r2, [r2, #0]
 80029e4:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ea:	1c5a      	adds	r2, r3, #1
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029f4:	b29b      	uxth	r3, r3
 80029f6:	3b01      	subs	r3, #1
 80029f8:	b29a      	uxth	r2, r3
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a02:	b29b      	uxth	r3, r3
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d110      	bne.n	8002a2a <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	685a      	ldr	r2, [r3, #4]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a16:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002a1e:	b29b      	uxth	r3, r3
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d102      	bne.n	8002a2a <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f000 fa2a 	bl	8002e7e <SPI_CloseRxTx_ISR>
    }
  }
}
 8002a2a:	bf00      	nop
 8002a2c:	3708      	adds	r7, #8
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}

08002a32 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002a32:	b580      	push	{r7, lr}
 8002a34:	b082      	sub	sp, #8
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	68da      	ldr	r2, [r3, #12]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a44:	b292      	uxth	r2, r2
 8002a46:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4c:	1c9a      	adds	r2, r3, #2
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	3b01      	subs	r3, #1
 8002a5c:	b29a      	uxth	r2, r3
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002a6a:	b29b      	uxth	r3, r3
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d10f      	bne.n	8002a90 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	685a      	ldr	r2, [r3, #4]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a7e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d102      	bne.n	8002a90 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f000 f9f7 	bl	8002e7e <SPI_CloseRxTx_ISR>
    }
  }
}
 8002a90:	bf00      	nop
 8002a92:	3708      	adds	r7, #8
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}

08002a98 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b082      	sub	sp, #8
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aa4:	881a      	ldrh	r2, [r3, #0]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ab0:	1c9a      	adds	r2, r3, #2
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002aba:	b29b      	uxth	r3, r3
 8002abc:	3b01      	subs	r3, #1
 8002abe:	b29a      	uxth	r2, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ac8:	b29b      	uxth	r3, r3
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d110      	bne.n	8002af0 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	685a      	ldr	r2, [r3, #4]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002adc:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002ae4:	b29b      	uxth	r3, r3
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d102      	bne.n	8002af0 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f000 f9c7 	bl	8002e7e <SPI_CloseRxTx_ISR>
    }
  }
}
 8002af0:	bf00      	nop
 8002af2:	3708      	adds	r7, #8
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}

08002af8 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b082      	sub	sp, #8
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f103 020c 	add.w	r2, r3, #12
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0c:	7812      	ldrb	r2, [r2, #0]
 8002b0e:	b2d2      	uxtb	r2, r2
 8002b10:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b16:	1c5a      	adds	r2, r3, #1
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002b22:	b29b      	uxth	r3, r3
 8002b24:	3b01      	subs	r3, #1
 8002b26:	b29a      	uxth	r2, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002b34:	b29b      	uxth	r3, r3
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d102      	bne.n	8002b40 <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f000 f9e1 	bl	8002f02 <SPI_CloseRx_ISR>
  }
}
 8002b40:	bf00      	nop
 8002b42:	3708      	adds	r7, #8
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}

08002b48 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b082      	sub	sp, #8
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	68da      	ldr	r2, [r3, #12]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5a:	b292      	uxth	r2, r2
 8002b5c:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b62:	1c9a      	adds	r2, r3, #2
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	3b01      	subs	r3, #1
 8002b72:	b29a      	uxth	r2, r3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002b80:	b29b      	uxth	r3, r3
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d102      	bne.n	8002b8c <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f000 f9bb 	bl	8002f02 <SPI_CloseRx_ISR>
  }
}
 8002b8c:	bf00      	nop
 8002b8e:	3708      	adds	r7, #8
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}

08002b94 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b084      	sub	sp, #16
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	60f8      	str	r0, [r7, #12]
 8002b9c:	60b9      	str	r1, [r7, #8]
 8002b9e:	603b      	str	r3, [r7, #0]
 8002ba0:	4613      	mov	r3, r2
 8002ba2:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002ba4:	e04c      	b.n	8002c40 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bac:	d048      	beq.n	8002c40 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002bae:	f7fd fd4d 	bl	800064c <HAL_GetTick>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	69bb      	ldr	r3, [r7, #24]
 8002bb6:	1ad3      	subs	r3, r2, r3
 8002bb8:	683a      	ldr	r2, [r7, #0]
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	d902      	bls.n	8002bc4 <SPI_WaitFlagStateUntilTimeout+0x30>
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d13d      	bne.n	8002c40 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	685a      	ldr	r2, [r3, #4]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002bd2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002bdc:	d111      	bne.n	8002c02 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002be6:	d004      	beq.n	8002bf2 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bf0:	d107      	bne.n	8002c02 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c00:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c0a:	d10f      	bne.n	8002c2c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c1a:	601a      	str	r2, [r3, #0]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c2a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2200      	movs	r2, #0
 8002c38:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	e00f      	b.n	8002c60 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	689a      	ldr	r2, [r3, #8]
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	4013      	ands	r3, r2
 8002c4a:	68ba      	ldr	r2, [r7, #8]
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	bf0c      	ite	eq
 8002c50:	2301      	moveq	r3, #1
 8002c52:	2300      	movne	r3, #0
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	461a      	mov	r2, r3
 8002c58:	79fb      	ldrb	r3, [r7, #7]
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d1a3      	bne.n	8002ba6 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8002c5e:	2300      	movs	r3, #0
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3710      	adds	r7, #16
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}

08002c68 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b084      	sub	sp, #16
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	60f8      	str	r0, [r7, #12]
 8002c70:	60b9      	str	r1, [r7, #8]
 8002c72:	607a      	str	r2, [r7, #4]
 8002c74:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8002c76:	e057      	b.n	8002d28 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002c7e:	d106      	bne.n	8002c8e <SPI_WaitFifoStateUntilTimeout+0x26>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d103      	bne.n	8002c8e <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	330c      	adds	r3, #12
 8002c8c:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c94:	d048      	beq.n	8002d28 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002c96:	f7fd fcd9 	bl	800064c <HAL_GetTick>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	69bb      	ldr	r3, [r7, #24]
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	683a      	ldr	r2, [r7, #0]
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d902      	bls.n	8002cac <SPI_WaitFifoStateUntilTimeout+0x44>
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d13d      	bne.n	8002d28 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	685a      	ldr	r2, [r3, #4]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002cba:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002cc4:	d111      	bne.n	8002cea <SPI_WaitFifoStateUntilTimeout+0x82>
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cce:	d004      	beq.n	8002cda <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cd8:	d107      	bne.n	8002cea <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ce8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cf2:	d10f      	bne.n	8002d14 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d02:	601a      	str	r2, [r3, #0]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d12:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2201      	movs	r2, #1
 8002d18:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002d24:	2303      	movs	r3, #3
 8002d26:	e008      	b.n	8002d3a <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	689a      	ldr	r2, [r3, #8]
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	4013      	ands	r3, r2
 8002d32:	687a      	ldr	r2, [r7, #4]
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d19f      	bne.n	8002c78 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8002d38:	2300      	movs	r3, #0
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3710      	adds	r7, #16
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}

08002d42 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002d42:	b580      	push	{r7, lr}
 8002d44:	b086      	sub	sp, #24
 8002d46:	af02      	add	r7, sp, #8
 8002d48:	60f8      	str	r0, [r7, #12]
 8002d4a:	60b9      	str	r1, [r7, #8]
 8002d4c:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d56:	d111      	bne.n	8002d7c <SPI_EndRxTransaction+0x3a>
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d60:	d004      	beq.n	8002d6c <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d6a:	d107      	bne.n	8002d7c <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d7a:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	9300      	str	r3, [sp, #0]
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	2200      	movs	r2, #0
 8002d84:	2180      	movs	r1, #128	; 0x80
 8002d86:	68f8      	ldr	r0, [r7, #12]
 8002d88:	f7ff ff04 	bl	8002b94 <SPI_WaitFlagStateUntilTimeout>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d007      	beq.n	8002da2 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d96:	f043 0220 	orr.w	r2, r3, #32
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e023      	b.n	8002dea <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002daa:	d11d      	bne.n	8002de8 <SPI_EndRxTransaction+0xa6>
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002db4:	d004      	beq.n	8002dc0 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dbe:	d113      	bne.n	8002de8 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	9300      	str	r3, [sp, #0]
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002dcc:	68f8      	ldr	r0, [r7, #12]
 8002dce:	f7ff ff4b 	bl	8002c68 <SPI_WaitFifoStateUntilTimeout>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d007      	beq.n	8002de8 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ddc:	f043 0220 	orr.w	r2, r3, #32
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8002de4:	2303      	movs	r3, #3
 8002de6:	e000      	b.n	8002dea <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8002de8:	2300      	movs	r3, #0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3710      	adds	r7, #16
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}

08002df2 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002df2:	b580      	push	{r7, lr}
 8002df4:	b086      	sub	sp, #24
 8002df6:	af02      	add	r7, sp, #8
 8002df8:	60f8      	str	r0, [r7, #12]
 8002dfa:	60b9      	str	r1, [r7, #8]
 8002dfc:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	9300      	str	r3, [sp, #0]
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8002e0a:	68f8      	ldr	r0, [r7, #12]
 8002e0c:	f7ff ff2c 	bl	8002c68 <SPI_WaitFifoStateUntilTimeout>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d007      	beq.n	8002e26 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e1a:	f043 0220 	orr.w	r2, r3, #32
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	e027      	b.n	8002e76 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	9300      	str	r3, [sp, #0]
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	2180      	movs	r1, #128	; 0x80
 8002e30:	68f8      	ldr	r0, [r7, #12]
 8002e32:	f7ff feaf 	bl	8002b94 <SPI_WaitFlagStateUntilTimeout>
 8002e36:	4603      	mov	r3, r0
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d007      	beq.n	8002e4c <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e40:	f043 0220 	orr.w	r2, r3, #32
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002e48:	2303      	movs	r3, #3
 8002e4a:	e014      	b.n	8002e76 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	9300      	str	r3, [sp, #0]
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	2200      	movs	r2, #0
 8002e54:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002e58:	68f8      	ldr	r0, [r7, #12]
 8002e5a:	f7ff ff05 	bl	8002c68 <SPI_WaitFifoStateUntilTimeout>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d007      	beq.n	8002e74 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e68:	f043 0220 	orr.w	r2, r3, #32
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002e70:	2303      	movs	r3, #3
 8002e72:	e000      	b.n	8002e76 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002e74:	2300      	movs	r3, #0
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3710      	adds	r7, #16
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}

08002e7e <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8002e7e:	b580      	push	{r7, lr}
 8002e80:	b084      	sub	sp, #16
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002e86:	f7fd fbe1 	bl	800064c <HAL_GetTick>
 8002e8a:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	685a      	ldr	r2, [r3, #4]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f022 0220 	bic.w	r2, r2, #32
 8002e9a:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002e9c:	68fa      	ldr	r2, [r7, #12]
 8002e9e:	2164      	movs	r1, #100	; 0x64
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f7ff ffa6 	bl	8002df2 <SPI_EndRxTxTransaction>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d005      	beq.n	8002eb8 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002eb0:	f043 0220 	orr.w	r2, r3, #32
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d115      	bne.n	8002eec <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	2b04      	cmp	r3, #4
 8002eca:	d107      	bne.n	8002edc <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	f000 ffb3 	bl	8003e40 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8002eda:	e00e      	b.n	8002efa <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	f7ff fcd3 	bl	8002890 <HAL_SPI_TxRxCpltCallback>
}
 8002eea:	e006      	b.n	8002efa <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f7ff fcd5 	bl	80028a4 <HAL_SPI_ErrorCallback>
}
 8002efa:	bf00      	nop
 8002efc:	3710      	adds	r7, #16
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}

08002f02 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8002f02:	b580      	push	{r7, lr}
 8002f04:	b082      	sub	sp, #8
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	685a      	ldr	r2, [r3, #4]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002f18:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8002f1a:	f7fd fb97 	bl	800064c <HAL_GetTick>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	461a      	mov	r2, r3
 8002f22:	2164      	movs	r1, #100	; 0x64
 8002f24:	6878      	ldr	r0, [r7, #4]
 8002f26:	f7ff ff0c 	bl	8002d42 <SPI_EndRxTransaction>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d005      	beq.n	8002f3c <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f34:	f043 0220 	orr.w	r2, r3, #32
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d103      	bne.n	8002f54 <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	f000 ff77 	bl	8003e40 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8002f52:	e002      	b.n	8002f5a <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	f7ff fca5 	bl	80028a4 <HAL_SPI_ErrorCallback>
}
 8002f5a:	bf00      	nop
 8002f5c:	3708      	adds	r7, #8
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}

08002f62 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f62:	b580      	push	{r7, lr}
 8002f64:	b082      	sub	sp, #8
 8002f66:	af00      	add	r7, sp, #0
 8002f68:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d101      	bne.n	8002f74 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	e040      	b.n	8002ff6 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d106      	bne.n	8002f8a <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	f001 fbbd 	bl	8004704 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2224      	movs	r2, #36	; 0x24
 8002f8e:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f022 0201 	bic.w	r2, r2, #1
 8002f9e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002fa0:	6878      	ldr	r0, [r7, #4]
 8002fa2:	f000 f8bd 	bl	8003120 <UART_SetConfig>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d101      	bne.n	8002fb0 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e022      	b.n	8002ff6 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d002      	beq.n	8002fbe <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002fb8:	6878      	ldr	r0, [r7, #4]
 8002fba:	f000 fb57 	bl	800366c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	685a      	ldr	r2, [r3, #4]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002fcc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	689a      	ldr	r2, [r3, #8]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002fdc:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f042 0201 	orr.w	r2, r2, #1
 8002fec:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f000 fbde 	bl	80037b0 <UART_CheckIdleState>
 8002ff4:	4603      	mov	r3, r0
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3708      	adds	r7, #8
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}

08002ffe <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ffe:	b580      	push	{r7, lr}
 8003000:	b08a      	sub	sp, #40	; 0x28
 8003002:	af02      	add	r7, sp, #8
 8003004:	60f8      	str	r0, [r7, #12]
 8003006:	60b9      	str	r1, [r7, #8]
 8003008:	603b      	str	r3, [r7, #0]
 800300a:	4613      	mov	r3, r2
 800300c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003012:	2b20      	cmp	r3, #32
 8003014:	d17f      	bne.n	8003116 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d002      	beq.n	8003022 <HAL_UART_Transmit+0x24>
 800301c:	88fb      	ldrh	r3, [r7, #6]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d101      	bne.n	8003026 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e078      	b.n	8003118 <HAL_UART_Transmit+0x11a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800302c:	2b01      	cmp	r3, #1
 800302e:	d101      	bne.n	8003034 <HAL_UART_Transmit+0x36>
 8003030:	2302      	movs	r3, #2
 8003032:	e071      	b.n	8003118 <HAL_UART_Transmit+0x11a>
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2201      	movs	r2, #1
 8003038:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2200      	movs	r2, #0
 8003040:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2221      	movs	r2, #33	; 0x21
 8003046:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003048:	f7fd fb00 	bl	800064c <HAL_GetTick>
 800304c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	88fa      	ldrh	r2, [r7, #6]
 8003052:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	88fa      	ldrh	r2, [r7, #6]
 800305a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

        /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003066:	d108      	bne.n	800307a <HAL_UART_Transmit+0x7c>
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	691b      	ldr	r3, [r3, #16]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d104      	bne.n	800307a <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 8003070:	2300      	movs	r3, #0
 8003072:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	61bb      	str	r3, [r7, #24]
 8003078:	e003      	b.n	8003082 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800307e:	2300      	movs	r3, #0
 8003080:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003082:	e02c      	b.n	80030de <HAL_UART_Transmit+0xe0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	9300      	str	r3, [sp, #0]
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	2200      	movs	r2, #0
 800308c:	2180      	movs	r1, #128	; 0x80
 800308e:	68f8      	ldr	r0, [r7, #12]
 8003090:	f000 fbbd 	bl	800380e <UART_WaitOnFlagUntilTimeout>
 8003094:	4603      	mov	r3, r0
 8003096:	2b00      	cmp	r3, #0
 8003098:	d001      	beq.n	800309e <HAL_UART_Transmit+0xa0>
      {
        return HAL_TIMEOUT;
 800309a:	2303      	movs	r3, #3
 800309c:	e03c      	b.n	8003118 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d10b      	bne.n	80030bc <HAL_UART_Transmit+0xbe>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80030a4:	69bb      	ldr	r3, [r7, #24]
 80030a6:	881b      	ldrh	r3, [r3, #0]
 80030a8:	461a      	mov	r2, r3
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80030b2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80030b4:	69bb      	ldr	r3, [r7, #24]
 80030b6:	3302      	adds	r3, #2
 80030b8:	61bb      	str	r3, [r7, #24]
 80030ba:	e007      	b.n	80030cc <HAL_UART_Transmit+0xce>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80030bc:	69fb      	ldr	r3, [r7, #28]
 80030be:	781a      	ldrb	r2, [r3, #0]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80030c6:	69fb      	ldr	r3, [r7, #28]
 80030c8:	3301      	adds	r3, #1
 80030ca:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	3b01      	subs	r3, #1
 80030d6:	b29a      	uxth	r2, r3
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80030e4:	b29b      	uxth	r3, r3
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d1cc      	bne.n	8003084 <HAL_UART_Transmit+0x86>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	9300      	str	r3, [sp, #0]
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	2200      	movs	r2, #0
 80030f2:	2140      	movs	r1, #64	; 0x40
 80030f4:	68f8      	ldr	r0, [r7, #12]
 80030f6:	f000 fb8a 	bl	800380e <UART_WaitOnFlagUntilTimeout>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d001      	beq.n	8003104 <HAL_UART_Transmit+0x106>
    {
      return HAL_TIMEOUT;
 8003100:	2303      	movs	r3, #3
 8003102:	e009      	b.n	8003118 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2220      	movs	r2, #32
 8003108:	675a      	str	r2, [r3, #116]	; 0x74

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2200      	movs	r2, #0
 800310e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8003112:	2300      	movs	r3, #0
 8003114:	e000      	b.n	8003118 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8003116:	2302      	movs	r3, #2
  }
}
 8003118:	4618      	mov	r0, r3
 800311a:	3720      	adds	r7, #32
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}

08003120 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b088      	sub	sp, #32
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003128:	2300      	movs	r3, #0
 800312a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800312c:	2300      	movs	r3, #0
 800312e:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	689a      	ldr	r2, [r3, #8]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	691b      	ldr	r3, [r3, #16]
 8003138:	431a      	orrs	r2, r3
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	695b      	ldr	r3, [r3, #20]
 800313e:	431a      	orrs	r2, r3
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	69db      	ldr	r3, [r3, #28]
 8003144:	4313      	orrs	r3, r2
 8003146:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	4ba7      	ldr	r3, [pc, #668]	; (80033ec <UART_SetConfig+0x2cc>)
 8003150:	4013      	ands	r3, r2
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	6812      	ldr	r2, [r2, #0]
 8003156:	6939      	ldr	r1, [r7, #16]
 8003158:	430b      	orrs	r3, r1
 800315a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	68da      	ldr	r2, [r3, #12]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	430a      	orrs	r2, r1
 8003170:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	699b      	ldr	r3, [r3, #24]
 8003176:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6a1b      	ldr	r3, [r3, #32]
 800317c:	693a      	ldr	r2, [r7, #16]
 800317e:	4313      	orrs	r3, r2
 8003180:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	693a      	ldr	r2, [r7, #16]
 8003192:	430a      	orrs	r2, r1
 8003194:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a95      	ldr	r2, [pc, #596]	; (80033f0 <UART_SetConfig+0x2d0>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d120      	bne.n	80031e2 <UART_SetConfig+0xc2>
 80031a0:	4b94      	ldr	r3, [pc, #592]	; (80033f4 <UART_SetConfig+0x2d4>)
 80031a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031a6:	f003 0303 	and.w	r3, r3, #3
 80031aa:	2b03      	cmp	r3, #3
 80031ac:	d816      	bhi.n	80031dc <UART_SetConfig+0xbc>
 80031ae:	a201      	add	r2, pc, #4	; (adr r2, 80031b4 <UART_SetConfig+0x94>)
 80031b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031b4:	080031c5 	.word	0x080031c5
 80031b8:	080031d1 	.word	0x080031d1
 80031bc:	080031cb 	.word	0x080031cb
 80031c0:	080031d7 	.word	0x080031d7
 80031c4:	2301      	movs	r3, #1
 80031c6:	77fb      	strb	r3, [r7, #31]
 80031c8:	e14f      	b.n	800346a <UART_SetConfig+0x34a>
 80031ca:	2302      	movs	r3, #2
 80031cc:	77fb      	strb	r3, [r7, #31]
 80031ce:	e14c      	b.n	800346a <UART_SetConfig+0x34a>
 80031d0:	2304      	movs	r3, #4
 80031d2:	77fb      	strb	r3, [r7, #31]
 80031d4:	e149      	b.n	800346a <UART_SetConfig+0x34a>
 80031d6:	2308      	movs	r3, #8
 80031d8:	77fb      	strb	r3, [r7, #31]
 80031da:	e146      	b.n	800346a <UART_SetConfig+0x34a>
 80031dc:	2310      	movs	r3, #16
 80031de:	77fb      	strb	r3, [r7, #31]
 80031e0:	e143      	b.n	800346a <UART_SetConfig+0x34a>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a84      	ldr	r2, [pc, #528]	; (80033f8 <UART_SetConfig+0x2d8>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d132      	bne.n	8003252 <UART_SetConfig+0x132>
 80031ec:	4b81      	ldr	r3, [pc, #516]	; (80033f4 <UART_SetConfig+0x2d4>)
 80031ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031f2:	f003 030c 	and.w	r3, r3, #12
 80031f6:	2b0c      	cmp	r3, #12
 80031f8:	d828      	bhi.n	800324c <UART_SetConfig+0x12c>
 80031fa:	a201      	add	r2, pc, #4	; (adr r2, 8003200 <UART_SetConfig+0xe0>)
 80031fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003200:	08003235 	.word	0x08003235
 8003204:	0800324d 	.word	0x0800324d
 8003208:	0800324d 	.word	0x0800324d
 800320c:	0800324d 	.word	0x0800324d
 8003210:	08003241 	.word	0x08003241
 8003214:	0800324d 	.word	0x0800324d
 8003218:	0800324d 	.word	0x0800324d
 800321c:	0800324d 	.word	0x0800324d
 8003220:	0800323b 	.word	0x0800323b
 8003224:	0800324d 	.word	0x0800324d
 8003228:	0800324d 	.word	0x0800324d
 800322c:	0800324d 	.word	0x0800324d
 8003230:	08003247 	.word	0x08003247
 8003234:	2300      	movs	r3, #0
 8003236:	77fb      	strb	r3, [r7, #31]
 8003238:	e117      	b.n	800346a <UART_SetConfig+0x34a>
 800323a:	2302      	movs	r3, #2
 800323c:	77fb      	strb	r3, [r7, #31]
 800323e:	e114      	b.n	800346a <UART_SetConfig+0x34a>
 8003240:	2304      	movs	r3, #4
 8003242:	77fb      	strb	r3, [r7, #31]
 8003244:	e111      	b.n	800346a <UART_SetConfig+0x34a>
 8003246:	2308      	movs	r3, #8
 8003248:	77fb      	strb	r3, [r7, #31]
 800324a:	e10e      	b.n	800346a <UART_SetConfig+0x34a>
 800324c:	2310      	movs	r3, #16
 800324e:	77fb      	strb	r3, [r7, #31]
 8003250:	e10b      	b.n	800346a <UART_SetConfig+0x34a>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a69      	ldr	r2, [pc, #420]	; (80033fc <UART_SetConfig+0x2dc>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d120      	bne.n	800329e <UART_SetConfig+0x17e>
 800325c:	4b65      	ldr	r3, [pc, #404]	; (80033f4 <UART_SetConfig+0x2d4>)
 800325e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003262:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003266:	2b30      	cmp	r3, #48	; 0x30
 8003268:	d013      	beq.n	8003292 <UART_SetConfig+0x172>
 800326a:	2b30      	cmp	r3, #48	; 0x30
 800326c:	d814      	bhi.n	8003298 <UART_SetConfig+0x178>
 800326e:	2b20      	cmp	r3, #32
 8003270:	d009      	beq.n	8003286 <UART_SetConfig+0x166>
 8003272:	2b20      	cmp	r3, #32
 8003274:	d810      	bhi.n	8003298 <UART_SetConfig+0x178>
 8003276:	2b00      	cmp	r3, #0
 8003278:	d002      	beq.n	8003280 <UART_SetConfig+0x160>
 800327a:	2b10      	cmp	r3, #16
 800327c:	d006      	beq.n	800328c <UART_SetConfig+0x16c>
 800327e:	e00b      	b.n	8003298 <UART_SetConfig+0x178>
 8003280:	2300      	movs	r3, #0
 8003282:	77fb      	strb	r3, [r7, #31]
 8003284:	e0f1      	b.n	800346a <UART_SetConfig+0x34a>
 8003286:	2302      	movs	r3, #2
 8003288:	77fb      	strb	r3, [r7, #31]
 800328a:	e0ee      	b.n	800346a <UART_SetConfig+0x34a>
 800328c:	2304      	movs	r3, #4
 800328e:	77fb      	strb	r3, [r7, #31]
 8003290:	e0eb      	b.n	800346a <UART_SetConfig+0x34a>
 8003292:	2308      	movs	r3, #8
 8003294:	77fb      	strb	r3, [r7, #31]
 8003296:	e0e8      	b.n	800346a <UART_SetConfig+0x34a>
 8003298:	2310      	movs	r3, #16
 800329a:	77fb      	strb	r3, [r7, #31]
 800329c:	e0e5      	b.n	800346a <UART_SetConfig+0x34a>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a57      	ldr	r2, [pc, #348]	; (8003400 <UART_SetConfig+0x2e0>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d120      	bne.n	80032ea <UART_SetConfig+0x1ca>
 80032a8:	4b52      	ldr	r3, [pc, #328]	; (80033f4 <UART_SetConfig+0x2d4>)
 80032aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ae:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80032b2:	2bc0      	cmp	r3, #192	; 0xc0
 80032b4:	d013      	beq.n	80032de <UART_SetConfig+0x1be>
 80032b6:	2bc0      	cmp	r3, #192	; 0xc0
 80032b8:	d814      	bhi.n	80032e4 <UART_SetConfig+0x1c4>
 80032ba:	2b80      	cmp	r3, #128	; 0x80
 80032bc:	d009      	beq.n	80032d2 <UART_SetConfig+0x1b2>
 80032be:	2b80      	cmp	r3, #128	; 0x80
 80032c0:	d810      	bhi.n	80032e4 <UART_SetConfig+0x1c4>
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d002      	beq.n	80032cc <UART_SetConfig+0x1ac>
 80032c6:	2b40      	cmp	r3, #64	; 0x40
 80032c8:	d006      	beq.n	80032d8 <UART_SetConfig+0x1b8>
 80032ca:	e00b      	b.n	80032e4 <UART_SetConfig+0x1c4>
 80032cc:	2300      	movs	r3, #0
 80032ce:	77fb      	strb	r3, [r7, #31]
 80032d0:	e0cb      	b.n	800346a <UART_SetConfig+0x34a>
 80032d2:	2302      	movs	r3, #2
 80032d4:	77fb      	strb	r3, [r7, #31]
 80032d6:	e0c8      	b.n	800346a <UART_SetConfig+0x34a>
 80032d8:	2304      	movs	r3, #4
 80032da:	77fb      	strb	r3, [r7, #31]
 80032dc:	e0c5      	b.n	800346a <UART_SetConfig+0x34a>
 80032de:	2308      	movs	r3, #8
 80032e0:	77fb      	strb	r3, [r7, #31]
 80032e2:	e0c2      	b.n	800346a <UART_SetConfig+0x34a>
 80032e4:	2310      	movs	r3, #16
 80032e6:	77fb      	strb	r3, [r7, #31]
 80032e8:	e0bf      	b.n	800346a <UART_SetConfig+0x34a>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a45      	ldr	r2, [pc, #276]	; (8003404 <UART_SetConfig+0x2e4>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d125      	bne.n	8003340 <UART_SetConfig+0x220>
 80032f4:	4b3f      	ldr	r3, [pc, #252]	; (80033f4 <UART_SetConfig+0x2d4>)
 80032f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003302:	d017      	beq.n	8003334 <UART_SetConfig+0x214>
 8003304:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003308:	d817      	bhi.n	800333a <UART_SetConfig+0x21a>
 800330a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800330e:	d00b      	beq.n	8003328 <UART_SetConfig+0x208>
 8003310:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003314:	d811      	bhi.n	800333a <UART_SetConfig+0x21a>
 8003316:	2b00      	cmp	r3, #0
 8003318:	d003      	beq.n	8003322 <UART_SetConfig+0x202>
 800331a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800331e:	d006      	beq.n	800332e <UART_SetConfig+0x20e>
 8003320:	e00b      	b.n	800333a <UART_SetConfig+0x21a>
 8003322:	2300      	movs	r3, #0
 8003324:	77fb      	strb	r3, [r7, #31]
 8003326:	e0a0      	b.n	800346a <UART_SetConfig+0x34a>
 8003328:	2302      	movs	r3, #2
 800332a:	77fb      	strb	r3, [r7, #31]
 800332c:	e09d      	b.n	800346a <UART_SetConfig+0x34a>
 800332e:	2304      	movs	r3, #4
 8003330:	77fb      	strb	r3, [r7, #31]
 8003332:	e09a      	b.n	800346a <UART_SetConfig+0x34a>
 8003334:	2308      	movs	r3, #8
 8003336:	77fb      	strb	r3, [r7, #31]
 8003338:	e097      	b.n	800346a <UART_SetConfig+0x34a>
 800333a:	2310      	movs	r3, #16
 800333c:	77fb      	strb	r3, [r7, #31]
 800333e:	e094      	b.n	800346a <UART_SetConfig+0x34a>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a30      	ldr	r2, [pc, #192]	; (8003408 <UART_SetConfig+0x2e8>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d125      	bne.n	8003396 <UART_SetConfig+0x276>
 800334a:	4b2a      	ldr	r3, [pc, #168]	; (80033f4 <UART_SetConfig+0x2d4>)
 800334c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003350:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003354:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003358:	d017      	beq.n	800338a <UART_SetConfig+0x26a>
 800335a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800335e:	d817      	bhi.n	8003390 <UART_SetConfig+0x270>
 8003360:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003364:	d00b      	beq.n	800337e <UART_SetConfig+0x25e>
 8003366:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800336a:	d811      	bhi.n	8003390 <UART_SetConfig+0x270>
 800336c:	2b00      	cmp	r3, #0
 800336e:	d003      	beq.n	8003378 <UART_SetConfig+0x258>
 8003370:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003374:	d006      	beq.n	8003384 <UART_SetConfig+0x264>
 8003376:	e00b      	b.n	8003390 <UART_SetConfig+0x270>
 8003378:	2301      	movs	r3, #1
 800337a:	77fb      	strb	r3, [r7, #31]
 800337c:	e075      	b.n	800346a <UART_SetConfig+0x34a>
 800337e:	2302      	movs	r3, #2
 8003380:	77fb      	strb	r3, [r7, #31]
 8003382:	e072      	b.n	800346a <UART_SetConfig+0x34a>
 8003384:	2304      	movs	r3, #4
 8003386:	77fb      	strb	r3, [r7, #31]
 8003388:	e06f      	b.n	800346a <UART_SetConfig+0x34a>
 800338a:	2308      	movs	r3, #8
 800338c:	77fb      	strb	r3, [r7, #31]
 800338e:	e06c      	b.n	800346a <UART_SetConfig+0x34a>
 8003390:	2310      	movs	r3, #16
 8003392:	77fb      	strb	r3, [r7, #31]
 8003394:	e069      	b.n	800346a <UART_SetConfig+0x34a>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a1c      	ldr	r2, [pc, #112]	; (800340c <UART_SetConfig+0x2ec>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d137      	bne.n	8003410 <UART_SetConfig+0x2f0>
 80033a0:	4b14      	ldr	r3, [pc, #80]	; (80033f4 <UART_SetConfig+0x2d4>)
 80033a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033a6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80033aa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80033ae:	d017      	beq.n	80033e0 <UART_SetConfig+0x2c0>
 80033b0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80033b4:	d817      	bhi.n	80033e6 <UART_SetConfig+0x2c6>
 80033b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033ba:	d00b      	beq.n	80033d4 <UART_SetConfig+0x2b4>
 80033bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033c0:	d811      	bhi.n	80033e6 <UART_SetConfig+0x2c6>
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d003      	beq.n	80033ce <UART_SetConfig+0x2ae>
 80033c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033ca:	d006      	beq.n	80033da <UART_SetConfig+0x2ba>
 80033cc:	e00b      	b.n	80033e6 <UART_SetConfig+0x2c6>
 80033ce:	2300      	movs	r3, #0
 80033d0:	77fb      	strb	r3, [r7, #31]
 80033d2:	e04a      	b.n	800346a <UART_SetConfig+0x34a>
 80033d4:	2302      	movs	r3, #2
 80033d6:	77fb      	strb	r3, [r7, #31]
 80033d8:	e047      	b.n	800346a <UART_SetConfig+0x34a>
 80033da:	2304      	movs	r3, #4
 80033dc:	77fb      	strb	r3, [r7, #31]
 80033de:	e044      	b.n	800346a <UART_SetConfig+0x34a>
 80033e0:	2308      	movs	r3, #8
 80033e2:	77fb      	strb	r3, [r7, #31]
 80033e4:	e041      	b.n	800346a <UART_SetConfig+0x34a>
 80033e6:	2310      	movs	r3, #16
 80033e8:	77fb      	strb	r3, [r7, #31]
 80033ea:	e03e      	b.n	800346a <UART_SetConfig+0x34a>
 80033ec:	efff69f3 	.word	0xefff69f3
 80033f0:	40011000 	.word	0x40011000
 80033f4:	40023800 	.word	0x40023800
 80033f8:	40004400 	.word	0x40004400
 80033fc:	40004800 	.word	0x40004800
 8003400:	40004c00 	.word	0x40004c00
 8003404:	40005000 	.word	0x40005000
 8003408:	40011400 	.word	0x40011400
 800340c:	40007800 	.word	0x40007800
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a91      	ldr	r2, [pc, #580]	; (800365c <UART_SetConfig+0x53c>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d125      	bne.n	8003466 <UART_SetConfig+0x346>
 800341a:	4b91      	ldr	r3, [pc, #580]	; (8003660 <UART_SetConfig+0x540>)
 800341c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003420:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003424:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003428:	d017      	beq.n	800345a <UART_SetConfig+0x33a>
 800342a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800342e:	d817      	bhi.n	8003460 <UART_SetConfig+0x340>
 8003430:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003434:	d00b      	beq.n	800344e <UART_SetConfig+0x32e>
 8003436:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800343a:	d811      	bhi.n	8003460 <UART_SetConfig+0x340>
 800343c:	2b00      	cmp	r3, #0
 800343e:	d003      	beq.n	8003448 <UART_SetConfig+0x328>
 8003440:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003444:	d006      	beq.n	8003454 <UART_SetConfig+0x334>
 8003446:	e00b      	b.n	8003460 <UART_SetConfig+0x340>
 8003448:	2300      	movs	r3, #0
 800344a:	77fb      	strb	r3, [r7, #31]
 800344c:	e00d      	b.n	800346a <UART_SetConfig+0x34a>
 800344e:	2302      	movs	r3, #2
 8003450:	77fb      	strb	r3, [r7, #31]
 8003452:	e00a      	b.n	800346a <UART_SetConfig+0x34a>
 8003454:	2304      	movs	r3, #4
 8003456:	77fb      	strb	r3, [r7, #31]
 8003458:	e007      	b.n	800346a <UART_SetConfig+0x34a>
 800345a:	2308      	movs	r3, #8
 800345c:	77fb      	strb	r3, [r7, #31]
 800345e:	e004      	b.n	800346a <UART_SetConfig+0x34a>
 8003460:	2310      	movs	r3, #16
 8003462:	77fb      	strb	r3, [r7, #31]
 8003464:	e001      	b.n	800346a <UART_SetConfig+0x34a>
 8003466:	2310      	movs	r3, #16
 8003468:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	69db      	ldr	r3, [r3, #28]
 800346e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003472:	d17c      	bne.n	800356e <UART_SetConfig+0x44e>
  {
    switch (clocksource)
 8003474:	7ffb      	ldrb	r3, [r7, #31]
 8003476:	2b08      	cmp	r3, #8
 8003478:	d859      	bhi.n	800352e <UART_SetConfig+0x40e>
 800347a:	a201      	add	r2, pc, #4	; (adr r2, 8003480 <UART_SetConfig+0x360>)
 800347c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003480:	080034a5 	.word	0x080034a5
 8003484:	080034c3 	.word	0x080034c3
 8003488:	080034e1 	.word	0x080034e1
 800348c:	0800352f 	.word	0x0800352f
 8003490:	080034f9 	.word	0x080034f9
 8003494:	0800352f 	.word	0x0800352f
 8003498:	0800352f 	.word	0x0800352f
 800349c:	0800352f 	.word	0x0800352f
 80034a0:	08003517 	.word	0x08003517
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80034a4:	f7fe f98e 	bl	80017c4 <HAL_RCC_GetPCLK1Freq>
 80034a8:	4603      	mov	r3, r0
 80034aa:	005a      	lsls	r2, r3, #1
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	085b      	lsrs	r3, r3, #1
 80034b2:	441a      	add	r2, r3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80034bc:	b29b      	uxth	r3, r3
 80034be:	61bb      	str	r3, [r7, #24]
        break;
 80034c0:	e038      	b.n	8003534 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80034c2:	f7fe f993 	bl	80017ec <HAL_RCC_GetPCLK2Freq>
 80034c6:	4603      	mov	r3, r0
 80034c8:	005a      	lsls	r2, r3, #1
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	085b      	lsrs	r3, r3, #1
 80034d0:	441a      	add	r2, r3
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80034da:	b29b      	uxth	r3, r3
 80034dc:	61bb      	str	r3, [r7, #24]
        break;
 80034de:	e029      	b.n	8003534 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	085a      	lsrs	r2, r3, #1
 80034e6:	4b5f      	ldr	r3, [pc, #380]	; (8003664 <UART_SetConfig+0x544>)
 80034e8:	4413      	add	r3, r2
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	6852      	ldr	r2, [r2, #4]
 80034ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	61bb      	str	r3, [r7, #24]
        break;
 80034f6:	e01d      	b.n	8003534 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80034f8:	f7fe f876 	bl	80015e8 <HAL_RCC_GetSysClockFreq>
 80034fc:	4603      	mov	r3, r0
 80034fe:	005a      	lsls	r2, r3, #1
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	085b      	lsrs	r3, r3, #1
 8003506:	441a      	add	r2, r3
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003510:	b29b      	uxth	r3, r3
 8003512:	61bb      	str	r3, [r7, #24]
        break;
 8003514:	e00e      	b.n	8003534 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	085b      	lsrs	r3, r3, #1
 800351c:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	fbb2 f3f3 	udiv	r3, r2, r3
 8003528:	b29b      	uxth	r3, r3
 800352a:	61bb      	str	r3, [r7, #24]
        break;
 800352c:	e002      	b.n	8003534 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	75fb      	strb	r3, [r7, #23]
        break;
 8003532:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003534:	69bb      	ldr	r3, [r7, #24]
 8003536:	2b0f      	cmp	r3, #15
 8003538:	d916      	bls.n	8003568 <UART_SetConfig+0x448>
 800353a:	69bb      	ldr	r3, [r7, #24]
 800353c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003540:	d212      	bcs.n	8003568 <UART_SetConfig+0x448>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003542:	69bb      	ldr	r3, [r7, #24]
 8003544:	b29b      	uxth	r3, r3
 8003546:	f023 030f 	bic.w	r3, r3, #15
 800354a:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800354c:	69bb      	ldr	r3, [r7, #24]
 800354e:	085b      	lsrs	r3, r3, #1
 8003550:	b29b      	uxth	r3, r3
 8003552:	f003 0307 	and.w	r3, r3, #7
 8003556:	b29a      	uxth	r2, r3
 8003558:	89fb      	ldrh	r3, [r7, #14]
 800355a:	4313      	orrs	r3, r2
 800355c:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	89fa      	ldrh	r2, [r7, #14]
 8003564:	60da      	str	r2, [r3, #12]
 8003566:	e06e      	b.n	8003646 <UART_SetConfig+0x526>
    }
    else
    {
      ret = HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	75fb      	strb	r3, [r7, #23]
 800356c:	e06b      	b.n	8003646 <UART_SetConfig+0x526>
    }
  }
  else
  {
    switch (clocksource)
 800356e:	7ffb      	ldrb	r3, [r7, #31]
 8003570:	2b08      	cmp	r3, #8
 8003572:	d857      	bhi.n	8003624 <UART_SetConfig+0x504>
 8003574:	a201      	add	r2, pc, #4	; (adr r2, 800357c <UART_SetConfig+0x45c>)
 8003576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800357a:	bf00      	nop
 800357c:	080035a1 	.word	0x080035a1
 8003580:	080035bd 	.word	0x080035bd
 8003584:	080035d9 	.word	0x080035d9
 8003588:	08003625 	.word	0x08003625
 800358c:	080035f1 	.word	0x080035f1
 8003590:	08003625 	.word	0x08003625
 8003594:	08003625 	.word	0x08003625
 8003598:	08003625 	.word	0x08003625
 800359c:	0800360d 	.word	0x0800360d
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80035a0:	f7fe f910 	bl	80017c4 <HAL_RCC_GetPCLK1Freq>
 80035a4:	4602      	mov	r2, r0
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	085b      	lsrs	r3, r3, #1
 80035ac:	441a      	add	r2, r3
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80035b6:	b29b      	uxth	r3, r3
 80035b8:	61bb      	str	r3, [r7, #24]
        break;
 80035ba:	e036      	b.n	800362a <UART_SetConfig+0x50a>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80035bc:	f7fe f916 	bl	80017ec <HAL_RCC_GetPCLK2Freq>
 80035c0:	4602      	mov	r2, r0
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	085b      	lsrs	r3, r3, #1
 80035c8:	441a      	add	r2, r3
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80035d2:	b29b      	uxth	r3, r3
 80035d4:	61bb      	str	r3, [r7, #24]
        break;
 80035d6:	e028      	b.n	800362a <UART_SetConfig+0x50a>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	085a      	lsrs	r2, r3, #1
 80035de:	4b22      	ldr	r3, [pc, #136]	; (8003668 <UART_SetConfig+0x548>)
 80035e0:	4413      	add	r3, r2
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	6852      	ldr	r2, [r2, #4]
 80035e6:	fbb3 f3f2 	udiv	r3, r3, r2
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	61bb      	str	r3, [r7, #24]
        break;
 80035ee:	e01c      	b.n	800362a <UART_SetConfig+0x50a>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80035f0:	f7fd fffa 	bl	80015e8 <HAL_RCC_GetSysClockFreq>
 80035f4:	4602      	mov	r2, r0
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	085b      	lsrs	r3, r3, #1
 80035fc:	441a      	add	r2, r3
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	fbb2 f3f3 	udiv	r3, r2, r3
 8003606:	b29b      	uxth	r3, r3
 8003608:	61bb      	str	r3, [r7, #24]
        break;
 800360a:	e00e      	b.n	800362a <UART_SetConfig+0x50a>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	085b      	lsrs	r3, r3, #1
 8003612:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	fbb2 f3f3 	udiv	r3, r2, r3
 800361e:	b29b      	uxth	r3, r3
 8003620:	61bb      	str	r3, [r7, #24]
        break;
 8003622:	e002      	b.n	800362a <UART_SetConfig+0x50a>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	75fb      	strb	r3, [r7, #23]
        break;
 8003628:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800362a:	69bb      	ldr	r3, [r7, #24]
 800362c:	2b0f      	cmp	r3, #15
 800362e:	d908      	bls.n	8003642 <UART_SetConfig+0x522>
 8003630:	69bb      	ldr	r3, [r7, #24]
 8003632:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003636:	d204      	bcs.n	8003642 <UART_SetConfig+0x522>
    {
      huart->Instance->BRR = usartdiv;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	69ba      	ldr	r2, [r7, #24]
 800363e:	60da      	str	r2, [r3, #12]
 8003640:	e001      	b.n	8003646 <UART_SetConfig+0x526>
    }
    else
    {
      ret = HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2200      	movs	r2, #0
 8003650:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003652:	7dfb      	ldrb	r3, [r7, #23]
}
 8003654:	4618      	mov	r0, r3
 8003656:	3720      	adds	r7, #32
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}
 800365c:	40007c00 	.word	0x40007c00
 8003660:	40023800 	.word	0x40023800
 8003664:	01e84800 	.word	0x01e84800
 8003668:	00f42400 	.word	0x00f42400

0800366c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800366c:	b480      	push	{r7}
 800366e:	b083      	sub	sp, #12
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003678:	f003 0301 	and.w	r3, r3, #1
 800367c:	2b00      	cmp	r3, #0
 800367e:	d00a      	beq.n	8003696 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	430a      	orrs	r2, r1
 8003694:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800369a:	f003 0302 	and.w	r3, r3, #2
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d00a      	beq.n	80036b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	430a      	orrs	r2, r1
 80036b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036bc:	f003 0304 	and.w	r3, r3, #4
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d00a      	beq.n	80036da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	430a      	orrs	r2, r1
 80036d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036de:	f003 0308 	and.w	r3, r3, #8
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d00a      	beq.n	80036fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	430a      	orrs	r2, r1
 80036fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003700:	f003 0310 	and.w	r3, r3, #16
 8003704:	2b00      	cmp	r3, #0
 8003706:	d00a      	beq.n	800371e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	430a      	orrs	r2, r1
 800371c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003722:	f003 0320 	and.w	r3, r3, #32
 8003726:	2b00      	cmp	r3, #0
 8003728:	d00a      	beq.n	8003740 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	430a      	orrs	r2, r1
 800373e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003744:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003748:	2b00      	cmp	r3, #0
 800374a:	d01a      	beq.n	8003782 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	430a      	orrs	r2, r1
 8003760:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003766:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800376a:	d10a      	bne.n	8003782 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	430a      	orrs	r2, r1
 8003780:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800378a:	2b00      	cmp	r3, #0
 800378c:	d00a      	beq.n	80037a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	430a      	orrs	r2, r1
 80037a2:	605a      	str	r2, [r3, #4]
  }
}
 80037a4:	bf00      	nop
 80037a6:	370c      	adds	r7, #12
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr

080037b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b086      	sub	sp, #24
 80037b4:	af02      	add	r7, sp, #8
 80037b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80037be:	f7fc ff45 	bl	800064c <HAL_GetTick>
 80037c2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 0308 	and.w	r3, r3, #8
 80037ce:	2b08      	cmp	r3, #8
 80037d0:	d10e      	bne.n	80037f0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037d2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80037d6:	9300      	str	r3, [sp, #0]
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2200      	movs	r2, #0
 80037dc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f000 f814 	bl	800380e <UART_WaitOnFlagUntilTimeout>
 80037e6:	4603      	mov	r3, r0
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d001      	beq.n	80037f0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037ec:	2303      	movs	r3, #3
 80037ee:	e00a      	b.n	8003806 <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2220      	movs	r2, #32
 80037f4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2220      	movs	r2, #32
 80037fa:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2200      	movs	r2, #0
 8003800:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003804:	2300      	movs	r3, #0
}
 8003806:	4618      	mov	r0, r3
 8003808:	3710      	adds	r7, #16
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}

0800380e <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800380e:	b580      	push	{r7, lr}
 8003810:	b084      	sub	sp, #16
 8003812:	af00      	add	r7, sp, #0
 8003814:	60f8      	str	r0, [r7, #12]
 8003816:	60b9      	str	r1, [r7, #8]
 8003818:	603b      	str	r3, [r7, #0]
 800381a:	4613      	mov	r3, r2
 800381c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800381e:	e02a      	b.n	8003876 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003820:	69bb      	ldr	r3, [r7, #24]
 8003822:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003826:	d026      	beq.n	8003876 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003828:	f7fc ff10 	bl	800064c <HAL_GetTick>
 800382c:	4602      	mov	r2, r0
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	1ad3      	subs	r3, r2, r3
 8003832:	69ba      	ldr	r2, [r7, #24]
 8003834:	429a      	cmp	r2, r3
 8003836:	d302      	bcc.n	800383e <UART_WaitOnFlagUntilTimeout+0x30>
 8003838:	69bb      	ldr	r3, [r7, #24]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d11b      	bne.n	8003876 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800384c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	689a      	ldr	r2, [r3, #8]
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f022 0201 	bic.w	r2, r2, #1
 800385c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2220      	movs	r2, #32
 8003862:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2220      	movs	r2, #32
 8003868:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2200      	movs	r2, #0
 800386e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003872:	2303      	movs	r3, #3
 8003874:	e00f      	b.n	8003896 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	69da      	ldr	r2, [r3, #28]
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	4013      	ands	r3, r2
 8003880:	68ba      	ldr	r2, [r7, #8]
 8003882:	429a      	cmp	r2, r3
 8003884:	bf0c      	ite	eq
 8003886:	2301      	moveq	r3, #1
 8003888:	2300      	movne	r3, #0
 800388a:	b2db      	uxtb	r3, r3
 800388c:	461a      	mov	r2, r3
 800388e:	79fb      	ldrb	r3, [r7, #7]
 8003890:	429a      	cmp	r2, r3
 8003892:	d0c5      	beq.n	8003820 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003894:	2300      	movs	r3, #0
}
 8003896:	4618      	mov	r0, r3
 8003898:	3710      	adds	r7, #16
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
	...

080038a0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80038a0:	b084      	sub	sp, #16
 80038a2:	b580      	push	{r7, lr}
 80038a4:	b084      	sub	sp, #16
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	6078      	str	r0, [r7, #4]
 80038aa:	f107 001c 	add.w	r0, r7, #28
 80038ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80038b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d120      	bne.n	80038fa <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038bc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	68da      	ldr	r2, [r3, #12]
 80038c8:	4b20      	ldr	r3, [pc, #128]	; (800394c <USB_CoreInit+0xac>)
 80038ca:	4013      	ands	r3, r2
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80038dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d105      	bne.n	80038ee <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	68db      	ldr	r3, [r3, #12]
 80038e6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f000 fa60 	bl	8003db4 <USB_CoreReset>
 80038f4:	4603      	mov	r3, r0
 80038f6:	73fb      	strb	r3, [r7, #15]
 80038f8:	e010      	b.n	800391c <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	68db      	ldr	r3, [r3, #12]
 80038fe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f000 fa54 	bl	8003db4 <USB_CoreReset>
 800390c:	4603      	mov	r3, r0
 800390e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003914:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800391c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800391e:	2b01      	cmp	r3, #1
 8003920:	d10b      	bne.n	800393a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	f043 0206 	orr.w	r2, r3, #6
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	f043 0220 	orr.w	r2, r3, #32
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800393a:	7bfb      	ldrb	r3, [r7, #15]
}
 800393c:	4618      	mov	r0, r3
 800393e:	3710      	adds	r7, #16
 8003940:	46bd      	mov	sp, r7
 8003942:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003946:	b004      	add	sp, #16
 8003948:	4770      	bx	lr
 800394a:	bf00      	nop
 800394c:	ffbdffbf 	.word	0xffbdffbf

08003950 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003950:	b480      	push	{r7}
 8003952:	b083      	sub	sp, #12
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	f023 0201 	bic.w	r2, r3, #1
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003964:	2300      	movs	r3, #0
}
 8003966:	4618      	mov	r0, r3
 8003968:	370c      	adds	r7, #12
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr

08003972 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003972:	b580      	push	{r7, lr}
 8003974:	b082      	sub	sp, #8
 8003976:	af00      	add	r7, sp, #0
 8003978:	6078      	str	r0, [r7, #4]
 800397a:	460b      	mov	r3, r1
 800397c:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800398a:	78fb      	ldrb	r3, [r7, #3]
 800398c:	2b01      	cmp	r3, #1
 800398e:	d106      	bne.n	800399e <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	68db      	ldr	r3, [r3, #12]
 8003994:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	60da      	str	r2, [r3, #12]
 800399c:	e00b      	b.n	80039b6 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800399e:	78fb      	ldrb	r3, [r7, #3]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d106      	bne.n	80039b2 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	60da      	str	r2, [r3, #12]
 80039b0:	e001      	b.n	80039b6 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e003      	b.n	80039be <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80039b6:	2032      	movs	r0, #50	; 0x32
 80039b8:	f7fc fe54 	bl	8000664 <HAL_Delay>

  return HAL_OK;
 80039bc:	2300      	movs	r3, #0
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3708      	adds	r7, #8
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
	...

080039c8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80039c8:	b084      	sub	sp, #16
 80039ca:	b580      	push	{r7, lr}
 80039cc:	b086      	sub	sp, #24
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	6078      	str	r0, [r7, #4]
 80039d2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80039d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80039da:	2300      	movs	r3, #0
 80039dc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80039e2:	2300      	movs	r3, #0
 80039e4:	613b      	str	r3, [r7, #16]
 80039e6:	e009      	b.n	80039fc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	3340      	adds	r3, #64	; 0x40
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	4413      	add	r3, r2
 80039f2:	2200      	movs	r2, #0
 80039f4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	3301      	adds	r3, #1
 80039fa:	613b      	str	r3, [r7, #16]
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	2b0e      	cmp	r3, #14
 8003a00:	d9f2      	bls.n	80039e8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003a02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d112      	bne.n	8003a2e <USB_DevInit+0x66>
  {
    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a0c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	601a      	str	r2, [r3, #0]
 8003a2c:	e005      	b.n	8003a3a <USB_DevInit+0x72>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a32:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003a40:	461a      	mov	r2, r3
 8003a42:	2300      	movs	r3, #0
 8003a44:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a4c:	4619      	mov	r1, r3
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a54:	461a      	mov	r2, r3
 8003a56:	680b      	ldr	r3, [r1, #0]
 8003a58:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	d10c      	bne.n	8003a7a <USB_DevInit+0xb2>
  {
    if (cfg.speed == USB_OTG_SPEED_HIGH)
 8003a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d104      	bne.n	8003a70 <USB_DevInit+0xa8>
    {
      /* Set High speed phy */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003a66:	2100      	movs	r1, #0
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	f000 f971 	bl	8003d50 <USB_SetDevSpeed>
 8003a6e:	e018      	b.n	8003aa2 <USB_DevInit+0xda>
    }
    else
    {
      /* set High speed phy in Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003a70:	2101      	movs	r1, #1
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f000 f96c 	bl	8003d50 <USB_SetDevSpeed>
 8003a78:	e013      	b.n	8003aa2 <USB_DevInit+0xda>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8003a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a7c:	2b03      	cmp	r3, #3
 8003a7e:	d10c      	bne.n	8003a9a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USB_OTG_SPEED_HIGH)
 8003a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d104      	bne.n	8003a90 <USB_DevInit+0xc8>
    {
      /* Set High speed phy */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003a86:	2100      	movs	r1, #0
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	f000 f961 	bl	8003d50 <USB_SetDevSpeed>
 8003a8e:	e008      	b.n	8003aa2 <USB_DevInit+0xda>
    }
    else
    {
      /* set High speed phy in Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003a90:	2101      	movs	r1, #1
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f000 f95c 	bl	8003d50 <USB_SetDevSpeed>
 8003a98:	e003      	b.n	8003aa2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Full speed phy */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003a9a:	2103      	movs	r1, #3
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f000 f957 	bl	8003d50 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003aa2:	2110      	movs	r1, #16
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f000 f90b 	bl	8003cc0 <USB_FlushTxFifo>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d001      	beq.n	8003ab4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f000 f929 	bl	8003d0c <USB_FlushRxFifo>
 8003aba:	4603      	mov	r3, r0
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d001      	beq.n	8003ac4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003aca:	461a      	mov	r2, r3
 8003acc:	2300      	movs	r3, #0
 8003ace:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	2300      	movs	r3, #0
 8003ada:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ae8:	2300      	movs	r3, #0
 8003aea:	613b      	str	r3, [r7, #16]
 8003aec:	e043      	b.n	8003b76 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	015a      	lsls	r2, r3, #5
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	4413      	add	r3, r2
 8003af6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003b00:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b04:	d118      	bne.n	8003b38 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d10a      	bne.n	8003b22 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	015a      	lsls	r2, r3, #5
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	4413      	add	r3, r2
 8003b14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b18:	461a      	mov	r2, r3
 8003b1a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003b1e:	6013      	str	r3, [r2, #0]
 8003b20:	e013      	b.n	8003b4a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	015a      	lsls	r2, r3, #5
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	4413      	add	r3, r2
 8003b2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b2e:	461a      	mov	r2, r3
 8003b30:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003b34:	6013      	str	r3, [r2, #0]
 8003b36:	e008      	b.n	8003b4a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	015a      	lsls	r2, r3, #5
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	4413      	add	r3, r2
 8003b40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b44:	461a      	mov	r2, r3
 8003b46:	2300      	movs	r3, #0
 8003b48:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	015a      	lsls	r2, r3, #5
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	4413      	add	r3, r2
 8003b52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b56:	461a      	mov	r2, r3
 8003b58:	2300      	movs	r3, #0
 8003b5a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	015a      	lsls	r2, r3, #5
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	4413      	add	r3, r2
 8003b64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b68:	461a      	mov	r2, r3
 8003b6a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003b6e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	3301      	adds	r3, #1
 8003b74:	613b      	str	r3, [r7, #16]
 8003b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b78:	693a      	ldr	r2, [r7, #16]
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d3b7      	bcc.n	8003aee <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b7e:	2300      	movs	r3, #0
 8003b80:	613b      	str	r3, [r7, #16]
 8003b82:	e043      	b.n	8003c0c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	015a      	lsls	r2, r3, #5
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	4413      	add	r3, r2
 8003b8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003b96:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b9a:	d118      	bne.n	8003bce <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d10a      	bne.n	8003bb8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	015a      	lsls	r2, r3, #5
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	4413      	add	r3, r2
 8003baa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bae:	461a      	mov	r2, r3
 8003bb0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003bb4:	6013      	str	r3, [r2, #0]
 8003bb6:	e013      	b.n	8003be0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	015a      	lsls	r2, r3, #5
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	4413      	add	r3, r2
 8003bc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bc4:	461a      	mov	r2, r3
 8003bc6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003bca:	6013      	str	r3, [r2, #0]
 8003bcc:	e008      	b.n	8003be0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	015a      	lsls	r2, r3, #5
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	4413      	add	r3, r2
 8003bd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bda:	461a      	mov	r2, r3
 8003bdc:	2300      	movs	r3, #0
 8003bde:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	015a      	lsls	r2, r3, #5
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	4413      	add	r3, r2
 8003be8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bec:	461a      	mov	r2, r3
 8003bee:	2300      	movs	r3, #0
 8003bf0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	015a      	lsls	r2, r3, #5
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	4413      	add	r3, r2
 8003bfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bfe:	461a      	mov	r2, r3
 8003c00:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003c04:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	3301      	adds	r3, #1
 8003c0a:	613b      	str	r3, [r7, #16]
 8003c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c0e:	693a      	ldr	r2, [r7, #16]
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d3b7      	bcc.n	8003b84 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c1a:	691b      	ldr	r3, [r3, #16]
 8003c1c:	68fa      	ldr	r2, [r7, #12]
 8003c1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c22:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c26:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 8003c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d110      	bne.n	8003c50 <USB_DevInit+0x288>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c34:	461a      	mov	r2, r3
 8003c36:	4b1e      	ldr	r3, [pc, #120]	; (8003cb0 <USB_DevInit+0x2e8>)
 8003c38:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c48:	4619      	mov	r1, r3
 8003c4a:	4b1a      	ldr	r3, [pc, #104]	; (8003cb4 <USB_DevInit+0x2ec>)
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	630b      	str	r3, [r1, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003c5c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d105      	bne.n	8003c70 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	699b      	ldr	r3, [r3, #24]
 8003c68:	f043 0210 	orr.w	r2, r3, #16
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	699a      	ldr	r2, [r3, #24]
 8003c74:	4b10      	ldr	r3, [pc, #64]	; (8003cb8 <USB_DevInit+0x2f0>)
 8003c76:	4313      	orrs	r3, r2
 8003c78:	687a      	ldr	r2, [r7, #4]
 8003c7a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003c7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d005      	beq.n	8003c8e <USB_DevInit+0x2c6>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	699b      	ldr	r3, [r3, #24]
 8003c86:	f043 0208 	orr.w	r2, r3, #8
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003c8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d105      	bne.n	8003ca0 <USB_DevInit+0x2d8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	699a      	ldr	r2, [r3, #24]
 8003c98:	4b08      	ldr	r3, [pc, #32]	; (8003cbc <USB_DevInit+0x2f4>)
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	687a      	ldr	r2, [r7, #4]
 8003c9e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003ca0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3718      	adds	r7, #24
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003cac:	b004      	add	sp, #16
 8003cae:	4770      	bx	lr
 8003cb0:	00800100 	.word	0x00800100
 8003cb4:	00010003 	.word	0x00010003
 8003cb8:	803c3800 	.word	0x803c3800
 8003cbc:	40000004 	.word	0x40000004

08003cc0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b085      	sub	sp, #20
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
 8003cc8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	019b      	lsls	r3, r3, #6
 8003cd2:	f043 0220 	orr.w	r2, r3, #32
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	3301      	adds	r3, #1
 8003cde:	60fb      	str	r3, [r7, #12]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	4a09      	ldr	r2, [pc, #36]	; (8003d08 <USB_FlushTxFifo+0x48>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d901      	bls.n	8003cec <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8003ce8:	2303      	movs	r3, #3
 8003cea:	e006      	b.n	8003cfa <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	691b      	ldr	r3, [r3, #16]
 8003cf0:	f003 0320 	and.w	r3, r3, #32
 8003cf4:	2b20      	cmp	r3, #32
 8003cf6:	d0f0      	beq.n	8003cda <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8003cf8:	2300      	movs	r3, #0
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3714      	adds	r7, #20
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr
 8003d06:	bf00      	nop
 8003d08:	00030d40 	.word	0x00030d40

08003d0c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b085      	sub	sp, #20
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8003d14:	2300      	movs	r3, #0
 8003d16:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2210      	movs	r2, #16
 8003d1c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	3301      	adds	r3, #1
 8003d22:	60fb      	str	r3, [r7, #12]
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	4a09      	ldr	r2, [pc, #36]	; (8003d4c <USB_FlushRxFifo+0x40>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d901      	bls.n	8003d30 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8003d2c:	2303      	movs	r3, #3
 8003d2e:	e006      	b.n	8003d3e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	691b      	ldr	r3, [r3, #16]
 8003d34:	f003 0310 	and.w	r3, r3, #16
 8003d38:	2b10      	cmp	r3, #16
 8003d3a:	d0f0      	beq.n	8003d1e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8003d3c:	2300      	movs	r3, #0
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3714      	adds	r7, #20
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr
 8003d4a:	bf00      	nop
 8003d4c:	00030d40 	.word	0x00030d40

08003d50 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b085      	sub	sp, #20
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
 8003d58:	460b      	mov	r3, r1
 8003d5a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	78fb      	ldrb	r3, [r7, #3]
 8003d6a:	68f9      	ldr	r1, [r7, #12]
 8003d6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d70:	4313      	orrs	r3, r2
 8003d72:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003d74:	2300      	movs	r3, #0
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3714      	adds	r7, #20
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr

08003d82 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003d82:	b580      	push	{r7, lr}
 8003d84:	b084      	sub	sp, #16
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	68fa      	ldr	r2, [r7, #12]
 8003d98:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d9c:	f043 0302 	orr.w	r3, r3, #2
 8003da0:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8003da2:	2003      	movs	r0, #3
 8003da4:	f7fc fc5e 	bl	8000664 <HAL_Delay>

  return HAL_OK;
 8003da8:	2300      	movs	r3, #0
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3710      	adds	r7, #16
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}
	...

08003db4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b085      	sub	sp, #20
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	3301      	adds	r3, #1
 8003dc4:	60fb      	str	r3, [r7, #12]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	4a13      	ldr	r2, [pc, #76]	; (8003e18 <USB_CoreReset+0x64>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d901      	bls.n	8003dd2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003dce:	2303      	movs	r3, #3
 8003dd0:	e01b      	b.n	8003e0a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	691b      	ldr	r3, [r3, #16]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	daf2      	bge.n	8003dc0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	691b      	ldr	r3, [r3, #16]
 8003de2:	f043 0201 	orr.w	r2, r3, #1
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	3301      	adds	r3, #1
 8003dee:	60fb      	str	r3, [r7, #12]
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	4a09      	ldr	r2, [pc, #36]	; (8003e18 <USB_CoreReset+0x64>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d901      	bls.n	8003dfc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003df8:	2303      	movs	r3, #3
 8003dfa:	e006      	b.n	8003e0a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	691b      	ldr	r3, [r3, #16]
 8003e00:	f003 0301 	and.w	r3, r3, #1
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d0f0      	beq.n	8003dea <USB_CoreReset+0x36>

  return HAL_OK;
 8003e08:	2300      	movs	r3, #0
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3714      	adds	r7, #20
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr
 8003e16:	bf00      	nop
 8003e18:	00030d40 	.word	0x00030d40

08003e1c <__io_putchar>:
 * @brief Retargets the C library printf function to the USART.
 * @param None
 * @retval None
 */
PUTCHAR_PROTOTYPE
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b082      	sub	sp, #8
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 /* Place your implementation of fputc here */
 /* e.g. write a character to the USART2 and Loop until the end of transmission */
 HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8003e24:	1d39      	adds	r1, r7, #4
 8003e26:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	4803      	ldr	r0, [pc, #12]	; (8003e3c <__io_putchar+0x20>)
 8003e2e:	f7ff f8e6 	bl	8002ffe <HAL_UART_Transmit>

return ch;
 8003e32:	687b      	ldr	r3, [r7, #4]
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	3708      	adds	r7, #8
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}
 8003e3c:	20000118 	.word	0x20000118

08003e40 <HAL_SPI_RxCpltCallback>:
//===========================================================================

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b082      	sub	sp, #8
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hspi);
  HAL_SPI_Receive_IT(&hspi3, data_recive, 1);
 8003e48:	2201      	movs	r2, #1
 8003e4a:	4904      	ldr	r1, [pc, #16]	; (8003e5c <HAL_SPI_RxCpltCallback+0x1c>)
 8003e4c:	4804      	ldr	r0, [pc, #16]	; (8003e60 <HAL_SPI_RxCpltCallback+0x20>)
 8003e4e:	f7fe fac7 	bl	80023e0 <HAL_SPI_Receive_IT>
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8003e52:	bf00      	nop
 8003e54:	3708      	adds	r7, #8
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	20000098 	.word	0x20000098
 8003e60:	2000059c 	.word	0x2000059c

08003e64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003e68:	f7fc fb9e 	bl	80005a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003e6c:	f000 f84a 	bl	8003f04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003e70:	f000 fa26 	bl	80042c0 <MX_GPIO_Init>
//  MX_ETH_Init();
  MX_SPI1_Init();
 8003e74:	f000 f8d6 	bl	8004024 <MX_SPI1_Init>
  MX_SPI2_Init();
 8003e78:	f000 f912 	bl	80040a0 <MX_SPI2_Init>
  MX_USART3_UART_Init();
 8003e7c:	f000 f9c2 	bl	8004204 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8003e80:	f000 f9f0 	bl	8004264 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI3_Init();
 8003e84:	f000 f946 	bl	8004114 <MX_SPI3_Init>
  MX_SPI4_Init();
 8003e88:	f000 f97e 	bl	8004188 <MX_SPI4_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
   HAL_SPI_Receive_IT(&hspi3, data_recive, 1);
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	4917      	ldr	r1, [pc, #92]	; (8003eec <main+0x88>)
 8003e90:	4817      	ldr	r0, [pc, #92]	; (8003ef0 <main+0x8c>)
 8003e92:	f7fe faa5 	bl	80023e0 <HAL_SPI_Receive_IT>

  while (1)
  {
  	  ++(data_send[0]);
 8003e96:	4b17      	ldr	r3, [pc, #92]	; (8003ef4 <main+0x90>)
 8003e98:	781b      	ldrb	r3, [r3, #0]
 8003e9a:	3301      	adds	r3, #1
 8003e9c:	b2da      	uxtb	r2, r3
 8003e9e:	4b15      	ldr	r3, [pc, #84]	; (8003ef4 <main+0x90>)
 8003ea0:	701a      	strb	r2, [r3, #0]
	  data_send[0] %= 255;
 8003ea2:	4b14      	ldr	r3, [pc, #80]	; (8003ef4 <main+0x90>)
 8003ea4:	781a      	ldrb	r2, [r3, #0]
 8003ea6:	4b14      	ldr	r3, [pc, #80]	; (8003ef8 <main+0x94>)
 8003ea8:	fba3 1302 	umull	r1, r3, r3, r2
 8003eac:	09d9      	lsrs	r1, r3, #7
 8003eae:	460b      	mov	r3, r1
 8003eb0:	021b      	lsls	r3, r3, #8
 8003eb2:	1a5b      	subs	r3, r3, r1
 8003eb4:	1ad3      	subs	r3, r2, r3
 8003eb6:	b2da      	uxtb	r2, r3
 8003eb8:	4b0e      	ldr	r3, [pc, #56]	; (8003ef4 <main+0x90>)
 8003eba:	701a      	strb	r2, [r3, #0]
	  HAL_SPI_Transmit(&hspi4, data_send, 1, 0xffff);
 8003ebc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	490c      	ldr	r1, [pc, #48]	; (8003ef4 <main+0x90>)
 8003ec4:	480d      	ldr	r0, [pc, #52]	; (8003efc <main+0x98>)
 8003ec6:	f7fe f925 	bl	8002114 <HAL_SPI_Transmit>
	  HAL_Delay(100);
 8003eca:	2064      	movs	r0, #100	; 0x64
 8003ecc:	f7fc fbca 	bl	8000664 <HAL_Delay>
	  printf("send %d receive spi2 %d\n\r",data_send[0],data_recive[0]);
 8003ed0:	4b08      	ldr	r3, [pc, #32]	; (8003ef4 <main+0x90>)
 8003ed2:	781b      	ldrb	r3, [r3, #0]
 8003ed4:	4619      	mov	r1, r3
 8003ed6:	4b05      	ldr	r3, [pc, #20]	; (8003eec <main+0x88>)
 8003ed8:	781b      	ldrb	r3, [r3, #0]
 8003eda:	461a      	mov	r2, r3
 8003edc:	4808      	ldr	r0, [pc, #32]	; (8003f00 <main+0x9c>)
 8003ede:	f000 fe29 	bl	8004b34 <iprintf>
	  HAL_Delay(1000);
 8003ee2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003ee6:	f7fc fbbd 	bl	8000664 <HAL_Delay>
  	  ++(data_send[0]);
 8003eea:	e7d4      	b.n	8003e96 <main+0x32>
 8003eec:	20000098 	.word	0x20000098
 8003ef0:	2000059c 	.word	0x2000059c
 8003ef4:	20000008 	.word	0x20000008
 8003ef8:	80808081 	.word	0x80808081
 8003efc:	20000600 	.word	0x20000600
 8003f00:	080059f8 	.word	0x080059f8

08003f04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b0b4      	sub	sp, #208	; 0xd0
 8003f08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003f0a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003f0e:	2230      	movs	r2, #48	; 0x30
 8003f10:	2100      	movs	r1, #0
 8003f12:	4618      	mov	r0, r3
 8003f14:	f000 fe06 	bl	8004b24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003f18:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	601a      	str	r2, [r3, #0]
 8003f20:	605a      	str	r2, [r3, #4]
 8003f22:	609a      	str	r2, [r3, #8]
 8003f24:	60da      	str	r2, [r3, #12]
 8003f26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003f28:	f107 0308 	add.w	r3, r7, #8
 8003f2c:	2284      	movs	r2, #132	; 0x84
 8003f2e:	2100      	movs	r1, #0
 8003f30:	4618      	mov	r0, r3
 8003f32:	f000 fdf7 	bl	8004b24 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8003f36:	f7fc ffef 	bl	8000f18 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003f3a:	4b37      	ldr	r3, [pc, #220]	; (8004018 <SystemClock_Config+0x114>)
 8003f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3e:	4a36      	ldr	r2, [pc, #216]	; (8004018 <SystemClock_Config+0x114>)
 8003f40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f44:	6413      	str	r3, [r2, #64]	; 0x40
 8003f46:	4b34      	ldr	r3, [pc, #208]	; (8004018 <SystemClock_Config+0x114>)
 8003f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f4e:	607b      	str	r3, [r7, #4]
 8003f50:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8003f52:	4b32      	ldr	r3, [pc, #200]	; (800401c <SystemClock_Config+0x118>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003f5a:	4a30      	ldr	r2, [pc, #192]	; (800401c <SystemClock_Config+0x118>)
 8003f5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f60:	6013      	str	r3, [r2, #0]
 8003f62:	4b2e      	ldr	r3, [pc, #184]	; (800401c <SystemClock_Config+0x118>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003f6a:	603b      	str	r3, [r7, #0]
 8003f6c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8003f74:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8003f78:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003f7c:	2302      	movs	r3, #2
 8003f7e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003f82:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003f86:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003f8a:	2304      	movs	r3, #4
 8003f8c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 72;
 8003f90:	2348      	movs	r3, #72	; 0x48
 8003f92:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003f96:	2302      	movs	r3, #2
 8003f98:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8003f9c:	2303      	movs	r3, #3
 8003f9e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003fa2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f7fc ffc6 	bl	8000f38 <HAL_RCC_OscConfig>
 8003fac:	4603      	mov	r3, r0
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d001      	beq.n	8003fb6 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8003fb2:	f000 fa33 	bl	800441c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003fb6:	230f      	movs	r3, #15
 8003fb8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003fbc:	2302      	movs	r3, #2
 8003fbe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003fc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003fcc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003fd6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003fda:	2102      	movs	r1, #2
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f7fd fa1b 	bl	8001418 <HAL_RCC_ClockConfig>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d001      	beq.n	8003fec <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8003fe8:	f000 fa18 	bl	800441c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 8003fec:	4b0c      	ldr	r3, [pc, #48]	; (8004020 <SystemClock_Config+0x11c>)
 8003fee:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003ffa:	f107 0308 	add.w	r3, r7, #8
 8003ffe:	4618      	mov	r0, r3
 8004000:	f7fd fc08 	bl	8001814 <HAL_RCCEx_PeriphCLKConfig>
 8004004:	4603      	mov	r3, r0
 8004006:	2b00      	cmp	r3, #0
 8004008:	d001      	beq.n	800400e <SystemClock_Config+0x10a>
  {
    Error_Handler();
 800400a:	f000 fa07 	bl	800441c <Error_Handler>
  }
}
 800400e:	bf00      	nop
 8004010:	37d0      	adds	r7, #208	; 0xd0
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}
 8004016:	bf00      	nop
 8004018:	40023800 	.word	0x40023800
 800401c:	40007000 	.word	0x40007000
 8004020:	00200100 	.word	0x00200100

08004024 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004028:	4b1b      	ldr	r3, [pc, #108]	; (8004098 <MX_SPI1_Init+0x74>)
 800402a:	4a1c      	ldr	r2, [pc, #112]	; (800409c <MX_SPI1_Init+0x78>)
 800402c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800402e:	4b1a      	ldr	r3, [pc, #104]	; (8004098 <MX_SPI1_Init+0x74>)
 8004030:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004034:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004036:	4b18      	ldr	r3, [pc, #96]	; (8004098 <MX_SPI1_Init+0x74>)
 8004038:	2200      	movs	r2, #0
 800403a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 800403c:	4b16      	ldr	r3, [pc, #88]	; (8004098 <MX_SPI1_Init+0x74>)
 800403e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8004042:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004044:	4b14      	ldr	r3, [pc, #80]	; (8004098 <MX_SPI1_Init+0x74>)
 8004046:	2200      	movs	r2, #0
 8004048:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800404a:	4b13      	ldr	r3, [pc, #76]	; (8004098 <MX_SPI1_Init+0x74>)
 800404c:	2200      	movs	r2, #0
 800404e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004050:	4b11      	ldr	r3, [pc, #68]	; (8004098 <MX_SPI1_Init+0x74>)
 8004052:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004056:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004058:	4b0f      	ldr	r3, [pc, #60]	; (8004098 <MX_SPI1_Init+0x74>)
 800405a:	2200      	movs	r2, #0
 800405c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800405e:	4b0e      	ldr	r3, [pc, #56]	; (8004098 <MX_SPI1_Init+0x74>)
 8004060:	2200      	movs	r2, #0
 8004062:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004064:	4b0c      	ldr	r3, [pc, #48]	; (8004098 <MX_SPI1_Init+0x74>)
 8004066:	2200      	movs	r2, #0
 8004068:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800406a:	4b0b      	ldr	r3, [pc, #44]	; (8004098 <MX_SPI1_Init+0x74>)
 800406c:	2200      	movs	r2, #0
 800406e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8004070:	4b09      	ldr	r3, [pc, #36]	; (8004098 <MX_SPI1_Init+0x74>)
 8004072:	2207      	movs	r2, #7
 8004074:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004076:	4b08      	ldr	r3, [pc, #32]	; (8004098 <MX_SPI1_Init+0x74>)
 8004078:	2200      	movs	r2, #0
 800407a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800407c:	4b06      	ldr	r3, [pc, #24]	; (8004098 <MX_SPI1_Init+0x74>)
 800407e:	2208      	movs	r2, #8
 8004080:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004082:	4805      	ldr	r0, [pc, #20]	; (8004098 <MX_SPI1_Init+0x74>)
 8004084:	f7fd ffb4 	bl	8001ff0 <HAL_SPI_Init>
 8004088:	4603      	mov	r3, r0
 800408a:	2b00      	cmp	r3, #0
 800408c:	d001      	beq.n	8004092 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800408e:	f000 f9c5 	bl	800441c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004092:	bf00      	nop
 8004094:	bd80      	pop	{r7, pc}
 8004096:	bf00      	nop
 8004098:	20000664 	.word	0x20000664
 800409c:	40013000 	.word	0x40013000

080040a0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80040a4:	4b19      	ldr	r3, [pc, #100]	; (800410c <MX_SPI2_Init+0x6c>)
 80040a6:	4a1a      	ldr	r2, [pc, #104]	; (8004110 <MX_SPI2_Init+0x70>)
 80040a8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 80040aa:	4b18      	ldr	r3, [pc, #96]	; (800410c <MX_SPI2_Init+0x6c>)
 80040ac:	2200      	movs	r2, #0
 80040ae:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80040b0:	4b16      	ldr	r3, [pc, #88]	; (800410c <MX_SPI2_Init+0x6c>)
 80040b2:	2200      	movs	r2, #0
 80040b4:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80040b6:	4b15      	ldr	r3, [pc, #84]	; (800410c <MX_SPI2_Init+0x6c>)
 80040b8:	f44f 7240 	mov.w	r2, #768	; 0x300
 80040bc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80040be:	4b13      	ldr	r3, [pc, #76]	; (800410c <MX_SPI2_Init+0x6c>)
 80040c0:	2200      	movs	r2, #0
 80040c2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80040c4:	4b11      	ldr	r3, [pc, #68]	; (800410c <MX_SPI2_Init+0x6c>)
 80040c6:	2200      	movs	r2, #0
 80040c8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80040ca:	4b10      	ldr	r3, [pc, #64]	; (800410c <MX_SPI2_Init+0x6c>)
 80040cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040d0:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80040d2:	4b0e      	ldr	r3, [pc, #56]	; (800410c <MX_SPI2_Init+0x6c>)
 80040d4:	2200      	movs	r2, #0
 80040d6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80040d8:	4b0c      	ldr	r3, [pc, #48]	; (800410c <MX_SPI2_Init+0x6c>)
 80040da:	2200      	movs	r2, #0
 80040dc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80040de:	4b0b      	ldr	r3, [pc, #44]	; (800410c <MX_SPI2_Init+0x6c>)
 80040e0:	2200      	movs	r2, #0
 80040e2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80040e4:	4b09      	ldr	r3, [pc, #36]	; (800410c <MX_SPI2_Init+0x6c>)
 80040e6:	2207      	movs	r2, #7
 80040e8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80040ea:	4b08      	ldr	r3, [pc, #32]	; (800410c <MX_SPI2_Init+0x6c>)
 80040ec:	2200      	movs	r2, #0
 80040ee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80040f0:	4b06      	ldr	r3, [pc, #24]	; (800410c <MX_SPI2_Init+0x6c>)
 80040f2:	2200      	movs	r2, #0
 80040f4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80040f6:	4805      	ldr	r0, [pc, #20]	; (800410c <MX_SPI2_Init+0x6c>)
 80040f8:	f7fd ff7a 	bl	8001ff0 <HAL_SPI_Init>
 80040fc:	4603      	mov	r3, r0
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d001      	beq.n	8004106 <MX_SPI2_Init+0x66>
  {
    Error_Handler();
 8004102:	f000 f98b 	bl	800441c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8004106:	bf00      	nop
 8004108:	bd80      	pop	{r7, pc}
 800410a:	bf00      	nop
 800410c:	200000b4 	.word	0x200000b4
 8004110:	40003800 	.word	0x40003800

08004114 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8004118:	4b19      	ldr	r3, [pc, #100]	; (8004180 <MX_SPI3_Init+0x6c>)
 800411a:	4a1a      	ldr	r2, [pc, #104]	; (8004184 <MX_SPI3_Init+0x70>)
 800411c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_SLAVE;
 800411e:	4b18      	ldr	r3, [pc, #96]	; (8004180 <MX_SPI3_Init+0x6c>)
 8004120:	2200      	movs	r2, #0
 8004122:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8004124:	4b16      	ldr	r3, [pc, #88]	; (8004180 <MX_SPI3_Init+0x6c>)
 8004126:	2200      	movs	r2, #0
 8004128:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 800412a:	4b15      	ldr	r3, [pc, #84]	; (8004180 <MX_SPI3_Init+0x6c>)
 800412c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8004130:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004132:	4b13      	ldr	r3, [pc, #76]	; (8004180 <MX_SPI3_Init+0x6c>)
 8004134:	2200      	movs	r2, #0
 8004136:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004138:	4b11      	ldr	r3, [pc, #68]	; (8004180 <MX_SPI3_Init+0x6c>)
 800413a:	2200      	movs	r2, #0
 800413c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800413e:	4b10      	ldr	r3, [pc, #64]	; (8004180 <MX_SPI3_Init+0x6c>)
 8004140:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004144:	619a      	str	r2, [r3, #24]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004146:	4b0e      	ldr	r3, [pc, #56]	; (8004180 <MX_SPI3_Init+0x6c>)
 8004148:	2200      	movs	r2, #0
 800414a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800414c:	4b0c      	ldr	r3, [pc, #48]	; (8004180 <MX_SPI3_Init+0x6c>)
 800414e:	2200      	movs	r2, #0
 8004150:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004152:	4b0b      	ldr	r3, [pc, #44]	; (8004180 <MX_SPI3_Init+0x6c>)
 8004154:	2200      	movs	r2, #0
 8004156:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8004158:	4b09      	ldr	r3, [pc, #36]	; (8004180 <MX_SPI3_Init+0x6c>)
 800415a:	2207      	movs	r2, #7
 800415c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800415e:	4b08      	ldr	r3, [pc, #32]	; (8004180 <MX_SPI3_Init+0x6c>)
 8004160:	2200      	movs	r2, #0
 8004162:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8004164:	4b06      	ldr	r3, [pc, #24]	; (8004180 <MX_SPI3_Init+0x6c>)
 8004166:	2200      	movs	r2, #0
 8004168:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800416a:	4805      	ldr	r0, [pc, #20]	; (8004180 <MX_SPI3_Init+0x6c>)
 800416c:	f7fd ff40 	bl	8001ff0 <HAL_SPI_Init>
 8004170:	4603      	mov	r3, r0
 8004172:	2b00      	cmp	r3, #0
 8004174:	d001      	beq.n	800417a <MX_SPI3_Init+0x66>
  {
    Error_Handler();
 8004176:	f000 f951 	bl	800441c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800417a:	bf00      	nop
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop
 8004180:	2000059c 	.word	0x2000059c
 8004184:	40003c00 	.word	0x40003c00

08004188 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 800418c:	4b1b      	ldr	r3, [pc, #108]	; (80041fc <MX_SPI4_Init+0x74>)
 800418e:	4a1c      	ldr	r2, [pc, #112]	; (8004200 <MX_SPI4_Init+0x78>)
 8004190:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8004192:	4b1a      	ldr	r3, [pc, #104]	; (80041fc <MX_SPI4_Init+0x74>)
 8004194:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004198:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800419a:	4b18      	ldr	r3, [pc, #96]	; (80041fc <MX_SPI4_Init+0x74>)
 800419c:	2200      	movs	r2, #0
 800419e:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 80041a0:	4b16      	ldr	r3, [pc, #88]	; (80041fc <MX_SPI4_Init+0x74>)
 80041a2:	f44f 7240 	mov.w	r2, #768	; 0x300
 80041a6:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80041a8:	4b14      	ldr	r3, [pc, #80]	; (80041fc <MX_SPI4_Init+0x74>)
 80041aa:	2200      	movs	r2, #0
 80041ac:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80041ae:	4b13      	ldr	r3, [pc, #76]	; (80041fc <MX_SPI4_Init+0x74>)
 80041b0:	2200      	movs	r2, #0
 80041b2:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80041b4:	4b11      	ldr	r3, [pc, #68]	; (80041fc <MX_SPI4_Init+0x74>)
 80041b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041ba:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80041bc:	4b0f      	ldr	r3, [pc, #60]	; (80041fc <MX_SPI4_Init+0x74>)
 80041be:	2200      	movs	r2, #0
 80041c0:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80041c2:	4b0e      	ldr	r3, [pc, #56]	; (80041fc <MX_SPI4_Init+0x74>)
 80041c4:	2200      	movs	r2, #0
 80041c6:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80041c8:	4b0c      	ldr	r3, [pc, #48]	; (80041fc <MX_SPI4_Init+0x74>)
 80041ca:	2200      	movs	r2, #0
 80041cc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80041ce:	4b0b      	ldr	r3, [pc, #44]	; (80041fc <MX_SPI4_Init+0x74>)
 80041d0:	2200      	movs	r2, #0
 80041d2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 80041d4:	4b09      	ldr	r3, [pc, #36]	; (80041fc <MX_SPI4_Init+0x74>)
 80041d6:	2207      	movs	r2, #7
 80041d8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80041da:	4b08      	ldr	r3, [pc, #32]	; (80041fc <MX_SPI4_Init+0x74>)
 80041dc:	2200      	movs	r2, #0
 80041de:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80041e0:	4b06      	ldr	r3, [pc, #24]	; (80041fc <MX_SPI4_Init+0x74>)
 80041e2:	2208      	movs	r2, #8
 80041e4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80041e6:	4805      	ldr	r0, [pc, #20]	; (80041fc <MX_SPI4_Init+0x74>)
 80041e8:	f7fd ff02 	bl	8001ff0 <HAL_SPI_Init>
 80041ec:	4603      	mov	r3, r0
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d001      	beq.n	80041f6 <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 80041f2:	f000 f913 	bl	800441c <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80041f6:	bf00      	nop
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	bf00      	nop
 80041fc:	20000600 	.word	0x20000600
 8004200:	40013400 	.word	0x40013400

08004204 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004208:	4b14      	ldr	r3, [pc, #80]	; (800425c <MX_USART3_UART_Init+0x58>)
 800420a:	4a15      	ldr	r2, [pc, #84]	; (8004260 <MX_USART3_UART_Init+0x5c>)
 800420c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800420e:	4b13      	ldr	r3, [pc, #76]	; (800425c <MX_USART3_UART_Init+0x58>)
 8004210:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004214:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004216:	4b11      	ldr	r3, [pc, #68]	; (800425c <MX_USART3_UART_Init+0x58>)
 8004218:	2200      	movs	r2, #0
 800421a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800421c:	4b0f      	ldr	r3, [pc, #60]	; (800425c <MX_USART3_UART_Init+0x58>)
 800421e:	2200      	movs	r2, #0
 8004220:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004222:	4b0e      	ldr	r3, [pc, #56]	; (800425c <MX_USART3_UART_Init+0x58>)
 8004224:	2200      	movs	r2, #0
 8004226:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004228:	4b0c      	ldr	r3, [pc, #48]	; (800425c <MX_USART3_UART_Init+0x58>)
 800422a:	220c      	movs	r2, #12
 800422c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800422e:	4b0b      	ldr	r3, [pc, #44]	; (800425c <MX_USART3_UART_Init+0x58>)
 8004230:	2200      	movs	r2, #0
 8004232:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004234:	4b09      	ldr	r3, [pc, #36]	; (800425c <MX_USART3_UART_Init+0x58>)
 8004236:	2200      	movs	r2, #0
 8004238:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800423a:	4b08      	ldr	r3, [pc, #32]	; (800425c <MX_USART3_UART_Init+0x58>)
 800423c:	2200      	movs	r2, #0
 800423e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004240:	4b06      	ldr	r3, [pc, #24]	; (800425c <MX_USART3_UART_Init+0x58>)
 8004242:	2200      	movs	r2, #0
 8004244:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004246:	4805      	ldr	r0, [pc, #20]	; (800425c <MX_USART3_UART_Init+0x58>)
 8004248:	f7fe fe8b 	bl	8002f62 <HAL_UART_Init>
 800424c:	4603      	mov	r3, r0
 800424e:	2b00      	cmp	r3, #0
 8004250:	d001      	beq.n	8004256 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8004252:	f000 f8e3 	bl	800441c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004256:	bf00      	nop
 8004258:	bd80      	pop	{r7, pc}
 800425a:	bf00      	nop
 800425c:	20000118 	.word	0x20000118
 8004260:	40004800 	.word	0x40004800

08004264 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8004268:	4b14      	ldr	r3, [pc, #80]	; (80042bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800426a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800426e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8004270:	4b12      	ldr	r3, [pc, #72]	; (80042bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8004272:	2206      	movs	r2, #6
 8004274:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8004276:	4b11      	ldr	r3, [pc, #68]	; (80042bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8004278:	2202      	movs	r2, #2
 800427a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800427c:	4b0f      	ldr	r3, [pc, #60]	; (80042bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800427e:	2200      	movs	r2, #0
 8004280:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8004282:	4b0e      	ldr	r3, [pc, #56]	; (80042bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8004284:	2202      	movs	r2, #2
 8004286:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8004288:	4b0c      	ldr	r3, [pc, #48]	; (80042bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800428a:	2201      	movs	r2, #1
 800428c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800428e:	4b0b      	ldr	r3, [pc, #44]	; (80042bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8004290:	2200      	movs	r2, #0
 8004292:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8004294:	4b09      	ldr	r3, [pc, #36]	; (80042bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8004296:	2200      	movs	r2, #0
 8004298:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800429a:	4b08      	ldr	r3, [pc, #32]	; (80042bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800429c:	2201      	movs	r2, #1
 800429e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80042a0:	4b06      	ldr	r3, [pc, #24]	; (80042bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80042a2:	2200      	movs	r2, #0
 80042a4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80042a6:	4805      	ldr	r0, [pc, #20]	; (80042bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80042a8:	f7fc fcf9 	bl	8000c9e <HAL_PCD_Init>
 80042ac:	4603      	mov	r3, r0
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d001      	beq.n	80042b6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80042b2:	f000 f8b3 	bl	800441c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80042b6:	bf00      	nop
 80042b8:	bd80      	pop	{r7, pc}
 80042ba:	bf00      	nop
 80042bc:	20000198 	.word	0x20000198

080042c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b08c      	sub	sp, #48	; 0x30
 80042c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042c6:	f107 031c 	add.w	r3, r7, #28
 80042ca:	2200      	movs	r2, #0
 80042cc:	601a      	str	r2, [r3, #0]
 80042ce:	605a      	str	r2, [r3, #4]
 80042d0:	609a      	str	r2, [r3, #8]
 80042d2:	60da      	str	r2, [r3, #12]
 80042d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80042d6:	4b4c      	ldr	r3, [pc, #304]	; (8004408 <MX_GPIO_Init+0x148>)
 80042d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042da:	4a4b      	ldr	r2, [pc, #300]	; (8004408 <MX_GPIO_Init+0x148>)
 80042dc:	f043 0310 	orr.w	r3, r3, #16
 80042e0:	6313      	str	r3, [r2, #48]	; 0x30
 80042e2:	4b49      	ldr	r3, [pc, #292]	; (8004408 <MX_GPIO_Init+0x148>)
 80042e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e6:	f003 0310 	and.w	r3, r3, #16
 80042ea:	61bb      	str	r3, [r7, #24]
 80042ec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80042ee:	4b46      	ldr	r3, [pc, #280]	; (8004408 <MX_GPIO_Init+0x148>)
 80042f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f2:	4a45      	ldr	r2, [pc, #276]	; (8004408 <MX_GPIO_Init+0x148>)
 80042f4:	f043 0304 	orr.w	r3, r3, #4
 80042f8:	6313      	str	r3, [r2, #48]	; 0x30
 80042fa:	4b43      	ldr	r3, [pc, #268]	; (8004408 <MX_GPIO_Init+0x148>)
 80042fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042fe:	f003 0304 	and.w	r3, r3, #4
 8004302:	617b      	str	r3, [r7, #20]
 8004304:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004306:	4b40      	ldr	r3, [pc, #256]	; (8004408 <MX_GPIO_Init+0x148>)
 8004308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800430a:	4a3f      	ldr	r2, [pc, #252]	; (8004408 <MX_GPIO_Init+0x148>)
 800430c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004310:	6313      	str	r3, [r2, #48]	; 0x30
 8004312:	4b3d      	ldr	r3, [pc, #244]	; (8004408 <MX_GPIO_Init+0x148>)
 8004314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004316:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800431a:	613b      	str	r3, [r7, #16]
 800431c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800431e:	4b3a      	ldr	r3, [pc, #232]	; (8004408 <MX_GPIO_Init+0x148>)
 8004320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004322:	4a39      	ldr	r2, [pc, #228]	; (8004408 <MX_GPIO_Init+0x148>)
 8004324:	f043 0301 	orr.w	r3, r3, #1
 8004328:	6313      	str	r3, [r2, #48]	; 0x30
 800432a:	4b37      	ldr	r3, [pc, #220]	; (8004408 <MX_GPIO_Init+0x148>)
 800432c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800432e:	f003 0301 	and.w	r3, r3, #1
 8004332:	60fb      	str	r3, [r7, #12]
 8004334:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004336:	4b34      	ldr	r3, [pc, #208]	; (8004408 <MX_GPIO_Init+0x148>)
 8004338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800433a:	4a33      	ldr	r2, [pc, #204]	; (8004408 <MX_GPIO_Init+0x148>)
 800433c:	f043 0302 	orr.w	r3, r3, #2
 8004340:	6313      	str	r3, [r2, #48]	; 0x30
 8004342:	4b31      	ldr	r3, [pc, #196]	; (8004408 <MX_GPIO_Init+0x148>)
 8004344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004346:	f003 0302 	and.w	r3, r3, #2
 800434a:	60bb      	str	r3, [r7, #8]
 800434c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800434e:	4b2e      	ldr	r3, [pc, #184]	; (8004408 <MX_GPIO_Init+0x148>)
 8004350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004352:	4a2d      	ldr	r2, [pc, #180]	; (8004408 <MX_GPIO_Init+0x148>)
 8004354:	f043 0308 	orr.w	r3, r3, #8
 8004358:	6313      	str	r3, [r2, #48]	; 0x30
 800435a:	4b2b      	ldr	r3, [pc, #172]	; (8004408 <MX_GPIO_Init+0x148>)
 800435c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800435e:	f003 0308 	and.w	r3, r3, #8
 8004362:	607b      	str	r3, [r7, #4]
 8004364:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004366:	4b28      	ldr	r3, [pc, #160]	; (8004408 <MX_GPIO_Init+0x148>)
 8004368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800436a:	4a27      	ldr	r2, [pc, #156]	; (8004408 <MX_GPIO_Init+0x148>)
 800436c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004370:	6313      	str	r3, [r2, #48]	; 0x30
 8004372:	4b25      	ldr	r3, [pc, #148]	; (8004408 <MX_GPIO_Init+0x148>)
 8004374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004376:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800437a:	603b      	str	r3, [r7, #0]
 800437c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800437e:	2200      	movs	r2, #0
 8004380:	f244 0181 	movw	r1, #16513	; 0x4081
 8004384:	4821      	ldr	r0, [pc, #132]	; (800440c <MX_GPIO_Init+0x14c>)
 8004386:	f7fc fc71 	bl	8000c6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800438a:	2200      	movs	r2, #0
 800438c:	2140      	movs	r1, #64	; 0x40
 800438e:	4820      	ldr	r0, [pc, #128]	; (8004410 <MX_GPIO_Init+0x150>)
 8004390:	f7fc fc6c 	bl	8000c6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8004394:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004398:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800439a:	4b1e      	ldr	r3, [pc, #120]	; (8004414 <MX_GPIO_Init+0x154>)
 800439c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800439e:	2300      	movs	r3, #0
 80043a0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80043a2:	f107 031c 	add.w	r3, r7, #28
 80043a6:	4619      	mov	r1, r3
 80043a8:	481b      	ldr	r0, [pc, #108]	; (8004418 <MX_GPIO_Init+0x158>)
 80043aa:	f7fc fab3 	bl	8000914 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80043ae:	f244 0381 	movw	r3, #16513	; 0x4081
 80043b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80043b4:	2301      	movs	r3, #1
 80043b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043b8:	2300      	movs	r3, #0
 80043ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043bc:	2300      	movs	r3, #0
 80043be:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043c0:	f107 031c 	add.w	r3, r7, #28
 80043c4:	4619      	mov	r1, r3
 80043c6:	4811      	ldr	r0, [pc, #68]	; (800440c <MX_GPIO_Init+0x14c>)
 80043c8:	f7fc faa4 	bl	8000914 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80043cc:	2340      	movs	r3, #64	; 0x40
 80043ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80043d0:	2301      	movs	r3, #1
 80043d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043d4:	2300      	movs	r3, #0
 80043d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043d8:	2300      	movs	r3, #0
 80043da:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80043dc:	f107 031c 	add.w	r3, r7, #28
 80043e0:	4619      	mov	r1, r3
 80043e2:	480b      	ldr	r0, [pc, #44]	; (8004410 <MX_GPIO_Init+0x150>)
 80043e4:	f7fc fa96 	bl	8000914 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80043e8:	2380      	movs	r3, #128	; 0x80
 80043ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80043ec:	2300      	movs	r3, #0
 80043ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043f0:	2300      	movs	r3, #0
 80043f2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80043f4:	f107 031c 	add.w	r3, r7, #28
 80043f8:	4619      	mov	r1, r3
 80043fa:	4805      	ldr	r0, [pc, #20]	; (8004410 <MX_GPIO_Init+0x150>)
 80043fc:	f7fc fa8a 	bl	8000914 <HAL_GPIO_Init>

}
 8004400:	bf00      	nop
 8004402:	3730      	adds	r7, #48	; 0x30
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}
 8004408:	40023800 	.word	0x40023800
 800440c:	40020400 	.word	0x40020400
 8004410:	40021800 	.word	0x40021800
 8004414:	10110000 	.word	0x10110000
 8004418:	40020800 	.word	0x40020800

0800441c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800441c:	b480      	push	{r7}
 800441e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004420:	bf00      	nop
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr
	...

0800442c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800442c:	b480      	push	{r7}
 800442e:	b083      	sub	sp, #12
 8004430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8004432:	4b0f      	ldr	r3, [pc, #60]	; (8004470 <HAL_MspInit+0x44>)
 8004434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004436:	4a0e      	ldr	r2, [pc, #56]	; (8004470 <HAL_MspInit+0x44>)
 8004438:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800443c:	6413      	str	r3, [r2, #64]	; 0x40
 800443e:	4b0c      	ldr	r3, [pc, #48]	; (8004470 <HAL_MspInit+0x44>)
 8004440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004442:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004446:	607b      	str	r3, [r7, #4]
 8004448:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800444a:	4b09      	ldr	r3, [pc, #36]	; (8004470 <HAL_MspInit+0x44>)
 800444c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800444e:	4a08      	ldr	r2, [pc, #32]	; (8004470 <HAL_MspInit+0x44>)
 8004450:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004454:	6453      	str	r3, [r2, #68]	; 0x44
 8004456:	4b06      	ldr	r3, [pc, #24]	; (8004470 <HAL_MspInit+0x44>)
 8004458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800445a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800445e:	603b      	str	r3, [r7, #0]
 8004460:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004462:	bf00      	nop
 8004464:	370c      	adds	r7, #12
 8004466:	46bd      	mov	sp, r7
 8004468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446c:	4770      	bx	lr
 800446e:	bf00      	nop
 8004470:	40023800 	.word	0x40023800

08004474 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b092      	sub	sp, #72	; 0x48
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800447c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004480:	2200      	movs	r2, #0
 8004482:	601a      	str	r2, [r3, #0]
 8004484:	605a      	str	r2, [r3, #4]
 8004486:	609a      	str	r2, [r3, #8]
 8004488:	60da      	str	r2, [r3, #12]
 800448a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a93      	ldr	r2, [pc, #588]	; (80046e0 <HAL_SPI_MspInit+0x26c>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d144      	bne.n	8004520 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004496:	4b93      	ldr	r3, [pc, #588]	; (80046e4 <HAL_SPI_MspInit+0x270>)
 8004498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800449a:	4a92      	ldr	r2, [pc, #584]	; (80046e4 <HAL_SPI_MspInit+0x270>)
 800449c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80044a0:	6453      	str	r3, [r2, #68]	; 0x44
 80044a2:	4b90      	ldr	r3, [pc, #576]	; (80046e4 <HAL_SPI_MspInit+0x270>)
 80044a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80044aa:	633b      	str	r3, [r7, #48]	; 0x30
 80044ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80044ae:	4b8d      	ldr	r3, [pc, #564]	; (80046e4 <HAL_SPI_MspInit+0x270>)
 80044b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044b2:	4a8c      	ldr	r2, [pc, #560]	; (80046e4 <HAL_SPI_MspInit+0x270>)
 80044b4:	f043 0301 	orr.w	r3, r3, #1
 80044b8:	6313      	str	r3, [r2, #48]	; 0x30
 80044ba:	4b8a      	ldr	r3, [pc, #552]	; (80046e4 <HAL_SPI_MspInit+0x270>)
 80044bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044be:	f003 0301 	and.w	r3, r3, #1
 80044c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80044c6:	4b87      	ldr	r3, [pc, #540]	; (80046e4 <HAL_SPI_MspInit+0x270>)
 80044c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ca:	4a86      	ldr	r2, [pc, #536]	; (80046e4 <HAL_SPI_MspInit+0x270>)
 80044cc:	f043 0302 	orr.w	r3, r3, #2
 80044d0:	6313      	str	r3, [r2, #48]	; 0x30
 80044d2:	4b84      	ldr	r3, [pc, #528]	; (80046e4 <HAL_SPI_MspInit+0x270>)
 80044d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044d6:	f003 0302 	and.w	r3, r3, #2
 80044da:	62bb      	str	r3, [r7, #40]	; 0x28
 80044dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80044de:	2360      	movs	r3, #96	; 0x60
 80044e0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044e2:	2302      	movs	r3, #2
 80044e4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044e6:	2300      	movs	r3, #0
 80044e8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044ea:	2303      	movs	r3, #3
 80044ec:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80044ee:	2305      	movs	r3, #5
 80044f0:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044f2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80044f6:	4619      	mov	r1, r3
 80044f8:	487b      	ldr	r0, [pc, #492]	; (80046e8 <HAL_SPI_MspInit+0x274>)
 80044fa:	f7fc fa0b 	bl	8000914 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80044fe:	2320      	movs	r3, #32
 8004500:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004502:	2302      	movs	r3, #2
 8004504:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004506:	2300      	movs	r3, #0
 8004508:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800450a:	2303      	movs	r3, #3
 800450c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800450e:	2305      	movs	r3, #5
 8004510:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004512:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004516:	4619      	mov	r1, r3
 8004518:	4874      	ldr	r0, [pc, #464]	; (80046ec <HAL_SPI_MspInit+0x278>)
 800451a:	f7fc f9fb 	bl	8000914 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 800451e:	e0da      	b.n	80046d6 <HAL_SPI_MspInit+0x262>
  else if(hspi->Instance==SPI2)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a72      	ldr	r2, [pc, #456]	; (80046f0 <HAL_SPI_MspInit+0x27c>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d14d      	bne.n	80045c6 <HAL_SPI_MspInit+0x152>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800452a:	4b6e      	ldr	r3, [pc, #440]	; (80046e4 <HAL_SPI_MspInit+0x270>)
 800452c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452e:	4a6d      	ldr	r2, [pc, #436]	; (80046e4 <HAL_SPI_MspInit+0x270>)
 8004530:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004534:	6413      	str	r3, [r2, #64]	; 0x40
 8004536:	4b6b      	ldr	r3, [pc, #428]	; (80046e4 <HAL_SPI_MspInit+0x270>)
 8004538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800453a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800453e:	627b      	str	r3, [r7, #36]	; 0x24
 8004540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004542:	4b68      	ldr	r3, [pc, #416]	; (80046e4 <HAL_SPI_MspInit+0x270>)
 8004544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004546:	4a67      	ldr	r2, [pc, #412]	; (80046e4 <HAL_SPI_MspInit+0x270>)
 8004548:	f043 0304 	orr.w	r3, r3, #4
 800454c:	6313      	str	r3, [r2, #48]	; 0x30
 800454e:	4b65      	ldr	r3, [pc, #404]	; (80046e4 <HAL_SPI_MspInit+0x270>)
 8004550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004552:	f003 0304 	and.w	r3, r3, #4
 8004556:	623b      	str	r3, [r7, #32]
 8004558:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800455a:	4b62      	ldr	r3, [pc, #392]	; (80046e4 <HAL_SPI_MspInit+0x270>)
 800455c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800455e:	4a61      	ldr	r2, [pc, #388]	; (80046e4 <HAL_SPI_MspInit+0x270>)
 8004560:	f043 0302 	orr.w	r3, r3, #2
 8004564:	6313      	str	r3, [r2, #48]	; 0x30
 8004566:	4b5f      	ldr	r3, [pc, #380]	; (80046e4 <HAL_SPI_MspInit+0x270>)
 8004568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800456a:	f003 0302 	and.w	r3, r3, #2
 800456e:	61fb      	str	r3, [r7, #28]
 8004570:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004572:	230c      	movs	r3, #12
 8004574:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004576:	2302      	movs	r3, #2
 8004578:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800457a:	2300      	movs	r3, #0
 800457c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800457e:	2303      	movs	r3, #3
 8004580:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004582:	2305      	movs	r3, #5
 8004584:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004586:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800458a:	4619      	mov	r1, r3
 800458c:	4859      	ldr	r0, [pc, #356]	; (80046f4 <HAL_SPI_MspInit+0x280>)
 800458e:	f7fc f9c1 	bl	8000914 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004592:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004596:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004598:	2302      	movs	r3, #2
 800459a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800459c:	2300      	movs	r3, #0
 800459e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045a0:	2303      	movs	r3, #3
 80045a2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80045a4:	2305      	movs	r3, #5
 80045a6:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045a8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80045ac:	4619      	mov	r1, r3
 80045ae:	484f      	ldr	r0, [pc, #316]	; (80046ec <HAL_SPI_MspInit+0x278>)
 80045b0:	f7fc f9b0 	bl	8000914 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80045b4:	2200      	movs	r2, #0
 80045b6:	2100      	movs	r1, #0
 80045b8:	2024      	movs	r0, #36	; 0x24
 80045ba:	f7fc f952 	bl	8000862 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80045be:	2024      	movs	r0, #36	; 0x24
 80045c0:	f7fc f96b 	bl	800089a <HAL_NVIC_EnableIRQ>
}
 80045c4:	e087      	b.n	80046d6 <HAL_SPI_MspInit+0x262>
  else if(hspi->Instance==SPI3)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a4b      	ldr	r2, [pc, #300]	; (80046f8 <HAL_SPI_MspInit+0x284>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d14d      	bne.n	800466c <HAL_SPI_MspInit+0x1f8>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80045d0:	4b44      	ldr	r3, [pc, #272]	; (80046e4 <HAL_SPI_MspInit+0x270>)
 80045d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d4:	4a43      	ldr	r2, [pc, #268]	; (80046e4 <HAL_SPI_MspInit+0x270>)
 80045d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045da:	6413      	str	r3, [r2, #64]	; 0x40
 80045dc:	4b41      	ldr	r3, [pc, #260]	; (80046e4 <HAL_SPI_MspInit+0x270>)
 80045de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80045e4:	61bb      	str	r3, [r7, #24]
 80045e6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80045e8:	4b3e      	ldr	r3, [pc, #248]	; (80046e4 <HAL_SPI_MspInit+0x270>)
 80045ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ec:	4a3d      	ldr	r2, [pc, #244]	; (80046e4 <HAL_SPI_MspInit+0x270>)
 80045ee:	f043 0302 	orr.w	r3, r3, #2
 80045f2:	6313      	str	r3, [r2, #48]	; 0x30
 80045f4:	4b3b      	ldr	r3, [pc, #236]	; (80046e4 <HAL_SPI_MspInit+0x270>)
 80045f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045f8:	f003 0302 	and.w	r3, r3, #2
 80045fc:	617b      	str	r3, [r7, #20]
 80045fe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004600:	4b38      	ldr	r3, [pc, #224]	; (80046e4 <HAL_SPI_MspInit+0x270>)
 8004602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004604:	4a37      	ldr	r2, [pc, #220]	; (80046e4 <HAL_SPI_MspInit+0x270>)
 8004606:	f043 0304 	orr.w	r3, r3, #4
 800460a:	6313      	str	r3, [r2, #48]	; 0x30
 800460c:	4b35      	ldr	r3, [pc, #212]	; (80046e4 <HAL_SPI_MspInit+0x270>)
 800460e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004610:	f003 0304 	and.w	r3, r3, #4
 8004614:	613b      	str	r3, [r7, #16]
 8004616:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004618:	2304      	movs	r3, #4
 800461a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800461c:	2302      	movs	r3, #2
 800461e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004620:	2300      	movs	r3, #0
 8004622:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004624:	2303      	movs	r3, #3
 8004626:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8004628:	2307      	movs	r3, #7
 800462a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800462c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004630:	4619      	mov	r1, r3
 8004632:	482e      	ldr	r0, [pc, #184]	; (80046ec <HAL_SPI_MspInit+0x278>)
 8004634:	f7fc f96e 	bl	8000914 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004638:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800463c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800463e:	2302      	movs	r3, #2
 8004640:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004642:	2300      	movs	r3, #0
 8004644:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004646:	2303      	movs	r3, #3
 8004648:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800464a:	2306      	movs	r3, #6
 800464c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800464e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004652:	4619      	mov	r1, r3
 8004654:	4827      	ldr	r0, [pc, #156]	; (80046f4 <HAL_SPI_MspInit+0x280>)
 8004656:	f7fc f95d 	bl	8000914 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 800465a:	2200      	movs	r2, #0
 800465c:	2100      	movs	r1, #0
 800465e:	2033      	movs	r0, #51	; 0x33
 8004660:	f7fc f8ff 	bl	8000862 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8004664:	2033      	movs	r0, #51	; 0x33
 8004666:	f7fc f918 	bl	800089a <HAL_NVIC_EnableIRQ>
}
 800466a:	e034      	b.n	80046d6 <HAL_SPI_MspInit+0x262>
  else if(hspi->Instance==SPI4)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a22      	ldr	r2, [pc, #136]	; (80046fc <HAL_SPI_MspInit+0x288>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d12f      	bne.n	80046d6 <HAL_SPI_MspInit+0x262>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8004676:	4b1b      	ldr	r3, [pc, #108]	; (80046e4 <HAL_SPI_MspInit+0x270>)
 8004678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800467a:	4a1a      	ldr	r2, [pc, #104]	; (80046e4 <HAL_SPI_MspInit+0x270>)
 800467c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004680:	6453      	str	r3, [r2, #68]	; 0x44
 8004682:	4b18      	ldr	r3, [pc, #96]	; (80046e4 <HAL_SPI_MspInit+0x270>)
 8004684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004686:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800468a:	60fb      	str	r3, [r7, #12]
 800468c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800468e:	4b15      	ldr	r3, [pc, #84]	; (80046e4 <HAL_SPI_MspInit+0x270>)
 8004690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004692:	4a14      	ldr	r2, [pc, #80]	; (80046e4 <HAL_SPI_MspInit+0x270>)
 8004694:	f043 0310 	orr.w	r3, r3, #16
 8004698:	6313      	str	r3, [r2, #48]	; 0x30
 800469a:	4b12      	ldr	r3, [pc, #72]	; (80046e4 <HAL_SPI_MspInit+0x270>)
 800469c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800469e:	f003 0310 	and.w	r3, r3, #16
 80046a2:	60bb      	str	r3, [r7, #8]
 80046a4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 80046a6:	2364      	movs	r3, #100	; 0x64
 80046a8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046aa:	2302      	movs	r3, #2
 80046ac:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046ae:	2300      	movs	r3, #0
 80046b0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046b2:	2303      	movs	r3, #3
 80046b4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80046b6:	2305      	movs	r3, #5
 80046b8:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80046ba:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80046be:	4619      	mov	r1, r3
 80046c0:	480f      	ldr	r0, [pc, #60]	; (8004700 <HAL_SPI_MspInit+0x28c>)
 80046c2:	f7fc f927 	bl	8000914 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 80046c6:	2200      	movs	r2, #0
 80046c8:	2100      	movs	r1, #0
 80046ca:	2054      	movs	r0, #84	; 0x54
 80046cc:	f7fc f8c9 	bl	8000862 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 80046d0:	2054      	movs	r0, #84	; 0x54
 80046d2:	f7fc f8e2 	bl	800089a <HAL_NVIC_EnableIRQ>
}
 80046d6:	bf00      	nop
 80046d8:	3748      	adds	r7, #72	; 0x48
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}
 80046de:	bf00      	nop
 80046e0:	40013000 	.word	0x40013000
 80046e4:	40023800 	.word	0x40023800
 80046e8:	40020000 	.word	0x40020000
 80046ec:	40020400 	.word	0x40020400
 80046f0:	40003800 	.word	0x40003800
 80046f4:	40020800 	.word	0x40020800
 80046f8:	40003c00 	.word	0x40003c00
 80046fc:	40013400 	.word	0x40013400
 8004700:	40021000 	.word	0x40021000

08004704 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b08a      	sub	sp, #40	; 0x28
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800470c:	f107 0314 	add.w	r3, r7, #20
 8004710:	2200      	movs	r2, #0
 8004712:	601a      	str	r2, [r3, #0]
 8004714:	605a      	str	r2, [r3, #4]
 8004716:	609a      	str	r2, [r3, #8]
 8004718:	60da      	str	r2, [r3, #12]
 800471a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a17      	ldr	r2, [pc, #92]	; (8004780 <HAL_UART_MspInit+0x7c>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d128      	bne.n	8004778 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8004726:	4b17      	ldr	r3, [pc, #92]	; (8004784 <HAL_UART_MspInit+0x80>)
 8004728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800472a:	4a16      	ldr	r2, [pc, #88]	; (8004784 <HAL_UART_MspInit+0x80>)
 800472c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004730:	6413      	str	r3, [r2, #64]	; 0x40
 8004732:	4b14      	ldr	r3, [pc, #80]	; (8004784 <HAL_UART_MspInit+0x80>)
 8004734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004736:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800473a:	613b      	str	r3, [r7, #16]
 800473c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800473e:	4b11      	ldr	r3, [pc, #68]	; (8004784 <HAL_UART_MspInit+0x80>)
 8004740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004742:	4a10      	ldr	r2, [pc, #64]	; (8004784 <HAL_UART_MspInit+0x80>)
 8004744:	f043 0308 	orr.w	r3, r3, #8
 8004748:	6313      	str	r3, [r2, #48]	; 0x30
 800474a:	4b0e      	ldr	r3, [pc, #56]	; (8004784 <HAL_UART_MspInit+0x80>)
 800474c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800474e:	f003 0308 	and.w	r3, r3, #8
 8004752:	60fb      	str	r3, [r7, #12]
 8004754:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8004756:	f44f 7340 	mov.w	r3, #768	; 0x300
 800475a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800475c:	2302      	movs	r3, #2
 800475e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004760:	2300      	movs	r3, #0
 8004762:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004764:	2303      	movs	r3, #3
 8004766:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004768:	2307      	movs	r3, #7
 800476a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800476c:	f107 0314 	add.w	r3, r7, #20
 8004770:	4619      	mov	r1, r3
 8004772:	4805      	ldr	r0, [pc, #20]	; (8004788 <HAL_UART_MspInit+0x84>)
 8004774:	f7fc f8ce 	bl	8000914 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8004778:	bf00      	nop
 800477a:	3728      	adds	r7, #40	; 0x28
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}
 8004780:	40004800 	.word	0x40004800
 8004784:	40023800 	.word	0x40023800
 8004788:	40020c00 	.word	0x40020c00

0800478c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b08a      	sub	sp, #40	; 0x28
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004794:	f107 0314 	add.w	r3, r7, #20
 8004798:	2200      	movs	r2, #0
 800479a:	601a      	str	r2, [r3, #0]
 800479c:	605a      	str	r2, [r3, #4]
 800479e:	609a      	str	r2, [r3, #8]
 80047a0:	60da      	str	r2, [r3, #12]
 80047a2:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80047ac:	d141      	bne.n	8004832 <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80047ae:	4b23      	ldr	r3, [pc, #140]	; (800483c <HAL_PCD_MspInit+0xb0>)
 80047b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047b2:	4a22      	ldr	r2, [pc, #136]	; (800483c <HAL_PCD_MspInit+0xb0>)
 80047b4:	f043 0301 	orr.w	r3, r3, #1
 80047b8:	6313      	str	r3, [r2, #48]	; 0x30
 80047ba:	4b20      	ldr	r3, [pc, #128]	; (800483c <HAL_PCD_MspInit+0xb0>)
 80047bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047be:	f003 0301 	and.w	r3, r3, #1
 80047c2:	613b      	str	r3, [r7, #16]
 80047c4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80047c6:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80047ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047cc:	2302      	movs	r3, #2
 80047ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047d0:	2300      	movs	r3, #0
 80047d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047d4:	2303      	movs	r3, #3
 80047d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80047d8:	230a      	movs	r3, #10
 80047da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047dc:	f107 0314 	add.w	r3, r7, #20
 80047e0:	4619      	mov	r1, r3
 80047e2:	4817      	ldr	r0, [pc, #92]	; (8004840 <HAL_PCD_MspInit+0xb4>)
 80047e4:	f7fc f896 	bl	8000914 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80047e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80047ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80047ee:	2300      	movs	r3, #0
 80047f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047f2:	2300      	movs	r3, #0
 80047f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80047f6:	f107 0314 	add.w	r3, r7, #20
 80047fa:	4619      	mov	r1, r3
 80047fc:	4810      	ldr	r0, [pc, #64]	; (8004840 <HAL_PCD_MspInit+0xb4>)
 80047fe:	f7fc f889 	bl	8000914 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8004802:	4b0e      	ldr	r3, [pc, #56]	; (800483c <HAL_PCD_MspInit+0xb0>)
 8004804:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004806:	4a0d      	ldr	r2, [pc, #52]	; (800483c <HAL_PCD_MspInit+0xb0>)
 8004808:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800480c:	6353      	str	r3, [r2, #52]	; 0x34
 800480e:	4b0b      	ldr	r3, [pc, #44]	; (800483c <HAL_PCD_MspInit+0xb0>)
 8004810:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004812:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004816:	60fb      	str	r3, [r7, #12]
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	4b08      	ldr	r3, [pc, #32]	; (800483c <HAL_PCD_MspInit+0xb0>)
 800481c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800481e:	4a07      	ldr	r2, [pc, #28]	; (800483c <HAL_PCD_MspInit+0xb0>)
 8004820:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004824:	6453      	str	r3, [r2, #68]	; 0x44
 8004826:	4b05      	ldr	r3, [pc, #20]	; (800483c <HAL_PCD_MspInit+0xb0>)
 8004828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800482a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800482e:	60bb      	str	r3, [r7, #8]
 8004830:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8004832:	bf00      	nop
 8004834:	3728      	adds	r7, #40	; 0x28
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}
 800483a:	bf00      	nop
 800483c:	40023800 	.word	0x40023800
 8004840:	40020000 	.word	0x40020000

08004844 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004844:	b480      	push	{r7}
 8004846:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004848:	bf00      	nop
 800484a:	46bd      	mov	sp, r7
 800484c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004850:	4770      	bx	lr

08004852 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004852:	b480      	push	{r7}
 8004854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004856:	e7fe      	b.n	8004856 <HardFault_Handler+0x4>

08004858 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004858:	b480      	push	{r7}
 800485a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800485c:	e7fe      	b.n	800485c <MemManage_Handler+0x4>

0800485e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800485e:	b480      	push	{r7}
 8004860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004862:	e7fe      	b.n	8004862 <BusFault_Handler+0x4>

08004864 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004864:	b480      	push	{r7}
 8004866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004868:	e7fe      	b.n	8004868 <UsageFault_Handler+0x4>

0800486a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800486a:	b480      	push	{r7}
 800486c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800486e:	bf00      	nop
 8004870:	46bd      	mov	sp, r7
 8004872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004876:	4770      	bx	lr

08004878 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004878:	b480      	push	{r7}
 800487a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800487c:	bf00      	nop
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr

08004886 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004886:	b480      	push	{r7}
 8004888:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800488a:	bf00      	nop
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr

08004894 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004898:	f7fb fec4 	bl	8000624 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800489c:	bf00      	nop
 800489e:	bd80      	pop	{r7, pc}

080048a0 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80048a4:	4802      	ldr	r0, [pc, #8]	; (80048b0 <SPI2_IRQHandler+0x10>)
 80048a6:	f7fd fef3 	bl	8002690 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80048aa:	bf00      	nop
 80048ac:	bd80      	pop	{r7, pc}
 80048ae:	bf00      	nop
 80048b0:	200000b4 	.word	0x200000b4

080048b4 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 80048b8:	4802      	ldr	r0, [pc, #8]	; (80048c4 <SPI3_IRQHandler+0x10>)
 80048ba:	f7fd fee9 	bl	8002690 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 80048be:	bf00      	nop
 80048c0:	bd80      	pop	{r7, pc}
 80048c2:	bf00      	nop
 80048c4:	2000059c 	.word	0x2000059c

080048c8 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 80048cc:	4802      	ldr	r0, [pc, #8]	; (80048d8 <SPI4_IRQHandler+0x10>)
 80048ce:	f7fd fedf 	bl	8002690 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 80048d2:	bf00      	nop
 80048d4:	bd80      	pop	{r7, pc}
 80048d6:	bf00      	nop
 80048d8:	20000600 	.word	0x20000600

080048dc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b086      	sub	sp, #24
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	60f8      	str	r0, [r7, #12]
 80048e4:	60b9      	str	r1, [r7, #8]
 80048e6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80048e8:	2300      	movs	r3, #0
 80048ea:	617b      	str	r3, [r7, #20]
 80048ec:	e00a      	b.n	8004904 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80048ee:	f3af 8000 	nop.w
 80048f2:	4601      	mov	r1, r0
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	1c5a      	adds	r2, r3, #1
 80048f8:	60ba      	str	r2, [r7, #8]
 80048fa:	b2ca      	uxtb	r2, r1
 80048fc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	3301      	adds	r3, #1
 8004902:	617b      	str	r3, [r7, #20]
 8004904:	697a      	ldr	r2, [r7, #20]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	429a      	cmp	r2, r3
 800490a:	dbf0      	blt.n	80048ee <_read+0x12>
	}

return len;
 800490c:	687b      	ldr	r3, [r7, #4]
}
 800490e:	4618      	mov	r0, r3
 8004910:	3718      	adds	r7, #24
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}

08004916 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004916:	b580      	push	{r7, lr}
 8004918:	b086      	sub	sp, #24
 800491a:	af00      	add	r7, sp, #0
 800491c:	60f8      	str	r0, [r7, #12]
 800491e:	60b9      	str	r1, [r7, #8]
 8004920:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004922:	2300      	movs	r3, #0
 8004924:	617b      	str	r3, [r7, #20]
 8004926:	e009      	b.n	800493c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	1c5a      	adds	r2, r3, #1
 800492c:	60ba      	str	r2, [r7, #8]
 800492e:	781b      	ldrb	r3, [r3, #0]
 8004930:	4618      	mov	r0, r3
 8004932:	f7ff fa73 	bl	8003e1c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	3301      	adds	r3, #1
 800493a:	617b      	str	r3, [r7, #20]
 800493c:	697a      	ldr	r2, [r7, #20]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	429a      	cmp	r2, r3
 8004942:	dbf1      	blt.n	8004928 <_write+0x12>
	}
	return len;
 8004944:	687b      	ldr	r3, [r7, #4]
}
 8004946:	4618      	mov	r0, r3
 8004948:	3718      	adds	r7, #24
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}

0800494e <_close>:

int _close(int file)
{
 800494e:	b480      	push	{r7}
 8004950:	b083      	sub	sp, #12
 8004952:	af00      	add	r7, sp, #0
 8004954:	6078      	str	r0, [r7, #4]
	return -1;
 8004956:	f04f 33ff 	mov.w	r3, #4294967295
}
 800495a:	4618      	mov	r0, r3
 800495c:	370c      	adds	r7, #12
 800495e:	46bd      	mov	sp, r7
 8004960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004964:	4770      	bx	lr

08004966 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004966:	b480      	push	{r7}
 8004968:	b083      	sub	sp, #12
 800496a:	af00      	add	r7, sp, #0
 800496c:	6078      	str	r0, [r7, #4]
 800496e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004976:	605a      	str	r2, [r3, #4]
	return 0;
 8004978:	2300      	movs	r3, #0
}
 800497a:	4618      	mov	r0, r3
 800497c:	370c      	adds	r7, #12
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr

08004986 <_isatty>:

int _isatty(int file)
{
 8004986:	b480      	push	{r7}
 8004988:	b083      	sub	sp, #12
 800498a:	af00      	add	r7, sp, #0
 800498c:	6078      	str	r0, [r7, #4]
	return 1;
 800498e:	2301      	movs	r3, #1
}
 8004990:	4618      	mov	r0, r3
 8004992:	370c      	adds	r7, #12
 8004994:	46bd      	mov	sp, r7
 8004996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499a:	4770      	bx	lr

0800499c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800499c:	b480      	push	{r7}
 800499e:	b085      	sub	sp, #20
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	60f8      	str	r0, [r7, #12]
 80049a4:	60b9      	str	r1, [r7, #8]
 80049a6:	607a      	str	r2, [r7, #4]
	return 0;
 80049a8:	2300      	movs	r3, #0
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3714      	adds	r7, #20
 80049ae:	46bd      	mov	sp, r7
 80049b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b4:	4770      	bx	lr
	...

080049b8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b084      	sub	sp, #16
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80049c0:	4b11      	ldr	r3, [pc, #68]	; (8004a08 <_sbrk+0x50>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d102      	bne.n	80049ce <_sbrk+0x16>
		heap_end = &end;
 80049c8:	4b0f      	ldr	r3, [pc, #60]	; (8004a08 <_sbrk+0x50>)
 80049ca:	4a10      	ldr	r2, [pc, #64]	; (8004a0c <_sbrk+0x54>)
 80049cc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80049ce:	4b0e      	ldr	r3, [pc, #56]	; (8004a08 <_sbrk+0x50>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80049d4:	4b0c      	ldr	r3, [pc, #48]	; (8004a08 <_sbrk+0x50>)
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	4413      	add	r3, r2
 80049dc:	466a      	mov	r2, sp
 80049de:	4293      	cmp	r3, r2
 80049e0:	d907      	bls.n	80049f2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80049e2:	f000 f875 	bl	8004ad0 <__errno>
 80049e6:	4603      	mov	r3, r0
 80049e8:	220c      	movs	r2, #12
 80049ea:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80049ec:	f04f 33ff 	mov.w	r3, #4294967295
 80049f0:	e006      	b.n	8004a00 <_sbrk+0x48>
	}

	heap_end += incr;
 80049f2:	4b05      	ldr	r3, [pc, #20]	; (8004a08 <_sbrk+0x50>)
 80049f4:	681a      	ldr	r2, [r3, #0]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	4413      	add	r3, r2
 80049fa:	4a03      	ldr	r2, [pc, #12]	; (8004a08 <_sbrk+0x50>)
 80049fc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80049fe:	68fb      	ldr	r3, [r7, #12]
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3710      	adds	r7, #16
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}
 8004a08:	200000a4 	.word	0x200000a4
 8004a0c:	20000720 	.word	0x20000720

08004a10 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004a10:	b480      	push	{r7}
 8004a12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004a14:	4b15      	ldr	r3, [pc, #84]	; (8004a6c <SystemInit+0x5c>)
 8004a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a1a:	4a14      	ldr	r2, [pc, #80]	; (8004a6c <SystemInit+0x5c>)
 8004a1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004a20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8004a24:	4b12      	ldr	r3, [pc, #72]	; (8004a70 <SystemInit+0x60>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a11      	ldr	r2, [pc, #68]	; (8004a70 <SystemInit+0x60>)
 8004a2a:	f043 0301 	orr.w	r3, r3, #1
 8004a2e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004a30:	4b0f      	ldr	r3, [pc, #60]	; (8004a70 <SystemInit+0x60>)
 8004a32:	2200      	movs	r2, #0
 8004a34:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8004a36:	4b0e      	ldr	r3, [pc, #56]	; (8004a70 <SystemInit+0x60>)
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	490d      	ldr	r1, [pc, #52]	; (8004a70 <SystemInit+0x60>)
 8004a3c:	4b0d      	ldr	r3, [pc, #52]	; (8004a74 <SystemInit+0x64>)
 8004a3e:	4013      	ands	r3, r2
 8004a40:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8004a42:	4b0b      	ldr	r3, [pc, #44]	; (8004a70 <SystemInit+0x60>)
 8004a44:	4a0c      	ldr	r2, [pc, #48]	; (8004a78 <SystemInit+0x68>)
 8004a46:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004a48:	4b09      	ldr	r3, [pc, #36]	; (8004a70 <SystemInit+0x60>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a08      	ldr	r2, [pc, #32]	; (8004a70 <SystemInit+0x60>)
 8004a4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a52:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8004a54:	4b06      	ldr	r3, [pc, #24]	; (8004a70 <SystemInit+0x60>)
 8004a56:	2200      	movs	r2, #0
 8004a58:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004a5a:	4b04      	ldr	r3, [pc, #16]	; (8004a6c <SystemInit+0x5c>)
 8004a5c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004a60:	609a      	str	r2, [r3, #8]
#endif
}
 8004a62:	bf00      	nop
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr
 8004a6c:	e000ed00 	.word	0xe000ed00
 8004a70:	40023800 	.word	0x40023800
 8004a74:	fef6ffff 	.word	0xfef6ffff
 8004a78:	24003010 	.word	0x24003010

08004a7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004a7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004ab4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004a80:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004a82:	e003      	b.n	8004a8c <LoopCopyDataInit>

08004a84 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004a84:	4b0c      	ldr	r3, [pc, #48]	; (8004ab8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004a86:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004a88:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004a8a:	3104      	adds	r1, #4

08004a8c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004a8c:	480b      	ldr	r0, [pc, #44]	; (8004abc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004a8e:	4b0c      	ldr	r3, [pc, #48]	; (8004ac0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004a90:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004a92:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004a94:	d3f6      	bcc.n	8004a84 <CopyDataInit>
  ldr  r2, =_sbss
 8004a96:	4a0b      	ldr	r2, [pc, #44]	; (8004ac4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004a98:	e002      	b.n	8004aa0 <LoopFillZerobss>

08004a9a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004a9a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004a9c:	f842 3b04 	str.w	r3, [r2], #4

08004aa0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004aa0:	4b09      	ldr	r3, [pc, #36]	; (8004ac8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004aa2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004aa4:	d3f9      	bcc.n	8004a9a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004aa6:	f7ff ffb3 	bl	8004a10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004aaa:	f000 f817 	bl	8004adc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004aae:	f7ff f9d9 	bl	8003e64 <main>
  bx  lr    
 8004ab2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004ab4:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8004ab8:	08005ad4 	.word	0x08005ad4
  ldr  r0, =_sdata
 8004abc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004ac0:	2000007c 	.word	0x2000007c
  ldr  r2, =_sbss
 8004ac4:	2000007c 	.word	0x2000007c
  ldr  r3, = _ebss
 8004ac8:	20000720 	.word	0x20000720

08004acc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004acc:	e7fe      	b.n	8004acc <ADC_IRQHandler>
	...

08004ad0 <__errno>:
 8004ad0:	4b01      	ldr	r3, [pc, #4]	; (8004ad8 <__errno+0x8>)
 8004ad2:	6818      	ldr	r0, [r3, #0]
 8004ad4:	4770      	bx	lr
 8004ad6:	bf00      	nop
 8004ad8:	20000018 	.word	0x20000018

08004adc <__libc_init_array>:
 8004adc:	b570      	push	{r4, r5, r6, lr}
 8004ade:	4d0d      	ldr	r5, [pc, #52]	; (8004b14 <__libc_init_array+0x38>)
 8004ae0:	4c0d      	ldr	r4, [pc, #52]	; (8004b18 <__libc_init_array+0x3c>)
 8004ae2:	1b64      	subs	r4, r4, r5
 8004ae4:	10a4      	asrs	r4, r4, #2
 8004ae6:	2600      	movs	r6, #0
 8004ae8:	42a6      	cmp	r6, r4
 8004aea:	d109      	bne.n	8004b00 <__libc_init_array+0x24>
 8004aec:	4d0b      	ldr	r5, [pc, #44]	; (8004b1c <__libc_init_array+0x40>)
 8004aee:	4c0c      	ldr	r4, [pc, #48]	; (8004b20 <__libc_init_array+0x44>)
 8004af0:	f000 ff76 	bl	80059e0 <_init>
 8004af4:	1b64      	subs	r4, r4, r5
 8004af6:	10a4      	asrs	r4, r4, #2
 8004af8:	2600      	movs	r6, #0
 8004afa:	42a6      	cmp	r6, r4
 8004afc:	d105      	bne.n	8004b0a <__libc_init_array+0x2e>
 8004afe:	bd70      	pop	{r4, r5, r6, pc}
 8004b00:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b04:	4798      	blx	r3
 8004b06:	3601      	adds	r6, #1
 8004b08:	e7ee      	b.n	8004ae8 <__libc_init_array+0xc>
 8004b0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b0e:	4798      	blx	r3
 8004b10:	3601      	adds	r6, #1
 8004b12:	e7f2      	b.n	8004afa <__libc_init_array+0x1e>
 8004b14:	08005acc 	.word	0x08005acc
 8004b18:	08005acc 	.word	0x08005acc
 8004b1c:	08005acc 	.word	0x08005acc
 8004b20:	08005ad0 	.word	0x08005ad0

08004b24 <memset>:
 8004b24:	4402      	add	r2, r0
 8004b26:	4603      	mov	r3, r0
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d100      	bne.n	8004b2e <memset+0xa>
 8004b2c:	4770      	bx	lr
 8004b2e:	f803 1b01 	strb.w	r1, [r3], #1
 8004b32:	e7f9      	b.n	8004b28 <memset+0x4>

08004b34 <iprintf>:
 8004b34:	b40f      	push	{r0, r1, r2, r3}
 8004b36:	4b0a      	ldr	r3, [pc, #40]	; (8004b60 <iprintf+0x2c>)
 8004b38:	b513      	push	{r0, r1, r4, lr}
 8004b3a:	681c      	ldr	r4, [r3, #0]
 8004b3c:	b124      	cbz	r4, 8004b48 <iprintf+0x14>
 8004b3e:	69a3      	ldr	r3, [r4, #24]
 8004b40:	b913      	cbnz	r3, 8004b48 <iprintf+0x14>
 8004b42:	4620      	mov	r0, r4
 8004b44:	f000 f866 	bl	8004c14 <__sinit>
 8004b48:	ab05      	add	r3, sp, #20
 8004b4a:	9a04      	ldr	r2, [sp, #16]
 8004b4c:	68a1      	ldr	r1, [r4, #8]
 8004b4e:	9301      	str	r3, [sp, #4]
 8004b50:	4620      	mov	r0, r4
 8004b52:	f000 f983 	bl	8004e5c <_vfiprintf_r>
 8004b56:	b002      	add	sp, #8
 8004b58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b5c:	b004      	add	sp, #16
 8004b5e:	4770      	bx	lr
 8004b60:	20000018 	.word	0x20000018

08004b64 <std>:
 8004b64:	2300      	movs	r3, #0
 8004b66:	b510      	push	{r4, lr}
 8004b68:	4604      	mov	r4, r0
 8004b6a:	e9c0 3300 	strd	r3, r3, [r0]
 8004b6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004b72:	6083      	str	r3, [r0, #8]
 8004b74:	8181      	strh	r1, [r0, #12]
 8004b76:	6643      	str	r3, [r0, #100]	; 0x64
 8004b78:	81c2      	strh	r2, [r0, #14]
 8004b7a:	6183      	str	r3, [r0, #24]
 8004b7c:	4619      	mov	r1, r3
 8004b7e:	2208      	movs	r2, #8
 8004b80:	305c      	adds	r0, #92	; 0x5c
 8004b82:	f7ff ffcf 	bl	8004b24 <memset>
 8004b86:	4b05      	ldr	r3, [pc, #20]	; (8004b9c <std+0x38>)
 8004b88:	6263      	str	r3, [r4, #36]	; 0x24
 8004b8a:	4b05      	ldr	r3, [pc, #20]	; (8004ba0 <std+0x3c>)
 8004b8c:	62a3      	str	r3, [r4, #40]	; 0x28
 8004b8e:	4b05      	ldr	r3, [pc, #20]	; (8004ba4 <std+0x40>)
 8004b90:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004b92:	4b05      	ldr	r3, [pc, #20]	; (8004ba8 <std+0x44>)
 8004b94:	6224      	str	r4, [r4, #32]
 8004b96:	6323      	str	r3, [r4, #48]	; 0x30
 8004b98:	bd10      	pop	{r4, pc}
 8004b9a:	bf00      	nop
 8004b9c:	08005405 	.word	0x08005405
 8004ba0:	08005427 	.word	0x08005427
 8004ba4:	0800545f 	.word	0x0800545f
 8004ba8:	08005483 	.word	0x08005483

08004bac <_cleanup_r>:
 8004bac:	4901      	ldr	r1, [pc, #4]	; (8004bb4 <_cleanup_r+0x8>)
 8004bae:	f000 b8af 	b.w	8004d10 <_fwalk_reent>
 8004bb2:	bf00      	nop
 8004bb4:	0800575d 	.word	0x0800575d

08004bb8 <__sfmoreglue>:
 8004bb8:	b570      	push	{r4, r5, r6, lr}
 8004bba:	1e4a      	subs	r2, r1, #1
 8004bbc:	2568      	movs	r5, #104	; 0x68
 8004bbe:	4355      	muls	r5, r2
 8004bc0:	460e      	mov	r6, r1
 8004bc2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004bc6:	f000 f8c5 	bl	8004d54 <_malloc_r>
 8004bca:	4604      	mov	r4, r0
 8004bcc:	b140      	cbz	r0, 8004be0 <__sfmoreglue+0x28>
 8004bce:	2100      	movs	r1, #0
 8004bd0:	e9c0 1600 	strd	r1, r6, [r0]
 8004bd4:	300c      	adds	r0, #12
 8004bd6:	60a0      	str	r0, [r4, #8]
 8004bd8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004bdc:	f7ff ffa2 	bl	8004b24 <memset>
 8004be0:	4620      	mov	r0, r4
 8004be2:	bd70      	pop	{r4, r5, r6, pc}

08004be4 <__sfp_lock_acquire>:
 8004be4:	4801      	ldr	r0, [pc, #4]	; (8004bec <__sfp_lock_acquire+0x8>)
 8004be6:	f000 b8b3 	b.w	8004d50 <__retarget_lock_acquire_recursive>
 8004bea:	bf00      	nop
 8004bec:	20000718 	.word	0x20000718

08004bf0 <__sfp_lock_release>:
 8004bf0:	4801      	ldr	r0, [pc, #4]	; (8004bf8 <__sfp_lock_release+0x8>)
 8004bf2:	f000 b8ae 	b.w	8004d52 <__retarget_lock_release_recursive>
 8004bf6:	bf00      	nop
 8004bf8:	20000718 	.word	0x20000718

08004bfc <__sinit_lock_acquire>:
 8004bfc:	4801      	ldr	r0, [pc, #4]	; (8004c04 <__sinit_lock_acquire+0x8>)
 8004bfe:	f000 b8a7 	b.w	8004d50 <__retarget_lock_acquire_recursive>
 8004c02:	bf00      	nop
 8004c04:	20000713 	.word	0x20000713

08004c08 <__sinit_lock_release>:
 8004c08:	4801      	ldr	r0, [pc, #4]	; (8004c10 <__sinit_lock_release+0x8>)
 8004c0a:	f000 b8a2 	b.w	8004d52 <__retarget_lock_release_recursive>
 8004c0e:	bf00      	nop
 8004c10:	20000713 	.word	0x20000713

08004c14 <__sinit>:
 8004c14:	b510      	push	{r4, lr}
 8004c16:	4604      	mov	r4, r0
 8004c18:	f7ff fff0 	bl	8004bfc <__sinit_lock_acquire>
 8004c1c:	69a3      	ldr	r3, [r4, #24]
 8004c1e:	b11b      	cbz	r3, 8004c28 <__sinit+0x14>
 8004c20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c24:	f7ff bff0 	b.w	8004c08 <__sinit_lock_release>
 8004c28:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004c2c:	6523      	str	r3, [r4, #80]	; 0x50
 8004c2e:	4b13      	ldr	r3, [pc, #76]	; (8004c7c <__sinit+0x68>)
 8004c30:	4a13      	ldr	r2, [pc, #76]	; (8004c80 <__sinit+0x6c>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	62a2      	str	r2, [r4, #40]	; 0x28
 8004c36:	42a3      	cmp	r3, r4
 8004c38:	bf04      	itt	eq
 8004c3a:	2301      	moveq	r3, #1
 8004c3c:	61a3      	streq	r3, [r4, #24]
 8004c3e:	4620      	mov	r0, r4
 8004c40:	f000 f820 	bl	8004c84 <__sfp>
 8004c44:	6060      	str	r0, [r4, #4]
 8004c46:	4620      	mov	r0, r4
 8004c48:	f000 f81c 	bl	8004c84 <__sfp>
 8004c4c:	60a0      	str	r0, [r4, #8]
 8004c4e:	4620      	mov	r0, r4
 8004c50:	f000 f818 	bl	8004c84 <__sfp>
 8004c54:	2200      	movs	r2, #0
 8004c56:	60e0      	str	r0, [r4, #12]
 8004c58:	2104      	movs	r1, #4
 8004c5a:	6860      	ldr	r0, [r4, #4]
 8004c5c:	f7ff ff82 	bl	8004b64 <std>
 8004c60:	68a0      	ldr	r0, [r4, #8]
 8004c62:	2201      	movs	r2, #1
 8004c64:	2109      	movs	r1, #9
 8004c66:	f7ff ff7d 	bl	8004b64 <std>
 8004c6a:	68e0      	ldr	r0, [r4, #12]
 8004c6c:	2202      	movs	r2, #2
 8004c6e:	2112      	movs	r1, #18
 8004c70:	f7ff ff78 	bl	8004b64 <std>
 8004c74:	2301      	movs	r3, #1
 8004c76:	61a3      	str	r3, [r4, #24]
 8004c78:	e7d2      	b.n	8004c20 <__sinit+0xc>
 8004c7a:	bf00      	nop
 8004c7c:	08005a2c 	.word	0x08005a2c
 8004c80:	08004bad 	.word	0x08004bad

08004c84 <__sfp>:
 8004c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c86:	4607      	mov	r7, r0
 8004c88:	f7ff ffac 	bl	8004be4 <__sfp_lock_acquire>
 8004c8c:	4b1e      	ldr	r3, [pc, #120]	; (8004d08 <__sfp+0x84>)
 8004c8e:	681e      	ldr	r6, [r3, #0]
 8004c90:	69b3      	ldr	r3, [r6, #24]
 8004c92:	b913      	cbnz	r3, 8004c9a <__sfp+0x16>
 8004c94:	4630      	mov	r0, r6
 8004c96:	f7ff ffbd 	bl	8004c14 <__sinit>
 8004c9a:	3648      	adds	r6, #72	; 0x48
 8004c9c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004ca0:	3b01      	subs	r3, #1
 8004ca2:	d503      	bpl.n	8004cac <__sfp+0x28>
 8004ca4:	6833      	ldr	r3, [r6, #0]
 8004ca6:	b30b      	cbz	r3, 8004cec <__sfp+0x68>
 8004ca8:	6836      	ldr	r6, [r6, #0]
 8004caa:	e7f7      	b.n	8004c9c <__sfp+0x18>
 8004cac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004cb0:	b9d5      	cbnz	r5, 8004ce8 <__sfp+0x64>
 8004cb2:	4b16      	ldr	r3, [pc, #88]	; (8004d0c <__sfp+0x88>)
 8004cb4:	60e3      	str	r3, [r4, #12]
 8004cb6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004cba:	6665      	str	r5, [r4, #100]	; 0x64
 8004cbc:	f000 f847 	bl	8004d4e <__retarget_lock_init_recursive>
 8004cc0:	f7ff ff96 	bl	8004bf0 <__sfp_lock_release>
 8004cc4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004cc8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004ccc:	6025      	str	r5, [r4, #0]
 8004cce:	61a5      	str	r5, [r4, #24]
 8004cd0:	2208      	movs	r2, #8
 8004cd2:	4629      	mov	r1, r5
 8004cd4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004cd8:	f7ff ff24 	bl	8004b24 <memset>
 8004cdc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004ce0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004ce4:	4620      	mov	r0, r4
 8004ce6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ce8:	3468      	adds	r4, #104	; 0x68
 8004cea:	e7d9      	b.n	8004ca0 <__sfp+0x1c>
 8004cec:	2104      	movs	r1, #4
 8004cee:	4638      	mov	r0, r7
 8004cf0:	f7ff ff62 	bl	8004bb8 <__sfmoreglue>
 8004cf4:	4604      	mov	r4, r0
 8004cf6:	6030      	str	r0, [r6, #0]
 8004cf8:	2800      	cmp	r0, #0
 8004cfa:	d1d5      	bne.n	8004ca8 <__sfp+0x24>
 8004cfc:	f7ff ff78 	bl	8004bf0 <__sfp_lock_release>
 8004d00:	230c      	movs	r3, #12
 8004d02:	603b      	str	r3, [r7, #0]
 8004d04:	e7ee      	b.n	8004ce4 <__sfp+0x60>
 8004d06:	bf00      	nop
 8004d08:	08005a2c 	.word	0x08005a2c
 8004d0c:	ffff0001 	.word	0xffff0001

08004d10 <_fwalk_reent>:
 8004d10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d14:	4606      	mov	r6, r0
 8004d16:	4688      	mov	r8, r1
 8004d18:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004d1c:	2700      	movs	r7, #0
 8004d1e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004d22:	f1b9 0901 	subs.w	r9, r9, #1
 8004d26:	d505      	bpl.n	8004d34 <_fwalk_reent+0x24>
 8004d28:	6824      	ldr	r4, [r4, #0]
 8004d2a:	2c00      	cmp	r4, #0
 8004d2c:	d1f7      	bne.n	8004d1e <_fwalk_reent+0xe>
 8004d2e:	4638      	mov	r0, r7
 8004d30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d34:	89ab      	ldrh	r3, [r5, #12]
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	d907      	bls.n	8004d4a <_fwalk_reent+0x3a>
 8004d3a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004d3e:	3301      	adds	r3, #1
 8004d40:	d003      	beq.n	8004d4a <_fwalk_reent+0x3a>
 8004d42:	4629      	mov	r1, r5
 8004d44:	4630      	mov	r0, r6
 8004d46:	47c0      	blx	r8
 8004d48:	4307      	orrs	r7, r0
 8004d4a:	3568      	adds	r5, #104	; 0x68
 8004d4c:	e7e9      	b.n	8004d22 <_fwalk_reent+0x12>

08004d4e <__retarget_lock_init_recursive>:
 8004d4e:	4770      	bx	lr

08004d50 <__retarget_lock_acquire_recursive>:
 8004d50:	4770      	bx	lr

08004d52 <__retarget_lock_release_recursive>:
 8004d52:	4770      	bx	lr

08004d54 <_malloc_r>:
 8004d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d56:	1ccd      	adds	r5, r1, #3
 8004d58:	f025 0503 	bic.w	r5, r5, #3
 8004d5c:	3508      	adds	r5, #8
 8004d5e:	2d0c      	cmp	r5, #12
 8004d60:	bf38      	it	cc
 8004d62:	250c      	movcc	r5, #12
 8004d64:	2d00      	cmp	r5, #0
 8004d66:	4606      	mov	r6, r0
 8004d68:	db01      	blt.n	8004d6e <_malloc_r+0x1a>
 8004d6a:	42a9      	cmp	r1, r5
 8004d6c:	d903      	bls.n	8004d76 <_malloc_r+0x22>
 8004d6e:	230c      	movs	r3, #12
 8004d70:	6033      	str	r3, [r6, #0]
 8004d72:	2000      	movs	r0, #0
 8004d74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d76:	f000 fda3 	bl	80058c0 <__malloc_lock>
 8004d7a:	4921      	ldr	r1, [pc, #132]	; (8004e00 <_malloc_r+0xac>)
 8004d7c:	680a      	ldr	r2, [r1, #0]
 8004d7e:	4614      	mov	r4, r2
 8004d80:	b99c      	cbnz	r4, 8004daa <_malloc_r+0x56>
 8004d82:	4f20      	ldr	r7, [pc, #128]	; (8004e04 <_malloc_r+0xb0>)
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	b923      	cbnz	r3, 8004d92 <_malloc_r+0x3e>
 8004d88:	4621      	mov	r1, r4
 8004d8a:	4630      	mov	r0, r6
 8004d8c:	f000 fb2a 	bl	80053e4 <_sbrk_r>
 8004d90:	6038      	str	r0, [r7, #0]
 8004d92:	4629      	mov	r1, r5
 8004d94:	4630      	mov	r0, r6
 8004d96:	f000 fb25 	bl	80053e4 <_sbrk_r>
 8004d9a:	1c43      	adds	r3, r0, #1
 8004d9c:	d123      	bne.n	8004de6 <_malloc_r+0x92>
 8004d9e:	230c      	movs	r3, #12
 8004da0:	6033      	str	r3, [r6, #0]
 8004da2:	4630      	mov	r0, r6
 8004da4:	f000 fd92 	bl	80058cc <__malloc_unlock>
 8004da8:	e7e3      	b.n	8004d72 <_malloc_r+0x1e>
 8004daa:	6823      	ldr	r3, [r4, #0]
 8004dac:	1b5b      	subs	r3, r3, r5
 8004dae:	d417      	bmi.n	8004de0 <_malloc_r+0x8c>
 8004db0:	2b0b      	cmp	r3, #11
 8004db2:	d903      	bls.n	8004dbc <_malloc_r+0x68>
 8004db4:	6023      	str	r3, [r4, #0]
 8004db6:	441c      	add	r4, r3
 8004db8:	6025      	str	r5, [r4, #0]
 8004dba:	e004      	b.n	8004dc6 <_malloc_r+0x72>
 8004dbc:	6863      	ldr	r3, [r4, #4]
 8004dbe:	42a2      	cmp	r2, r4
 8004dc0:	bf0c      	ite	eq
 8004dc2:	600b      	streq	r3, [r1, #0]
 8004dc4:	6053      	strne	r3, [r2, #4]
 8004dc6:	4630      	mov	r0, r6
 8004dc8:	f000 fd80 	bl	80058cc <__malloc_unlock>
 8004dcc:	f104 000b 	add.w	r0, r4, #11
 8004dd0:	1d23      	adds	r3, r4, #4
 8004dd2:	f020 0007 	bic.w	r0, r0, #7
 8004dd6:	1ac2      	subs	r2, r0, r3
 8004dd8:	d0cc      	beq.n	8004d74 <_malloc_r+0x20>
 8004dda:	1a1b      	subs	r3, r3, r0
 8004ddc:	50a3      	str	r3, [r4, r2]
 8004dde:	e7c9      	b.n	8004d74 <_malloc_r+0x20>
 8004de0:	4622      	mov	r2, r4
 8004de2:	6864      	ldr	r4, [r4, #4]
 8004de4:	e7cc      	b.n	8004d80 <_malloc_r+0x2c>
 8004de6:	1cc4      	adds	r4, r0, #3
 8004de8:	f024 0403 	bic.w	r4, r4, #3
 8004dec:	42a0      	cmp	r0, r4
 8004dee:	d0e3      	beq.n	8004db8 <_malloc_r+0x64>
 8004df0:	1a21      	subs	r1, r4, r0
 8004df2:	4630      	mov	r0, r6
 8004df4:	f000 faf6 	bl	80053e4 <_sbrk_r>
 8004df8:	3001      	adds	r0, #1
 8004dfa:	d1dd      	bne.n	8004db8 <_malloc_r+0x64>
 8004dfc:	e7cf      	b.n	8004d9e <_malloc_r+0x4a>
 8004dfe:	bf00      	nop
 8004e00:	200000a8 	.word	0x200000a8
 8004e04:	200000ac 	.word	0x200000ac

08004e08 <__sfputc_r>:
 8004e08:	6893      	ldr	r3, [r2, #8]
 8004e0a:	3b01      	subs	r3, #1
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	b410      	push	{r4}
 8004e10:	6093      	str	r3, [r2, #8]
 8004e12:	da08      	bge.n	8004e26 <__sfputc_r+0x1e>
 8004e14:	6994      	ldr	r4, [r2, #24]
 8004e16:	42a3      	cmp	r3, r4
 8004e18:	db01      	blt.n	8004e1e <__sfputc_r+0x16>
 8004e1a:	290a      	cmp	r1, #10
 8004e1c:	d103      	bne.n	8004e26 <__sfputc_r+0x1e>
 8004e1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004e22:	f000 bb33 	b.w	800548c <__swbuf_r>
 8004e26:	6813      	ldr	r3, [r2, #0]
 8004e28:	1c58      	adds	r0, r3, #1
 8004e2a:	6010      	str	r0, [r2, #0]
 8004e2c:	7019      	strb	r1, [r3, #0]
 8004e2e:	4608      	mov	r0, r1
 8004e30:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004e34:	4770      	bx	lr

08004e36 <__sfputs_r>:
 8004e36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e38:	4606      	mov	r6, r0
 8004e3a:	460f      	mov	r7, r1
 8004e3c:	4614      	mov	r4, r2
 8004e3e:	18d5      	adds	r5, r2, r3
 8004e40:	42ac      	cmp	r4, r5
 8004e42:	d101      	bne.n	8004e48 <__sfputs_r+0x12>
 8004e44:	2000      	movs	r0, #0
 8004e46:	e007      	b.n	8004e58 <__sfputs_r+0x22>
 8004e48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e4c:	463a      	mov	r2, r7
 8004e4e:	4630      	mov	r0, r6
 8004e50:	f7ff ffda 	bl	8004e08 <__sfputc_r>
 8004e54:	1c43      	adds	r3, r0, #1
 8004e56:	d1f3      	bne.n	8004e40 <__sfputs_r+0xa>
 8004e58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004e5c <_vfiprintf_r>:
 8004e5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e60:	460d      	mov	r5, r1
 8004e62:	b09d      	sub	sp, #116	; 0x74
 8004e64:	4614      	mov	r4, r2
 8004e66:	4698      	mov	r8, r3
 8004e68:	4606      	mov	r6, r0
 8004e6a:	b118      	cbz	r0, 8004e74 <_vfiprintf_r+0x18>
 8004e6c:	6983      	ldr	r3, [r0, #24]
 8004e6e:	b90b      	cbnz	r3, 8004e74 <_vfiprintf_r+0x18>
 8004e70:	f7ff fed0 	bl	8004c14 <__sinit>
 8004e74:	4b89      	ldr	r3, [pc, #548]	; (800509c <_vfiprintf_r+0x240>)
 8004e76:	429d      	cmp	r5, r3
 8004e78:	d11b      	bne.n	8004eb2 <_vfiprintf_r+0x56>
 8004e7a:	6875      	ldr	r5, [r6, #4]
 8004e7c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004e7e:	07d9      	lsls	r1, r3, #31
 8004e80:	d405      	bmi.n	8004e8e <_vfiprintf_r+0x32>
 8004e82:	89ab      	ldrh	r3, [r5, #12]
 8004e84:	059a      	lsls	r2, r3, #22
 8004e86:	d402      	bmi.n	8004e8e <_vfiprintf_r+0x32>
 8004e88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004e8a:	f7ff ff61 	bl	8004d50 <__retarget_lock_acquire_recursive>
 8004e8e:	89ab      	ldrh	r3, [r5, #12]
 8004e90:	071b      	lsls	r3, r3, #28
 8004e92:	d501      	bpl.n	8004e98 <_vfiprintf_r+0x3c>
 8004e94:	692b      	ldr	r3, [r5, #16]
 8004e96:	b9eb      	cbnz	r3, 8004ed4 <_vfiprintf_r+0x78>
 8004e98:	4629      	mov	r1, r5
 8004e9a:	4630      	mov	r0, r6
 8004e9c:	f000 fb5a 	bl	8005554 <__swsetup_r>
 8004ea0:	b1c0      	cbz	r0, 8004ed4 <_vfiprintf_r+0x78>
 8004ea2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004ea4:	07dc      	lsls	r4, r3, #31
 8004ea6:	d50e      	bpl.n	8004ec6 <_vfiprintf_r+0x6a>
 8004ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8004eac:	b01d      	add	sp, #116	; 0x74
 8004eae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004eb2:	4b7b      	ldr	r3, [pc, #492]	; (80050a0 <_vfiprintf_r+0x244>)
 8004eb4:	429d      	cmp	r5, r3
 8004eb6:	d101      	bne.n	8004ebc <_vfiprintf_r+0x60>
 8004eb8:	68b5      	ldr	r5, [r6, #8]
 8004eba:	e7df      	b.n	8004e7c <_vfiprintf_r+0x20>
 8004ebc:	4b79      	ldr	r3, [pc, #484]	; (80050a4 <_vfiprintf_r+0x248>)
 8004ebe:	429d      	cmp	r5, r3
 8004ec0:	bf08      	it	eq
 8004ec2:	68f5      	ldreq	r5, [r6, #12]
 8004ec4:	e7da      	b.n	8004e7c <_vfiprintf_r+0x20>
 8004ec6:	89ab      	ldrh	r3, [r5, #12]
 8004ec8:	0598      	lsls	r0, r3, #22
 8004eca:	d4ed      	bmi.n	8004ea8 <_vfiprintf_r+0x4c>
 8004ecc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004ece:	f7ff ff40 	bl	8004d52 <__retarget_lock_release_recursive>
 8004ed2:	e7e9      	b.n	8004ea8 <_vfiprintf_r+0x4c>
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	9309      	str	r3, [sp, #36]	; 0x24
 8004ed8:	2320      	movs	r3, #32
 8004eda:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004ede:	f8cd 800c 	str.w	r8, [sp, #12]
 8004ee2:	2330      	movs	r3, #48	; 0x30
 8004ee4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80050a8 <_vfiprintf_r+0x24c>
 8004ee8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004eec:	f04f 0901 	mov.w	r9, #1
 8004ef0:	4623      	mov	r3, r4
 8004ef2:	469a      	mov	sl, r3
 8004ef4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004ef8:	b10a      	cbz	r2, 8004efe <_vfiprintf_r+0xa2>
 8004efa:	2a25      	cmp	r2, #37	; 0x25
 8004efc:	d1f9      	bne.n	8004ef2 <_vfiprintf_r+0x96>
 8004efe:	ebba 0b04 	subs.w	fp, sl, r4
 8004f02:	d00b      	beq.n	8004f1c <_vfiprintf_r+0xc0>
 8004f04:	465b      	mov	r3, fp
 8004f06:	4622      	mov	r2, r4
 8004f08:	4629      	mov	r1, r5
 8004f0a:	4630      	mov	r0, r6
 8004f0c:	f7ff ff93 	bl	8004e36 <__sfputs_r>
 8004f10:	3001      	adds	r0, #1
 8004f12:	f000 80aa 	beq.w	800506a <_vfiprintf_r+0x20e>
 8004f16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004f18:	445a      	add	r2, fp
 8004f1a:	9209      	str	r2, [sp, #36]	; 0x24
 8004f1c:	f89a 3000 	ldrb.w	r3, [sl]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	f000 80a2 	beq.w	800506a <_vfiprintf_r+0x20e>
 8004f26:	2300      	movs	r3, #0
 8004f28:	f04f 32ff 	mov.w	r2, #4294967295
 8004f2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004f30:	f10a 0a01 	add.w	sl, sl, #1
 8004f34:	9304      	str	r3, [sp, #16]
 8004f36:	9307      	str	r3, [sp, #28]
 8004f38:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004f3c:	931a      	str	r3, [sp, #104]	; 0x68
 8004f3e:	4654      	mov	r4, sl
 8004f40:	2205      	movs	r2, #5
 8004f42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f46:	4858      	ldr	r0, [pc, #352]	; (80050a8 <_vfiprintf_r+0x24c>)
 8004f48:	f7fb f962 	bl	8000210 <memchr>
 8004f4c:	9a04      	ldr	r2, [sp, #16]
 8004f4e:	b9d8      	cbnz	r0, 8004f88 <_vfiprintf_r+0x12c>
 8004f50:	06d1      	lsls	r1, r2, #27
 8004f52:	bf44      	itt	mi
 8004f54:	2320      	movmi	r3, #32
 8004f56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004f5a:	0713      	lsls	r3, r2, #28
 8004f5c:	bf44      	itt	mi
 8004f5e:	232b      	movmi	r3, #43	; 0x2b
 8004f60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004f64:	f89a 3000 	ldrb.w	r3, [sl]
 8004f68:	2b2a      	cmp	r3, #42	; 0x2a
 8004f6a:	d015      	beq.n	8004f98 <_vfiprintf_r+0x13c>
 8004f6c:	9a07      	ldr	r2, [sp, #28]
 8004f6e:	4654      	mov	r4, sl
 8004f70:	2000      	movs	r0, #0
 8004f72:	f04f 0c0a 	mov.w	ip, #10
 8004f76:	4621      	mov	r1, r4
 8004f78:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004f7c:	3b30      	subs	r3, #48	; 0x30
 8004f7e:	2b09      	cmp	r3, #9
 8004f80:	d94e      	bls.n	8005020 <_vfiprintf_r+0x1c4>
 8004f82:	b1b0      	cbz	r0, 8004fb2 <_vfiprintf_r+0x156>
 8004f84:	9207      	str	r2, [sp, #28]
 8004f86:	e014      	b.n	8004fb2 <_vfiprintf_r+0x156>
 8004f88:	eba0 0308 	sub.w	r3, r0, r8
 8004f8c:	fa09 f303 	lsl.w	r3, r9, r3
 8004f90:	4313      	orrs	r3, r2
 8004f92:	9304      	str	r3, [sp, #16]
 8004f94:	46a2      	mov	sl, r4
 8004f96:	e7d2      	b.n	8004f3e <_vfiprintf_r+0xe2>
 8004f98:	9b03      	ldr	r3, [sp, #12]
 8004f9a:	1d19      	adds	r1, r3, #4
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	9103      	str	r1, [sp, #12]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	bfbb      	ittet	lt
 8004fa4:	425b      	neglt	r3, r3
 8004fa6:	f042 0202 	orrlt.w	r2, r2, #2
 8004faa:	9307      	strge	r3, [sp, #28]
 8004fac:	9307      	strlt	r3, [sp, #28]
 8004fae:	bfb8      	it	lt
 8004fb0:	9204      	strlt	r2, [sp, #16]
 8004fb2:	7823      	ldrb	r3, [r4, #0]
 8004fb4:	2b2e      	cmp	r3, #46	; 0x2e
 8004fb6:	d10c      	bne.n	8004fd2 <_vfiprintf_r+0x176>
 8004fb8:	7863      	ldrb	r3, [r4, #1]
 8004fba:	2b2a      	cmp	r3, #42	; 0x2a
 8004fbc:	d135      	bne.n	800502a <_vfiprintf_r+0x1ce>
 8004fbe:	9b03      	ldr	r3, [sp, #12]
 8004fc0:	1d1a      	adds	r2, r3, #4
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	9203      	str	r2, [sp, #12]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	bfb8      	it	lt
 8004fca:	f04f 33ff 	movlt.w	r3, #4294967295
 8004fce:	3402      	adds	r4, #2
 8004fd0:	9305      	str	r3, [sp, #20]
 8004fd2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80050b8 <_vfiprintf_r+0x25c>
 8004fd6:	7821      	ldrb	r1, [r4, #0]
 8004fd8:	2203      	movs	r2, #3
 8004fda:	4650      	mov	r0, sl
 8004fdc:	f7fb f918 	bl	8000210 <memchr>
 8004fe0:	b140      	cbz	r0, 8004ff4 <_vfiprintf_r+0x198>
 8004fe2:	2340      	movs	r3, #64	; 0x40
 8004fe4:	eba0 000a 	sub.w	r0, r0, sl
 8004fe8:	fa03 f000 	lsl.w	r0, r3, r0
 8004fec:	9b04      	ldr	r3, [sp, #16]
 8004fee:	4303      	orrs	r3, r0
 8004ff0:	3401      	adds	r4, #1
 8004ff2:	9304      	str	r3, [sp, #16]
 8004ff4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ff8:	482c      	ldr	r0, [pc, #176]	; (80050ac <_vfiprintf_r+0x250>)
 8004ffa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004ffe:	2206      	movs	r2, #6
 8005000:	f7fb f906 	bl	8000210 <memchr>
 8005004:	2800      	cmp	r0, #0
 8005006:	d03f      	beq.n	8005088 <_vfiprintf_r+0x22c>
 8005008:	4b29      	ldr	r3, [pc, #164]	; (80050b0 <_vfiprintf_r+0x254>)
 800500a:	bb1b      	cbnz	r3, 8005054 <_vfiprintf_r+0x1f8>
 800500c:	9b03      	ldr	r3, [sp, #12]
 800500e:	3307      	adds	r3, #7
 8005010:	f023 0307 	bic.w	r3, r3, #7
 8005014:	3308      	adds	r3, #8
 8005016:	9303      	str	r3, [sp, #12]
 8005018:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800501a:	443b      	add	r3, r7
 800501c:	9309      	str	r3, [sp, #36]	; 0x24
 800501e:	e767      	b.n	8004ef0 <_vfiprintf_r+0x94>
 8005020:	fb0c 3202 	mla	r2, ip, r2, r3
 8005024:	460c      	mov	r4, r1
 8005026:	2001      	movs	r0, #1
 8005028:	e7a5      	b.n	8004f76 <_vfiprintf_r+0x11a>
 800502a:	2300      	movs	r3, #0
 800502c:	3401      	adds	r4, #1
 800502e:	9305      	str	r3, [sp, #20]
 8005030:	4619      	mov	r1, r3
 8005032:	f04f 0c0a 	mov.w	ip, #10
 8005036:	4620      	mov	r0, r4
 8005038:	f810 2b01 	ldrb.w	r2, [r0], #1
 800503c:	3a30      	subs	r2, #48	; 0x30
 800503e:	2a09      	cmp	r2, #9
 8005040:	d903      	bls.n	800504a <_vfiprintf_r+0x1ee>
 8005042:	2b00      	cmp	r3, #0
 8005044:	d0c5      	beq.n	8004fd2 <_vfiprintf_r+0x176>
 8005046:	9105      	str	r1, [sp, #20]
 8005048:	e7c3      	b.n	8004fd2 <_vfiprintf_r+0x176>
 800504a:	fb0c 2101 	mla	r1, ip, r1, r2
 800504e:	4604      	mov	r4, r0
 8005050:	2301      	movs	r3, #1
 8005052:	e7f0      	b.n	8005036 <_vfiprintf_r+0x1da>
 8005054:	ab03      	add	r3, sp, #12
 8005056:	9300      	str	r3, [sp, #0]
 8005058:	462a      	mov	r2, r5
 800505a:	4b16      	ldr	r3, [pc, #88]	; (80050b4 <_vfiprintf_r+0x258>)
 800505c:	a904      	add	r1, sp, #16
 800505e:	4630      	mov	r0, r6
 8005060:	f3af 8000 	nop.w
 8005064:	4607      	mov	r7, r0
 8005066:	1c78      	adds	r0, r7, #1
 8005068:	d1d6      	bne.n	8005018 <_vfiprintf_r+0x1bc>
 800506a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800506c:	07d9      	lsls	r1, r3, #31
 800506e:	d405      	bmi.n	800507c <_vfiprintf_r+0x220>
 8005070:	89ab      	ldrh	r3, [r5, #12]
 8005072:	059a      	lsls	r2, r3, #22
 8005074:	d402      	bmi.n	800507c <_vfiprintf_r+0x220>
 8005076:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005078:	f7ff fe6b 	bl	8004d52 <__retarget_lock_release_recursive>
 800507c:	89ab      	ldrh	r3, [r5, #12]
 800507e:	065b      	lsls	r3, r3, #25
 8005080:	f53f af12 	bmi.w	8004ea8 <_vfiprintf_r+0x4c>
 8005084:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005086:	e711      	b.n	8004eac <_vfiprintf_r+0x50>
 8005088:	ab03      	add	r3, sp, #12
 800508a:	9300      	str	r3, [sp, #0]
 800508c:	462a      	mov	r2, r5
 800508e:	4b09      	ldr	r3, [pc, #36]	; (80050b4 <_vfiprintf_r+0x258>)
 8005090:	a904      	add	r1, sp, #16
 8005092:	4630      	mov	r0, r6
 8005094:	f000 f880 	bl	8005198 <_printf_i>
 8005098:	e7e4      	b.n	8005064 <_vfiprintf_r+0x208>
 800509a:	bf00      	nop
 800509c:	08005a50 	.word	0x08005a50
 80050a0:	08005a70 	.word	0x08005a70
 80050a4:	08005a30 	.word	0x08005a30
 80050a8:	08005a90 	.word	0x08005a90
 80050ac:	08005a9a 	.word	0x08005a9a
 80050b0:	00000000 	.word	0x00000000
 80050b4:	08004e37 	.word	0x08004e37
 80050b8:	08005a96 	.word	0x08005a96

080050bc <_printf_common>:
 80050bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050c0:	4616      	mov	r6, r2
 80050c2:	4699      	mov	r9, r3
 80050c4:	688a      	ldr	r2, [r1, #8]
 80050c6:	690b      	ldr	r3, [r1, #16]
 80050c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80050cc:	4293      	cmp	r3, r2
 80050ce:	bfb8      	it	lt
 80050d0:	4613      	movlt	r3, r2
 80050d2:	6033      	str	r3, [r6, #0]
 80050d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80050d8:	4607      	mov	r7, r0
 80050da:	460c      	mov	r4, r1
 80050dc:	b10a      	cbz	r2, 80050e2 <_printf_common+0x26>
 80050de:	3301      	adds	r3, #1
 80050e0:	6033      	str	r3, [r6, #0]
 80050e2:	6823      	ldr	r3, [r4, #0]
 80050e4:	0699      	lsls	r1, r3, #26
 80050e6:	bf42      	ittt	mi
 80050e8:	6833      	ldrmi	r3, [r6, #0]
 80050ea:	3302      	addmi	r3, #2
 80050ec:	6033      	strmi	r3, [r6, #0]
 80050ee:	6825      	ldr	r5, [r4, #0]
 80050f0:	f015 0506 	ands.w	r5, r5, #6
 80050f4:	d106      	bne.n	8005104 <_printf_common+0x48>
 80050f6:	f104 0a19 	add.w	sl, r4, #25
 80050fa:	68e3      	ldr	r3, [r4, #12]
 80050fc:	6832      	ldr	r2, [r6, #0]
 80050fe:	1a9b      	subs	r3, r3, r2
 8005100:	42ab      	cmp	r3, r5
 8005102:	dc26      	bgt.n	8005152 <_printf_common+0x96>
 8005104:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005108:	1e13      	subs	r3, r2, #0
 800510a:	6822      	ldr	r2, [r4, #0]
 800510c:	bf18      	it	ne
 800510e:	2301      	movne	r3, #1
 8005110:	0692      	lsls	r2, r2, #26
 8005112:	d42b      	bmi.n	800516c <_printf_common+0xb0>
 8005114:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005118:	4649      	mov	r1, r9
 800511a:	4638      	mov	r0, r7
 800511c:	47c0      	blx	r8
 800511e:	3001      	adds	r0, #1
 8005120:	d01e      	beq.n	8005160 <_printf_common+0xa4>
 8005122:	6823      	ldr	r3, [r4, #0]
 8005124:	68e5      	ldr	r5, [r4, #12]
 8005126:	6832      	ldr	r2, [r6, #0]
 8005128:	f003 0306 	and.w	r3, r3, #6
 800512c:	2b04      	cmp	r3, #4
 800512e:	bf08      	it	eq
 8005130:	1aad      	subeq	r5, r5, r2
 8005132:	68a3      	ldr	r3, [r4, #8]
 8005134:	6922      	ldr	r2, [r4, #16]
 8005136:	bf0c      	ite	eq
 8005138:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800513c:	2500      	movne	r5, #0
 800513e:	4293      	cmp	r3, r2
 8005140:	bfc4      	itt	gt
 8005142:	1a9b      	subgt	r3, r3, r2
 8005144:	18ed      	addgt	r5, r5, r3
 8005146:	2600      	movs	r6, #0
 8005148:	341a      	adds	r4, #26
 800514a:	42b5      	cmp	r5, r6
 800514c:	d11a      	bne.n	8005184 <_printf_common+0xc8>
 800514e:	2000      	movs	r0, #0
 8005150:	e008      	b.n	8005164 <_printf_common+0xa8>
 8005152:	2301      	movs	r3, #1
 8005154:	4652      	mov	r2, sl
 8005156:	4649      	mov	r1, r9
 8005158:	4638      	mov	r0, r7
 800515a:	47c0      	blx	r8
 800515c:	3001      	adds	r0, #1
 800515e:	d103      	bne.n	8005168 <_printf_common+0xac>
 8005160:	f04f 30ff 	mov.w	r0, #4294967295
 8005164:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005168:	3501      	adds	r5, #1
 800516a:	e7c6      	b.n	80050fa <_printf_common+0x3e>
 800516c:	18e1      	adds	r1, r4, r3
 800516e:	1c5a      	adds	r2, r3, #1
 8005170:	2030      	movs	r0, #48	; 0x30
 8005172:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005176:	4422      	add	r2, r4
 8005178:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800517c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005180:	3302      	adds	r3, #2
 8005182:	e7c7      	b.n	8005114 <_printf_common+0x58>
 8005184:	2301      	movs	r3, #1
 8005186:	4622      	mov	r2, r4
 8005188:	4649      	mov	r1, r9
 800518a:	4638      	mov	r0, r7
 800518c:	47c0      	blx	r8
 800518e:	3001      	adds	r0, #1
 8005190:	d0e6      	beq.n	8005160 <_printf_common+0xa4>
 8005192:	3601      	adds	r6, #1
 8005194:	e7d9      	b.n	800514a <_printf_common+0x8e>
	...

08005198 <_printf_i>:
 8005198:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800519c:	460c      	mov	r4, r1
 800519e:	4691      	mov	r9, r2
 80051a0:	7e27      	ldrb	r7, [r4, #24]
 80051a2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80051a4:	2f78      	cmp	r7, #120	; 0x78
 80051a6:	4680      	mov	r8, r0
 80051a8:	469a      	mov	sl, r3
 80051aa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80051ae:	d807      	bhi.n	80051c0 <_printf_i+0x28>
 80051b0:	2f62      	cmp	r7, #98	; 0x62
 80051b2:	d80a      	bhi.n	80051ca <_printf_i+0x32>
 80051b4:	2f00      	cmp	r7, #0
 80051b6:	f000 80d8 	beq.w	800536a <_printf_i+0x1d2>
 80051ba:	2f58      	cmp	r7, #88	; 0x58
 80051bc:	f000 80a3 	beq.w	8005306 <_printf_i+0x16e>
 80051c0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80051c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80051c8:	e03a      	b.n	8005240 <_printf_i+0xa8>
 80051ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80051ce:	2b15      	cmp	r3, #21
 80051d0:	d8f6      	bhi.n	80051c0 <_printf_i+0x28>
 80051d2:	a001      	add	r0, pc, #4	; (adr r0, 80051d8 <_printf_i+0x40>)
 80051d4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80051d8:	08005231 	.word	0x08005231
 80051dc:	08005245 	.word	0x08005245
 80051e0:	080051c1 	.word	0x080051c1
 80051e4:	080051c1 	.word	0x080051c1
 80051e8:	080051c1 	.word	0x080051c1
 80051ec:	080051c1 	.word	0x080051c1
 80051f0:	08005245 	.word	0x08005245
 80051f4:	080051c1 	.word	0x080051c1
 80051f8:	080051c1 	.word	0x080051c1
 80051fc:	080051c1 	.word	0x080051c1
 8005200:	080051c1 	.word	0x080051c1
 8005204:	08005351 	.word	0x08005351
 8005208:	08005275 	.word	0x08005275
 800520c:	08005333 	.word	0x08005333
 8005210:	080051c1 	.word	0x080051c1
 8005214:	080051c1 	.word	0x080051c1
 8005218:	08005373 	.word	0x08005373
 800521c:	080051c1 	.word	0x080051c1
 8005220:	08005275 	.word	0x08005275
 8005224:	080051c1 	.word	0x080051c1
 8005228:	080051c1 	.word	0x080051c1
 800522c:	0800533b 	.word	0x0800533b
 8005230:	680b      	ldr	r3, [r1, #0]
 8005232:	1d1a      	adds	r2, r3, #4
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	600a      	str	r2, [r1, #0]
 8005238:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800523c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005240:	2301      	movs	r3, #1
 8005242:	e0a3      	b.n	800538c <_printf_i+0x1f4>
 8005244:	6825      	ldr	r5, [r4, #0]
 8005246:	6808      	ldr	r0, [r1, #0]
 8005248:	062e      	lsls	r6, r5, #24
 800524a:	f100 0304 	add.w	r3, r0, #4
 800524e:	d50a      	bpl.n	8005266 <_printf_i+0xce>
 8005250:	6805      	ldr	r5, [r0, #0]
 8005252:	600b      	str	r3, [r1, #0]
 8005254:	2d00      	cmp	r5, #0
 8005256:	da03      	bge.n	8005260 <_printf_i+0xc8>
 8005258:	232d      	movs	r3, #45	; 0x2d
 800525a:	426d      	negs	r5, r5
 800525c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005260:	485e      	ldr	r0, [pc, #376]	; (80053dc <_printf_i+0x244>)
 8005262:	230a      	movs	r3, #10
 8005264:	e019      	b.n	800529a <_printf_i+0x102>
 8005266:	f015 0f40 	tst.w	r5, #64	; 0x40
 800526a:	6805      	ldr	r5, [r0, #0]
 800526c:	600b      	str	r3, [r1, #0]
 800526e:	bf18      	it	ne
 8005270:	b22d      	sxthne	r5, r5
 8005272:	e7ef      	b.n	8005254 <_printf_i+0xbc>
 8005274:	680b      	ldr	r3, [r1, #0]
 8005276:	6825      	ldr	r5, [r4, #0]
 8005278:	1d18      	adds	r0, r3, #4
 800527a:	6008      	str	r0, [r1, #0]
 800527c:	0628      	lsls	r0, r5, #24
 800527e:	d501      	bpl.n	8005284 <_printf_i+0xec>
 8005280:	681d      	ldr	r5, [r3, #0]
 8005282:	e002      	b.n	800528a <_printf_i+0xf2>
 8005284:	0669      	lsls	r1, r5, #25
 8005286:	d5fb      	bpl.n	8005280 <_printf_i+0xe8>
 8005288:	881d      	ldrh	r5, [r3, #0]
 800528a:	4854      	ldr	r0, [pc, #336]	; (80053dc <_printf_i+0x244>)
 800528c:	2f6f      	cmp	r7, #111	; 0x6f
 800528e:	bf0c      	ite	eq
 8005290:	2308      	moveq	r3, #8
 8005292:	230a      	movne	r3, #10
 8005294:	2100      	movs	r1, #0
 8005296:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800529a:	6866      	ldr	r6, [r4, #4]
 800529c:	60a6      	str	r6, [r4, #8]
 800529e:	2e00      	cmp	r6, #0
 80052a0:	bfa2      	ittt	ge
 80052a2:	6821      	ldrge	r1, [r4, #0]
 80052a4:	f021 0104 	bicge.w	r1, r1, #4
 80052a8:	6021      	strge	r1, [r4, #0]
 80052aa:	b90d      	cbnz	r5, 80052b0 <_printf_i+0x118>
 80052ac:	2e00      	cmp	r6, #0
 80052ae:	d04d      	beq.n	800534c <_printf_i+0x1b4>
 80052b0:	4616      	mov	r6, r2
 80052b2:	fbb5 f1f3 	udiv	r1, r5, r3
 80052b6:	fb03 5711 	mls	r7, r3, r1, r5
 80052ba:	5dc7      	ldrb	r7, [r0, r7]
 80052bc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80052c0:	462f      	mov	r7, r5
 80052c2:	42bb      	cmp	r3, r7
 80052c4:	460d      	mov	r5, r1
 80052c6:	d9f4      	bls.n	80052b2 <_printf_i+0x11a>
 80052c8:	2b08      	cmp	r3, #8
 80052ca:	d10b      	bne.n	80052e4 <_printf_i+0x14c>
 80052cc:	6823      	ldr	r3, [r4, #0]
 80052ce:	07df      	lsls	r7, r3, #31
 80052d0:	d508      	bpl.n	80052e4 <_printf_i+0x14c>
 80052d2:	6923      	ldr	r3, [r4, #16]
 80052d4:	6861      	ldr	r1, [r4, #4]
 80052d6:	4299      	cmp	r1, r3
 80052d8:	bfde      	ittt	le
 80052da:	2330      	movle	r3, #48	; 0x30
 80052dc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80052e0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80052e4:	1b92      	subs	r2, r2, r6
 80052e6:	6122      	str	r2, [r4, #16]
 80052e8:	f8cd a000 	str.w	sl, [sp]
 80052ec:	464b      	mov	r3, r9
 80052ee:	aa03      	add	r2, sp, #12
 80052f0:	4621      	mov	r1, r4
 80052f2:	4640      	mov	r0, r8
 80052f4:	f7ff fee2 	bl	80050bc <_printf_common>
 80052f8:	3001      	adds	r0, #1
 80052fa:	d14c      	bne.n	8005396 <_printf_i+0x1fe>
 80052fc:	f04f 30ff 	mov.w	r0, #4294967295
 8005300:	b004      	add	sp, #16
 8005302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005306:	4835      	ldr	r0, [pc, #212]	; (80053dc <_printf_i+0x244>)
 8005308:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800530c:	6823      	ldr	r3, [r4, #0]
 800530e:	680e      	ldr	r6, [r1, #0]
 8005310:	061f      	lsls	r7, r3, #24
 8005312:	f856 5b04 	ldr.w	r5, [r6], #4
 8005316:	600e      	str	r6, [r1, #0]
 8005318:	d514      	bpl.n	8005344 <_printf_i+0x1ac>
 800531a:	07d9      	lsls	r1, r3, #31
 800531c:	bf44      	itt	mi
 800531e:	f043 0320 	orrmi.w	r3, r3, #32
 8005322:	6023      	strmi	r3, [r4, #0]
 8005324:	b91d      	cbnz	r5, 800532e <_printf_i+0x196>
 8005326:	6823      	ldr	r3, [r4, #0]
 8005328:	f023 0320 	bic.w	r3, r3, #32
 800532c:	6023      	str	r3, [r4, #0]
 800532e:	2310      	movs	r3, #16
 8005330:	e7b0      	b.n	8005294 <_printf_i+0xfc>
 8005332:	6823      	ldr	r3, [r4, #0]
 8005334:	f043 0320 	orr.w	r3, r3, #32
 8005338:	6023      	str	r3, [r4, #0]
 800533a:	2378      	movs	r3, #120	; 0x78
 800533c:	4828      	ldr	r0, [pc, #160]	; (80053e0 <_printf_i+0x248>)
 800533e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005342:	e7e3      	b.n	800530c <_printf_i+0x174>
 8005344:	065e      	lsls	r6, r3, #25
 8005346:	bf48      	it	mi
 8005348:	b2ad      	uxthmi	r5, r5
 800534a:	e7e6      	b.n	800531a <_printf_i+0x182>
 800534c:	4616      	mov	r6, r2
 800534e:	e7bb      	b.n	80052c8 <_printf_i+0x130>
 8005350:	680b      	ldr	r3, [r1, #0]
 8005352:	6826      	ldr	r6, [r4, #0]
 8005354:	6960      	ldr	r0, [r4, #20]
 8005356:	1d1d      	adds	r5, r3, #4
 8005358:	600d      	str	r5, [r1, #0]
 800535a:	0635      	lsls	r5, r6, #24
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	d501      	bpl.n	8005364 <_printf_i+0x1cc>
 8005360:	6018      	str	r0, [r3, #0]
 8005362:	e002      	b.n	800536a <_printf_i+0x1d2>
 8005364:	0671      	lsls	r1, r6, #25
 8005366:	d5fb      	bpl.n	8005360 <_printf_i+0x1c8>
 8005368:	8018      	strh	r0, [r3, #0]
 800536a:	2300      	movs	r3, #0
 800536c:	6123      	str	r3, [r4, #16]
 800536e:	4616      	mov	r6, r2
 8005370:	e7ba      	b.n	80052e8 <_printf_i+0x150>
 8005372:	680b      	ldr	r3, [r1, #0]
 8005374:	1d1a      	adds	r2, r3, #4
 8005376:	600a      	str	r2, [r1, #0]
 8005378:	681e      	ldr	r6, [r3, #0]
 800537a:	6862      	ldr	r2, [r4, #4]
 800537c:	2100      	movs	r1, #0
 800537e:	4630      	mov	r0, r6
 8005380:	f7fa ff46 	bl	8000210 <memchr>
 8005384:	b108      	cbz	r0, 800538a <_printf_i+0x1f2>
 8005386:	1b80      	subs	r0, r0, r6
 8005388:	6060      	str	r0, [r4, #4]
 800538a:	6863      	ldr	r3, [r4, #4]
 800538c:	6123      	str	r3, [r4, #16]
 800538e:	2300      	movs	r3, #0
 8005390:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005394:	e7a8      	b.n	80052e8 <_printf_i+0x150>
 8005396:	6923      	ldr	r3, [r4, #16]
 8005398:	4632      	mov	r2, r6
 800539a:	4649      	mov	r1, r9
 800539c:	4640      	mov	r0, r8
 800539e:	47d0      	blx	sl
 80053a0:	3001      	adds	r0, #1
 80053a2:	d0ab      	beq.n	80052fc <_printf_i+0x164>
 80053a4:	6823      	ldr	r3, [r4, #0]
 80053a6:	079b      	lsls	r3, r3, #30
 80053a8:	d413      	bmi.n	80053d2 <_printf_i+0x23a>
 80053aa:	68e0      	ldr	r0, [r4, #12]
 80053ac:	9b03      	ldr	r3, [sp, #12]
 80053ae:	4298      	cmp	r0, r3
 80053b0:	bfb8      	it	lt
 80053b2:	4618      	movlt	r0, r3
 80053b4:	e7a4      	b.n	8005300 <_printf_i+0x168>
 80053b6:	2301      	movs	r3, #1
 80053b8:	4632      	mov	r2, r6
 80053ba:	4649      	mov	r1, r9
 80053bc:	4640      	mov	r0, r8
 80053be:	47d0      	blx	sl
 80053c0:	3001      	adds	r0, #1
 80053c2:	d09b      	beq.n	80052fc <_printf_i+0x164>
 80053c4:	3501      	adds	r5, #1
 80053c6:	68e3      	ldr	r3, [r4, #12]
 80053c8:	9903      	ldr	r1, [sp, #12]
 80053ca:	1a5b      	subs	r3, r3, r1
 80053cc:	42ab      	cmp	r3, r5
 80053ce:	dcf2      	bgt.n	80053b6 <_printf_i+0x21e>
 80053d0:	e7eb      	b.n	80053aa <_printf_i+0x212>
 80053d2:	2500      	movs	r5, #0
 80053d4:	f104 0619 	add.w	r6, r4, #25
 80053d8:	e7f5      	b.n	80053c6 <_printf_i+0x22e>
 80053da:	bf00      	nop
 80053dc:	08005aa1 	.word	0x08005aa1
 80053e0:	08005ab2 	.word	0x08005ab2

080053e4 <_sbrk_r>:
 80053e4:	b538      	push	{r3, r4, r5, lr}
 80053e6:	4d06      	ldr	r5, [pc, #24]	; (8005400 <_sbrk_r+0x1c>)
 80053e8:	2300      	movs	r3, #0
 80053ea:	4604      	mov	r4, r0
 80053ec:	4608      	mov	r0, r1
 80053ee:	602b      	str	r3, [r5, #0]
 80053f0:	f7ff fae2 	bl	80049b8 <_sbrk>
 80053f4:	1c43      	adds	r3, r0, #1
 80053f6:	d102      	bne.n	80053fe <_sbrk_r+0x1a>
 80053f8:	682b      	ldr	r3, [r5, #0]
 80053fa:	b103      	cbz	r3, 80053fe <_sbrk_r+0x1a>
 80053fc:	6023      	str	r3, [r4, #0]
 80053fe:	bd38      	pop	{r3, r4, r5, pc}
 8005400:	2000071c 	.word	0x2000071c

08005404 <__sread>:
 8005404:	b510      	push	{r4, lr}
 8005406:	460c      	mov	r4, r1
 8005408:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800540c:	f000 fab4 	bl	8005978 <_read_r>
 8005410:	2800      	cmp	r0, #0
 8005412:	bfab      	itete	ge
 8005414:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005416:	89a3      	ldrhlt	r3, [r4, #12]
 8005418:	181b      	addge	r3, r3, r0
 800541a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800541e:	bfac      	ite	ge
 8005420:	6563      	strge	r3, [r4, #84]	; 0x54
 8005422:	81a3      	strhlt	r3, [r4, #12]
 8005424:	bd10      	pop	{r4, pc}

08005426 <__swrite>:
 8005426:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800542a:	461f      	mov	r7, r3
 800542c:	898b      	ldrh	r3, [r1, #12]
 800542e:	05db      	lsls	r3, r3, #23
 8005430:	4605      	mov	r5, r0
 8005432:	460c      	mov	r4, r1
 8005434:	4616      	mov	r6, r2
 8005436:	d505      	bpl.n	8005444 <__swrite+0x1e>
 8005438:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800543c:	2302      	movs	r3, #2
 800543e:	2200      	movs	r2, #0
 8005440:	f000 f9c8 	bl	80057d4 <_lseek_r>
 8005444:	89a3      	ldrh	r3, [r4, #12]
 8005446:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800544a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800544e:	81a3      	strh	r3, [r4, #12]
 8005450:	4632      	mov	r2, r6
 8005452:	463b      	mov	r3, r7
 8005454:	4628      	mov	r0, r5
 8005456:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800545a:	f000 b869 	b.w	8005530 <_write_r>

0800545e <__sseek>:
 800545e:	b510      	push	{r4, lr}
 8005460:	460c      	mov	r4, r1
 8005462:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005466:	f000 f9b5 	bl	80057d4 <_lseek_r>
 800546a:	1c43      	adds	r3, r0, #1
 800546c:	89a3      	ldrh	r3, [r4, #12]
 800546e:	bf15      	itete	ne
 8005470:	6560      	strne	r0, [r4, #84]	; 0x54
 8005472:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005476:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800547a:	81a3      	strheq	r3, [r4, #12]
 800547c:	bf18      	it	ne
 800547e:	81a3      	strhne	r3, [r4, #12]
 8005480:	bd10      	pop	{r4, pc}

08005482 <__sclose>:
 8005482:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005486:	f000 b8d3 	b.w	8005630 <_close_r>
	...

0800548c <__swbuf_r>:
 800548c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800548e:	460e      	mov	r6, r1
 8005490:	4614      	mov	r4, r2
 8005492:	4605      	mov	r5, r0
 8005494:	b118      	cbz	r0, 800549e <__swbuf_r+0x12>
 8005496:	6983      	ldr	r3, [r0, #24]
 8005498:	b90b      	cbnz	r3, 800549e <__swbuf_r+0x12>
 800549a:	f7ff fbbb 	bl	8004c14 <__sinit>
 800549e:	4b21      	ldr	r3, [pc, #132]	; (8005524 <__swbuf_r+0x98>)
 80054a0:	429c      	cmp	r4, r3
 80054a2:	d12b      	bne.n	80054fc <__swbuf_r+0x70>
 80054a4:	686c      	ldr	r4, [r5, #4]
 80054a6:	69a3      	ldr	r3, [r4, #24]
 80054a8:	60a3      	str	r3, [r4, #8]
 80054aa:	89a3      	ldrh	r3, [r4, #12]
 80054ac:	071a      	lsls	r2, r3, #28
 80054ae:	d52f      	bpl.n	8005510 <__swbuf_r+0x84>
 80054b0:	6923      	ldr	r3, [r4, #16]
 80054b2:	b36b      	cbz	r3, 8005510 <__swbuf_r+0x84>
 80054b4:	6923      	ldr	r3, [r4, #16]
 80054b6:	6820      	ldr	r0, [r4, #0]
 80054b8:	1ac0      	subs	r0, r0, r3
 80054ba:	6963      	ldr	r3, [r4, #20]
 80054bc:	b2f6      	uxtb	r6, r6
 80054be:	4283      	cmp	r3, r0
 80054c0:	4637      	mov	r7, r6
 80054c2:	dc04      	bgt.n	80054ce <__swbuf_r+0x42>
 80054c4:	4621      	mov	r1, r4
 80054c6:	4628      	mov	r0, r5
 80054c8:	f000 f948 	bl	800575c <_fflush_r>
 80054cc:	bb30      	cbnz	r0, 800551c <__swbuf_r+0x90>
 80054ce:	68a3      	ldr	r3, [r4, #8]
 80054d0:	3b01      	subs	r3, #1
 80054d2:	60a3      	str	r3, [r4, #8]
 80054d4:	6823      	ldr	r3, [r4, #0]
 80054d6:	1c5a      	adds	r2, r3, #1
 80054d8:	6022      	str	r2, [r4, #0]
 80054da:	701e      	strb	r6, [r3, #0]
 80054dc:	6963      	ldr	r3, [r4, #20]
 80054de:	3001      	adds	r0, #1
 80054e0:	4283      	cmp	r3, r0
 80054e2:	d004      	beq.n	80054ee <__swbuf_r+0x62>
 80054e4:	89a3      	ldrh	r3, [r4, #12]
 80054e6:	07db      	lsls	r3, r3, #31
 80054e8:	d506      	bpl.n	80054f8 <__swbuf_r+0x6c>
 80054ea:	2e0a      	cmp	r6, #10
 80054ec:	d104      	bne.n	80054f8 <__swbuf_r+0x6c>
 80054ee:	4621      	mov	r1, r4
 80054f0:	4628      	mov	r0, r5
 80054f2:	f000 f933 	bl	800575c <_fflush_r>
 80054f6:	b988      	cbnz	r0, 800551c <__swbuf_r+0x90>
 80054f8:	4638      	mov	r0, r7
 80054fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054fc:	4b0a      	ldr	r3, [pc, #40]	; (8005528 <__swbuf_r+0x9c>)
 80054fe:	429c      	cmp	r4, r3
 8005500:	d101      	bne.n	8005506 <__swbuf_r+0x7a>
 8005502:	68ac      	ldr	r4, [r5, #8]
 8005504:	e7cf      	b.n	80054a6 <__swbuf_r+0x1a>
 8005506:	4b09      	ldr	r3, [pc, #36]	; (800552c <__swbuf_r+0xa0>)
 8005508:	429c      	cmp	r4, r3
 800550a:	bf08      	it	eq
 800550c:	68ec      	ldreq	r4, [r5, #12]
 800550e:	e7ca      	b.n	80054a6 <__swbuf_r+0x1a>
 8005510:	4621      	mov	r1, r4
 8005512:	4628      	mov	r0, r5
 8005514:	f000 f81e 	bl	8005554 <__swsetup_r>
 8005518:	2800      	cmp	r0, #0
 800551a:	d0cb      	beq.n	80054b4 <__swbuf_r+0x28>
 800551c:	f04f 37ff 	mov.w	r7, #4294967295
 8005520:	e7ea      	b.n	80054f8 <__swbuf_r+0x6c>
 8005522:	bf00      	nop
 8005524:	08005a50 	.word	0x08005a50
 8005528:	08005a70 	.word	0x08005a70
 800552c:	08005a30 	.word	0x08005a30

08005530 <_write_r>:
 8005530:	b538      	push	{r3, r4, r5, lr}
 8005532:	4d07      	ldr	r5, [pc, #28]	; (8005550 <_write_r+0x20>)
 8005534:	4604      	mov	r4, r0
 8005536:	4608      	mov	r0, r1
 8005538:	4611      	mov	r1, r2
 800553a:	2200      	movs	r2, #0
 800553c:	602a      	str	r2, [r5, #0]
 800553e:	461a      	mov	r2, r3
 8005540:	f7ff f9e9 	bl	8004916 <_write>
 8005544:	1c43      	adds	r3, r0, #1
 8005546:	d102      	bne.n	800554e <_write_r+0x1e>
 8005548:	682b      	ldr	r3, [r5, #0]
 800554a:	b103      	cbz	r3, 800554e <_write_r+0x1e>
 800554c:	6023      	str	r3, [r4, #0]
 800554e:	bd38      	pop	{r3, r4, r5, pc}
 8005550:	2000071c 	.word	0x2000071c

08005554 <__swsetup_r>:
 8005554:	4b32      	ldr	r3, [pc, #200]	; (8005620 <__swsetup_r+0xcc>)
 8005556:	b570      	push	{r4, r5, r6, lr}
 8005558:	681d      	ldr	r5, [r3, #0]
 800555a:	4606      	mov	r6, r0
 800555c:	460c      	mov	r4, r1
 800555e:	b125      	cbz	r5, 800556a <__swsetup_r+0x16>
 8005560:	69ab      	ldr	r3, [r5, #24]
 8005562:	b913      	cbnz	r3, 800556a <__swsetup_r+0x16>
 8005564:	4628      	mov	r0, r5
 8005566:	f7ff fb55 	bl	8004c14 <__sinit>
 800556a:	4b2e      	ldr	r3, [pc, #184]	; (8005624 <__swsetup_r+0xd0>)
 800556c:	429c      	cmp	r4, r3
 800556e:	d10f      	bne.n	8005590 <__swsetup_r+0x3c>
 8005570:	686c      	ldr	r4, [r5, #4]
 8005572:	89a3      	ldrh	r3, [r4, #12]
 8005574:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005578:	0719      	lsls	r1, r3, #28
 800557a:	d42c      	bmi.n	80055d6 <__swsetup_r+0x82>
 800557c:	06dd      	lsls	r5, r3, #27
 800557e:	d411      	bmi.n	80055a4 <__swsetup_r+0x50>
 8005580:	2309      	movs	r3, #9
 8005582:	6033      	str	r3, [r6, #0]
 8005584:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005588:	81a3      	strh	r3, [r4, #12]
 800558a:	f04f 30ff 	mov.w	r0, #4294967295
 800558e:	e03e      	b.n	800560e <__swsetup_r+0xba>
 8005590:	4b25      	ldr	r3, [pc, #148]	; (8005628 <__swsetup_r+0xd4>)
 8005592:	429c      	cmp	r4, r3
 8005594:	d101      	bne.n	800559a <__swsetup_r+0x46>
 8005596:	68ac      	ldr	r4, [r5, #8]
 8005598:	e7eb      	b.n	8005572 <__swsetup_r+0x1e>
 800559a:	4b24      	ldr	r3, [pc, #144]	; (800562c <__swsetup_r+0xd8>)
 800559c:	429c      	cmp	r4, r3
 800559e:	bf08      	it	eq
 80055a0:	68ec      	ldreq	r4, [r5, #12]
 80055a2:	e7e6      	b.n	8005572 <__swsetup_r+0x1e>
 80055a4:	0758      	lsls	r0, r3, #29
 80055a6:	d512      	bpl.n	80055ce <__swsetup_r+0x7a>
 80055a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80055aa:	b141      	cbz	r1, 80055be <__swsetup_r+0x6a>
 80055ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80055b0:	4299      	cmp	r1, r3
 80055b2:	d002      	beq.n	80055ba <__swsetup_r+0x66>
 80055b4:	4630      	mov	r0, r6
 80055b6:	f000 f98f 	bl	80058d8 <_free_r>
 80055ba:	2300      	movs	r3, #0
 80055bc:	6363      	str	r3, [r4, #52]	; 0x34
 80055be:	89a3      	ldrh	r3, [r4, #12]
 80055c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80055c4:	81a3      	strh	r3, [r4, #12]
 80055c6:	2300      	movs	r3, #0
 80055c8:	6063      	str	r3, [r4, #4]
 80055ca:	6923      	ldr	r3, [r4, #16]
 80055cc:	6023      	str	r3, [r4, #0]
 80055ce:	89a3      	ldrh	r3, [r4, #12]
 80055d0:	f043 0308 	orr.w	r3, r3, #8
 80055d4:	81a3      	strh	r3, [r4, #12]
 80055d6:	6923      	ldr	r3, [r4, #16]
 80055d8:	b94b      	cbnz	r3, 80055ee <__swsetup_r+0x9a>
 80055da:	89a3      	ldrh	r3, [r4, #12]
 80055dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80055e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055e4:	d003      	beq.n	80055ee <__swsetup_r+0x9a>
 80055e6:	4621      	mov	r1, r4
 80055e8:	4630      	mov	r0, r6
 80055ea:	f000 f929 	bl	8005840 <__smakebuf_r>
 80055ee:	89a0      	ldrh	r0, [r4, #12]
 80055f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80055f4:	f010 0301 	ands.w	r3, r0, #1
 80055f8:	d00a      	beq.n	8005610 <__swsetup_r+0xbc>
 80055fa:	2300      	movs	r3, #0
 80055fc:	60a3      	str	r3, [r4, #8]
 80055fe:	6963      	ldr	r3, [r4, #20]
 8005600:	425b      	negs	r3, r3
 8005602:	61a3      	str	r3, [r4, #24]
 8005604:	6923      	ldr	r3, [r4, #16]
 8005606:	b943      	cbnz	r3, 800561a <__swsetup_r+0xc6>
 8005608:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800560c:	d1ba      	bne.n	8005584 <__swsetup_r+0x30>
 800560e:	bd70      	pop	{r4, r5, r6, pc}
 8005610:	0781      	lsls	r1, r0, #30
 8005612:	bf58      	it	pl
 8005614:	6963      	ldrpl	r3, [r4, #20]
 8005616:	60a3      	str	r3, [r4, #8]
 8005618:	e7f4      	b.n	8005604 <__swsetup_r+0xb0>
 800561a:	2000      	movs	r0, #0
 800561c:	e7f7      	b.n	800560e <__swsetup_r+0xba>
 800561e:	bf00      	nop
 8005620:	20000018 	.word	0x20000018
 8005624:	08005a50 	.word	0x08005a50
 8005628:	08005a70 	.word	0x08005a70
 800562c:	08005a30 	.word	0x08005a30

08005630 <_close_r>:
 8005630:	b538      	push	{r3, r4, r5, lr}
 8005632:	4d06      	ldr	r5, [pc, #24]	; (800564c <_close_r+0x1c>)
 8005634:	2300      	movs	r3, #0
 8005636:	4604      	mov	r4, r0
 8005638:	4608      	mov	r0, r1
 800563a:	602b      	str	r3, [r5, #0]
 800563c:	f7ff f987 	bl	800494e <_close>
 8005640:	1c43      	adds	r3, r0, #1
 8005642:	d102      	bne.n	800564a <_close_r+0x1a>
 8005644:	682b      	ldr	r3, [r5, #0]
 8005646:	b103      	cbz	r3, 800564a <_close_r+0x1a>
 8005648:	6023      	str	r3, [r4, #0]
 800564a:	bd38      	pop	{r3, r4, r5, pc}
 800564c:	2000071c 	.word	0x2000071c

08005650 <__sflush_r>:
 8005650:	898a      	ldrh	r2, [r1, #12]
 8005652:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005656:	4605      	mov	r5, r0
 8005658:	0710      	lsls	r0, r2, #28
 800565a:	460c      	mov	r4, r1
 800565c:	d458      	bmi.n	8005710 <__sflush_r+0xc0>
 800565e:	684b      	ldr	r3, [r1, #4]
 8005660:	2b00      	cmp	r3, #0
 8005662:	dc05      	bgt.n	8005670 <__sflush_r+0x20>
 8005664:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005666:	2b00      	cmp	r3, #0
 8005668:	dc02      	bgt.n	8005670 <__sflush_r+0x20>
 800566a:	2000      	movs	r0, #0
 800566c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005670:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005672:	2e00      	cmp	r6, #0
 8005674:	d0f9      	beq.n	800566a <__sflush_r+0x1a>
 8005676:	2300      	movs	r3, #0
 8005678:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800567c:	682f      	ldr	r7, [r5, #0]
 800567e:	602b      	str	r3, [r5, #0]
 8005680:	d032      	beq.n	80056e8 <__sflush_r+0x98>
 8005682:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005684:	89a3      	ldrh	r3, [r4, #12]
 8005686:	075a      	lsls	r2, r3, #29
 8005688:	d505      	bpl.n	8005696 <__sflush_r+0x46>
 800568a:	6863      	ldr	r3, [r4, #4]
 800568c:	1ac0      	subs	r0, r0, r3
 800568e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005690:	b10b      	cbz	r3, 8005696 <__sflush_r+0x46>
 8005692:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005694:	1ac0      	subs	r0, r0, r3
 8005696:	2300      	movs	r3, #0
 8005698:	4602      	mov	r2, r0
 800569a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800569c:	6a21      	ldr	r1, [r4, #32]
 800569e:	4628      	mov	r0, r5
 80056a0:	47b0      	blx	r6
 80056a2:	1c43      	adds	r3, r0, #1
 80056a4:	89a3      	ldrh	r3, [r4, #12]
 80056a6:	d106      	bne.n	80056b6 <__sflush_r+0x66>
 80056a8:	6829      	ldr	r1, [r5, #0]
 80056aa:	291d      	cmp	r1, #29
 80056ac:	d82c      	bhi.n	8005708 <__sflush_r+0xb8>
 80056ae:	4a2a      	ldr	r2, [pc, #168]	; (8005758 <__sflush_r+0x108>)
 80056b0:	40ca      	lsrs	r2, r1
 80056b2:	07d6      	lsls	r6, r2, #31
 80056b4:	d528      	bpl.n	8005708 <__sflush_r+0xb8>
 80056b6:	2200      	movs	r2, #0
 80056b8:	6062      	str	r2, [r4, #4]
 80056ba:	04d9      	lsls	r1, r3, #19
 80056bc:	6922      	ldr	r2, [r4, #16]
 80056be:	6022      	str	r2, [r4, #0]
 80056c0:	d504      	bpl.n	80056cc <__sflush_r+0x7c>
 80056c2:	1c42      	adds	r2, r0, #1
 80056c4:	d101      	bne.n	80056ca <__sflush_r+0x7a>
 80056c6:	682b      	ldr	r3, [r5, #0]
 80056c8:	b903      	cbnz	r3, 80056cc <__sflush_r+0x7c>
 80056ca:	6560      	str	r0, [r4, #84]	; 0x54
 80056cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80056ce:	602f      	str	r7, [r5, #0]
 80056d0:	2900      	cmp	r1, #0
 80056d2:	d0ca      	beq.n	800566a <__sflush_r+0x1a>
 80056d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80056d8:	4299      	cmp	r1, r3
 80056da:	d002      	beq.n	80056e2 <__sflush_r+0x92>
 80056dc:	4628      	mov	r0, r5
 80056de:	f000 f8fb 	bl	80058d8 <_free_r>
 80056e2:	2000      	movs	r0, #0
 80056e4:	6360      	str	r0, [r4, #52]	; 0x34
 80056e6:	e7c1      	b.n	800566c <__sflush_r+0x1c>
 80056e8:	6a21      	ldr	r1, [r4, #32]
 80056ea:	2301      	movs	r3, #1
 80056ec:	4628      	mov	r0, r5
 80056ee:	47b0      	blx	r6
 80056f0:	1c41      	adds	r1, r0, #1
 80056f2:	d1c7      	bne.n	8005684 <__sflush_r+0x34>
 80056f4:	682b      	ldr	r3, [r5, #0]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d0c4      	beq.n	8005684 <__sflush_r+0x34>
 80056fa:	2b1d      	cmp	r3, #29
 80056fc:	d001      	beq.n	8005702 <__sflush_r+0xb2>
 80056fe:	2b16      	cmp	r3, #22
 8005700:	d101      	bne.n	8005706 <__sflush_r+0xb6>
 8005702:	602f      	str	r7, [r5, #0]
 8005704:	e7b1      	b.n	800566a <__sflush_r+0x1a>
 8005706:	89a3      	ldrh	r3, [r4, #12]
 8005708:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800570c:	81a3      	strh	r3, [r4, #12]
 800570e:	e7ad      	b.n	800566c <__sflush_r+0x1c>
 8005710:	690f      	ldr	r7, [r1, #16]
 8005712:	2f00      	cmp	r7, #0
 8005714:	d0a9      	beq.n	800566a <__sflush_r+0x1a>
 8005716:	0793      	lsls	r3, r2, #30
 8005718:	680e      	ldr	r6, [r1, #0]
 800571a:	bf08      	it	eq
 800571c:	694b      	ldreq	r3, [r1, #20]
 800571e:	600f      	str	r7, [r1, #0]
 8005720:	bf18      	it	ne
 8005722:	2300      	movne	r3, #0
 8005724:	eba6 0807 	sub.w	r8, r6, r7
 8005728:	608b      	str	r3, [r1, #8]
 800572a:	f1b8 0f00 	cmp.w	r8, #0
 800572e:	dd9c      	ble.n	800566a <__sflush_r+0x1a>
 8005730:	6a21      	ldr	r1, [r4, #32]
 8005732:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005734:	4643      	mov	r3, r8
 8005736:	463a      	mov	r2, r7
 8005738:	4628      	mov	r0, r5
 800573a:	47b0      	blx	r6
 800573c:	2800      	cmp	r0, #0
 800573e:	dc06      	bgt.n	800574e <__sflush_r+0xfe>
 8005740:	89a3      	ldrh	r3, [r4, #12]
 8005742:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005746:	81a3      	strh	r3, [r4, #12]
 8005748:	f04f 30ff 	mov.w	r0, #4294967295
 800574c:	e78e      	b.n	800566c <__sflush_r+0x1c>
 800574e:	4407      	add	r7, r0
 8005750:	eba8 0800 	sub.w	r8, r8, r0
 8005754:	e7e9      	b.n	800572a <__sflush_r+0xda>
 8005756:	bf00      	nop
 8005758:	20400001 	.word	0x20400001

0800575c <_fflush_r>:
 800575c:	b538      	push	{r3, r4, r5, lr}
 800575e:	690b      	ldr	r3, [r1, #16]
 8005760:	4605      	mov	r5, r0
 8005762:	460c      	mov	r4, r1
 8005764:	b913      	cbnz	r3, 800576c <_fflush_r+0x10>
 8005766:	2500      	movs	r5, #0
 8005768:	4628      	mov	r0, r5
 800576a:	bd38      	pop	{r3, r4, r5, pc}
 800576c:	b118      	cbz	r0, 8005776 <_fflush_r+0x1a>
 800576e:	6983      	ldr	r3, [r0, #24]
 8005770:	b90b      	cbnz	r3, 8005776 <_fflush_r+0x1a>
 8005772:	f7ff fa4f 	bl	8004c14 <__sinit>
 8005776:	4b14      	ldr	r3, [pc, #80]	; (80057c8 <_fflush_r+0x6c>)
 8005778:	429c      	cmp	r4, r3
 800577a:	d11b      	bne.n	80057b4 <_fflush_r+0x58>
 800577c:	686c      	ldr	r4, [r5, #4]
 800577e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d0ef      	beq.n	8005766 <_fflush_r+0xa>
 8005786:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005788:	07d0      	lsls	r0, r2, #31
 800578a:	d404      	bmi.n	8005796 <_fflush_r+0x3a>
 800578c:	0599      	lsls	r1, r3, #22
 800578e:	d402      	bmi.n	8005796 <_fflush_r+0x3a>
 8005790:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005792:	f7ff fadd 	bl	8004d50 <__retarget_lock_acquire_recursive>
 8005796:	4628      	mov	r0, r5
 8005798:	4621      	mov	r1, r4
 800579a:	f7ff ff59 	bl	8005650 <__sflush_r>
 800579e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80057a0:	07da      	lsls	r2, r3, #31
 80057a2:	4605      	mov	r5, r0
 80057a4:	d4e0      	bmi.n	8005768 <_fflush_r+0xc>
 80057a6:	89a3      	ldrh	r3, [r4, #12]
 80057a8:	059b      	lsls	r3, r3, #22
 80057aa:	d4dd      	bmi.n	8005768 <_fflush_r+0xc>
 80057ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80057ae:	f7ff fad0 	bl	8004d52 <__retarget_lock_release_recursive>
 80057b2:	e7d9      	b.n	8005768 <_fflush_r+0xc>
 80057b4:	4b05      	ldr	r3, [pc, #20]	; (80057cc <_fflush_r+0x70>)
 80057b6:	429c      	cmp	r4, r3
 80057b8:	d101      	bne.n	80057be <_fflush_r+0x62>
 80057ba:	68ac      	ldr	r4, [r5, #8]
 80057bc:	e7df      	b.n	800577e <_fflush_r+0x22>
 80057be:	4b04      	ldr	r3, [pc, #16]	; (80057d0 <_fflush_r+0x74>)
 80057c0:	429c      	cmp	r4, r3
 80057c2:	bf08      	it	eq
 80057c4:	68ec      	ldreq	r4, [r5, #12]
 80057c6:	e7da      	b.n	800577e <_fflush_r+0x22>
 80057c8:	08005a50 	.word	0x08005a50
 80057cc:	08005a70 	.word	0x08005a70
 80057d0:	08005a30 	.word	0x08005a30

080057d4 <_lseek_r>:
 80057d4:	b538      	push	{r3, r4, r5, lr}
 80057d6:	4d07      	ldr	r5, [pc, #28]	; (80057f4 <_lseek_r+0x20>)
 80057d8:	4604      	mov	r4, r0
 80057da:	4608      	mov	r0, r1
 80057dc:	4611      	mov	r1, r2
 80057de:	2200      	movs	r2, #0
 80057e0:	602a      	str	r2, [r5, #0]
 80057e2:	461a      	mov	r2, r3
 80057e4:	f7ff f8da 	bl	800499c <_lseek>
 80057e8:	1c43      	adds	r3, r0, #1
 80057ea:	d102      	bne.n	80057f2 <_lseek_r+0x1e>
 80057ec:	682b      	ldr	r3, [r5, #0]
 80057ee:	b103      	cbz	r3, 80057f2 <_lseek_r+0x1e>
 80057f0:	6023      	str	r3, [r4, #0]
 80057f2:	bd38      	pop	{r3, r4, r5, pc}
 80057f4:	2000071c 	.word	0x2000071c

080057f8 <__swhatbuf_r>:
 80057f8:	b570      	push	{r4, r5, r6, lr}
 80057fa:	460e      	mov	r6, r1
 80057fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005800:	2900      	cmp	r1, #0
 8005802:	b096      	sub	sp, #88	; 0x58
 8005804:	4614      	mov	r4, r2
 8005806:	461d      	mov	r5, r3
 8005808:	da07      	bge.n	800581a <__swhatbuf_r+0x22>
 800580a:	2300      	movs	r3, #0
 800580c:	602b      	str	r3, [r5, #0]
 800580e:	89b3      	ldrh	r3, [r6, #12]
 8005810:	061a      	lsls	r2, r3, #24
 8005812:	d410      	bmi.n	8005836 <__swhatbuf_r+0x3e>
 8005814:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005818:	e00e      	b.n	8005838 <__swhatbuf_r+0x40>
 800581a:	466a      	mov	r2, sp
 800581c:	f000 f8be 	bl	800599c <_fstat_r>
 8005820:	2800      	cmp	r0, #0
 8005822:	dbf2      	blt.n	800580a <__swhatbuf_r+0x12>
 8005824:	9a01      	ldr	r2, [sp, #4]
 8005826:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800582a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800582e:	425a      	negs	r2, r3
 8005830:	415a      	adcs	r2, r3
 8005832:	602a      	str	r2, [r5, #0]
 8005834:	e7ee      	b.n	8005814 <__swhatbuf_r+0x1c>
 8005836:	2340      	movs	r3, #64	; 0x40
 8005838:	2000      	movs	r0, #0
 800583a:	6023      	str	r3, [r4, #0]
 800583c:	b016      	add	sp, #88	; 0x58
 800583e:	bd70      	pop	{r4, r5, r6, pc}

08005840 <__smakebuf_r>:
 8005840:	898b      	ldrh	r3, [r1, #12]
 8005842:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005844:	079d      	lsls	r5, r3, #30
 8005846:	4606      	mov	r6, r0
 8005848:	460c      	mov	r4, r1
 800584a:	d507      	bpl.n	800585c <__smakebuf_r+0x1c>
 800584c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005850:	6023      	str	r3, [r4, #0]
 8005852:	6123      	str	r3, [r4, #16]
 8005854:	2301      	movs	r3, #1
 8005856:	6163      	str	r3, [r4, #20]
 8005858:	b002      	add	sp, #8
 800585a:	bd70      	pop	{r4, r5, r6, pc}
 800585c:	ab01      	add	r3, sp, #4
 800585e:	466a      	mov	r2, sp
 8005860:	f7ff ffca 	bl	80057f8 <__swhatbuf_r>
 8005864:	9900      	ldr	r1, [sp, #0]
 8005866:	4605      	mov	r5, r0
 8005868:	4630      	mov	r0, r6
 800586a:	f7ff fa73 	bl	8004d54 <_malloc_r>
 800586e:	b948      	cbnz	r0, 8005884 <__smakebuf_r+0x44>
 8005870:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005874:	059a      	lsls	r2, r3, #22
 8005876:	d4ef      	bmi.n	8005858 <__smakebuf_r+0x18>
 8005878:	f023 0303 	bic.w	r3, r3, #3
 800587c:	f043 0302 	orr.w	r3, r3, #2
 8005880:	81a3      	strh	r3, [r4, #12]
 8005882:	e7e3      	b.n	800584c <__smakebuf_r+0xc>
 8005884:	4b0d      	ldr	r3, [pc, #52]	; (80058bc <__smakebuf_r+0x7c>)
 8005886:	62b3      	str	r3, [r6, #40]	; 0x28
 8005888:	89a3      	ldrh	r3, [r4, #12]
 800588a:	6020      	str	r0, [r4, #0]
 800588c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005890:	81a3      	strh	r3, [r4, #12]
 8005892:	9b00      	ldr	r3, [sp, #0]
 8005894:	6163      	str	r3, [r4, #20]
 8005896:	9b01      	ldr	r3, [sp, #4]
 8005898:	6120      	str	r0, [r4, #16]
 800589a:	b15b      	cbz	r3, 80058b4 <__smakebuf_r+0x74>
 800589c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80058a0:	4630      	mov	r0, r6
 80058a2:	f000 f88d 	bl	80059c0 <_isatty_r>
 80058a6:	b128      	cbz	r0, 80058b4 <__smakebuf_r+0x74>
 80058a8:	89a3      	ldrh	r3, [r4, #12]
 80058aa:	f023 0303 	bic.w	r3, r3, #3
 80058ae:	f043 0301 	orr.w	r3, r3, #1
 80058b2:	81a3      	strh	r3, [r4, #12]
 80058b4:	89a0      	ldrh	r0, [r4, #12]
 80058b6:	4305      	orrs	r5, r0
 80058b8:	81a5      	strh	r5, [r4, #12]
 80058ba:	e7cd      	b.n	8005858 <__smakebuf_r+0x18>
 80058bc:	08004bad 	.word	0x08004bad

080058c0 <__malloc_lock>:
 80058c0:	4801      	ldr	r0, [pc, #4]	; (80058c8 <__malloc_lock+0x8>)
 80058c2:	f7ff ba45 	b.w	8004d50 <__retarget_lock_acquire_recursive>
 80058c6:	bf00      	nop
 80058c8:	20000714 	.word	0x20000714

080058cc <__malloc_unlock>:
 80058cc:	4801      	ldr	r0, [pc, #4]	; (80058d4 <__malloc_unlock+0x8>)
 80058ce:	f7ff ba40 	b.w	8004d52 <__retarget_lock_release_recursive>
 80058d2:	bf00      	nop
 80058d4:	20000714 	.word	0x20000714

080058d8 <_free_r>:
 80058d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80058da:	2900      	cmp	r1, #0
 80058dc:	d048      	beq.n	8005970 <_free_r+0x98>
 80058de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80058e2:	9001      	str	r0, [sp, #4]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	f1a1 0404 	sub.w	r4, r1, #4
 80058ea:	bfb8      	it	lt
 80058ec:	18e4      	addlt	r4, r4, r3
 80058ee:	f7ff ffe7 	bl	80058c0 <__malloc_lock>
 80058f2:	4a20      	ldr	r2, [pc, #128]	; (8005974 <_free_r+0x9c>)
 80058f4:	9801      	ldr	r0, [sp, #4]
 80058f6:	6813      	ldr	r3, [r2, #0]
 80058f8:	4615      	mov	r5, r2
 80058fa:	b933      	cbnz	r3, 800590a <_free_r+0x32>
 80058fc:	6063      	str	r3, [r4, #4]
 80058fe:	6014      	str	r4, [r2, #0]
 8005900:	b003      	add	sp, #12
 8005902:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005906:	f7ff bfe1 	b.w	80058cc <__malloc_unlock>
 800590a:	42a3      	cmp	r3, r4
 800590c:	d90b      	bls.n	8005926 <_free_r+0x4e>
 800590e:	6821      	ldr	r1, [r4, #0]
 8005910:	1862      	adds	r2, r4, r1
 8005912:	4293      	cmp	r3, r2
 8005914:	bf04      	itt	eq
 8005916:	681a      	ldreq	r2, [r3, #0]
 8005918:	685b      	ldreq	r3, [r3, #4]
 800591a:	6063      	str	r3, [r4, #4]
 800591c:	bf04      	itt	eq
 800591e:	1852      	addeq	r2, r2, r1
 8005920:	6022      	streq	r2, [r4, #0]
 8005922:	602c      	str	r4, [r5, #0]
 8005924:	e7ec      	b.n	8005900 <_free_r+0x28>
 8005926:	461a      	mov	r2, r3
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	b10b      	cbz	r3, 8005930 <_free_r+0x58>
 800592c:	42a3      	cmp	r3, r4
 800592e:	d9fa      	bls.n	8005926 <_free_r+0x4e>
 8005930:	6811      	ldr	r1, [r2, #0]
 8005932:	1855      	adds	r5, r2, r1
 8005934:	42a5      	cmp	r5, r4
 8005936:	d10b      	bne.n	8005950 <_free_r+0x78>
 8005938:	6824      	ldr	r4, [r4, #0]
 800593a:	4421      	add	r1, r4
 800593c:	1854      	adds	r4, r2, r1
 800593e:	42a3      	cmp	r3, r4
 8005940:	6011      	str	r1, [r2, #0]
 8005942:	d1dd      	bne.n	8005900 <_free_r+0x28>
 8005944:	681c      	ldr	r4, [r3, #0]
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	6053      	str	r3, [r2, #4]
 800594a:	4421      	add	r1, r4
 800594c:	6011      	str	r1, [r2, #0]
 800594e:	e7d7      	b.n	8005900 <_free_r+0x28>
 8005950:	d902      	bls.n	8005958 <_free_r+0x80>
 8005952:	230c      	movs	r3, #12
 8005954:	6003      	str	r3, [r0, #0]
 8005956:	e7d3      	b.n	8005900 <_free_r+0x28>
 8005958:	6825      	ldr	r5, [r4, #0]
 800595a:	1961      	adds	r1, r4, r5
 800595c:	428b      	cmp	r3, r1
 800595e:	bf04      	itt	eq
 8005960:	6819      	ldreq	r1, [r3, #0]
 8005962:	685b      	ldreq	r3, [r3, #4]
 8005964:	6063      	str	r3, [r4, #4]
 8005966:	bf04      	itt	eq
 8005968:	1949      	addeq	r1, r1, r5
 800596a:	6021      	streq	r1, [r4, #0]
 800596c:	6054      	str	r4, [r2, #4]
 800596e:	e7c7      	b.n	8005900 <_free_r+0x28>
 8005970:	b003      	add	sp, #12
 8005972:	bd30      	pop	{r4, r5, pc}
 8005974:	200000a8 	.word	0x200000a8

08005978 <_read_r>:
 8005978:	b538      	push	{r3, r4, r5, lr}
 800597a:	4d07      	ldr	r5, [pc, #28]	; (8005998 <_read_r+0x20>)
 800597c:	4604      	mov	r4, r0
 800597e:	4608      	mov	r0, r1
 8005980:	4611      	mov	r1, r2
 8005982:	2200      	movs	r2, #0
 8005984:	602a      	str	r2, [r5, #0]
 8005986:	461a      	mov	r2, r3
 8005988:	f7fe ffa8 	bl	80048dc <_read>
 800598c:	1c43      	adds	r3, r0, #1
 800598e:	d102      	bne.n	8005996 <_read_r+0x1e>
 8005990:	682b      	ldr	r3, [r5, #0]
 8005992:	b103      	cbz	r3, 8005996 <_read_r+0x1e>
 8005994:	6023      	str	r3, [r4, #0]
 8005996:	bd38      	pop	{r3, r4, r5, pc}
 8005998:	2000071c 	.word	0x2000071c

0800599c <_fstat_r>:
 800599c:	b538      	push	{r3, r4, r5, lr}
 800599e:	4d07      	ldr	r5, [pc, #28]	; (80059bc <_fstat_r+0x20>)
 80059a0:	2300      	movs	r3, #0
 80059a2:	4604      	mov	r4, r0
 80059a4:	4608      	mov	r0, r1
 80059a6:	4611      	mov	r1, r2
 80059a8:	602b      	str	r3, [r5, #0]
 80059aa:	f7fe ffdc 	bl	8004966 <_fstat>
 80059ae:	1c43      	adds	r3, r0, #1
 80059b0:	d102      	bne.n	80059b8 <_fstat_r+0x1c>
 80059b2:	682b      	ldr	r3, [r5, #0]
 80059b4:	b103      	cbz	r3, 80059b8 <_fstat_r+0x1c>
 80059b6:	6023      	str	r3, [r4, #0]
 80059b8:	bd38      	pop	{r3, r4, r5, pc}
 80059ba:	bf00      	nop
 80059bc:	2000071c 	.word	0x2000071c

080059c0 <_isatty_r>:
 80059c0:	b538      	push	{r3, r4, r5, lr}
 80059c2:	4d06      	ldr	r5, [pc, #24]	; (80059dc <_isatty_r+0x1c>)
 80059c4:	2300      	movs	r3, #0
 80059c6:	4604      	mov	r4, r0
 80059c8:	4608      	mov	r0, r1
 80059ca:	602b      	str	r3, [r5, #0]
 80059cc:	f7fe ffdb 	bl	8004986 <_isatty>
 80059d0:	1c43      	adds	r3, r0, #1
 80059d2:	d102      	bne.n	80059da <_isatty_r+0x1a>
 80059d4:	682b      	ldr	r3, [r5, #0]
 80059d6:	b103      	cbz	r3, 80059da <_isatty_r+0x1a>
 80059d8:	6023      	str	r3, [r4, #0]
 80059da:	bd38      	pop	{r3, r4, r5, pc}
 80059dc:	2000071c 	.word	0x2000071c

080059e0 <_init>:
 80059e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059e2:	bf00      	nop
 80059e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059e6:	bc08      	pop	{r3}
 80059e8:	469e      	mov	lr, r3
 80059ea:	4770      	bx	lr

080059ec <_fini>:
 80059ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059ee:	bf00      	nop
 80059f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059f2:	bc08      	pop	{r3}
 80059f4:	469e      	mov	lr, r3
 80059f6:	4770      	bx	lr
